
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a848  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb4c  0800bb4c  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb4c  0800bb4c  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb4c  0800bb4c  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  0800bb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000414  0800bf68  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e4c  0800bf68  00021e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ab43  00000000  00000000  0002043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005253  00000000  00000000  0005af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  000601d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e70  00000000  00000000  000622f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d59d  00000000  00000000  00064160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020397  00000000  00000000  000816fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f497  00000000  00000000  000a1a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef8  00000000  00000000  00140f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000414 	.word	0x20000414
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a93c 	.word	0x0800a93c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000418 	.word	0x20000418
 8000148:	0800a93c 	.word	0x0800a93c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f001 fe62 	bl	8001e54 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f001 fe5d 	bl	8001e54 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f002 f90c 	bl	80023c0 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f002 f905 	bl	80023c0 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f004 fac6 	bl	80047bc <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f002 f8c1 	bl	80023c0 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200005f0 	.word	0x200005f0
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <Start_APP+0x60>)
 800025e:	4a17      	ldr	r2, [pc, #92]	; (80002bc <Start_APP+0x64>)
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <Start_APP+0x6c>)
 8000264:	f000 fd02 	bl	8000c6c <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026a:	f001 fcbc 	bl	8001be6 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800026e:	2100      	movs	r1, #0
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <Start_APP+0x6c>)
 8000272:	f001 fcc7 	bl	8001c04 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000276:	2004      	movs	r0, #4
 8000278:	f000 f8fc 	bl	8000474 <set_contrast>

		u8g2_SetDrawColor(&u8g2, 2);
 800027c:	2102      	movs	r1, #2
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <Start_APP+0x6c>)
 8000280:	f000 ffbb 	bl	80011fa <u8g2_SetDrawColor>
		u8g2_SetBitmapMode(&u8g2, 1);
 8000284:	2101      	movs	r1, #1
 8000286:	480f      	ldr	r0, [pc, #60]	; (80002c4 <Start_APP+0x6c>)
 8000288:	f000 fbbc 	bl	8000a04 <u8g2_SetBitmapMode>
		u8g2_SetFontMode(&u8g2, 1);
 800028c:	2101      	movs	r1, #1
 800028e:	480d      	ldr	r0, [pc, #52]	; (80002c4 <Start_APP+0x6c>)
 8000290:	f000 fded 	bl	8000e6e <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <Start_APP+0x6c>)
 8000296:	f000 fe8f 	bl	8000fb8 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_10x20_mf);
 800029a:	490b      	ldr	r1, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <Start_APP+0x6c>)
 800029e:	f000 fe99 	bl	8000fd4 <u8g2_SetFont>
		disp_splash();
 80002a2:	f000 f8fb 	bl	800049c <disp_splash>
		text_insertion_point(0 , 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 f8b7 	bl	800041c <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002ae:	f000 f889 	bl	80003c4 <monitor_begin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	0800015d 	.word	0x0800015d
 80002bc:	080001cd 	.word	0x080001cd
 80002c0:	0800baa8 	.word	0x0800baa8
 80002c4:	20000430 	.word	0x20000430
 80002c8:	0800aa38 	.word	0x0800aa38

080002cc <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]

	  	while(CDC_Transmit_FS(cmd, strlen(buf))==USBD_OK){
 80002d4:	bf00      	nop
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff38 	bl	800014c <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29b      	uxth	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <monitor_send_string+0x2c>)
 80002e4:	f009 fa8c 	bl	8009800 <CDC_Transmit_FS>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f3      	beq.n	80002d6 <monitor_send_string+0xa>
			//isso é a melhor forma de try til it works que eu consegui pensar
		}
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200004c4 	.word	0x200004c4

080002fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800030c:	f004 fcda 	bl	8004cc4 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000310:	f000 f832 	bl	8000378 <monitor_interrupt>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200005e8 	.word	0x200005e8
 8000320:	20000648 	.word	0x20000648

08000324 <app_usb_cbk>:
		}

	}
}

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]

	memcpy(cmd+size,buf,len);
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <app_usb_cbk+0x44>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <app_usb_cbk+0x48>)
 8000334:	4413      	add	r3, r2
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	6879      	ldr	r1, [r7, #4]
 800033a:	4618      	mov	r0, r3
 800033c:	f009 fe68 	bl	800a010 <memcpy>
	size += len;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <app_usb_cbk+0x44>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <app_usb_cbk+0x44>)
 800034a:	6013      	str	r3, [r2, #0]

	if(size >= CMD_BUF_SIZE){
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <app_usb_cbk+0x44>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b8f      	cmp	r3, #143	; 0x8f
 8000352:	d902      	bls.n	800035a <app_usb_cbk+0x36>
		new_cmd = true;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <app_usb_cbk+0x4c>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <app_usb_cbk+0x50>)
 800035c:	f004 fc60 	bl	8004c20 <HAL_TIM_Base_Start_IT>

}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200005e4 	.word	0x200005e4
 800036c:	200004c4 	.word	0x200004c4
 8000370:	200005e8 	.word	0x200005e8
 8000374:	20000648 	.word	0x20000648

08000378 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <monitor_interrupt+0x40>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d016      	beq.n	80003b2 <monitor_interrupt+0x3a>

		size=0;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <monitor_interrupt+0x44>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 800038a:	2290      	movs	r2, #144	; 0x90
 800038c:	2100      	movs	r1, #0
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <monitor_interrupt+0x48>)
 8000390:	f009 fe4c 	bl	800a02c <memset>
		new_cmd = !new_cmd;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <monitor_interrupt+0x40>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	bf14      	ite	ne
 800039c:	2301      	movne	r3, #1
 800039e:	2300      	moveq	r3, #0
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f083 0301 	eor.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <monitor_interrupt+0x40>)
 80003b0:	701a      	strb	r2, [r3, #0]
			}

		}
		new_cmd = !new_cmd;*/
	}
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200005e8 	.word	0x200005e8
 80003bc:	200005e4 	.word	0x200005e4
 80003c0:	200004c4 	.word	0x200004c4

080003c4 <monitor_begin>:

void monitor_begin(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <monitor_begin+0x48>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <monitor_begin+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 80003d6:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <monitor_begin+0x50>)
 80003d8:	2190      	movs	r1, #144	; 0x90
 80003da:	480f      	ldr	r0, [pc, #60]	; (8000418 <monitor_begin+0x54>)
 80003dc:	f009 fe2e 	bl	800a03c <sniprintf>
	monitor_send_string(ans);
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <monitor_begin+0x54>)
 80003e2:	f7ff ff73 	bl	80002cc <monitor_send_string>
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	e006      	b.n	80003fa <monitor_begin+0x36>
		ans[i] = '\0';
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <monitor_begin+0x54>)
 80003f0:	2100      	movs	r1, #0
 80003f2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	3301      	adds	r3, #1
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b0e      	cmp	r3, #14
 80003fe:	d9f5      	bls.n	80003ec <monitor_begin+0x28>
	}
}
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200005e4 	.word	0x200005e4
 8000410:	200005e8 	.word	0x200005e8
 8000414:	0800a9d0 	.word	0x0800a9d0
 8000418:	20000554 	.word	0x20000554

0800041c <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <text_insertion_point+0x4c>)
 800042e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000432:	b2db      	uxtb	r3, r3
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	fb02 f303 	mul.w	r3, r2, r3
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <text_insertion_point+0x50>)
 800043e:	701a      	strb	r2, [r3, #0]
	cursor[1] = row * (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <text_insertion_point+0x4c>)
 8000442:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000446:	461a      	mov	r2, r3
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <text_insertion_point+0x54>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	b2db      	uxtb	r3, r3
 8000450:	79ba      	ldrb	r2, [r7, #6]
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <text_insertion_point+0x50>)
 800045a:	705a      	strb	r2, [r3, #1]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000430 	.word	0x20000430
 800046c:	200005ec 	.word	0x200005ec
 8000470:	20000228 	.word	0x20000228

08000474 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast  ) * 9);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	461a      	mov	r2, r3
 8000482:	00d2      	lsls	r2, r2, #3
 8000484:	4413      	add	r3, r2
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4619      	mov	r1, r3
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <set_contrast+0x24>)
 800048c:	f001 fbcb 	bl	8001c26 <u8x8_SetContrast>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000430 	.word	0x20000430

0800049c <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <disp_splash+0x28>)
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2318      	movs	r3, #24
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	23b4      	movs	r3, #180	; 0xb4
 80004ac:	2214      	movs	r2, #20
 80004ae:	2106      	movs	r1, #6
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <disp_splash+0x2c>)
 80004b2:	f000 fb24 	bl	8000afe <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <disp_splash+0x2c>)
 80004b8:	f000 fbb9 	bl	8000c2e <u8g2_SendBuffer>

}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000430 	.word	0x20000430

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 fc5e 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80c 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8e6 	bl	80006a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f009 f8b4 	bl	8009648 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80004e0:	f000 f860 	bl	80005a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004e4:	f000 f894 	bl	8000610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 80004e8:	f7ff feb6 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 80004ec:	bf30      	wfi
 80004ee:	e7fd      	b.n	80004ec <main+0x20>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fa:	2228      	movs	r2, #40	; 0x28
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f009 fd94 	bl	800a02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000520:	2301      	movs	r3, #1
 8000522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800053c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fc16 	bl	8003d78 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000552:	f000 f92f 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2102      	movs	r1, #2
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fe82 	bl	800427c <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800057e:	f000 f919 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000582:	2310      	movs	r3, #16
 8000584:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4618      	mov	r0, r3
 800058e:	f003 ffdb 	bl	8004548 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000598:	f000 f90c 	bl	80007b4 <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3750      	adds	r7, #80	; 0x50
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_SPI1_Init+0x64>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <MX_SPI1_Init+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_SPI1_Init+0x64>)
 80005b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_SPI1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_SPI1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_SPI1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_SPI1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_SPI1_Init+0x64>)
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_SPI1_Init+0x64>)
 80005d8:	2208      	movs	r2, #8
 80005da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_SPI1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_SPI1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_SPI1_Init+0x64>)
 80005f0:	220a      	movs	r2, #10
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_SPI1_Init+0x64>)
 80005f6:	f004 f85d 	bl	80046b4 <HAL_SPI_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000600:	f000 f8d8 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200005f0 	.word	0x200005f0
 800060c:	40013000 	.word	0x40013000

08000610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_TIM2_Init+0x94>)
 800062e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000632:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000636:	f64e 2260 	movw	r2, #60000	; 0xea60
 800063a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_TIM2_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000644:	221d      	movs	r2, #29
 8000646:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_TIM2_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000656:	f004 fa93 	bl	8004b80 <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000660:	f000 f8a8 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000672:	f004 fc5d 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f89a 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_TIM2_Init+0x94>)
 800068e:	f004 fe2f 	bl	80052f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000698:	f000 f88c 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000648 	.word	0x20000648

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a38      	ldr	r2, [pc, #224]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xfc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xfc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xfc>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xfc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4821      	ldr	r0, [pc, #132]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000724:	f001 fe4c 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <MX_GPIO_Init+0x104>)
 800072e:	f001 fe47 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <MX_GPIO_Init+0x104>)
 8000738:	f001 fe42 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2103      	movs	r1, #3
 8000740:	481b      	ldr	r0, [pc, #108]	; (80007b0 <MX_GPIO_Init+0x108>)
 8000742:	f001 fe3d 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000760:	f001 fcaa 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000764:	2350      	movs	r3, #80	; 0x50
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0x104>)
 800077c:	f001 fc9c 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000780:	2303      	movs	r3, #3
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_GPIO_Init+0x108>)
 8000798:	f001 fc8e 	bl	80020b8 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40011000 	.word	0x40011000
 80007ac:	40010800 	.word	0x40010800
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <HAL_MspInit+0x7c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <HAL_MspInit+0x7c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <HAL_MspInit+0x7c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_MspInit+0x7c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <HAL_MspInit+0x7c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_MspInit+0x7c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2005      	movs	r0, #5
 80007fc:	f001 fc25 	bl	800204a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000800:	2005      	movs	r0, #5
 8000802:	f001 fc3e 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2005      	movs	r0, #5
 800080c:	f001 fc1d 	bl	800204a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000810:	2005      	movs	r0, #5
 8000812:	f001 fc36 	bl	8002082 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_MspInit+0x80>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_MspInit+0x80>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000

08000844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <HAL_SPI_MspInit+0x70>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d123      	bne.n	80008ac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 800086a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_SPI_MspInit+0x74>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_SPI_MspInit+0x78>)
 80008a8:	f001 fc06 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40013000 	.word	0x40013000
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d113      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	201c      	movs	r0, #28
 80008f0:	f001 fbab 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f4:	201c      	movs	r0, #28
 80008f6:	f001 fbc4 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f001 fa65 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800096a:	f001 fe72 	bl	8002652 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001930 	.word	0x20001930

08000978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM2_IRQHandler+0x10>)
 800097e:	f004 f9cf 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000648 	.word	0x20000648

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f009 fafe 	bl	8009fbc <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20005000 	.word	0x20005000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	20000690 	.word	0x20000690
 80009f4:	20001e50 	.word	0x20001e50

080009f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78fa      	ldrb	r2, [r7, #3]
 8000a14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b088      	sub	sp, #32
 8000a26:	af02      	add	r7, sp, #8
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4603      	mov	r3, r0
 8000a32:	817b      	strh	r3, [r7, #10]
 8000a34:	460b      	mov	r3, r1
 8000a36:	813b      	strh	r3, [r7, #8]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000a42:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000a44:	7dbb      	ldrb	r3, [r7, #22]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000a52:	897a      	ldrh	r2, [r7, #10]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4413      	add	r3, r2
 8000a58:	b298      	uxth	r0, r3
 8000a5a:	893b      	ldrh	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	893a      	ldrh	r2, [r7, #8]
 8000a62:	8979      	ldrh	r1, [r7, #10]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4603      	mov	r3, r0
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f000 fc0f 	bl	800128c <u8g2_IsIntersection>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d040      	beq.n	8000af6 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000a78:	e035      	b.n	8000ae6 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
 8000a80:	4013      	ands	r3, r2
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00c      	beq.n	8000aa2 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	7dba      	ldrb	r2, [r7, #22]
 8000a8c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000a90:	893a      	ldrh	r2, [r7, #8]
 8000a92:	8979      	ldrh	r1, [r7, #10]
 8000a94:	2300      	movs	r3, #0
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 fb22 	bl	80010e4 <u8g2_DrawHVLine>
 8000aa0:	e010      	b.n	8000ac4 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000ab4:	893a      	ldrh	r2, [r7, #8]
 8000ab6:	8979      	ldrh	r1, [r7, #10]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 fb10 	bl	80010e4 <u8g2_DrawHVLine>
    }
    x++;
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d104      	bne.n	8000ae0 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
      b++;
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	3301      	adds	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1c6      	bne.n	8000a7a <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	7dba      	ldrb	r2, [r7, #22]
 8000af0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8000af4:	e000      	b.n	8000af8 <u8g2_DrawHXBM+0xd6>
    return;
 8000af6:	bf00      	nop
}
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b088      	sub	sp, #32
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	817b      	strh	r3, [r7, #10]
 8000b10:	460b      	mov	r3, r1
 8000b12:	813b      	strh	r3, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	3307      	adds	r3, #7
 8000b20:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000b28:	897a      	ldrh	r2, [r7, #10]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b298      	uxth	r0, r3
 8000b30:	893a      	ldrh	r2, [r7, #8]
 8000b32:	8c3b      	ldrh	r3, [r7, #32]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	893a      	ldrh	r2, [r7, #8]
 8000b3a:	8979      	ldrh	r1, [r7, #10]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f000 fba3 	bl	800128c <u8g2_IsIntersection>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d017      	beq.n	8000b7c <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000b4c:	e012      	b.n	8000b74 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000b4e:	88f8      	ldrh	r0, [r7, #6]
 8000b50:	893a      	ldrh	r2, [r7, #8]
 8000b52:	8979      	ldrh	r1, [r7, #10]
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f7ff ff61 	bl	8000a22 <u8g2_DrawHXBM>
    bitmap += blen;
 8000b60:	8afb      	ldrh	r3, [r7, #22]
 8000b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b64:	4413      	add	r3, r2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8000b68:	893b      	ldrh	r3, [r7, #8]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	813b      	strh	r3, [r7, #8]
    h--;
 8000b6e:	8c3b      	ldrh	r3, [r7, #32]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000b74:	8c3b      	ldrh	r3, [r7, #32]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1e9      	bne.n	8000b4e <u8g2_DrawXBM+0x50>
 8000b7a:	e000      	b.n	8000b7e <u8g2_DrawXBM+0x80>
    return;
 8000b7c:	bf00      	nop
  }
}
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
 8000b90:	4613      	mov	r3, r2
 8000b92:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	7c1b      	ldrb	r3, [r3, #16]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	89ba      	ldrh	r2, [r7, #12]
 8000bac:	fb02 f303 	mul.w	r3, r2, r3
 8000bb0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000bb8:	89bb      	ldrh	r3, [r7, #12]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000bc0:	7bf9      	ldrb	r1, [r7, #15]
 8000bc2:	78ba      	ldrb	r2, [r7, #2]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	2100      	movs	r1, #0
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 ffd9 	bl	8001b84 <u8x8_DrawTile>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bec:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000bf4:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	7c5b      	ldrb	r3, [r3, #17]
 8000bfc:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000bfe:	7bba      	ldrb	r2, [r7, #14]
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	4619      	mov	r1, r3
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffbd 	bl	8000b84 <u8g2_send_tile_row>
    src_row++;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	3301      	adds	r3, #1
 8000c14:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d203      	bcs.n	8000c26 <u8g2_send_buffer+0x4c>
 8000c1e:	7bba      	ldrb	r2, [r7, #14]
 8000c20:	7b3b      	ldrb	r3, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3eb      	bcc.n	8000bfe <u8g2_send_buffer+0x24>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffcf 	bl	8000bda <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f001 f803 	bl	8001c48 <u8x8_RefreshDisplay>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2208      	movs	r2, #8
 8000c58:	701a      	strb	r2, [r3, #0]
  return buf;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000694 	.word	0x20000694

08000c6c <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8000c82:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f001 f83f 	bl	8001d08 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8000c8a:	f107 0313 	add.w	r3, r7, #19
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffdc 	bl	8000c4c <u8g2_m_24_8_f>
 8000c94:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000c96:	7cfa      	ldrb	r2, [r7, #19]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8000c9e:	6979      	ldr	r1, [r7, #20]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 fbdc 	bl	800145e <u8g2_SetupBuffer>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	080018a1 	.word	0x080018a1
 8000cb4:	08001a81 	.word	0x08001a81
 8000cb8:	080012e3 	.word	0x080012e3

08000cbc <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	81fb      	strh	r3, [r7, #14]
	font++;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	81fb      	strh	r3, [r7, #14]
	return pos;
 8000d10:	89fb      	ldrh	r3, [r7, #14]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	6838      	ldr	r0, [r7, #0]
 8000d2a:	f7ff ffc7 	bl	8000cbc <u8g2_font_get_byte>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000d36:	2101      	movs	r1, #1
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f7ff ffbf 	bl	8000cbc <u8g2_font_get_byte>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000d46:	2102      	movs	r1, #2
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f7ff ffb7 	bl	8000cbc <u8g2_font_get_byte>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000d56:	2103      	movs	r1, #3
 8000d58:	6838      	ldr	r0, [r7, #0]
 8000d5a:	f7ff ffaf 	bl	8000cbc <u8g2_font_get_byte>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000d66:	2104      	movs	r1, #4
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f7ff ffa7 	bl	8000cbc <u8g2_font_get_byte>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000d76:	2105      	movs	r1, #5
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f7ff ff9f 	bl	8000cbc <u8g2_font_get_byte>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000d86:	2106      	movs	r1, #6
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f7ff ff97 	bl	8000cbc <u8g2_font_get_byte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000d96:	2107      	movs	r1, #7
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f7ff ff8f 	bl	8000cbc <u8g2_font_get_byte>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000da6:	2108      	movs	r1, #8
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f7ff ff87 	bl	8000cbc <u8g2_font_get_byte>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000db6:	2109      	movs	r1, #9
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff ff7f 	bl	8000cbc <u8g2_font_get_byte>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000dc6:	210a      	movs	r1, #10
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f7ff ff77 	bl	8000cbc <u8g2_font_get_byte>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000dd6:	210b      	movs	r1, #11
 8000dd8:	6838      	ldr	r0, [r7, #0]
 8000dda:	f7ff ff6f 	bl	8000cbc <u8g2_font_get_byte>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b25a      	sxtb	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000de6:	210c      	movs	r1, #12
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f7ff ff67 	bl	8000cbc <u8g2_font_get_byte>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000df6:	210d      	movs	r1, #13
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff ff5f 	bl	8000cbc <u8g2_font_get_byte>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000e06:	210e      	movs	r1, #14
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f7ff ff57 	bl	8000cbc <u8g2_font_get_byte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000e16:	210f      	movs	r1, #15
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f7ff ff4f 	bl	8000cbc <u8g2_font_get_byte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000e26:	2110      	movs	r1, #16
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f7ff ff47 	bl	8000cbc <u8g2_font_get_byte>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000e36:	2111      	movs	r1, #17
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f7ff ff50 	bl	8000cde <u8g2_font_get_word>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8000e46:	2113      	movs	r1, #19
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f7ff ff48 	bl	8000cde <u8g2_font_get_word>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8000e56:	2115      	movs	r1, #21
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	f7ff ff40 	bl	8000cde <u8g2_font_get_word>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	82da      	strh	r2, [r3, #22]
#endif
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	78fa      	ldrb	r2, [r7, #3]
 8000e7e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d05d      	beq.n	8000f58 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d04d      	beq.n	8000f5a <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d11c      	bne.n	8000f02 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	da05      	bge.n	8000ee4 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dd32      	ble.n	8000f5a <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8000f00:	e02b      	b.n	8000f5a <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8000f08:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f10:	4619      	mov	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f18:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	da0d      	bge.n	8000f3a <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f24:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dd07      	ble.n	8000f5a <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8000f56:	e000      	b.n	8000f5a <u8g2_UpdateRefHeight+0xce>
		return;
 8000f58:	bf00      	nop
	}
}
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
	...

08000f78 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <u8g2_SetFontPosBaseline+0x18>)
 8000f84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	08000f63 	.word	0x08000f63

08000f94 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8000fa2:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8000faa:	89fb      	ldrh	r3, [r7, #14]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <u8g2_SetFontPosTop+0x18>)
 8000fc4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	08000f95 	.word	0x08000f95

08000fd4 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d00b      	beq.n	8001000 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3374      	adds	r3, #116	; 0x74
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe91 	bl	8000d1c <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff46 	bl	8000e8c <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4611      	mov	r1, r2
 8001014:	461a      	mov	r2, r3
 8001016:	460b      	mov	r3, r1
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001024:	8afb      	ldrh	r3, [r7, #22]
 8001026:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	8abb      	ldrh	r3, [r7, #20]
 800102e:	4413      	add	r3, r2
 8001030:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001032:	8afa      	ldrh	r2, [r7, #22]
 8001034:	8abb      	ldrh	r3, [r7, #20]
 8001036:	429a      	cmp	r2, r3
 8001038:	d90b      	bls.n	8001052 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800103a:	8afa      	ldrh	r2, [r7, #22]
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	d205      	bcs.n	800104e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	82bb      	strh	r3, [r7, #20]
      b--;
 8001046:	8abb      	ldrh	r3, [r7, #20]
 8001048:	3b01      	subs	r3, #1
 800104a:	82bb      	strh	r3, [r7, #20]
 800104c:	e001      	b.n	8001052 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001052:	8afa      	ldrh	r2, [r7, #22]
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d301      	bcc.n	800105e <u8g2_clip_intersection2+0x56>
    return 0;
 800105a:	2300      	movs	r3, #0
 800105c:	e01c      	b.n	8001098 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800105e:	8aba      	ldrh	r2, [r7, #20]
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	429a      	cmp	r2, r3
 8001064:	d801      	bhi.n	800106a <u8g2_clip_intersection2+0x62>
    return 0;
 8001066:	2300      	movs	r3, #0
 8001068:	e016      	b.n	8001098 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800106a:	8afa      	ldrh	r2, [r7, #22]
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	429a      	cmp	r2, r3
 8001070:	d201      	bcs.n	8001076 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001076:	8aba      	ldrh	r2, [r7, #20]
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d901      	bls.n	8001082 <u8g2_clip_intersection2+0x7a>
    b = d;
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8afa      	ldrh	r2, [r7, #22]
 8001086:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001088:	8aba      	ldrh	r2, [r7, #20]
 800108a:	8afb      	ldrh	r3, [r7, #22]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	8aba      	ldrh	r2, [r7, #20]
 8001094:	801a      	strh	r2, [r3, #0]
  return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af02      	add	r7, sp, #8
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	817b      	strh	r3, [r7, #10]
 80010b4:	460b      	mov	r3, r1
 80010b6:	813b      	strh	r3, [r7, #8]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80010c0:	893a      	ldrh	r2, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80010ca:	88f8      	ldrh	r0, [r7, #6]
 80010cc:	893a      	ldrh	r2, [r7, #8]
 80010ce:	8979      	ldrh	r1, [r7, #10]
 80010d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	4603      	mov	r3, r0
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	47a0      	blx	r4
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	817b      	strh	r3, [r7, #10]
 80010f6:	460b      	mov	r3, r1
 80010f8:	813b      	strh	r3, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d075      	beq.n	80011f4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d072      	beq.n	80011f4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d91a      	bls.n	800114a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d109      	bne.n	8001130 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800111c:	897a      	ldrh	r2, [r7, #10]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	817b      	strh	r3, [r7, #10]
	  x++;
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	3301      	adds	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	817b      	strh	r3, [r7, #10]
 800112e:	e00c      	b.n	800114a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d108      	bne.n	800114a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001138:	893a      	ldrh	r2, [r7, #8]
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	813b      	strh	r3, [r7, #8]
	  y++;
 8001142:	893b      	ldrh	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800114a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d11a      	bne.n	8001194 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001164:	893b      	ldrh	r3, [r7, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	d83b      	bhi.n	80011e2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001170:	893b      	ldrh	r3, [r7, #8]
 8001172:	429a      	cmp	r2, r3
 8001174:	d937      	bls.n	80011e6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001182:	1db9      	adds	r1, r7, #6
 8001184:	f107 000a 	add.w	r0, r7, #10
 8001188:	f7ff ff3e 	bl	8001008 <u8g2_clip_intersection2>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d11a      	bne.n	80011c8 <u8g2_DrawHVLine+0xe4>
	  return;
 8001192:	e02f      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	429a      	cmp	r2, r3
 800119e:	d824      	bhi.n	80011ea <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d920      	bls.n	80011ee <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80011b8:	1db9      	adds	r1, r7, #6
 80011ba:	f107 0008 	add.w	r0, r7, #8
 80011be:	f7ff ff23 	bl	8001008 <u8g2_clip_intersection2>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	689c      	ldr	r4, [r3, #8]
 80011ce:	8979      	ldrh	r1, [r7, #10]
 80011d0:	893a      	ldrh	r2, [r7, #8]
 80011d2:	88f8      	ldrh	r0, [r7, #6]
 80011d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	4603      	mov	r3, r0
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	47a0      	blx	r4
 80011e0:	e008      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
	  return;
 80011e2:	bf00      	nop
 80011e4:	e006      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
	  return;
 80011e6:	bf00      	nop
 80011e8:	e004      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
	  return;
 80011ea:	bf00      	nop
 80011ec:	e002      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
	  return;
 80011ee:	bf00      	nop
 80011f0:	e000      	b.n	80011f4 <u8g2_DrawHVLine+0x110>
	  return;
 80011f2:	bf00      	nop
    }
}
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d903      	bls.n	800121c <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001226:	b490      	push	{r4, r7}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4604      	mov	r4, r0
 800122e:	4608      	mov	r0, r1
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	4623      	mov	r3, r4
 8001236:	80fb      	strh	r3, [r7, #6]
 8001238:	4603      	mov	r3, r0
 800123a:	80bb      	strh	r3, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	d20d      	bcs.n	8001268 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800124c:	883a      	ldrh	r2, [r7, #0]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	429a      	cmp	r2, r3
 8001252:	d901      	bls.n	8001258 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001254:	2301      	movs	r3, #1
 8001256:	e014      	b.n	8001282 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	883b      	ldrh	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d901      	bls.n	8001264 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001260:	2301      	movs	r3, #1
 8001262:	e00e      	b.n	8001282 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e00c      	b.n	8001282 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001268:	883a      	ldrh	r2, [r7, #0]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	429a      	cmp	r2, r3
 800126e:	d907      	bls.n	8001280 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	883b      	ldrh	r3, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d901      	bls.n	800127c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e002      	b.n	8001282 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001280:	2300      	movs	r3, #0
    }
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bc90      	pop	{r4, r7}
 800128a:	4770      	bx	lr

0800128c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4603      	mov	r3, r0
 800129c:	817b      	strh	r3, [r7, #10]
 800129e:	460b      	mov	r3, r1
 80012a0:	813b      	strh	r3, [r7, #8]
 80012a2:	4613      	mov	r3, r2
 80012a4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80012b2:	8b3b      	ldrh	r3, [r7, #24]
 80012b4:	893a      	ldrh	r2, [r7, #8]
 80012b6:	f7ff ffb6 	bl	8001226 <u8g2_is_intersection_decision_tree>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <u8g2_IsIntersection+0x38>
    return 0; 
 80012c0:	2300      	movs	r3, #0
 80012c2:	e00a      	b.n	80012da <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	897a      	ldrh	r2, [r7, #10]
 80012d4:	f7ff ffa7 	bl	8001226 <u8g2_is_intersection_decision_tree>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b089      	sub	sp, #36	; 0x24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	4608      	mov	r0, r1
 80012ec:	4611      	mov	r1, r2
 80012ee:	461a      	mov	r2, r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	817b      	strh	r3, [r7, #10]
 80012f4:	460b      	mov	r3, r1
 80012f6:	813b      	strh	r3, [r7, #8]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80012fc:	893b      	ldrh	r3, [r7, #8]
 80012fe:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001300:	7efb      	ldrb	r3, [r7, #27]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800130c:	7e3a      	ldrb	r2, [r7, #24]
 800130e:	7efb      	ldrb	r3, [r7, #27]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001324:	2b01      	cmp	r3, #1
 8001326:	d801      	bhi.n	800132c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001328:	7e3b      	ldrb	r3, [r7, #24]
 800132a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001332:	2b01      	cmp	r3, #1
 8001334:	d001      	beq.n	800133a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001336:	7e3b      	ldrb	r3, [r7, #24]
 8001338:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800133a:	893b      	ldrh	r3, [r7, #8]
 800133c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	f023 0307 	bic.w	r3, r3, #7
 8001344:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7c1b      	ldrb	r3, [r3, #16]
 800134c:	b29b      	uxth	r3, r3
 800134e:	8afa      	ldrh	r2, [r7, #22]
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	4413      	add	r3, r2
 8001362:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800136c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d117      	bne.n	80013a4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	7ebb      	ldrb	r3, [r7, #26]
 800137a:	4313      	orrs	r3, r2
 800137c:	b2da      	uxtb	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	7e7b      	ldrb	r3, [r7, #25]
 8001388:	4053      	eors	r3, r2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3301      	adds	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
	len--;
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	3b01      	subs	r3, #1
 800139a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e8      	bne.n	8001374 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80013a2:	e038      	b.n	8001416 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	7ebb      	ldrb	r3, [r7, #26]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	7e7b      	ldrb	r3, [r7, #25]
 80013b8:	4053      	eors	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80013c0:	7efb      	ldrb	r3, [r7, #27]
 80013c2:	3301      	adds	r3, #1
 80013c4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80013c6:	7efb      	ldrb	r3, [r7, #27]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	76fb      	strb	r3, [r7, #27]
      len--;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d114      	bne.n	8001404 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80013de:	461a      	mov	r2, r3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	4413      	add	r3, r2
 80013e4:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d801      	bhi.n	80013f4 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d008      	beq.n	8001410 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	767b      	strb	r3, [r7, #25]
 8001402:	e005      	b.n	8001410 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001404:	7ebb      	ldrb	r3, [r7, #26]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800140a:	7e7b      	ldrb	r3, [r7, #25]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1c6      	bne.n	80013a4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff ffad 	bl	8001420 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fd56 	bl	8000f78 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014f0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	89fa      	ldrh	r2, [r7, #14]
 80014fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	7c1b      	ldrb	r3, [r3, #16]
 8001502:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	89fa      	ldrh	r2, [r7, #14]
 800150e:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001516:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	89fa      	ldrh	r2, [r7, #14]
 8001522:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800152a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8001534:	4413      	add	r3, r2
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	7c52      	ldrb	r2, [r2, #17]
 800153a:	4293      	cmp	r3, r2
 800153c:	dd08      	ble.n	8001550 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	7c5b      	ldrb	r3, [r3, #17]
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	8a9a      	ldrh	r2, [r3, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	8ada      	ldrh	r2, [r3, #22]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	4603      	mov	r3, r0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe63 	bl	800128c <u8g2_IsIntersection>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d104      	bne.n	80015d6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80015d4:	e03b      	b.n	800164e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d205      	bcs.n	80015fa <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001606:	429a      	cmp	r2, r3
 8001608:	d905      	bls.n	8001616 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001622:	429a      	cmp	r2, r3
 8001624:	d205      	bcs.n	8001632 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800163e:	429a      	cmp	r2, r3
 8001640:	d905      	bls.n	800164e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff3c 	bl	80014dc <u8g2_update_dimension_common>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff7b 	bl	800159c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	817b      	strh	r3, [r7, #10]
 80016c0:	460b      	mov	r3, r1
 80016c2:	813b      	strh	r3, [r7, #8]
 80016c4:	4613      	mov	r3, r2
 80016c6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80016c8:	88f8      	ldrh	r0, [r7, #6]
 80016ca:	893a      	ldrh	r2, [r7, #8]
 80016cc:	8979      	ldrh	r1, [r7, #10]
 80016ce:	7e3b      	ldrb	r3, [r7, #24]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4603      	mov	r3, r0
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff fce4 	bl	80010a2 <u8g2_draw_hv_line_2dir>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691c      	ldr	r4, [r3, #16]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	2300      	movs	r3, #0
 80016f6:	2120      	movs	r1, #32
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	47a0      	blx	r4
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001706:	b590      	push	{r4, r7, lr}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	460b      	mov	r3, r1
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	691c      	ldr	r4, [r3, #16]
 8001718:	7afa      	ldrb	r2, [r7, #11]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2117      	movs	r1, #23
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	47a0      	blx	r4
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}

0800172c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001738:	1cfb      	adds	r3, r7, #3
 800173a:	461a      	mov	r2, r3
 800173c:	2101      	movs	r1, #1
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffe1 	bl	8001706 <u8x8_byte_SendBytes>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68dc      	ldr	r4, [r3, #12]
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	2300      	movs	r3, #0
 8001762:	2115      	movs	r1, #21
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	47a0      	blx	r4
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}

08001772 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001772:	b590      	push	{r4, r7, lr}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68dc      	ldr	r4, [r3, #12]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	2300      	movs	r3, #0
 8001786:	2116      	movs	r1, #22
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	47a0      	blx	r4
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001796:	b590      	push	{r4, r7, lr}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	460b      	mov	r3, r1
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68dc      	ldr	r4, [r3, #12]
 80017a8:	7afa      	ldrb	r2, [r7, #11]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2117      	movs	r1, #23
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	47a0      	blx	r4
 80017b2:	4603      	mov	r3, r0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68dc      	ldr	r4, [r3, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	2200      	movs	r2, #0
 80017cc:	2118      	movs	r1, #24
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	47a0      	blx	r4
 80017d2:	4603      	mov	r3, r0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}

080017dc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68dc      	ldr	r4, [r3, #12]
 80017e8:	2300      	movs	r3, #0
 80017ea:	2200      	movs	r2, #0
 80017ec:	2119      	movs	r1, #25
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	47a0      	blx	r4
 80017f2:	4603      	mov	r3, r0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	73fb      	strb	r3, [r7, #15]
    data++;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2bfe      	cmp	r3, #254	; 0xfe
 8001816:	d031      	beq.n	800187c <u8x8_cad_SendSequence+0x80>
 8001818:	2bfe      	cmp	r3, #254	; 0xfe
 800181a:	dc3d      	bgt.n	8001898 <u8x8_cad_SendSequence+0x9c>
 800181c:	2b19      	cmp	r3, #25
 800181e:	dc3b      	bgt.n	8001898 <u8x8_cad_SendSequence+0x9c>
 8001820:	2b18      	cmp	r3, #24
 8001822:	da23      	bge.n	800186c <u8x8_cad_SendSequence+0x70>
 8001824:	2b16      	cmp	r3, #22
 8001826:	dc02      	bgt.n	800182e <u8x8_cad_SendSequence+0x32>
 8001828:	2b15      	cmp	r3, #21
 800182a:	da03      	bge.n	8001834 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800182c:	e034      	b.n	8001898 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800182e:	2b17      	cmp	r3, #23
 8001830:	d00e      	beq.n	8001850 <u8x8_cad_SendSequence+0x54>
	return;
 8001832:	e031      	b.n	8001898 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68dc      	ldr	r4, [r3, #12]
 800183e:	7bba      	ldrb	r2, [r7, #14]
 8001840:	7bf9      	ldrb	r1, [r7, #15]
 8001842:	2300      	movs	r3, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	47a0      	blx	r4
	  data++;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	603b      	str	r3, [r7, #0]
	  break;
 800184e:	e022      	b.n	8001896 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001856:	f107 030e 	add.w	r3, r7, #14
 800185a:	461a      	mov	r2, r3
 800185c:	2101      	movs	r1, #1
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ff99 	bl	8001796 <u8x8_cad_SendData>
	  data++;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	603b      	str	r3, [r7, #0]
	  break;
 800186a:	e014      	b.n	8001896 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68dc      	ldr	r4, [r3, #12]
 8001870:	7bf9      	ldrb	r1, [r7, #15]
 8001872:	2300      	movs	r3, #0
 8001874:	2200      	movs	r2, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	47a0      	blx	r4
	  break;
 800187a:	e00c      	b.n	8001896 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	461a      	mov	r2, r3
 8001886:	2129      	movs	r1, #41	; 0x29
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f9ec 	bl	8001c66 <u8x8_gpio_call>
	  data++;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	603b      	str	r3, [r7, #0]
	  break;
 8001894:	bf00      	nop
    cmd = *data;
 8001896:	e7b6      	b.n	8001806 <u8x8_cad_SendSequence+0xa>
	return;
 8001898:	bf00      	nop
    }
  }
}
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}

080018a0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	72fb      	strb	r3, [r7, #11]
 80018ae:	4613      	mov	r3, r2
 80018b0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	3b14      	subs	r3, #20
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d82f      	bhi.n	800191a <u8x8_cad_001+0x7a>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <u8x8_cad_001+0x20>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	08001909 	.word	0x08001909
 80018c4:	080018d9 	.word	0x080018d9
 80018c8:	080018ed 	.word	0x080018ed
 80018cc:	08001901 	.word	0x08001901
 80018d0:	08001909 	.word	0x08001909
 80018d4:	08001909 	.word	0x08001909
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80018d8:	2100      	movs	r1, #0
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff ff01 	bl	80016e2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80018e0:	7abb      	ldrb	r3, [r7, #10]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff ff21 	bl	800172c <u8x8_byte_SendByte>
      break;
 80018ea:	e018      	b.n	800191e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fef7 	bl	80016e2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	4619      	mov	r1, r3
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ff17 	bl	800172c <u8x8_byte_SendByte>
      break;
 80018fe:	e00e      	b.n	800191e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001900:	2101      	movs	r1, #1
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff feed 	bl	80016e2 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	691c      	ldr	r4, [r3, #16]
 800190c:	7aba      	ldrb	r2, [r7, #10]
 800190e:	7af9      	ldrb	r1, [r7, #11]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	47a0      	blx	r4
 8001916:	4603      	mov	r3, r0
 8001918:	e002      	b.n	8001920 <u8x8_cad_001+0x80>
    default:
      return 0;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <u8x8_cad_001+0x80>
  }
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}

08001928 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	72fb      	strb	r3, [r7, #11]
 8001936:	4613      	mov	r3, r2
 8001938:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	3b0b      	subs	r3, #11
 800193e:	2b04      	cmp	r3, #4
 8001940:	f200 808e 	bhi.w	8001a60 <u8x8_d_uc1604_common+0x138>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <u8x8_d_uc1604_common+0x24>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	080019f5 	.word	0x080019f5
 8001950:	08001a61 	.word	0x08001a61
 8001954:	08001a0f 	.word	0x08001a0f
 8001958:	08001a41 	.word	0x08001a41
 800195c:	08001961 	.word	0x08001961
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff ff2b 	bl	80017bc <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4619      	mov	r1, r3
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fee6 	bl	800174e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4619      	mov	r1, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fedc 	bl	800174e <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	799b      	ldrb	r3, [r3, #6]
 800199a:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019a2:	7dbb      	ldrb	r3, [r7, #22]
 80019a4:	4413      	add	r3, r2
 80019a6:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 80019a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fec6 	bl	800174e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80019d4:	7d7b      	ldrb	r3, [r7, #21]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4619      	mov	r1, r3
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fedb 	bl	8001796 <u8x8_cad_SendData>
	arg_int--;
 80019e0:	7abb      	ldrb	r3, [r7, #10]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80019e6:	7abb      	ldrb	r3, [r7, #10]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f3      	bne.n	80019d4 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fef5 	bl	80017dc <u8x8_cad_EndTransfer>
      break;
 80019f2:	e037      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80019f4:	7abb      	ldrb	r3, [r7, #10]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d104      	bne.n	8001a04 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 80019fa:	491d      	ldr	r1, [pc, #116]	; (8001a70 <u8x8_d_uc1604_common+0x148>)
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fefd 	bl	80017fc <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8001a02:	e02f      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8001a04:	491b      	ldr	r1, [pc, #108]	; (8001a74 <u8x8_d_uc1604_common+0x14c>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fef8 	bl	80017fc <u8x8_cad_SendSequence>
      break;
 8001a0c:	e02a      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001a0e:	7abb      	ldrb	r3, [r7, #10]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <u8x8_d_uc1604_common+0x150>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff fef0 	bl	80017fc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	7c9a      	ldrb	r2, [r3, #18]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8001a28:	e01c      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8001a2a:	4914      	ldr	r1, [pc, #80]	; (8001a7c <u8x8_d_uc1604_common+0x154>)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fee5 	bl	80017fc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	7cda      	ldrb	r2, [r3, #19]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8001a3e:	e011      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff febb 	bl	80017bc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001a46:	2181      	movs	r1, #129	; 0x81
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff fe80 	bl	800174e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	4619      	mov	r1, r3
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fe8d 	bl	8001772 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff febf 	bl	80017dc <u8x8_cad_EndTransfer>
      break;
 8001a5e:	e001      	b.n	8001a64 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0800bab4 	.word	0x0800bab4
 8001a74:	0800bac4 	.word	0x0800bac4
 8001a78:	0800bacc 	.word	0x0800bacc
 8001a7c:	0800bad4 	.word	0x0800bad4

08001a80 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	72fb      	strb	r3, [r7, #11]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8001a92:	7aba      	ldrb	r2, [r7, #10]
 8001a94:	7af9      	ldrb	r1, [r7, #11]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff ff45 	bl	8001928 <u8x8_d_uc1604_common>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d114      	bne.n	8001ace <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d002      	beq.n	8001ab0 <u8x8_d_uc1604_jlx19264+0x30>
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d005      	beq.n	8001aba <u8x8_d_uc1604_jlx19264+0x3a>
 8001aae:	e00c      	b.n	8001aca <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8001ab0:	490a      	ldr	r1, [pc, #40]	; (8001adc <u8x8_d_uc1604_jlx19264+0x5c>)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f816 	bl	8001ae4 <u8x8_d_helper_display_setup_memory>
	break;
 8001ab8:	e00a      	b.n	8001ad0 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f825 	bl	8001b0a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <u8x8_d_uc1604_jlx19264+0x60>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff fe9a 	bl	80017fc <u8x8_cad_SendSequence>
	break;
 8001ac8:	e002      	b.n	8001ad0 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8001aca:	2300      	movs	r3, #0
 8001acc:	e001      	b.n	8001ad2 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8001ace:	bf00      	nop
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800badc 	.word	0x0800badc
 8001ae0:	0800baf4 	.word	0x0800baf4

08001ae4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	7c9a      	ldrb	r2, [r3, #18]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001b0a:	b590      	push	{r4, r7, lr}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695c      	ldr	r4, [r3, #20]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2128      	movs	r1, #40	; 0x28
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68dc      	ldr	r4, [r3, #12]
 8001b24:	2300      	movs	r3, #0
 8001b26:	2200      	movs	r2, #0
 8001b28:	2114      	movs	r1, #20
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	214b      	movs	r1, #75	; 0x4b
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f897 	bl	8001c66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	791b      	ldrb	r3, [r3, #4]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2129      	movs	r1, #41	; 0x29
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f88f 	bl	8001c66 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	214b      	movs	r1, #75	; 0x4b
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f88a 	bl	8001c66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2129      	movs	r1, #41	; 0x29
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f882 	bl	8001c66 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	214b      	movs	r1, #75	; 0x4b
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f87d 	bl	8001c66 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	795b      	ldrb	r3, [r3, #5]
 8001b72:	461a      	mov	r2, r3
 8001b74:	2129      	movs	r1, #41	; 0x29
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f875 	bl	8001c66 <u8x8_gpio_call>
}    
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	70fb      	strb	r3, [r7, #3]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70bb      	strb	r3, [r7, #2]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689c      	ldr	r4, [r3, #8]
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	210f      	movs	r1, #15
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	47a0      	blx	r4
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689c      	ldr	r4, [r3, #8]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2109      	movs	r1, #9
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	47a0      	blx	r4
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}

08001be6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8001be6:	b590      	push	{r4, r7, lr}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689c      	ldr	r4, [r3, #8]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	210a      	movs	r1, #10
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	47a0      	blx	r4
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689c      	ldr	r4, [r3, #8]
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	2300      	movs	r3, #0
 8001c18:	210b      	movs	r1, #11
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	47a0      	blx	r4
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}

08001c26 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689c      	ldr	r4, [r3, #8]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	210e      	movs	r1, #14
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	47a0      	blx	r4
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689c      	ldr	r4, [r3, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	2110      	movs	r1, #16
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	47a0      	blx	r4
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}

08001c66 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001c66:	b590      	push	{r4, r7, lr}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
 8001c72:	4613      	mov	r3, r2
 8001c74:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695c      	ldr	r4, [r3, #20]
 8001c7a:	78ba      	ldrb	r2, [r7, #2]
 8001c7c:	78f9      	ldrb	r1, [r7, #3]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	47a0      	blx	r4
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	72fb      	strb	r3, [r7, #11]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <u8x8_SetupDefaults+0x58>)
 8001cbe:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <u8x8_SetupDefaults+0x58>)
 8001cc4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <u8x8_SetupDefaults+0x58>)
 8001cca:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <u8x8_SetupDefaults+0x58>)
 8001cd0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	22ff      	movs	r2, #255	; 0xff
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	22ff      	movs	r2, #255	; 0xff
 8001cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	08001c8d 	.word	0x08001c8d

08001d08 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ffc8 	bl	8001cac <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ff47 	bl	8001bc8 <u8x8_SetupMemory>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6a:	f7fe fe45 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f008 f92b 	bl	8009fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7fe fbab 	bl	80004cc <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8001d80:	0800bb54 	.word	0x0800bb54
  ldr r2, =_sbss
 8001d84:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8001d88:	20001e4c 	.word	0x20001e4c

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f947 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7fe fd08 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f95f 	bl	800209e <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	f000 f927 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000022c 	.word	0x2000022c
 8001e14:	20000234 	.word	0x20000234
 8001e18:	20000230 	.word	0x20000230

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000234 	.word	0x20000234
 8001e3c:	20000c94 	.word	0x20000c94

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000c94 	.word	0x20000c94

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000234 	.word	0x20000234

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff42 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff90 	bl	8001f8c <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5f 	bl	8001f38 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff35 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e169      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8158 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a9a      	ldr	r2, [pc, #616]	; (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a98      	ldr	r2, [pc, #608]	; (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a98      	ldr	r2, [pc, #608]	; (800235c <HAL_GPIO_Init+0x2a4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a96      	ldr	r2, [pc, #600]	; (800235c <HAL_GPIO_Init+0x2a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a96      	ldr	r2, [pc, #600]	; (8002360 <HAL_GPIO_Init+0x2a8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a94      	ldr	r2, [pc, #592]	; (8002360 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a94      	ldr	r2, [pc, #592]	; (8002364 <HAL_GPIO_Init+0x2ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a92      	ldr	r2, [pc, #584]	; (8002364 <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a92      	ldr	r2, [pc, #584]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a90      	ldr	r2, [pc, #576]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a79      	ldr	r2, [pc, #484]	; (800236c <HAL_GPIO_Init+0x2b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	; 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b1 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a48      	ldr	r2, [pc, #288]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	; (8002378 <HAL_GPIO_Init+0x2c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_GPIO_Init+0x2c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00d      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <HAL_GPIO_Init+0x1e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <HAL_GPIO_Init+0x2cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_Init+0x1e0>
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 8002298:	2304      	movs	r3, #4
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a4:	2300      	movs	r3, #0
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b6:	492f      	ldr	r1, [pc, #188]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	492c      	ldr	r1, [pc, #176]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4928      	ldr	r1, [pc, #160]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	491e      	ldr	r1, [pc, #120]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4918      	ldr	r1, [pc, #96]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4914      	ldr	r1, [pc, #80]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d021      	beq.n	800238c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x2e2>
 8002356:	bf00      	nop
 8002358:	10320000 	.word	0x10320000
 800235c:	10310000 	.word	0x10310000
 8002360:	10220000 	.word	0x10220000
 8002364:	10210000 	.word	0x10210000
 8002368:	10120000 	.word	0x10120000
 800236c:	10110000 	.word	0x10110000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_GPIO_Init+0x304>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4909      	ldr	r1, [pc, #36]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002396:	4013      	ands	r3, r2
 8002398:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae8e 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	372c      	adds	r7, #44	; 0x2c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b08b      	sub	sp, #44	; 0x2c
 80023f4:	af06      	add	r7, sp, #24
 80023f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0fd      	b.n	80025fe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f007 fb26 	bl	8009a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fff7 	bl	800541c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	687e      	ldr	r6, [r7, #4]
 8002436:	466d      	mov	r5, sp
 8002438:	f106 0410 	add.w	r4, r6, #16
 800243c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	602b      	str	r3, [r5, #0]
 8002444:	1d33      	adds	r3, r6, #4
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f002 ffc1 	bl	80053d0 <USB_CoreInit>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ce      	b.n	80025fe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fff2 	bl	8005450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e04c      	b.n	800250c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3301      	adds	r3, #1
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	b298      	uxth	r0, r3
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3336      	adds	r3, #54	; 0x36
 80024b0:	4602      	mov	r2, r0
 80024b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3303      	adds	r3, #3
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	333c      	adds	r3, #60	; 0x3c
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	3340      	adds	r3, #64	; 0x40
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	3301      	adds	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d3ad      	bcc.n	8002472 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e044      	b.n	80025a6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3b5      	bcc.n	800251c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	687e      	ldr	r6, [r7, #4]
 80025b8:	466d      	mov	r5, sp
 80025ba:	f106 0410 	add.w	r4, r6, #16
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	1d33      	adds	r3, r6, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f002 ff4c 	bl	8005468 <USB_DevInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00d      	b.n	80025fe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f005 fbfe 	bl	8007df8 <USB_DevDisconnect>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002606 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_PCD_Start+0x16>
 8002618:	2302      	movs	r3, #2
 800261a:	e016      	b.n	800264a <HAL_PCD_Start+0x44>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fee1 	bl	80053f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800262e:	2101      	movs	r1, #1
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f007 fc8c 	bl	8009f4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fbd2 	bl	8007de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fbd4 	bl	8007e0c <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266e:	d102      	bne.n	8002676 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fb5f 	bl	8002d34 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f005 fbc6 	bl	8007e0c <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d112      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269e:	b292      	uxth	r2, r2
 80026a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 fa5a 	bl	8009b5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026aa:	2100      	movs	r1, #0
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f923 	bl	80028f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 fba8 	bl	8007e0c <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c6:	d10b      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026da:	b292      	uxth	r2, r2
 80026dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 fb91 	bl	8007e0c <USB_ReadInterrupts>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f4:	d10b      	bne.n	800270e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002708:	b292      	uxth	r2, r2
 800270a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f005 fb7a 	bl	8007e0c <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d126      	bne.n	8002772 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800272c:	b29a      	uxth	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	b292      	uxth	r2, r2
 8002738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0208 	bic.w	r2, r2, #8
 800274e:	b292      	uxth	r2, r2
 8002750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f007 fa3b 	bl	8009bd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276c:	b292      	uxth	r2, r2
 800276e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f005 fb48 	bl	8007e0c <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002786:	f040 8082 	bne.w	800288e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	77fb      	strb	r3, [r7, #31]
 800278e:	e010      	b.n	80027b2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	7ffb      	ldrb	r3, [r7, #31]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	7ffb      	ldrb	r3, [r7, #31]
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	b292      	uxth	r2, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	3320      	adds	r3, #32
 80027a6:	443b      	add	r3, r7
 80027a8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80027ac:	7ffb      	ldrb	r3, [r7, #31]
 80027ae:	3301      	adds	r3, #1
 80027b0:	77fb      	strb	r3, [r7, #31]
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	d9eb      	bls.n	8002790 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	b292      	uxth	r2, r2
 80027cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	b292      	uxth	r2, r2
 80027e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80027e8:	bf00      	nop
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f6      	beq.n	80027ea <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280e:	b292      	uxth	r2, r2
 8002810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e00f      	b.n	800283a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	4611      	mov	r1, r2
 8002822:	7ffa      	ldrb	r2, [r7, #31]
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	440a      	add	r2, r1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	3320      	adds	r3, #32
 800282c:	443b      	add	r3, r7
 800282e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002832:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002834:	7ffb      	ldrb	r3, [r7, #31]
 8002836:	3301      	adds	r3, #1
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	7ffb      	ldrb	r3, [r7, #31]
 800283c:	2b07      	cmp	r3, #7
 800283e:	d9ec      	bls.n	800281a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	b292      	uxth	r2, r2
 8002854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	b292      	uxth	r2, r2
 800286c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0204 	orr.w	r2, r2, #4
 8002882:	b292      	uxth	r2, r2
 8002884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f007 f987 	bl	8009b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f005 faba 	bl	8007e0c <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a2:	d10e      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028b6:	b292      	uxth	r2, r2
 80028b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f007 f940 	bl	8009b42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 faa0 	bl	8007e0c <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d6:	d10b      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ea:	b292      	uxth	r2, r2
 80028ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_SetAddress+0x1a>
 800290e:	2302      	movs	r3, #2
 8002910:	e013      	b.n	800293a <HAL_PCD_SetAddress+0x42>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f005 fa47 	bl	8007dbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	4608      	mov	r0, r1
 800294c:	4611      	mov	r1, r2
 800294e:	461a      	mov	r2, r3
 8002950:	4603      	mov	r3, r0
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	460b      	mov	r3, r1
 8002956:	803b      	strh	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da0e      	bge.n	8002986 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	705a      	strb	r2, [r3, #1]
 8002984:	e00e      	b.n	80029a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0207 	and.w	r2, r3, #7
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029b0:	883a      	ldrh	r2, [r7, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	78ba      	ldrb	r2, [r7, #2]
 80029ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029ce:	78bb      	ldrb	r3, [r7, #2]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d102      	bne.n	80029da <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_PCD_EP_Open+0xa6>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e00e      	b.n	8002a06 <HAL_PCD_EP_Open+0xc4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fd56 	bl	80054a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a04:	7afb      	ldrb	r3, [r7, #11]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da0e      	bge.n	8002a40 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	705a      	strb	r2, [r3, #1]
 8002a3e:	e00e      	b.n	8002a5e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 0207 	and.w	r2, r3, #7
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_EP_Close+0x6a>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e00e      	b.n	8002a96 <HAL_PCD_EP_Close+0x88>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 f878 	bl	8005b7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f003 0207 	and.w	r2, r3, #7
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6979      	ldr	r1, [r7, #20]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fa2a 	bl	8005f54 <USB_EPStartXfer>
 8002b00:	e005      	b.n	8002b0e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fa23 	bl	8005f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 0207 	and.w	r2, r3, #7
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	460b      	mov	r3, r1
 8002b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	7afb      	ldrb	r3, [r7, #11]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6979      	ldr	r1, [r7, #20]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 f9d0 	bl	8005f54 <USB_EPStartXfer>
 8002bb4:	e005      	b.n	8002bc2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6979      	ldr	r1, [r7, #20]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 f9c9 	bl	8005f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	f003 0207 	and.w	r2, r3, #7
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d901      	bls.n	8002bea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e04c      	b.n	8002c84 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da0e      	bge.n	8002c10 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	705a      	strb	r2, [r3, #1]
 8002c0e:	e00c      	b.n	8002c2a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_PCD_EP_SetStall+0x7e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e01c      	b.n	8002c84 <HAL_PCD_EP_SetStall+0xb8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 ffb3 	bl	8007bc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d108      	bne.n	8002c7a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f005 f8d8 	bl	8007e2a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e040      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da0e      	bge.n	8002cd0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00e      	b.n	8002cee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_EP_ClrStall+0x82>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e00e      	b.n	8002d2c <HAL_PCD_EP_ClrStall+0xa0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f004 ffa1 	bl	8007c64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d3c:	e2ec      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d46:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 8161 	bne.w	8003020 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d152      	bne.n	8002e0e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d78:	81fb      	strh	r3, [r7, #14]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3328      	adds	r3, #40	; 0x28
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	3302      	adds	r3, #2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f006 fe9d 	bl	8009b0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 829b 	beq.w	8003318 <PCD_EP_ISR_Handler+0x5e4>
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8296 	bne.w	8003318 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e0c:	e284      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d034      	beq.n	8002e92 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3306      	adds	r3, #6
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f005 f82f 	bl	8007eca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e78:	4013      	ands	r3, r2
 8002e7a:	823b      	strh	r3, [r7, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	8a3a      	ldrh	r2, [r7, #16]
 8002e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e86:	b292      	uxth	r2, r2
 8002e88:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f006 fe12 	bl	8009ab4 <HAL_PCD_SetupStageCallback>
 8002e90:	e242      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f280 823e 	bge.w	8003318 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	83bb      	strh	r3, [r7, #28]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	8bba      	ldrh	r2, [r7, #28]
 8002eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3306      	adds	r3, #6
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d019      	beq.n	8002f22 <PCD_EP_ISR_Handler+0x1ee>
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d015      	beq.n	8002f22 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f004 ffdf 	bl	8007eca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	441a      	add	r2, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f006 fddb 	bl	8009ad8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81f2 	bne.w	8003318 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <PCD_EP_ISR_Handler+0x24e>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e02f      	b.n	8002fe2 <PCD_EP_ISR_Handler+0x2ae>
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b3e      	cmp	r3, #62	; 0x3e
 8002f88:	d813      	bhi.n	8002fb2 <PCD_EP_ISR_Handler+0x27e>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <PCD_EP_ISR_Handler+0x270>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e017      	b.n	8002fe2 <PCD_EP_ISR_Handler+0x2ae>
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <PCD_EP_ISR_Handler+0x298>
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	827b      	strh	r3, [r7, #18]
 8002ff4:	8a7b      	ldrh	r3, [r7, #18]
 8002ff6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ffa:	827b      	strh	r3, [r7, #18]
 8002ffc:	8a7b      	ldrh	r3, [r7, #18]
 8002ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003002:	827b      	strh	r3, [r7, #18]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	8a7b      	ldrh	r3, [r7, #18]
 800300a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301a:	b29b      	uxth	r3, r3
 800301c:	8013      	strh	r3, [r2, #0]
 800301e:	e17b      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003032:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003036:	2b00      	cmp	r3, #0
 8003038:	f280 80ea 	bge.w	8003210 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003052:	4013      	ands	r3, r2
 8003054:	853b      	strh	r3, [r7, #40]	; 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003066:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306a:	b292      	uxth	r2, r2
 800306c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800306e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	7b1b      	ldrb	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d122      	bne.n	80030d2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	3306      	adds	r3, #6
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8087 	beq.w	80031cc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	6959      	ldr	r1, [r3, #20]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	88da      	ldrh	r2, [r3, #6]
 80030ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030cc:	f004 fefd 	bl	8007eca <USB_ReadPMA>
 80030d0:	e07c      	b.n	80031cc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	78db      	ldrb	r3, [r3, #3]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d108      	bne.n	80030ec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80030da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030dc:	461a      	mov	r2, r3
 80030de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f927 	bl	8003334 <HAL_PCD_EP_DB_Receive>
 80030e6:	4603      	mov	r3, r0
 80030e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030ea:	e06f      	b.n	80031cc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	847b      	strh	r3, [r7, #34]	; 0x22
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003128:	b29b      	uxth	r3, r3
 800312a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d021      	beq.n	800318a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	3302      	adds	r3, #2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02a      	beq.n	80031cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	6959      	ldr	r1, [r3, #20]
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	891a      	ldrh	r2, [r3, #8]
 8003182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003184:	f004 fea1 	bl	8007eca <USB_ReadPMA>
 8003188:	e020      	b.n	80031cc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	3306      	adds	r3, #6
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	6959      	ldr	r1, [r3, #20]
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	895a      	ldrh	r2, [r3, #10]
 80031c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c8:	f004 fe7f 	bl	8007eca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031d2:	441a      	add	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031de:	441a      	add	r2, r3
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <PCD_EP_ISR_Handler+0x4c2>
 80031ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d206      	bcs.n	8003204 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f006 fc6b 	bl	8009ad8 <HAL_PCD_DataOutStageCallback>
 8003202:	e005      	b.n	8003210 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fea2 	bl	8005f54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d07e      	beq.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800321a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003248:	843b      	strh	r3, [r7, #32]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	8c3b      	ldrh	r3, [r7, #32]
 800325a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003262:	b29b      	uxth	r3, r3
 8003264:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	78db      	ldrb	r3, [r3, #3]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d00c      	beq.n	8003288 <PCD_EP_ISR_Handler+0x554>
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800327a:	2b02      	cmp	r3, #2
 800327c:	d146      	bne.n	800330c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800327e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d141      	bne.n	800330c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	3302      	adds	r3, #2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	8bfb      	ldrh	r3, [r7, #30]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d906      	bls.n	80032ca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	8bfb      	ldrh	r3, [r7, #30]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e002      	b.n	80032d0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f006 fc15 	bl	8009b0e <HAL_PCD_DataInStageCallback>
 80032e4:	e018      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	8bfb      	ldrh	r3, [r7, #30]
 80032ec:	441a      	add	r2, r3
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	8bfb      	ldrh	r3, [r7, #30]
 80032f8:	441a      	add	r2, r3
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fe25 	bl	8005f54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800330a:	e005      	b.n	8003318 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800330c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800330e:	461a      	mov	r2, r3
 8003310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f91b 	bl	800354e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003320:	b29b      	uxth	r3, r3
 8003322:	b21b      	sxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	f6ff ad0a 	blt.w	8002d3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3738      	adds	r7, #56	; 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07e      	beq.n	800344a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	3302      	adds	r3, #2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003374:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	429a      	cmp	r2, r3
 800337e:	d306      	bcc.n	800338e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	8b7b      	ldrh	r3, [r7, #26]
 8003386:	1ad2      	subs	r2, r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	619a      	str	r2, [r3, #24]
 800338c:	e002      	b.n	8003394 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d123      	bne.n	80033e4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	833b      	strh	r3, [r7, #24]
 80033b8:	8b3b      	ldrh	r3, [r7, #24]
 80033ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033be:	833b      	strh	r3, [r7, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	8b3b      	ldrh	r3, [r7, #24]
 80033d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01f      	beq.n	800342e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	82fb      	strh	r3, [r7, #22]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800342e:	8b7b      	ldrh	r3, [r7, #26]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8087 	beq.w	8003544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6959      	ldr	r1, [r3, #20]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	891a      	ldrh	r2, [r3, #8]
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	f004 fd41 	bl	8007eca <USB_ReadPMA>
 8003448:	e07c      	b.n	8003544 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	3306      	adds	r3, #6
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003472:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	8b7b      	ldrh	r3, [r7, #26]
 800347a:	429a      	cmp	r2, r3
 800347c:	d306      	bcc.n	800348c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	8b7b      	ldrh	r3, [r7, #26]
 8003484:	1ad2      	subs	r2, r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	619a      	str	r2, [r3, #24]
 800348a:	e002      	b.n	8003492 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d123      	bne.n	80034e2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b4:	83fb      	strh	r3, [r7, #30]
 80034b6:	8bfb      	ldrh	r3, [r7, #30]
 80034b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034bc:	83fb      	strh	r3, [r7, #30]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	8bfb      	ldrh	r3, [r7, #30]
 80034ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034de:	b29b      	uxth	r3, r3
 80034e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11f      	bne.n	800352c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	83bb      	strh	r3, [r7, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	8bbb      	ldrh	r3, [r7, #28]
 8003518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003528:	b29b      	uxth	r3, r3
 800352a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800352c:	8b7b      	ldrh	r3, [r7, #26]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6959      	ldr	r1, [r3, #20]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	895a      	ldrh	r2, [r3, #10]
 800353e:	8b7b      	ldrh	r3, [r7, #26]
 8003540:	f004 fcc3 	bl	8007eca <USB_ReadPMA>
    }
  }

  return count;
 8003544:	8b7b      	ldrh	r3, [r7, #26]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b0a2      	sub	sp, #136	; 0x88
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 81c7 	beq.w	80038f6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	3302      	adds	r3, #2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800359c:	429a      	cmp	r2, r3
 800359e:	d907      	bls.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e002      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80b9 	bne.w	8003732 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d126      	bne.n	8003616 <HAL_PCD_EP_DB_Transmit+0xc8>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	4413      	add	r3, r2
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	011a      	lsls	r2, r3, #4
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	4413      	add	r3, r2
 80035ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360e:	b29a      	uxth	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	e01a      	b.n	800364c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d116      	bne.n	800364c <HAL_PCD_EP_DB_Transmit+0xfe>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	4413      	add	r3, r2
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	011a      	lsls	r2, r3, #4
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	4413      	add	r3, r2
 8003640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d126      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003668:	b29b      	uxth	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	011a      	lsls	r2, r3, #4
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368c:	b29a      	uxth	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	801a      	strh	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e017      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d113      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	4413      	add	r3, r2
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	011a      	lsls	r2, r3, #4
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f006 fa15 	bl	8009b0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 82d4 	beq.w	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	827b      	strh	r3, [r7, #18]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372c:	b29b      	uxth	r3, r3
 800372e:	8013      	strh	r3, [r2, #0]
 8003730:	e2b2      	b.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	441a      	add	r2, r3
 8003768:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800376c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377c:	b29b      	uxth	r3, r3
 800377e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 8286 	bne.w	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003794:	441a      	add	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a2:	441a      	add	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d309      	bcc.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	1ad2      	subs	r2, r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e015      	b.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80037d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037de:	e009      	b.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2200      	movs	r2, #0
 80037f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d155      	bne.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x35a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	4413      	add	r3, r2
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	4413      	add	r3, r2
 800381e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d112      	bne.n	8003850 <HAL_PCD_EP_DB_Transmit+0x302>
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003834:	b29a      	uxth	r2, r3
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003848:	b29a      	uxth	r2, r3
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	e047      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003852:	2b3e      	cmp	r3, #62	; 0x3e
 8003854:	d811      	bhi.n	800387a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48
 800385c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_PCD_EP_DB_Transmit+0x31e>
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	3301      	adds	r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	b29b      	uxth	r3, r3
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	b29a      	uxth	r2, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e032      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x392>
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_PCD_EP_DB_Transmit+0x342>
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388c:	3b01      	subs	r3, #1
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003892:	b29b      	uxth	r3, r3
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	b29b      	uxth	r3, r3
 8003898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e01b      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d117      	bne.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	; 0x40
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c4:	4413      	add	r3, r2
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	011a      	lsls	r2, r3, #4
 80038ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d0:	4413      	add	r3, r2
 80038d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6959      	ldr	r1, [r3, #20]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	891a      	ldrh	r2, [r3, #8]
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f004 faa6 	bl	8007e40 <USB_WritePMA>
 80038f4:	e1d0      	b.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	3306      	adds	r3, #6
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800392a:	429a      	cmp	r2, r3
 800392c:	d307      	bcc.n	800393e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	619a      	str	r2, [r3, #24]
 800393c:	e002      	b.n	8003944 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 80c4 	bne.w	8003ad6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d126      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x456>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003964:	b29b      	uxth	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	4413      	add	r3, r2
 800396c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	011a      	lsls	r2, r3, #4
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	4413      	add	r3, r2
 8003978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800397c:	66bb      	str	r3, [r7, #104]	; 0x68
 800397e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003988:	b29a      	uxth	r2, r3
 800398a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800399c:	b29a      	uxth	r2, r3
 800399e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	e01a      	b.n	80039da <HAL_PCD_EP_DB_Transmit+0x48c>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d116      	bne.n	80039da <HAL_PCD_EP_DB_Transmit+0x48c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	677b      	str	r3, [r7, #116]	; 0x74
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c0:	4413      	add	r3, r2
 80039c2:	677b      	str	r3, [r7, #116]	; 0x74
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	011a      	lsls	r2, r3, #4
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d2:	673b      	str	r3, [r7, #112]	; 0x70
 80039d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d6:	2200      	movs	r2, #0
 80039d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	67bb      	str	r3, [r7, #120]	; 0x78
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d12f      	bne.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a00:	4413      	add	r3, r2
 8003a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	011a      	lsls	r2, r3, #4
 8003a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a10:	4413      	add	r3, r2
 8003a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e017      	b.n	8003a78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d113      	bne.n	8003a78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a5e:	4413      	add	r3, r2
 8003a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	011a      	lsls	r2, r3, #4
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a74:	2200      	movs	r2, #0
 8003a76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f006 f845 	bl	8009b0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 8104 	bne.w	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]
 8003ad4:	e0e0      	b.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d121      	bne.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 80b4 	bne.w	8003c98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b38:	441a      	add	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b46:	441a      	add	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d309      	bcc.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	621a      	str	r2, [r3, #32]
 8003b6a:	e015      	b.n	8003b98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b82:	e009      	b.n	8003b98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d155      	bne.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x704>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bba:	4413      	add	r3, r2
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	011a      	lsls	r2, r3, #4
 8003bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d112      	bne.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e044      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x736>
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8003bfe:	d811      	bhi.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	657b      	str	r3, [r7, #84]	; 0x54
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c12:	3301      	adds	r3, #1
 8003c14:	657b      	str	r3, [r7, #84]	; 0x54
 8003c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e02f      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	657b      	str	r3, [r7, #84]	; 0x54
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c36:	3b01      	subs	r3, #1
 8003c38:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	029b      	lsls	r3, r3, #10
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	e018      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d114      	bne.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c68:	4413      	add	r3, r2
 8003c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	011a      	lsls	r2, r3, #4
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	4413      	add	r3, r2
 8003c76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	895a      	ldrh	r2, [r3, #10]
 8003c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f004 f8d4 	bl	8007e40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb2:	823b      	strh	r3, [r7, #16]
 8003cb4:	8a3b      	ldrh	r3, [r7, #16]
 8003cb6:	f083 0310 	eor.w	r3, r3, #16
 8003cba:	823b      	strh	r3, [r7, #16]
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	f083 0320 	eor.w	r3, r3, #32
 8003cc2:	823b      	strh	r3, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	8a3b      	ldrh	r3, [r7, #16]
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3788      	adds	r7, #136	; 0x88
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	817b      	strh	r3, [r7, #10]
 8003d00:	4613      	mov	r3, r2
 8003d02:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d10:	897b      	ldrh	r3, [r7, #10]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e009      	b.n	8003d3c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d28:	897a      	ldrh	r2, [r7, #10]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d3c:	893b      	ldrh	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d107      	bne.n	8003d52 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	80da      	strh	r2, [r3, #6]
 8003d50:	e00b      	b.n	8003d6a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2201      	movs	r2, #1
 8003d56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e272      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8087 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d98:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d00c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003da4:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d112      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
 8003db0:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbe:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d168      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e24c      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x76>
 8003de0:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7f      	ldr	r2, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e02e      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x98>
 8003df6:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a7a      	ldr	r2, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b78      	ldr	r3, [pc, #480]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a77      	ldr	r2, [pc, #476]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xbc>
 8003e1a:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a71      	ldr	r2, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e34:	4b6b      	ldr	r3, [pc, #428]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6a      	ldr	r2, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fff4 	bl	8001e40 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fff0 	bl	8001e40 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e200      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe4>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ffe0 	bl	8001e40 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd ffdc 	bl	8001e40 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1ec      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x10c>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb2:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x18c>
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x176>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c0      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4939      	ldr	r1, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd ff95 	bl	8001e40 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd ff91 	bl	8001e40 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a1      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4927      	ldr	r1, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_RCC_OscConfig+0x270>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd ff74 	bl	8001e40 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd ff70 	bl	8001e40 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e180      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03a      	beq.n	8003ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7fd ff54 	bl	8001e40 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd ff50 	bl	8001e40 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e160      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f000 faa6 	bl	800450c <RCC_Delay>
 8003fc0:	e01c      	b.n	8003ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc8:	f7fd ff3a 	bl	8001e40 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fce:	e00f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd ff36 	bl	8001e40 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d908      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e146      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	42420000 	.word	0x42420000
 8003fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b92      	ldr	r3, [pc, #584]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e9      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a6 	beq.w	8004156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b8b      	ldr	r3, [pc, #556]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b88      	ldr	r3, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a87      	ldr	r2, [pc, #540]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b85      	ldr	r3, [pc, #532]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b82      	ldr	r3, [pc, #520]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7e      	ldr	r2, [pc, #504]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fd fef7 	bl	8001e40 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd fef3 	bl	8001e40 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	; 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e103      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x312>
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a6e      	ldr	r2, [pc, #440]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6213      	str	r3, [r2, #32]
 8004088:	e02d      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x334>
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6213      	str	r3, [r2, #32]
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	e01c      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_OscConfig+0x356>
 80040b4:	4b61      	ldr	r3, [pc, #388]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a60      	ldr	r2, [pc, #384]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040ba:	f043 0304 	orr.w	r3, r3, #4
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	e00b      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 80040ce:	4b5b      	ldr	r3, [pc, #364]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a5a      	ldr	r2, [pc, #360]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	4b58      	ldr	r3, [pc, #352]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a57      	ldr	r2, [pc, #348]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fd fea7 	bl	8001e40 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fd fea3 	bl	8001e40 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e0b1      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ee      	beq.n	80040f6 <HAL_RCC_OscConfig+0x37e>
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fd fe91 	bl	8001e40 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fd fe8d 	bl	8001e40 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e09b      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ee      	bne.n	8004122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414a:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004160:	4b36      	ldr	r3, [pc, #216]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d061      	beq.n	8004230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d146      	bne.n	8004202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fd fe61 	bl	8001e40 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd fe5d 	bl	8001e40 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e06d      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d108      	bne.n	80041bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4921      	ldr	r1, [pc, #132]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a19      	ldr	r1, [r3, #32]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	430b      	orrs	r3, r1
 80041ce:	491b      	ldr	r1, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fd fe31 	bl	8001e40 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fd fe2d 	bl	8001e40 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e03d      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46a>
 8004200:	e035      	b.n	800426e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd fe1a 	bl	8001e40 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd fe16 	bl	8001e40 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e026      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x498>
 800422e:	e01e      	b.n	800426e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e019      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x500>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0d0      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b67      	ldr	r3, [pc, #412]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4965      	ldr	r1, [pc, #404]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d040      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d115      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e073      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06b      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4936      	ldr	r1, [pc, #216]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fd fd68 	bl	8001e40 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fd fd64 	bl	8001e40 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e053      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d210      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4922      	ldr	r1, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490a      	ldr	r1, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1cc>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_ClockConfig+0x1d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fcc6 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	0800aa28 	.word	0x0800aa28
 8004448:	2000022c 	.word	0x2000022c
 800444c:	20000230 	.word	0x20000230

08004450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b490      	push	{r4, r7}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_GetSysClockFreq+0xac>)
 8004458:	1d3c      	adds	r4, r7, #4
 800445a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800445c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004460:	f240 2301 	movw	r3, #513	; 0x201
 8004464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_RCC_GetSysClockFreq+0xb0>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b04      	cmp	r3, #4
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x40>
 800448a:	2b08      	cmp	r3, #8
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x46>
 800448e:	e02b      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004492:	623b      	str	r3, [r7, #32]
      break;
 8004494:	e02b      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	0c9b      	lsrs	r3, r3, #18
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3328      	adds	r3, #40	; 0x28
 80044a0:	443b      	add	r3, r7
 80044a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0c5b      	lsrs	r3, r3, #17
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	3328      	adds	r3, #40	; 0x28
 80044be:	443b      	add	r3, r7
 80044c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044ca:	fb03 f202 	mul.w	r2, r3, r2
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	e004      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	623b      	str	r3, [r7, #32]
      break;
 80044e6:	e002      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044ea:	623b      	str	r3, [r7, #32]
      break;
 80044ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ee:	6a3b      	ldr	r3, [r7, #32]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc90      	pop	{r4, r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	0800a9e0 	.word	0x0800a9e0
 8004500:	40021000 	.word	0x40021000
 8004504:	007a1200 	.word	0x007a1200
 8004508:	003d0900 	.word	0x003d0900

0800450c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <RCC_Delay+0x34>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <RCC_Delay+0x38>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0a5b      	lsrs	r3, r3, #9
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004528:	bf00      	nop
  }
  while (Delay --);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	60fa      	str	r2, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f9      	bne.n	8004528 <RCC_Delay+0x1c>
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	2000022c 	.word	0x2000022c
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d07d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b4c      	ldr	r3, [pc, #304]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	4a4b      	ldr	r2, [pc, #300]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	61d3      	str	r3, [r2, #28]
 8004580:	4b49      	ldr	r3, [pc, #292]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d118      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459c:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a42      	ldr	r2, [pc, #264]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a8:	f7fd fc4a 	bl	8001e40 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	e008      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fd fc46 	bl	8001e40 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e06d      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d027      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fc:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004602:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fd fc15 	bl	8001e40 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fd fc11 	bl	8001e40 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e036      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ee      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4917      	ldr	r1, [pc, #92]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	4313      	orrs	r3, r2
 800464c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	490b      	ldr	r1, [pc, #44]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4904      	ldr	r1, [pc, #16]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42420440 	.word	0x42420440

080046b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e076      	b.n	80047b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d6:	d009      	beq.n	80046ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
 80046de:	e005      	b.n	80046ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc f89c 	bl	8000844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0c1a      	lsrs	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f002 0204 	and.w	r2, r2, #4
 8004792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_SPI_Transmit+0x22>
 80047da:	2302      	movs	r3, #2
 80047dc:	e126      	b.n	8004a2c <HAL_SPI_Transmit+0x270>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e6:	f7fd fb2b 	bl	8001e40 <HAL_GetTick>
 80047ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
 80047fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004800:	e10b      	b.n	8004a1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_Transmit+0x52>
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004812:	e102      	b.n	8004a1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2203      	movs	r2, #3
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d10f      	bne.n	800487c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d007      	beq.n	800489a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a2:	d14b      	bne.n	800493c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_SPI_Transmit+0xf6>
 80048ac:	8afb      	ldrh	r3, [r7, #22]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d13e      	bne.n	8004930 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048d6:	e02b      	b.n	8004930 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d112      	bne.n	800490c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
 800490a:	e011      	b.n	8004930 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490c:	f7fd fa98 	bl	8001e40 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d803      	bhi.n	8004924 <HAL_SPI_Transmit+0x168>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004922:	d102      	bne.n	800492a <HAL_SPI_Transmit+0x16e>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800492e:	e074      	b.n	8004a1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ce      	bne.n	80048d8 <HAL_SPI_Transmit+0x11c>
 800493a:	e04c      	b.n	80049d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_Transmit+0x18e>
 8004944:	8afb      	ldrh	r3, [r7, #22]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d140      	bne.n	80049cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004970:	e02c      	b.n	80049cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d113      	bne.n	80049a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80049a6:	e011      	b.n	80049cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a8:	f7fd fa4a 	bl	8001e40 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d803      	bhi.n	80049c0 <HAL_SPI_Transmit+0x204>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x20a>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049ca:	e026      	b.n	8004a1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1cd      	bne.n	8004972 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f8b2 	bl	8004b44 <SPI_EndRxTxTransaction>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e000      	b.n	8004a1a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a44:	f7fd f9fc 	bl	8001e40 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a54:	f7fd f9f4 	bl	8001e40 <HAL_GetTick>
 8004a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	015b      	lsls	r3, r3, #5
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6a:	e054      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a72:	d050      	beq.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a74:	f7fd f9e4 	bl	8001e40 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d902      	bls.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d13d      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d111      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d004      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d107      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d10f      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e017      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d19b      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000022c 	.word	0x2000022c

08004b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff ff6a 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e000      	b.n	8004b78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e041      	b.n	8004c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fb fe8a 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 fa9e 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d001      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e03a      	b.n	8004cae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_TIM_Base_Start_IT+0x98>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x58>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x58>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_TIM_Base_Start_IT+0x9c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x58>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d010      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	e007      	b.n	8004cac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800

08004cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <HAL_TIM_Base_Stop_IT+0x48>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	f240 4344 	movw	r3, #1092	; 0x444
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_Base_Stop_IT+0x48>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9b1 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f9a4 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9b3 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f987 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f97a 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f989 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0208 	mvn.w	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f95d 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f950 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f95f 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0210 	mvn.w	r2, #16
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f933 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f926 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f935 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fb fa2c 	bl	80002fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa77 	bl	80053be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8f9 	bl	80050ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0220 	mvn.w	r2, #32
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa42 	bl	80053ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0b3      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x180>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd0>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	f000 8085 	beq.w	800509c <HAL_TIM_ConfigClockSource+0x16c>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004f98:	2b70      	cmp	r3, #112	; 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xa2>
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fa0:	2b60      	cmp	r3, #96	; 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x116>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fa8:	2b50      	cmp	r3, #80	; 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xf6>
 8004fac:	2b50      	cmp	r3, #80	; 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x136>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 f966 	bl	80052b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04e      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f000 f94f 	bl	80052b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 f8c6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f91d 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8005044:	e02b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 f8e4 	bl	8005220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f90d 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8005064:	e01b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f8a6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f8fd 	bl	800527e <TIM_ITRx_SetConfig>
      break;
 8005084:	e00b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 f8f4 	bl	800527e <TIM_ITRx_SetConfig>
        break;
 8005096:	e002      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800509c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_Base_SetConfig+0xb8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x30>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x30>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a26      	ldr	r2, [pc, #152]	; (80051bc <TIM_Base_SetConfig+0xbc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x30>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <TIM_Base_SetConfig+0xb8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_Base_SetConfig+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d007      	beq.n	8005162 <TIM_Base_SetConfig+0x62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <TIM_Base_SetConfig+0xbc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_Base_SetConfig+0x62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <TIM_Base_SetConfig+0xb8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800

080051c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr

08005220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f023 0210 	bic.w	r2, r3, #16
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800524a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	031b      	lsls	r3, r3, #12
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800525c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	f043 0307 	orr.w	r3, r3, #7
 80052a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b087      	sub	sp, #28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	021a      	lsls	r2, r3, #8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	609a      	str	r2, [r3, #8]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005304:	2302      	movs	r3, #2
 8005306:	e046      	b.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d009      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10c      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800

080053ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 0014 	add.w	r0, r7, #20
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr

080053f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005400:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005404:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005424:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005428:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	b29b      	uxth	r3, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	b29b      	uxth	r3, r3
 800543a:	4013      	ands	r3, r2
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 0014 	add.w	r0, r7, #20
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	b004      	add	sp, #16
 80054a6:	4770      	bx	lr

080054a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b09b      	sub	sp, #108	; 0x6c
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	78db      	ldrb	r3, [r3, #3]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d81f      	bhi.n	800551a <USB_ActivateEndpoint+0x72>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <USB_ActivateEndpoint+0x38>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005523 	.word	0x08005523
 80054ec:	080054ff 	.word	0x080054ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054fc:	e012      	b.n	8005524 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005502:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800550a:	e00b      	b.n	8005524 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800550c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005514:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005518:	e004      	b.n	8005524 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005520:	e000      	b.n	8005524 <USB_ActivateEndpoint+0x7c>
      break;
 8005522:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	b29a      	uxth	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	4313      	orrs	r3, r2
 8005566:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	b29b      	uxth	r3, r3
 800558a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	7b1b      	ldrb	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8149 	bne.w	8005828 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8084 	beq.w	80056a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	88db      	ldrh	r3, [r3, #6]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	81fb      	strh	r3, [r7, #14]
 80055e2:	89fb      	ldrh	r3, [r7, #14]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <USB_ActivateEndpoint+0x17c>
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	81bb      	strh	r3, [r7, #12]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	89bb      	ldrh	r3, [r7, #12]
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d020      	beq.n	800566e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	813b      	strh	r3, [r7, #8]
 8005644:	893b      	ldrh	r3, [r7, #8]
 8005646:	f083 0320 	eor.w	r3, r3, #32
 800564a:	813b      	strh	r3, [r7, #8]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	893b      	ldrh	r3, [r7, #8]
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
 800566c:	e27f      	b.n	8005b6e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	897b      	ldrh	r3, [r7, #10]
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
 80056a6:	e262      	b.n	8005b6e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	4413      	add	r3, r2
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	011a      	lsls	r2, r3, #4
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	88db      	ldrh	r3, [r3, #6]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	4413      	add	r3, r2
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d112      	bne.n	800572e <USB_ActivateEndpoint+0x286>
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005712:	b29a      	uxth	r2, r3
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005726:	b29a      	uxth	r2, r3
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e02f      	b.n	800578e <USB_ActivateEndpoint+0x2e6>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b3e      	cmp	r3, #62	; 0x3e
 8005734:	d813      	bhi.n	800575e <USB_ActivateEndpoint+0x2b6>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	663b      	str	r3, [r7, #96]	; 0x60
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <USB_ActivateEndpoint+0x2a8>
 800574a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800574c:	3301      	adds	r3, #1
 800574e:	663b      	str	r3, [r7, #96]	; 0x60
 8005750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005752:	b29b      	uxth	r3, r3
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	b29a      	uxth	r2, r3
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e017      	b.n	800578e <USB_ActivateEndpoint+0x2e6>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <USB_ActivateEndpoint+0x2d0>
 8005772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005774:	3b01      	subs	r3, #1
 8005776:	663b      	str	r3, [r7, #96]	; 0x60
 8005778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577a:	b29b      	uxth	r3, r3
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005788:	b29a      	uxth	r2, r3
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	83fb      	strh	r3, [r7, #30]
 800579c:	8bfb      	ldrh	r3, [r7, #30]
 800579e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01b      	beq.n	80057de <USB_ActivateEndpoint+0x336>
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	83bb      	strh	r3, [r7, #28]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	8bbb      	ldrh	r3, [r7, #28]
 80057ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057da:	b29b      	uxth	r3, r3
 80057dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f4:	837b      	strh	r3, [r7, #26]
 80057f6:	8b7b      	ldrh	r3, [r7, #26]
 80057f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057fc:	837b      	strh	r3, [r7, #26]
 80057fe:	8b7b      	ldrh	r3, [r7, #26]
 8005800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005804:	837b      	strh	r3, [r7, #26]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	8b7b      	ldrh	r3, [r7, #26]
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800581e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]
 8005826:	e1a2      	b.n	8005b6e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	65bb      	str	r3, [r7, #88]	; 0x58
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005874:	4413      	add	r3, r2
 8005876:	65bb      	str	r3, [r7, #88]	; 0x58
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	011a      	lsls	r2, r3, #4
 800587e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005880:	4413      	add	r3, r2
 8005882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005886:	657b      	str	r3, [r7, #84]	; 0x54
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	891b      	ldrh	r3, [r3, #8]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a8:	4413      	add	r3, r2
 80058aa:	653b      	str	r3, [r7, #80]	; 0x50
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	011a      	lsls	r2, r3, #4
 80058b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	895b      	ldrh	r3, [r3, #10]
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8091 	bne.w	80059f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80058e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01b      	beq.n	8005926 <USB_ActivateEndpoint+0x47e>
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005904:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	873b      	strh	r3, [r7, #56]	; 0x38
 8005934:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01b      	beq.n	8005976 <USB_ActivateEndpoint+0x4ce>
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005972:	b29b      	uxth	r3, r3
 8005974:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800598e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005990:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005994:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005996:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005998:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800599c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	441a      	add	r2, r3
 80059a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80059e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8013      	strh	r3, [r2, #0]
 80059f6:	e0ba      	b.n	8005b6e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01d      	beq.n	8005a50 <USB_ActivateEndpoint+0x5a8>
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01d      	beq.n	8005aa8 <USB_ActivateEndpoint+0x600>
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	78db      	ldrb	r3, [r3, #3]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d024      	beq.n	8005afa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ace:	f083 0320 	eor.w	r3, r3, #32
 8005ad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e01d      	b.n	8005b36 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	376c      	adds	r7, #108	; 0x6c
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b08d      	sub	sp, #52	; 0x34
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	7b1b      	ldrb	r3, [r3, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 808e 	bne.w	8005cac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d044      	beq.n	8005c22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	81bb      	strh	r3, [r7, #12]
 8005ba6:	89bb      	ldrh	r3, [r7, #12]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <USB_DeactivateEndpoint+0x6c>
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	817b      	strh	r3, [r7, #10]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	897b      	ldrh	r3, [r7, #10]
 8005bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	813b      	strh	r3, [r7, #8]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	893b      	ldrh	r3, [r7, #8]
 8005c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	8013      	strh	r3, [r2, #0]
 8005c20:	e192      	b.n	8005f48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	827b      	strh	r3, [r7, #18]
 8005c30:	8a7b      	ldrh	r3, [r7, #18]
 8005c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01b      	beq.n	8005c72 <USB_DeactivateEndpoint+0xf6>
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	823b      	strh	r3, [r7, #16]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	441a      	add	r2, r3
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c88:	81fb      	strh	r3, [r7, #14]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	89fb      	ldrh	r3, [r7, #14]
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]
 8005caa:	e14d      	b.n	8005f48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 80a5 	bne.w	8005e00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	843b      	strh	r3, [r7, #32]
 8005cc4:	8c3b      	ldrh	r3, [r7, #32]
 8005cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01b      	beq.n	8005d06 <USB_DeactivateEndpoint+0x18a>
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	83fb      	strh	r3, [r7, #30]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	8bfb      	ldrh	r3, [r7, #30]
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	83bb      	strh	r3, [r7, #28]
 8005d14:	8bbb      	ldrh	r3, [r7, #28]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <USB_DeactivateEndpoint+0x1da>
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d34:	837b      	strh	r3, [r7, #26]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8b7b      	ldrh	r3, [r7, #26]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6c:	833b      	strh	r3, [r7, #24]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	8b3b      	ldrh	r3, [r7, #24]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	82fb      	strh	r3, [r7, #22]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	82bb      	strh	r3, [r7, #20]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	8abb      	ldrh	r3, [r7, #20]
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
 8005dfe:	e0a3      	b.n	8005f48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01b      	beq.n	8005e50 <USB_DeactivateEndpoint+0x2d4>
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <USB_DeactivateEndpoint+0x324>
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3734      	adds	r7, #52	; 0x34
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b0cc      	sub	sp, #304	; 0x130
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f62:	6018      	str	r0, [r3, #0]
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	f041 817d 	bne.w	800727a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d908      	bls.n	8005fae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005fac:	e007      	b.n	8005fbe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	7b1b      	ldrb	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d152      	bne.n	8006074 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6959      	ldr	r1, [r3, #20]
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	88da      	ldrh	r2, [r3, #6]
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ff0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ff4:	6800      	ldr	r0, [r0, #0]
 8005ff6:	f001 ff23 	bl	8007e40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006002:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006006:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006024:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006028:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800602c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	440a      	add	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	011a      	lsls	r2, r3, #4
 8006044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006048:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4413      	add	r3, r2
 8006050:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	b29a      	uxth	r2, r3
 8006064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006068:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	f001 b8b5 	b.w	80071de <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b02      	cmp	r3, #2
 8006082:	f040 84c6 	bne.w	8006a12 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a1a      	ldr	r2, [r3, #32]
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	f240 8443 	bls.w	800692a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	1ad2      	subs	r2, r2, r3
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 823e 	beq.w	80065c2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800614e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006152:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 809a 	bne.w	80062a0 <USB_EPStartXfer+0x34c>
 800616c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006178:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	4619      	mov	r1, r3
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800619e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	440a      	add	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d122      	bne.n	800621e <USB_EPStartXfer+0x2ca>
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29a      	uxth	r2, r3
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e079      	b.n	8006312 <USB_EPStartXfer+0x3be>
 800621e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006222:	2b3e      	cmp	r3, #62	; 0x3e
 8006224:	d81b      	bhi.n	800625e <USB_EPStartXfer+0x30a>
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <USB_EPStartXfer+0x2f2>
 800623c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006240:	3301      	adds	r3, #1
 8006242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800624a:	b29b      	uxth	r3, r3
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	b29a      	uxth	r2, r3
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e059      	b.n	8006312 <USB_EPStartXfer+0x3be>
 800625e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USB_EPStartXfer+0x32a>
 8006274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006278:	3b01      	subs	r3, #1
 800627a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800627e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29b      	uxth	r3, r3
 8006288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006290:	b29a      	uxth	r2, r3
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e038      	b.n	8006312 <USB_EPStartXfer+0x3be>
 80062a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d130      	bne.n	8006312 <USB_EPStartXfer+0x3be>
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4619      	mov	r1, r3
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	440a      	add	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	011a      	lsls	r2, r3, #4
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	b29a      	uxth	r2, r3
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	895b      	ldrh	r3, [r3, #10]
 800631e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006332:	b29b      	uxth	r3, r3
 8006334:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006338:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800633c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006340:	6800      	ldr	r0, [r0, #0]
 8006342:	f001 fd7d 	bl	8007e40 <USB_WritePMA>
            ep->xfer_buff += len;
 8006346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	441a      	add	r2, r3
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a1a      	ldr	r2, [r3, #32]
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	429a      	cmp	r2, r3
 800637e:	d90f      	bls.n	80063a0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	621a      	str	r2, [r3, #32]
 800639e:	e00e      	b.n	80063be <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 809a 	bne.w	8006504 <USB_EPStartXfer+0x5b0>
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006402:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	440a      	add	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4413      	add	r3, r2
 8006426:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d122      	bne.n	8006482 <USB_EPStartXfer+0x52e>
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644e:	b29a      	uxth	r2, r3
 8006450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006454:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006472:	b29a      	uxth	r2, r3
 8006474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006478:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e083      	b.n	800658a <USB_EPStartXfer+0x636>
 8006482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006486:	2b3e      	cmp	r3, #62	; 0x3e
 8006488:	d81b      	bhi.n	80064c2 <USB_EPStartXfer+0x56e>
 800648a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <USB_EPStartXfer+0x556>
 80064a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e063      	b.n	800658a <USB_EPStartXfer+0x636>
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <USB_EPStartXfer+0x58e>
 80064d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064dc:	3b01      	subs	r3, #1
 80064de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e042      	b.n	800658a <USB_EPStartXfer+0x636>
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d13a      	bne.n	800658a <USB_EPStartXfer+0x636>
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800651c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006520:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006542:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006546:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	440a      	add	r2, r1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	011a      	lsls	r2, r3, #4
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4413      	add	r3, r2
 800656a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657c:	b29a      	uxth	r2, r3
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800658a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	891b      	ldrh	r3, [r3, #8]
 8006596:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6959      	ldr	r1, [r3, #20]
 80065a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065b8:	6800      	ldr	r0, [r0, #0]
 80065ba:	f001 fc41 	bl	8007e40 <USB_WritePMA>
 80065be:	f000 be0e 	b.w	80071de <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d16d      	bne.n	80066ae <USB_EPStartXfer+0x75a>
 80065d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	4413      	add	r3, r2
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	011a      	lsls	r2, r3, #4
 8006604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006606:	4413      	add	r3, r2
 8006608:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d112      	bne.n	800663c <USB_EPStartXfer+0x6e8>
 8006616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006620:	b29a      	uxth	r2, r3
 8006622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006634:	b29a      	uxth	r2, r3
 8006636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e063      	b.n	8006704 <USB_EPStartXfer+0x7b0>
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	2b3e      	cmp	r3, #62	; 0x3e
 8006642:	d817      	bhi.n	8006674 <USB_EPStartXfer+0x720>
 8006644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800664e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <USB_EPStartXfer+0x710>
 800665a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800665e:	3301      	adds	r3, #1
 8006660:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006664:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006668:	b29b      	uxth	r3, r3
 800666a:	029b      	lsls	r3, r3, #10
 800666c:	b29a      	uxth	r2, r3
 800666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e047      	b.n	8006704 <USB_EPStartXfer+0x7b0>
 8006674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800667e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <USB_EPStartXfer+0x740>
 800668a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800668e:	3b01      	subs	r3, #1
 8006690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006698:	b29b      	uxth	r3, r3
 800669a:	029b      	lsls	r3, r3, #10
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e02a      	b.n	8006704 <USB_EPStartXfer+0x7b0>
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d122      	bne.n	8006704 <USB_EPStartXfer+0x7b0>
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	653b      	str	r3, [r7, #80]	; 0x50
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066de:	4413      	add	r3, r2
 80066e0:	653b      	str	r3, [r7, #80]	; 0x50
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	011a      	lsls	r2, r3, #4
 80066f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	b29a      	uxth	r2, r3
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	891b      	ldrh	r3, [r3, #8]
 8006710:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6959      	ldr	r1, [r3, #20]
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	b29b      	uxth	r3, r3
 8006726:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800672a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800672e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006732:	6800      	ldr	r0, [r0, #0]
 8006734:	f001 fb84 	bl	8007e40 <USB_WritePMA>
            ep->xfer_buff += len;
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006748:	441a      	add	r2, r3
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	d90f      	bls.n	8006792 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	621a      	str	r2, [r3, #32]
 8006790:	e00e      	b.n	80067b0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2200      	movs	r2, #0
 80067ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	643b      	str	r3, [r7, #64]	; 0x40
 80067bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d16d      	bne.n	80068a8 <USB_EPStartXfer+0x954>
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	4413      	add	r3, r2
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	4413      	add	r3, r2
 8006802:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
 8006808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d112      	bne.n	8006836 <USB_EPStartXfer+0x8e2>
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800681a:	b29a      	uxth	r2, r3
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682e:	b29a      	uxth	r2, r3
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e05d      	b.n	80068f2 <USB_EPStartXfer+0x99e>
 8006836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683a:	2b3e      	cmp	r3, #62	; 0x3e
 800683c:	d817      	bhi.n	800686e <USB_EPStartXfer+0x91a>
 800683e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <USB_EPStartXfer+0x90a>
 8006854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006858:	3301      	adds	r3, #1
 800685a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800685e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006862:	b29b      	uxth	r3, r3
 8006864:	029b      	lsls	r3, r3, #10
 8006866:	b29a      	uxth	r2, r3
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e041      	b.n	80068f2 <USB_EPStartXfer+0x99e>
 800686e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2b00      	cmp	r3, #0
 8006882:	d104      	bne.n	800688e <USB_EPStartXfer+0x93a>
 8006884:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006888:	3b01      	subs	r3, #1
 800688a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800688e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006892:	b29b      	uxth	r3, r3
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	b29b      	uxth	r3, r3
 8006898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	e024      	b.n	80068f2 <USB_EPStartXfer+0x99e>
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d11c      	bne.n	80068f2 <USB_EPStartXfer+0x99e>
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068cc:	4413      	add	r3, r2
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	011a      	lsls	r2, r3, #4
 80068de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	895b      	ldrh	r3, [r3, #10]
 80068fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6959      	ldr	r1, [r3, #20]
 800690e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006912:	b29b      	uxth	r3, r3
 8006914:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006918:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800691c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006920:	6800      	ldr	r0, [r0, #0]
 8006922:	f001 fa8d 	bl	8007e40 <USB_WritePMA>
 8006926:	f000 bc5a 	b.w	80071de <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b6:	4413      	add	r3, r2
 80069b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	011a      	lsls	r2, r3, #4
 80069c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	891b      	ldrh	r3, [r3, #8]
 80069e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6959      	ldr	r1, [r3, #20]
 80069f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	f001 fa18 	bl	8007e40 <USB_WritePMA>
 8006a10:	e3e5      	b.n	80071de <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 81bc 	beq.w	8006e2c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d16d      	bne.n	8006bae <USB_EPStartXfer+0xc5a>
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af2:	4413      	add	r3, r2
 8006af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	011a      	lsls	r2, r3, #4
 8006b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d112      	bne.n	8006b3c <USB_EPStartXfer+0xbe8>
 8006b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e060      	b.n	8006bfe <USB_EPStartXfer+0xcaa>
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	2b3e      	cmp	r3, #62	; 0x3e
 8006b42:	d817      	bhi.n	8006b74 <USB_EPStartXfer+0xc20>
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USB_EPStartXfer+0xc10>
 8006b5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e044      	b.n	8006bfe <USB_EPStartXfer+0xcaa>
 8006b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <USB_EPStartXfer+0xc40>
 8006b8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e027      	b.n	8006bfe <USB_EPStartXfer+0xcaa>
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d11f      	bne.n	8006bfe <USB_EPStartXfer+0xcaa>
 8006bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	011a      	lsls	r2, r3, #4
 8006be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	895b      	ldrh	r3, [r3, #10]
 8006c0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f001 f907 	bl	8007e40 <USB_WritePMA>
          ep->xfer_buff += len;
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c42:	441a      	add	r2, r3
 8006c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d90f      	bls.n	8006c8c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	621a      	str	r2, [r3, #32]
 8006c8a:	e00e      	b.n	8006caa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8295 	beq.w	80071de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d16d      	bne.n	8006da0 <USB_EPStartXfer+0xe4c>
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce4:	4413      	add	r3, r2
 8006ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8006d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <USB_EPStartXfer+0xdda>
 8006d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	e063      	b.n	8006df6 <USB_EPStartXfer+0xea2>
 8006d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d32:	2b3e      	cmp	r3, #62	; 0x3e
 8006d34:	d817      	bhi.n	8006d66 <USB_EPStartXfer+0xe12>
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <USB_EPStartXfer+0xe02>
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	3301      	adds	r3, #1
 8006d52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e047      	b.n	8006df6 <USB_EPStartXfer+0xea2>
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <USB_EPStartXfer+0xe32>
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e02a      	b.n	8006df6 <USB_EPStartXfer+0xea2>
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d122      	bne.n	8006df6 <USB_EPStartXfer+0xea2>
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	673b      	str	r3, [r7, #112]	; 0x70
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd0:	4413      	add	r3, r2
 8006dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	011a      	lsls	r2, r3, #4
 8006de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	891b      	ldrh	r3, [r3, #8]
 8006e02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	f001 f80b 	bl	8007e40 <USB_WritePMA>
 8006e2a:	e1d8      	b.n	80071de <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d178      	bne.n	8006f2e <USB_EPStartXfer+0xfda>
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e60:	4413      	add	r3, r2
 8006e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	011a      	lsls	r2, r3, #4
 8006e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d116      	bne.n	8006eb8 <USB_EPStartXfer+0xf64>
 8006e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e06b      	b.n	8006f90 <USB_EPStartXfer+0x103c>
 8006eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebe:	d818      	bhi.n	8006ef2 <USB_EPStartXfer+0xf9e>
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <USB_EPStartXfer+0xf8c>
 8006ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006eda:	3301      	adds	r3, #1
 8006edc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ee0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e04e      	b.n	8006f90 <USB_EPStartXfer+0x103c>
 8006ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <USB_EPStartXfer+0xfbe>
 8006f08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	e030      	b.n	8006f90 <USB_EPStartXfer+0x103c>
 8006f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d128      	bne.n	8006f90 <USB_EPStartXfer+0x103c>
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f62:	4413      	add	r3, r2
 8006f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	011a      	lsls	r2, r3, #4
 8006f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	891b      	ldrh	r3, [r3, #8]
 8006f9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6959      	ldr	r1, [r3, #20]
 8006fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fb6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fbe:	6800      	ldr	r0, [r0, #0]
 8006fc0:	f000 ff3e 	bl	8007e40 <USB_WritePMA>
          ep->xfer_buff += len;
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695a      	ldr	r2, [r3, #20]
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a1a      	ldr	r2, [r3, #32]
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90f      	bls.n	800701e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6a1a      	ldr	r2, [r3, #32]
 800700a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	621a      	str	r2, [r3, #32]
 800701c:	e00e      	b.n	800703c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2200      	movs	r2, #0
 800703a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800703c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80cc 	beq.w	80071de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d178      	bne.n	8007156 <USB_EPStartXfer+0x1202>
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007088:	4413      	add	r3, r2
 800708a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	011a      	lsls	r2, r3, #4
 800709c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070a0:	4413      	add	r3, r2
 80070a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d116      	bne.n	80070e0 <USB_EPStartXfer+0x118c>
 80070b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070be:	b29a      	uxth	r2, r3
 80070c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	e064      	b.n	80071aa <USB_EPStartXfer+0x1256>
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	2b3e      	cmp	r3, #62	; 0x3e
 80070e6:	d818      	bhi.n	800711a <USB_EPStartXfer+0x11c6>
 80070e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USB_EPStartXfer+0x11b4>
 80070fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007102:	3301      	adds	r3, #1
 8007104:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710c:	b29b      	uxth	r3, r3
 800710e:	029b      	lsls	r3, r3, #10
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e047      	b.n	80071aa <USB_EPStartXfer+0x1256>
 800711a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <USB_EPStartXfer+0x11e6>
 8007130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007134:	3b01      	subs	r3, #1
 8007136:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800713a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29a      	uxth	r2, r3
 800714e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e029      	b.n	80071aa <USB_EPStartXfer+0x1256>
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d121      	bne.n	80071aa <USB_EPStartXfer+0x1256>
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800717c:	4413      	add	r3, r2
 800717e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	011a      	lsls	r2, r3, #4
 8007190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007194:	4413      	add	r3, r2
 8007196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800719a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800719e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	895b      	ldrh	r3, [r3, #10]
 80071b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6959      	ldr	r1, [r3, #20]
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071d8:	6800      	ldr	r0, [r0, #0]
 80071da:	f000 fe31 	bl	8007e40 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007200:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720c:	8013      	strh	r3, [r2, #0]
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800721a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800721e:	8812      	ldrh	r2, [r2, #0]
 8007220:	f082 0210 	eor.w	r2, r2, #16
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800722e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007232:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007236:	8812      	ldrh	r2, [r2, #0]
 8007238:	f082 0220 	eor.w	r2, r2, #32
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]
 8007276:	f000 bc9f 	b.w	8007bb8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	7b1b      	ldrb	r3, [r3, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 80ae 	bne.w	80073e8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699a      	ldr	r2, [r3, #24]
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d917      	bls.n	80072d8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	619a      	str	r2, [r3, #24]
 80072d6:	e00e      	b.n	80072f6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80072d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80072e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800731a:	4413      	add	r3, r2
 800731c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	011a      	lsls	r2, r3, #4
 800732e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007332:	4413      	add	r3, r2
 8007334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800733c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d116      	bne.n	8007372 <USB_EPStartXfer+0x141e>
 8007344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e3e8      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
 8007372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007376:	2b3e      	cmp	r3, #62	; 0x3e
 8007378:	d818      	bhi.n	80073ac <USB_EPStartXfer+0x1458>
 800737a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x1446>
 8007390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800739a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e3cb      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
 80073ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USB_EPStartXfer+0x1478>
 80073c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	029b      	lsls	r3, r3, #10
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	e3ad      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	78db      	ldrb	r3, [r3, #3]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	f040 8200 	bne.w	80077fa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f040 8091 	bne.w	800752e <USB_EPStartXfer+0x15da>
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007430:	4413      	add	r3, r2
 8007432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	011a      	lsls	r2, r3, #4
 8007444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007448:	4413      	add	r3, r2
 800744a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800744e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d116      	bne.n	8007490 <USB_EPStartXfer+0x153c>
 8007462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007486:	b29a      	uxth	r2, r3
 8007488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	e083      	b.n	8007598 <USB_EPStartXfer+0x1644>
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b3e      	cmp	r3, #62	; 0x3e
 800749e:	d820      	bhi.n	80074e2 <USB_EPStartXfer+0x158e>
 80074a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <USB_EPStartXfer+0x157c>
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	3301      	adds	r3, #1
 80074cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	029b      	lsls	r3, r3, #10
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e05a      	b.n	8007598 <USB_EPStartXfer+0x1644>
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <USB_EPStartXfer+0x15be>
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750c:	3b01      	subs	r3, #1
 800750e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007516:	b29b      	uxth	r3, r3
 8007518:	029b      	lsls	r3, r3, #10
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007524:	b29a      	uxth	r2, r3
 8007526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	e034      	b.n	8007598 <USB_EPStartXfer+0x1644>
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d12c      	bne.n	8007598 <USB_EPStartXfer+0x1644>
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800754c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007562:	4413      	add	r3, r2
 8007564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	011a      	lsls	r2, r3, #4
 8007576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800757a:	4413      	add	r3, r2
 800757c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	b29a      	uxth	r2, r3
 8007592:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f040 8091 	bne.w	80076da <USB_EPStartXfer+0x1786>
 80075b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075dc:	4413      	add	r3, r2
 80075de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	011a      	lsls	r2, r3, #4
 80075f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d116      	bne.n	800763c <USB_EPStartXfer+0x16e8>
 800760e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800761a:	b29a      	uxth	r2, r3
 800761c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e07c      	b.n	8007736 <USB_EPStartXfer+0x17e2>
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b3e      	cmp	r3, #62	; 0x3e
 800764a:	d820      	bhi.n	800768e <USB_EPStartXfer+0x173a>
 800764c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <USB_EPStartXfer+0x1728>
 8007672:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007676:	3301      	adds	r3, #1
 8007678:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800767c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007680:	b29b      	uxth	r3, r3
 8007682:	029b      	lsls	r3, r3, #10
 8007684:	b29a      	uxth	r2, r3
 8007686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800768a:	801a      	strh	r2, [r3, #0]
 800768c:	e053      	b.n	8007736 <USB_EPStartXfer+0x17e2>
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <USB_EPStartXfer+0x176a>
 80076b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076b8:	3b01      	subs	r3, #1
 80076ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	029b      	lsls	r3, r3, #10
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076d6:	801a      	strh	r2, [r3, #0]
 80076d8:	e02d      	b.n	8007736 <USB_EPStartXfer+0x17e2>
 80076da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d125      	bne.n	8007736 <USB_EPStartXfer+0x17e2>
 80076ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007700:	4413      	add	r3, r2
 8007702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	011a      	lsls	r2, r3, #4
 8007714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007718:	4413      	add	r3, r2
 800771a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800771e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007734:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 81fe 	beq.w	8007b44 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007768:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800776c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <USB_EPStartXfer+0x182c>
 8007774:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007780:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 81db 	bne.w	8007b44 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800778e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 81d4 	bne.w	8007b44 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800779c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80077c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80077e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8013      	strh	r3, [r2, #0]
 80077f8:	e1a4      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	78db      	ldrb	r3, [r3, #3]
 8007806:	2b01      	cmp	r3, #1
 8007808:	f040 819a 	bne.w	8007b40 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800780c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d917      	bls.n	8007858 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	619a      	str	r2, [r3, #24]
 8007856:	e00e      	b.n	8007876 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d178      	bne.n	8007978 <USB_EPStartXfer+0x1a24>
 8007886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078aa:	4413      	add	r3, r2
 80078ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	011a      	lsls	r2, r3, #4
 80078be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078c2:	4413      	add	r3, r2
 80078c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d116      	bne.n	8007902 <USB_EPStartXfer+0x19ae>
 80078d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e06b      	b.n	80079da <USB_EPStartXfer+0x1a86>
 8007902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007906:	2b3e      	cmp	r3, #62	; 0x3e
 8007908:	d818      	bhi.n	800793c <USB_EPStartXfer+0x19e8>
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USB_EPStartXfer+0x19d6>
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007924:	3301      	adds	r3, #1
 8007926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800792a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800792e:	b29b      	uxth	r3, r3
 8007930:	029b      	lsls	r3, r3, #10
 8007932:	b29a      	uxth	r2, r3
 8007934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	e04e      	b.n	80079da <USB_EPStartXfer+0x1a86>
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <USB_EPStartXfer+0x1a08>
 8007952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007956:	3b01      	subs	r3, #1
 8007958:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800795c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007960:	b29b      	uxth	r3, r3
 8007962:	029b      	lsls	r3, r3, #10
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796e:	b29a      	uxth	r2, r3
 8007970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e030      	b.n	80079da <USB_EPStartXfer+0x1a86>
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d128      	bne.n	80079da <USB_EPStartXfer+0x1a86>
 8007988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ac:	4413      	add	r3, r2
 80079ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	011a      	lsls	r2, r3, #4
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80079ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d178      	bne.n	8007aea <USB_EPStartXfer+0x1b96>
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d116      	bne.n	8007a74 <USB_EPStartXfer+0x1b20>
 8007a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e067      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	2b3e      	cmp	r3, #62	; 0x3e
 8007a7a:	d818      	bhi.n	8007aae <USB_EPStartXfer+0x1b5a>
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <USB_EPStartXfer+0x1b48>
 8007a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a96:	3301      	adds	r3, #1
 8007a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e04a      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <USB_EPStartXfer+0x1b7a>
 8007ac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	029b      	lsls	r3, r3, #10
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	e02c      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d124      	bne.n	8007b44 <USB_EPStartXfer+0x1bf0>
 8007afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b10:	4413      	add	r3, r2
 8007b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	011a      	lsls	r2, r3, #4
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	4413      	add	r3, r2
 8007b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	e001      	b.n	8007b44 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e03a      	b.n	8007bba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b7a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bec:	81bb      	strh	r3, [r7, #12]
 8007bee:	89bb      	ldrh	r3, [r7, #12]
 8007bf0:	f083 0310 	eor.w	r3, r3, #16
 8007bf4:	81bb      	strh	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	441a      	add	r2, r3
 8007c00:	89bb      	ldrh	r3, [r7, #12]
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]
 8007c16:	e01f      	b.n	8007c58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	81fb      	strh	r3, [r7, #14]
 8007c30:	89fb      	ldrh	r3, [r7, #14]
 8007c32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c36:	81fb      	strh	r3, [r7, #14]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	89fb      	ldrh	r3, [r7, #14]
 8007c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	7b1b      	ldrb	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 809d 	bne.w	8007db2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d04c      	beq.n	8007d1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	823b      	strh	r3, [r7, #16]
 8007c8e:	8a3b      	ldrh	r3, [r7, #16]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01b      	beq.n	8007cd0 <USB_EPClearStall+0x6c>
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cae:	81fb      	strh	r3, [r7, #14]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	89fb      	ldrh	r3, [r7, #14]
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	78db      	ldrb	r3, [r3, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d06c      	beq.n	8007db2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	81bb      	strh	r3, [r7, #12]
 8007cf0:	89bb      	ldrh	r3, [r7, #12]
 8007cf2:	f083 0320 	eor.w	r3, r3, #32
 8007cf6:	81bb      	strh	r3, [r7, #12]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	89bb      	ldrh	r3, [r7, #12]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]
 8007d18:	e04b      	b.n	8007db2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	82fb      	strh	r3, [r7, #22]
 8007d28:	8afb      	ldrh	r3, [r7, #22]
 8007d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01b      	beq.n	8007d6a <USB_EPClearStall+0x106>
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	82bb      	strh	r3, [r7, #20]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	8abb      	ldrh	r3, [r7, #20]
 8007d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	827b      	strh	r3, [r7, #18]
 8007d82:	8a7b      	ldrh	r3, [r7, #18]
 8007d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d88:	827b      	strh	r3, [r7, #18]
 8007d8a:	8a7b      	ldrh	r3, [r7, #18]
 8007d8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d90:	827b      	strh	r3, [r7, #18]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8a7b      	ldrh	r3, [r7, #18]
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr

08007dbe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d103      	bne.n	8007dd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2280      	movs	r2, #128	; 0x80
 8007dd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr

08007de4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr

08007e40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b08d      	sub	sp, #52	; 0x34
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	80fb      	strh	r3, [r7, #6]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e56:	88bb      	ldrh	r3, [r7, #4]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	005a      	lsls	r2, r3, #1
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e78:	e01e      	b.n	8007eb8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	3301      	adds	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1dd      	bne.n	8007e7a <USB_WritePMA+0x3a>
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	3734      	adds	r7, #52	; 0x34
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr

08007eca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b08b      	sub	sp, #44	; 0x2c
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	460b      	mov	r3, r1
 8007eda:	80fb      	strh	r3, [r7, #6]
 8007edc:	4613      	mov	r3, r2
 8007ede:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ee0:	88bb      	ldrh	r3, [r7, #4]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	005a      	lsls	r2, r3, #1
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007efc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e01b      	b.n	8007f3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	3302      	adds	r3, #2
 8007f10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	3302      	adds	r3, #2
 8007f34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e0      	bne.n	8007f04 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f42:	88bb      	ldrh	r3, [r7, #4]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f5e:	bf00      	nop
 8007f60:	372c      	adds	r7, #44	; 0x2c
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7c1b      	ldrb	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d115      	bne.n	8007fac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f84:	2202      	movs	r2, #2
 8007f86:	2181      	movs	r1, #129	; 0x81
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fea4 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f98:	2202      	movs	r2, #2
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fe9a 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007faa:	e012      	b.n	8007fd2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	2202      	movs	r2, #2
 8007fb0:	2181      	movs	r1, #129	; 0x81
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fe8f 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fbe:	2340      	movs	r3, #64	; 0x40
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fe86 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	2182      	movs	r1, #130	; 0x82
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 fe7c 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fe4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007fe8:	f001 ff9c 	bl	8009f24 <USBD_static_malloc>
 8007fec:	4602      	mov	r2, r0
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ffe:	2301      	movs	r3, #1
 8008000:	73fb      	strb	r3, [r7, #15]
 8008002:	e026      	b.n	8008052 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7c1b      	ldrb	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008038:	2101      	movs	r1, #1
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f001 ff3c 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008040:	e007      	b.n	8008052 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	2101      	movs	r1, #1
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 ff33 	bl	8009eb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800806c:	2181      	movs	r1, #129	; 0x81
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fe57 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800807a:	2101      	movs	r1, #1
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fe50 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800808a:	2182      	movs	r1, #130	; 0x82
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fe48 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00e      	beq.n	80080c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 ff42 	bl	8009f3c <USBD_static_free>
    pdev->pClassData = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d039      	beq.n	8008168 <USBD_CDC_Setup+0x9e>
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d17f      	bne.n	80081f8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d029      	beq.n	8008154 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b25b      	sxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	da11      	bge.n	800812e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008116:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	88d2      	ldrh	r2, [r2, #6]
 800811c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800811e:	6939      	ldr	r1, [r7, #16]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	88db      	ldrh	r3, [r3, #6]
 8008124:	461a      	mov	r2, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fa09 	bl	800953e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800812c:	e06b      	b.n	8008206 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785a      	ldrb	r2, [r3, #1]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	88db      	ldrh	r3, [r3, #6]
 800813c:	b2da      	uxtb	r2, r3
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008144:	6939      	ldr	r1, [r7, #16]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	461a      	mov	r2, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fa24 	bl	800959a <USBD_CtlPrepareRx>
      break;
 8008152:	e058      	b.n	8008206 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	7850      	ldrb	r0, [r2, #1]
 8008160:	2200      	movs	r2, #0
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	4798      	blx	r3
      break;
 8008166:	e04e      	b.n	8008206 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b0b      	cmp	r3, #11
 800816e:	d02e      	beq.n	80081ce <USBD_CDC_Setup+0x104>
 8008170:	2b0b      	cmp	r3, #11
 8008172:	dc38      	bgt.n	80081e6 <USBD_CDC_Setup+0x11c>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <USBD_CDC_Setup+0xb4>
 8008178:	2b0a      	cmp	r3, #10
 800817a:	d014      	beq.n	80081a6 <USBD_CDC_Setup+0xdc>
 800817c:	e033      	b.n	80081e6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	2b03      	cmp	r3, #3
 8008186:	d107      	bne.n	8008198 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008188:	f107 030c 	add.w	r3, r7, #12
 800818c:	2202      	movs	r2, #2
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f9d4 	bl	800953e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008196:	e02e      	b.n	80081f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f965 	bl	800946a <USBD_CtlError>
            ret = USBD_FAIL;
 80081a0:	2302      	movs	r3, #2
 80081a2:	75fb      	strb	r3, [r7, #23]
          break;
 80081a4:	e027      	b.n	80081f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d107      	bne.n	80081c0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081b0:	f107 030f 	add.w	r3, r7, #15
 80081b4:	2201      	movs	r2, #1
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f9c0 	bl	800953e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081be:	e01a      	b.n	80081f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 f951 	bl	800946a <USBD_CtlError>
            ret = USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
 80081ca:	75fb      	strb	r3, [r7, #23]
          break;
 80081cc:	e013      	b.n	80081f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d00d      	beq.n	80081f4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f945 	bl	800946a <USBD_CtlError>
            ret = USBD_FAIL;
 80081e0:	2302      	movs	r3, #2
 80081e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081e4:	e006      	b.n	80081f4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f93e 	bl	800946a <USBD_CtlError>
          ret = USBD_FAIL;
 80081ee:	2302      	movs	r3, #2
 80081f0:	75fb      	strb	r3, [r7, #23]
          break;
 80081f2:	e000      	b.n	80081f6 <USBD_CDC_Setup+0x12c>
          break;
 80081f4:	bf00      	nop
      }
      break;
 80081f6:	e006      	b.n	8008206 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 f935 	bl	800946a <USBD_CtlError>
      ret = USBD_FAIL;
 8008200:	2302      	movs	r3, #2
 8008202:	75fb      	strb	r3, [r7, #23]
      break;
 8008204:	bf00      	nop
  }

  return ret;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800822a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d03a      	beq.n	80082ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	331c      	adds	r3, #28
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d029      	beq.n	80082a0 <USBD_CDC_DataIn+0x90>
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	331c      	adds	r3, #28
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	78f9      	ldrb	r1, [r7, #3]
 8008260:	68b8      	ldr	r0, [r7, #8]
 8008262:	460b      	mov	r3, r1
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	4403      	add	r3, r0
 800826c:	3338      	adds	r3, #56	; 0x38
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	fbb2 f1f3 	udiv	r1, r2, r3
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d110      	bne.n	80082a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	331c      	adds	r3, #28
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008292:	78f9      	ldrb	r1, [r7, #3]
 8008294:	2300      	movs	r3, #0
 8008296:	2200      	movs	r2, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fdea 	bl	8009e72 <USBD_LL_Transmit>
 800829e:	e003      	b.n	80082a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e000      	b.n	80082ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082ac:	2302      	movs	r3, #2
  }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fe15 	bl	8009efe <USBD_LL_GetRxDataSize>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082fa:	4611      	mov	r1, r2
 80082fc:	4798      	blx	r3

    return USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008322:	2b00      	cmp	r3, #0
 8008324:	d015      	beq.n	8008352 <USBD_CDC_EP0_RxReady+0x46>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800832c:	2bff      	cmp	r3, #255	; 0xff
 800832e:	d010      	beq.n	8008352 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800833e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008346:	b292      	uxth	r2, r2
 8008348:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2243      	movs	r2, #67	; 0x43
 8008368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800836a:	4b03      	ldr	r3, [pc, #12]	; (8008378 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	200002c0 	.word	0x200002c0

0800837c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2243      	movs	r2, #67	; 0x43
 8008388:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800838a:	4b03      	ldr	r3, [pc, #12]	; (8008398 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	2000027c 	.word	0x2000027c

0800839c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2243      	movs	r2, #67	; 0x43
 80083a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083aa:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000304 	.word	0x20000304

080083bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	220a      	movs	r2, #10
 80083c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083ca:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000238 	.word	0x20000238

080083dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083e6:	2302      	movs	r3, #2
 80083e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01c      	beq.n	80084b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008480:	2b00      	cmp	r3, #0
 8008482:	d115      	bne.n	80084b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2181      	movs	r1, #129	; 0x81
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fce3 	bl	8009e72 <USBD_LL_Transmit>

      return USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e002      	b.n	80084b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80084b4:	2302      	movs	r3, #2
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d017      	beq.n	8008508 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7c1b      	ldrb	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ea:	2101      	movs	r1, #1
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fce3 	bl	8009eb8 <USBD_LL_PrepareReceive>
 80084f2:	e007      	b.n	8008504 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084fa:	2340      	movs	r3, #64	; 0x40
 80084fc:	2101      	movs	r1, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 fcda 	bl	8009eb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e000      	b.n	800850a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008508:	2302      	movs	r3, #2
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	4613      	mov	r3, r2
 800851e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008526:	2302      	movs	r3, #2
 8008528:	e01a      	b.n	8008560 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 fb47 	bl	8009bec <USBD_LL_Init>

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d006      	beq.n	800858a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
 8008588:	e001      	b.n	800858e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800858a:	2302      	movs	r3, #2
 800858c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800858e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr

0800859a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 fb7c 	bl	8009ca0 <USBD_LL_Start>

  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr

080085c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085d2:	2302      	movs	r3, #2
 80085d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4611      	mov	r1, r2
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	4611      	mov	r1, r2
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3

  return USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fed8 	bl	80093f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	2b02      	cmp	r3, #2
 8008664:	d016      	beq.n	8008694 <USBD_LL_SetupStage+0x6a>
 8008666:	2b02      	cmp	r3, #2
 8008668:	d81c      	bhi.n	80086a4 <USBD_LL_SetupStage+0x7a>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <USBD_LL_SetupStage+0x4a>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d008      	beq.n	8008684 <USBD_LL_SetupStage+0x5a>
 8008672:	e017      	b.n	80086a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9cb 	bl	8008a18 <USBD_StdDevReq>
      break;
 8008682:	e01a      	b.n	80086ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fa2d 	bl	8008aec <USBD_StdItfReq>
      break;
 8008692:	e012      	b.n	80086ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fa6d 	bl	8008b7c <USBD_StdEPReq>
      break;
 80086a2:	e00a      	b.n	80086ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fb54 	bl	8009d60 <USBD_LL_StallEP>
      break;
 80086b8:	bf00      	nop
  }

  return USBD_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	460b      	mov	r3, r1
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d14b      	bne.n	8008770 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d134      	bne.n	8008754 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d919      	bls.n	800872a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800870c:	429a      	cmp	r2, r3
 800870e:	d203      	bcs.n	8008718 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008714:	b29b      	uxth	r3, r3
 8008716:	e002      	b.n	800871e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800871c:	b29b      	uxth	r3, r3
 800871e:	461a      	mov	r2, r3
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 ff57 	bl	80095d6 <USBD_CtlContinueRx>
 8008728:	e038      	b.n	800879c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800873c:	2b03      	cmp	r3, #3
 800873e:	d105      	bne.n	800874c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 ff54 	bl	80095fa <USBD_CtlSendStatus>
 8008752:	e023      	b.n	800879c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800875a:	2b05      	cmp	r3, #5
 800875c:	d11e      	bne.n	800879c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008766:	2100      	movs	r1, #0
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 faf9 	bl	8009d60 <USBD_LL_StallEP>
 800876e:	e015      	b.n	800879c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00d      	beq.n	8008798 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008782:	2b03      	cmp	r3, #3
 8008784:	d108      	bne.n	8008798 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	7afa      	ldrb	r2, [r7, #11]
 8008790:	4611      	mov	r1, r2
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	4798      	blx	r3
 8008796:	e001      	b.n	800879c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008798:	2302      	movs	r3, #2
 800879a:	e000      	b.n	800879e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	460b      	mov	r3, r1
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d17f      	bne.n	80088ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3314      	adds	r3, #20
 80087be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d15c      	bne.n	8008884 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d915      	bls.n	8008802 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fec1 	bl	8009576 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087f4:	2300      	movs	r3, #0
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f001 fb5c 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008800:	e04e      	b.n	80088a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	6912      	ldr	r2, [r2, #16]
 800880a:	fbb3 f1f2 	udiv	r1, r3, r2
 800880e:	fb01 f202 	mul.w	r2, r1, r2
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d11c      	bne.n	8008852 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008820:	429a      	cmp	r2, r3
 8008822:	d316      	bcc.n	8008852 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800882e:	429a      	cmp	r2, r3
 8008830:	d20f      	bcs.n	8008852 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fe9d 	bl	8009576 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008844:	2300      	movs	r3, #0
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f001 fb34 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008850:	e026      	b.n	80088a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008864:	2b03      	cmp	r3, #3
 8008866:	d105      	bne.n	8008874 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008874:	2180      	movs	r1, #128	; 0x80
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f001 fa72 	bl	8009d60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fecf 	bl	8009620 <USBD_CtlReceiveStatus>
 8008882:	e00d      	b.n	80088a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800888a:	2b04      	cmp	r3, #4
 800888c:	d004      	beq.n	8008898 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008898:	2180      	movs	r1, #128	; 0x80
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f001 fa60 	bl	8009d60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d11d      	bne.n	80088e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7ff fe81 	bl	80085b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088b8:	e015      	b.n	80088e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00d      	beq.n	80088e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d108      	bne.n	80088e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	7afa      	ldrb	r2, [r7, #11]
 80088da:	4611      	mov	r1, r2
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	4798      	blx	r3
 80088e0:	e001      	b.n	80088e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	e000      	b.n	80088e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 f9e9 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2240      	movs	r2, #64	; 0x40
 8008910:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	2180      	movs	r1, #128	; 0x80
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f9db 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2240      	movs	r2, #64	; 0x40
 800892a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6852      	ldr	r2, [r2, #4]
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	4611      	mov	r1, r2
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4798      	blx	r3
  }

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2204      	movs	r2, #4
 80089a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d105      	bne.n	80089d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d10b      	bne.n	8008a0c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a2e:	2b40      	cmp	r3, #64	; 0x40
 8008a30:	d005      	beq.n	8008a3e <USBD_StdDevReq+0x26>
 8008a32:	2b40      	cmp	r3, #64	; 0x40
 8008a34:	d84f      	bhi.n	8008ad6 <USBD_StdDevReq+0xbe>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <USBD_StdDevReq+0x36>
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d14b      	bne.n	8008ad6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	4798      	blx	r3
      break;
 8008a4c:	e048      	b.n	8008ae0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d839      	bhi.n	8008aca <USBD_StdDevReq+0xb2>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USBD_StdDevReq+0x44>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008aad 	.word	0x08008aad
 8008a60:	08008ac1 	.word	0x08008ac1
 8008a64:	08008acb 	.word	0x08008acb
 8008a68:	08008ab7 	.word	0x08008ab7
 8008a6c:	08008acb 	.word	0x08008acb
 8008a70:	08008a8f 	.word	0x08008a8f
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008acb 	.word	0x08008acb
 8008a7c:	08008aa3 	.word	0x08008aa3
 8008a80:	08008a99 	.word	0x08008a99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9dc 	bl	8008e44 <USBD_GetDescriptor>
          break;
 8008a8c:	e022      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb3f 	bl	8009114 <USBD_SetAddress>
          break;
 8008a96:	e01d      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb7e 	bl	800919c <USBD_SetConfig>
          break;
 8008aa0:	e018      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc07 	bl	80092b8 <USBD_GetConfig>
          break;
 8008aaa:	e013      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fc37 	bl	8009322 <USBD_GetStatus>
          break;
 8008ab4:	e00e      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc65 	bl	8009388 <USBD_SetFeature>
          break;
 8008abe:	e009      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fc74 	bl	80093b0 <USBD_ClrFeature>
          break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fccc 	bl	800946a <USBD_CtlError>
          break;
 8008ad2:	bf00      	nop
      }
      break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fcc6 	bl	800946a <USBD_CtlError>
      break;
 8008ade:	bf00      	nop
  }

  return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop

08008aec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d005      	beq.n	8008b12 <USBD_StdItfReq+0x26>
 8008b06:	2b40      	cmp	r3, #64	; 0x40
 8008b08:	d82e      	bhi.n	8008b68 <USBD_StdItfReq+0x7c>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <USBD_StdItfReq+0x26>
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d12a      	bne.n	8008b68 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d81d      	bhi.n	8008b5a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	889b      	ldrh	r3, [r3, #4]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d813      	bhi.n	8008b50 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d110      	bne.n	8008b64 <USBD_StdItfReq+0x78>
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fd56 	bl	80095fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b4e:	e009      	b.n	8008b64 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fc89 	bl	800946a <USBD_CtlError>
          break;
 8008b58:	e004      	b.n	8008b64 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc84 	bl	800946a <USBD_CtlError>
          break;
 8008b62:	e000      	b.n	8008b66 <USBD_StdItfReq+0x7a>
          break;
 8008b64:	bf00      	nop
      }
      break;
 8008b66:	e004      	b.n	8008b72 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc7d 	bl	800946a <USBD_CtlError>
      break;
 8008b70:	bf00      	nop
  }

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	889b      	ldrh	r3, [r3, #4]
 8008b8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d007      	beq.n	8008bac <USBD_StdEPReq+0x30>
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	f200 8146 	bhi.w	8008e2e <USBD_StdEPReq+0x2b2>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <USBD_StdEPReq+0x40>
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	f040 8141 	bne.w	8008e2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
      break;
 8008bba:	e13d      	b.n	8008e38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d10a      	bne.n	8008bde <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	e12d      	b.n	8008e3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d007      	beq.n	8008bf6 <USBD_StdEPReq+0x7a>
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	f300 811b 	bgt.w	8008e22 <USBD_StdEPReq+0x2a6>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d072      	beq.n	8008cd6 <USBD_StdEPReq+0x15a>
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d03a      	beq.n	8008c6a <USBD_StdEPReq+0xee>
 8008bf4:	e115      	b.n	8008e22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d002      	beq.n	8008c06 <USBD_StdEPReq+0x8a>
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d015      	beq.n	8008c30 <USBD_StdEPReq+0xb4>
 8008c04:	e02b      	b.n	8008c5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <USBD_StdEPReq+0xaa>
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b80      	cmp	r3, #128	; 0x80
 8008c10:	d009      	beq.n	8008c26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 f8a2 	bl	8009d60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 f89e 	bl	8009d60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c24:	e020      	b.n	8008c68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc1e 	bl	800946a <USBD_CtlError>
              break;
 8008c2e:	e01b      	b.n	8008c68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	885b      	ldrh	r3, [r3, #2]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10e      	bne.n	8008c56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <USBD_StdEPReq+0xda>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b80      	cmp	r3, #128	; 0x80
 8008c42:	d008      	beq.n	8008c56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	88db      	ldrh	r3, [r3, #6]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f885 	bl	8009d60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fccf 	bl	80095fa <USBD_CtlSendStatus>

              break;
 8008c5c:	e004      	b.n	8008c68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fc02 	bl	800946a <USBD_CtlError>
              break;
 8008c66:	bf00      	nop
          }
          break;
 8008c68:	e0e0      	b.n	8008e2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d002      	beq.n	8008c7a <USBD_StdEPReq+0xfe>
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d015      	beq.n	8008ca4 <USBD_StdEPReq+0x128>
 8008c78:	e026      	b.n	8008cc8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <USBD_StdEPReq+0x11e>
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d009      	beq.n	8008c9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f868 	bl	8009d60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c90:	2180      	movs	r1, #128	; 0x80
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 f864 	bl	8009d60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c98:	e01c      	b.n	8008cd4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fbe4 	bl	800946a <USBD_CtlError>
              break;
 8008ca2:	e017      	b.n	8008cd4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	885b      	ldrh	r3, [r3, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d112      	bne.n	8008cd2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 f86f 	bl	8009d9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc9a 	bl	80095fa <USBD_CtlSendStatus>
              }
              break;
 8008cc6:	e004      	b.n	8008cd2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fbcd 	bl	800946a <USBD_CtlError>
              break;
 8008cd0:	e000      	b.n	8008cd4 <USBD_StdEPReq+0x158>
              break;
 8008cd2:	bf00      	nop
          }
          break;
 8008cd4:	e0aa      	b.n	8008e2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d002      	beq.n	8008ce6 <USBD_StdEPReq+0x16a>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d032      	beq.n	8008d4a <USBD_StdEPReq+0x1ce>
 8008ce4:	e097      	b.n	8008e16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <USBD_StdEPReq+0x180>
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b80      	cmp	r3, #128	; 0x80
 8008cf0:	d004      	beq.n	8008cfc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fbb8 	bl	800946a <USBD_CtlError>
                break;
 8008cfa:	e091      	b.n	8008e20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da0b      	bge.n	8008d1c <USBD_StdEPReq+0x1a0>
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	3310      	adds	r3, #16
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	3304      	adds	r3, #4
 8008d1a:	e00b      	b.n	8008d34 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	4413      	add	r3, r2
 8008d32:	3304      	adds	r3, #4
 8008d34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fbfb 	bl	800953e <USBD_CtlSendData>
              break;
 8008d48:	e06a      	b.n	8008e20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da11      	bge.n	8008d76 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	3318      	adds	r3, #24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d117      	bne.n	8008d9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fb7b 	bl	800946a <USBD_CtlError>
                  break;
 8008d74:	e054      	b.n	8008e20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	f003 020f 	and.w	r2, r3, #15
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb68 	bl	800946a <USBD_CtlError>
                  break;
 8008d9a:	e041      	b.n	8008e20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da0b      	bge.n	8008dbc <USBD_StdEPReq+0x240>
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	3310      	adds	r3, #16
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	3304      	adds	r3, #4
 8008dba:	e00b      	b.n	8008dd4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_StdEPReq+0x266>
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b80      	cmp	r3, #128	; 0x80
 8008de0:	d103      	bne.n	8008dea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e00e      	b.n	8008e08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fff4 	bl	8009ddc <USBD_LL_IsStallEP>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	e002      	b.n	8008e08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fb95 	bl	800953e <USBD_CtlSendData>
              break;
 8008e14:	e004      	b.n	8008e20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fb26 	bl	800946a <USBD_CtlError>
              break;
 8008e1e:	bf00      	nop
          }
          break;
 8008e20:	e004      	b.n	8008e2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fb20 	bl	800946a <USBD_CtlError>
          break;
 8008e2a:	bf00      	nop
      }
      break;
 8008e2c:	e004      	b.n	8008e38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fb1a 	bl	800946a <USBD_CtlError>
      break;
 8008e36:	bf00      	nop
  }

  return ret;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	0a1b      	lsrs	r3, r3, #8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	f200 8128 	bhi.w	80090ba <USBD_GetDescriptor+0x276>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <USBD_GetDescriptor+0x2c>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008ea5 	.word	0x08008ea5
 8008e78:	08008ee5 	.word	0x08008ee5
 8008e7c:	080090bb 	.word	0x080090bb
 8008e80:	080090bb 	.word	0x080090bb
 8008e84:	0800905b 	.word	0x0800905b
 8008e88:	08009087 	.word	0x08009087
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7c12      	ldrb	r2, [r2, #16]
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
      break;
 8008ea2:	e112      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7c1b      	ldrb	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10d      	bne.n	8008ec8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f107 0208 	add.w	r2, r7, #8
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
 8008ebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ec6:	e100      	b.n	80090ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	f107 0208 	add.w	r2, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	2202      	movs	r2, #2
 8008ee0:	701a      	strb	r2, [r3, #0]
      break;
 8008ee2:	e0f2      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	885b      	ldrh	r3, [r3, #2]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	f200 80ac 	bhi.w	8009048 <USBD_GetDescriptor+0x204>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <USBD_GetDescriptor+0xb4>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f45 	.word	0x08008f45
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008fad 	.word	0x08008fad
 8008f08:	08008fe1 	.word	0x08008fe1
 8008f0c:	08009015 	.word	0x08009015
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f32:	e091      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa97 	bl	800946a <USBD_CtlError>
            err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
          break;
 8008f42:	e089      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e077      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa7d 	bl	800946a <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e06f      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7c12      	ldrb	r2, [r2, #16]
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9a:	e05d      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa63 	bl	800946a <USBD_CtlError>
            err++;
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008faa:	e055      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fce:	e043      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa49 	bl	800946a <USBD_CtlError>
            err++;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fde:	e03b      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	7c12      	ldrb	r2, [r2, #16]
 8008ff8:	f107 0108 	add.w	r1, r7, #8
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009002:	e029      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa2f 	bl	800946a <USBD_CtlError>
            err++;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	3301      	adds	r3, #1
 8009010:	72fb      	strb	r3, [r7, #11]
          break;
 8009012:	e021      	b.n	8009058 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009036:	e00f      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa15 	bl	800946a <USBD_CtlError>
            err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
          break;
 8009046:	e007      	b.n	8009058 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa0d 	bl	800946a <USBD_CtlError>
          err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009056:	e038      	b.n	80090ca <USBD_GetDescriptor+0x286>
 8009058:	e037      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7c1b      	ldrb	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d109      	bne.n	8009076 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f107 0208 	add.w	r2, r7, #8
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009074:	e029      	b.n	80090ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9f6 	bl	800946a <USBD_CtlError>
        err++;
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	3301      	adds	r3, #1
 8009082:	72fb      	strb	r3, [r7, #11]
      break;
 8009084:	e021      	b.n	80090ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7c1b      	ldrb	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10d      	bne.n	80090aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f107 0208 	add.w	r2, r7, #8
 800909a:	4610      	mov	r0, r2
 800909c:	4798      	blx	r3
 800909e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	2207      	movs	r2, #7
 80090a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a8:	e00f      	b.n	80090ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f9dc 	bl	800946a <USBD_CtlError>
        err++;
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	3301      	adds	r3, #1
 80090b6:	72fb      	strb	r3, [r7, #11]
      break;
 80090b8:	e007      	b.n	80090ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9d4 	bl	800946a <USBD_CtlError>
      err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	bf00      	nop
  }

  if (err != 0U)
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d11c      	bne.n	800910a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090d0:	893b      	ldrh	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <USBD_GetDescriptor+0x2b6>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	88db      	ldrh	r3, [r3, #6]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00d      	beq.n	80090fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88da      	ldrh	r2, [r3, #6]
 80090e2:	893b      	ldrh	r3, [r7, #8]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	bf28      	it	cs
 80090e8:	4613      	movcs	r3, r2
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090ee:	893b      	ldrh	r3, [r7, #8]
 80090f0:	461a      	mov	r2, r3
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fa22 	bl	800953e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa79 	bl	80095fa <USBD_CtlSendStatus>
 8009108:	e000      	b.n	800910c <USBD_GetDescriptor+0x2c8>
    return;
 800910a:	bf00      	nop
    }
  }
}
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop

08009114 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	889b      	ldrh	r3, [r3, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d130      	bne.n	8009188 <USBD_SetAddress+0x74>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d12c      	bne.n	8009188 <USBD_SetAddress+0x74>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	885b      	ldrh	r3, [r3, #2]
 8009132:	2b7f      	cmp	r3, #127	; 0x7f
 8009134:	d828      	bhi.n	8009188 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009148:	2b03      	cmp	r3, #3
 800914a:	d104      	bne.n	8009156 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f98b 	bl	800946a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009154:	e01d      	b.n	8009192 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7bfa      	ldrb	r2, [r7, #15]
 800915a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fe66 	bl	8009e34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa46 	bl	80095fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	e009      	b.n	8009192 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009186:	e004      	b.n	8009192 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f96d 	bl	800946a <USBD_CtlError>
  }
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	4b41      	ldr	r3, [pc, #260]	; (80092b4 <USBD_SetConfig+0x118>)
 80091ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091b0:	4b40      	ldr	r3, [pc, #256]	; (80092b4 <USBD_SetConfig+0x118>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d904      	bls.n	80091c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f955 	bl	800946a <USBD_CtlError>
 80091c0:	e075      	b.n	80092ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d002      	beq.n	80091d2 <USBD_SetConfig+0x36>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d023      	beq.n	8009218 <USBD_SetConfig+0x7c>
 80091d0:	e062      	b.n	8009298 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091d2:	4b38      	ldr	r3, [pc, #224]	; (80092b4 <USBD_SetConfig+0x118>)
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01a      	beq.n	8009210 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091da:	4b36      	ldr	r3, [pc, #216]	; (80092b4 <USBD_SetConfig+0x118>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2203      	movs	r2, #3
 80091e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091ec:	4b31      	ldr	r3, [pc, #196]	; (80092b4 <USBD_SetConfig+0x118>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff f9e7 	bl	80085c6 <USBD_SetClassConfig>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d104      	bne.n	8009208 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f932 	bl	800946a <USBD_CtlError>
            return;
 8009206:	e052      	b.n	80092ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f9f6 	bl	80095fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800920e:	e04e      	b.n	80092ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f9f2 	bl	80095fa <USBD_CtlSendStatus>
        break;
 8009216:	e04a      	b.n	80092ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009218:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <USBD_SetConfig+0x118>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d112      	bne.n	8009246 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <USBD_SetConfig+0x118>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009232:	4b20      	ldr	r3, [pc, #128]	; (80092b4 <USBD_SetConfig+0x118>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff f9e3 	bl	8008604 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9db 	bl	80095fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009244:	e033      	b.n	80092ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009246:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <USBD_SetConfig+0x118>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d01d      	beq.n	8009290 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff f9d1 	bl	8008604 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009262:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <USBD_SetConfig+0x118>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <USBD_SetConfig+0x118>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff f9a7 	bl	80085c6 <USBD_SetClassConfig>
 8009278:	4603      	mov	r3, r0
 800927a:	2b02      	cmp	r3, #2
 800927c:	d104      	bne.n	8009288 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f8f2 	bl	800946a <USBD_CtlError>
            return;
 8009286:	e012      	b.n	80092ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f9b6 	bl	80095fa <USBD_CtlSendStatus>
        break;
 800928e:	e00e      	b.n	80092ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9b2 	bl	80095fa <USBD_CtlSendStatus>
        break;
 8009296:	e00a      	b.n	80092ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f8e5 	bl	800946a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <USBD_SetConfig+0x118>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff f9ac 	bl	8008604 <USBD_ClrClassConfig>
        break;
 80092ac:	bf00      	nop
    }
  }
}
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000c98 	.word	0x20000c98

080092b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d004      	beq.n	80092d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f8cc 	bl	800946a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092d2:	e022      	b.n	800931a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092da:	2b02      	cmp	r3, #2
 80092dc:	dc02      	bgt.n	80092e4 <USBD_GetConfig+0x2c>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dc03      	bgt.n	80092ea <USBD_GetConfig+0x32>
 80092e2:	e015      	b.n	8009310 <USBD_GetConfig+0x58>
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d00b      	beq.n	8009300 <USBD_GetConfig+0x48>
 80092e8:	e012      	b.n	8009310 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3308      	adds	r3, #8
 80092f4:	2201      	movs	r2, #1
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f920 	bl	800953e <USBD_CtlSendData>
        break;
 80092fe:	e00c      	b.n	800931a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	2201      	movs	r2, #1
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f918 	bl	800953e <USBD_CtlSendData>
        break;
 800930e:	e004      	b.n	800931a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f8a9 	bl	800946a <USBD_CtlError>
        break;
 8009318:	bf00      	nop
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009332:	3b01      	subs	r3, #1
 8009334:	2b02      	cmp	r3, #2
 8009336:	d81e      	bhi.n	8009376 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	88db      	ldrh	r3, [r3, #6]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d004      	beq.n	800934a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f891 	bl	800946a <USBD_CtlError>
        break;
 8009348:	e01a      	b.n	8009380 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f043 0202 	orr.w	r2, r3, #2
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	330c      	adds	r3, #12
 800936a:	2202      	movs	r2, #2
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8e5 	bl	800953e <USBD_CtlSendData>
      break;
 8009374:	e004      	b.n	8009380 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f876 	bl	800946a <USBD_CtlError>
      break;
 800937e:	bf00      	nop
  }
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d106      	bne.n	80093a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f929 	bl	80095fa <USBD_CtlSendStatus>
  }
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	3b01      	subs	r3, #1
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d80b      	bhi.n	80093de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	885b      	ldrh	r3, [r3, #2]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10c      	bne.n	80093e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f90f 	bl	80095fa <USBD_CtlSendStatus>
      }
      break;
 80093dc:	e004      	b.n	80093e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f842 	bl	800946a <USBD_CtlError>
      break;
 80093e6:	e000      	b.n	80093ea <USBD_ClrFeature+0x3a>
      break;
 80093e8:	bf00      	nop
  }
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781a      	ldrb	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	785a      	ldrb	r2, [r3, #1]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	3302      	adds	r3, #2
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b29a      	uxth	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3303      	adds	r3, #3
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b29b      	uxth	r3, r3
 8009420:	4413      	add	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	3304      	adds	r3, #4
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b29a      	uxth	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	3305      	adds	r3, #5
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	b29b      	uxth	r3, r3
 800943c:	4413      	add	r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	3306      	adds	r3, #6
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b29a      	uxth	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	3307      	adds	r3, #7
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	b29b      	uxth	r3, r3
 8009458:	4413      	add	r3, r2
 800945a:	b29a      	uxth	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	80da      	strh	r2, [r3, #6]

}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr

0800946a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc72 	bl	8009d60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800947c:	2100      	movs	r1, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fc6e 	bl	8009d60 <USBD_LL_StallEP>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d032      	beq.n	8009508 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 f834 	bl	8009510 <USBD_GetLen>
 80094a8:	4603      	mov	r3, r0
 80094aa:	3301      	adds	r3, #1
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	75fa      	strb	r2, [r7, #23]
 80094bc:	461a      	mov	r2, r3
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4413      	add	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	7812      	ldrb	r2, [r2, #0]
 80094c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	75fa      	strb	r2, [r7, #23]
 80094ce:	461a      	mov	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	2203      	movs	r2, #3
 80094d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094d8:	e012      	b.n	8009500 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	60fa      	str	r2, [r7, #12]
 80094e0:	7dfa      	ldrb	r2, [r7, #23]
 80094e2:	1c51      	adds	r1, r2, #1
 80094e4:	75f9      	strb	r1, [r7, #23]
 80094e6:	4611      	mov	r1, r2
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	440a      	add	r2, r1
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	75fa      	strb	r2, [r7, #23]
 80094f6:	461a      	mov	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4413      	add	r3, r2
 80094fc:	2200      	movs	r2, #0
 80094fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e8      	bne.n	80094da <USBD_GetString+0x4e>
    }
  }
}
 8009508:	bf00      	nop
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800951c:	e005      	b.n	800952a <USBD_GetLen+0x1a>
  {
    len++;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	3301      	adds	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f5      	bne.n	800951e <USBD_GetLen+0xe>
  }

  return len;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	4613      	mov	r3, r2
 800954a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2202      	movs	r2, #2
 8009550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009554:	88fa      	ldrh	r2, [r7, #6]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fc83 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	4613      	mov	r3, r2
 8009582:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fc71 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	4613      	mov	r3, r2
 80095a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2203      	movs	r2, #3
 80095ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095b0:	88fa      	ldrh	r2, [r7, #6]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	2100      	movs	r1, #0
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fc76 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	4613      	mov	r3, r2
 80095e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	2100      	movs	r1, #0
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 fc64 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800960a:	2300      	movs	r3, #0
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fc2e 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2205      	movs	r2, #5
 800962c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fc3e 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800964c:	2200      	movs	r2, #0
 800964e:	4912      	ldr	r1, [pc, #72]	; (8009698 <MX_USB_DEVICE_Init+0x50>)
 8009650:	4812      	ldr	r0, [pc, #72]	; (800969c <MX_USB_DEVICE_Init+0x54>)
 8009652:	f7fe ff5e 	bl	8008512 <USBD_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800965c:	f7f7 f8aa 	bl	80007b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009660:	490f      	ldr	r1, [pc, #60]	; (80096a0 <MX_USB_DEVICE_Init+0x58>)
 8009662:	480e      	ldr	r0, [pc, #56]	; (800969c <MX_USB_DEVICE_Init+0x54>)
 8009664:	f7fe ff80 	bl	8008568 <USBD_RegisterClass>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800966e:	f7f7 f8a1 	bl	80007b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009672:	490c      	ldr	r1, [pc, #48]	; (80096a4 <MX_USB_DEVICE_Init+0x5c>)
 8009674:	4809      	ldr	r0, [pc, #36]	; (800969c <MX_USB_DEVICE_Init+0x54>)
 8009676:	f7fe feb1 	bl	80083dc <USBD_CDC_RegisterInterface>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009680:	f7f7 f898 	bl	80007b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <MX_USB_DEVICE_Init+0x54>)
 8009686:	f7fe ff88 	bl	800859a <USBD_Start>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009690:	f7f7 f890 	bl	80007b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009694:	bf00      	nop
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000360 	.word	0x20000360
 800969c:	20000c9c 	.word	0x20000c9c
 80096a0:	20000244 	.word	0x20000244
 80096a4:	20000350 	.word	0x20000350

080096a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096ac:	2200      	movs	r2, #0
 80096ae:	4905      	ldr	r1, [pc, #20]	; (80096c4 <CDC_Init_FS+0x1c>)
 80096b0:	4805      	ldr	r0, [pc, #20]	; (80096c8 <CDC_Init_FS+0x20>)
 80096b2:	f7fe fea9 	bl	8008408 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096b6:	4905      	ldr	r1, [pc, #20]	; (80096cc <CDC_Init_FS+0x24>)
 80096b8:	4803      	ldr	r0, [pc, #12]	; (80096c8 <CDC_Init_FS+0x20>)
 80096ba:	f7fe febe 	bl	800843a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20001348 	.word	0x20001348
 80096c8:	20000c9c 	.word	0x20000c9c
 80096cc:	20000f60 	.word	0x20000f60

080096d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	bc80      	pop	{r7}
 80096dc:	4770      	bx	lr
	...

080096e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
 80096ec:	4613      	mov	r3, r2
 80096ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	2b23      	cmp	r3, #35	; 0x23
 80096f4:	d85c      	bhi.n	80097b0 <CDC_Control_FS+0xd0>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <CDC_Control_FS+0x1c>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	080097b1 	.word	0x080097b1
 8009700:	080097b1 	.word	0x080097b1
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	080097b1 	.word	0x080097b1
 800971c:	080097b1 	.word	0x080097b1
 8009720:	080097b1 	.word	0x080097b1
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097b1 	.word	0x080097b1
 8009734:	080097b1 	.word	0x080097b1
 8009738:	080097b1 	.word	0x080097b1
 800973c:	080097b1 	.word	0x080097b1
 8009740:	080097b1 	.word	0x080097b1
 8009744:	080097b1 	.word	0x080097b1
 8009748:	080097b1 	.word	0x080097b1
 800974c:	080097b1 	.word	0x080097b1
 8009750:	080097b1 	.word	0x080097b1
 8009754:	080097b1 	.word	0x080097b1
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097b1 	.word	0x080097b1
 8009760:	080097b1 	.word	0x080097b1
 8009764:	080097b1 	.word	0x080097b1
 8009768:	080097b1 	.word	0x080097b1
 800976c:	080097b1 	.word	0x080097b1
 8009770:	080097b1 	.word	0x080097b1
 8009774:	080097b1 	.word	0x080097b1
 8009778:	080097b1 	.word	0x080097b1
 800977c:	0800978d 	.word	0x0800978d
 8009780:	0800979f 	.word	0x0800979f
 8009784:	080097b1 	.word	0x080097b1
 8009788:	080097b1 	.word	0x080097b1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <CDC_Control_FS+0xe0>)
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	6810      	ldr	r0, [r2, #0]
 8009792:	6018      	str	r0, [r3, #0]
 8009794:	8891      	ldrh	r1, [r2, #4]
 8009796:	7992      	ldrb	r2, [r2, #6]
 8009798:	8099      	strh	r1, [r3, #4]
 800979a:	719a      	strb	r2, [r3, #6]
    break;
 800979c:	e009      	b.n	80097b2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	4a07      	ldr	r2, [pc, #28]	; (80097c0 <CDC_Control_FS+0xe0>)
 80097a2:	6810      	ldr	r0, [r2, #0]
 80097a4:	6018      	str	r0, [r3, #0]
 80097a6:	8891      	ldrh	r1, [r2, #4]
 80097a8:	7992      	ldrb	r2, [r2, #6]
 80097aa:	8099      	strh	r1, [r3, #4]
 80097ac:	719a      	strb	r2, [r3, #6]
    break;
 80097ae:	e000      	b.n	80097b2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097b0:	bf00      	nop
  }

  return (USBD_OK);
 80097b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20000348 	.word	0x20000348

080097c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d005      	beq.n	80097e2 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7f6 fda1 	bl	8000324 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	4805      	ldr	r0, [pc, #20]	; (80097fc <CDC_Receive_FS+0x38>)
 80097e6:	f7fe fe28 	bl	800843a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097ea:	4804      	ldr	r0, [pc, #16]	; (80097fc <CDC_Receive_FS+0x38>)
 80097ec:	f7fe fe67 	bl	80084be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000c9c 	.word	0x20000c9c

08009800 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009810:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <CDC_Transmit_FS+0x48>)
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009816:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009822:	2301      	movs	r3, #1
 8009824:	e00b      	b.n	800983e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	461a      	mov	r2, r3
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4806      	ldr	r0, [pc, #24]	; (8009848 <CDC_Transmit_FS+0x48>)
 800982e:	f7fe fdeb 	bl	8008408 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009832:	4805      	ldr	r0, [pc, #20]	; (8009848 <CDC_Transmit_FS+0x48>)
 8009834:	f7fe fe14 	bl	8008460 <USBD_CDC_TransmitPacket>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000c9c 	.word	0x20000c9c

0800984c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2212      	movs	r2, #18
 800985c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800985e:	4b03      	ldr	r3, [pc, #12]	; (800986c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	bc80      	pop	{r7}
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	2000037c 	.word	0x2000037c

08009870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2204      	movs	r2, #4
 8009880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009882:	4b03      	ldr	r3, [pc, #12]	; (8009890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	bc80      	pop	{r7}
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000390 	.word	0x20000390

08009894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	6039      	str	r1, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d105      	bne.n	80098b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	4907      	ldr	r1, [pc, #28]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098aa:	4808      	ldr	r0, [pc, #32]	; (80098cc <USBD_FS_ProductStrDescriptor+0x38>)
 80098ac:	f7ff fdee 	bl	800948c <USBD_GetString>
 80098b0:	e004      	b.n	80098bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	4904      	ldr	r1, [pc, #16]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098b6:	4805      	ldr	r0, [pc, #20]	; (80098cc <USBD_FS_ProductStrDescriptor+0x38>)
 80098b8:	f7ff fde8 	bl	800948c <USBD_GetString>
  }
  return USBD_StrDesc;
 80098bc:	4b02      	ldr	r3, [pc, #8]	; (80098c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20001730 	.word	0x20001730
 80098cc:	0800a9f0 	.word	0x0800a9f0

080098d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098e0:	4804      	ldr	r0, [pc, #16]	; (80098f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098e2:	f7ff fdd3 	bl	800948c <USBD_GetString>
  return USBD_StrDesc;
 80098e6:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20001730 	.word	0x20001730
 80098f4:	0800aa04 	.word	0x0800aa04

080098f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	221a      	movs	r2, #26
 8009908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800990a:	f000 f843 	bl	8009994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800990e:	4b02      	ldr	r3, [pc, #8]	; (8009918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20000394 	.word	0x20000394

0800991c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d105      	bne.n	800993a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4907      	ldr	r1, [pc, #28]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009932:	4808      	ldr	r0, [pc, #32]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009934:	f7ff fdaa 	bl	800948c <USBD_GetString>
 8009938:	e004      	b.n	8009944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4904      	ldr	r1, [pc, #16]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800993e:	4805      	ldr	r0, [pc, #20]	; (8009954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009940:	f7ff fda4 	bl	800948c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009944:	4b02      	ldr	r3, [pc, #8]	; (8009950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20001730 	.word	0x20001730
 8009954:	0800aa0c 	.word	0x0800aa0c

08009958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4907      	ldr	r1, [pc, #28]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800996e:	4808      	ldr	r0, [pc, #32]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009970:	f7ff fd8c 	bl	800948c <USBD_GetString>
 8009974:	e004      	b.n	8009980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4904      	ldr	r1, [pc, #16]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800997c:	f7ff fd86 	bl	800948c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20001730 	.word	0x20001730
 8009990:	0800aa18 	.word	0x0800aa18

08009994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <Get_SerialNum+0x44>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <Get_SerialNum+0x48>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099a6:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <Get_SerialNum+0x4c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099ba:	2208      	movs	r2, #8
 80099bc:	4909      	ldr	r1, [pc, #36]	; (80099e4 <Get_SerialNum+0x50>)
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 f814 	bl	80099ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099c4:	2204      	movs	r2, #4
 80099c6:	4908      	ldr	r1, [pc, #32]	; (80099e8 <Get_SerialNum+0x54>)
 80099c8:	68b8      	ldr	r0, [r7, #8]
 80099ca:	f000 f80f 	bl	80099ec <IntToUnicode>
  }
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	1ffff7e8 	.word	0x1ffff7e8
 80099dc:	1ffff7ec 	.word	0x1ffff7ec
 80099e0:	1ffff7f0 	.word	0x1ffff7f0
 80099e4:	20000396 	.word	0x20000396
 80099e8:	200003a6 	.word	0x200003a6

080099ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e027      	b.n	8009a54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d80b      	bhi.n	8009a24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	0f1b      	lsrs	r3, r3, #28
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4619      	mov	r1, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	440b      	add	r3, r1
 8009a1c:	3230      	adds	r2, #48	; 0x30
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	e00a      	b.n	8009a3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0f1b      	lsrs	r3, r3, #28
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	440b      	add	r3, r1
 8009a34:	3237      	adds	r2, #55	; 0x37
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	3301      	adds	r3, #1
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4413      	add	r3, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	3301      	adds	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
 8009a54:	7dfa      	ldrb	r2, [r7, #23]
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d3d3      	bcc.n	8009a04 <IntToUnicode+0x18>
  }
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr

08009a68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a0d      	ldr	r2, [pc, #52]	; (8009aac <HAL_PCD_MspInit+0x44>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d113      	bne.n	8009aa2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <HAL_PCD_MspInit+0x48>)
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	4a0c      	ldr	r2, [pc, #48]	; (8009ab0 <HAL_PCD_MspInit+0x48>)
 8009a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a84:	61d3      	str	r3, [r2, #28]
 8009a86:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <HAL_PCD_MspInit+0x48>)
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009a92:	2200      	movs	r2, #0
 8009a94:	2100      	movs	r1, #0
 8009a96:	2014      	movs	r0, #20
 8009a98:	f7f8 fad7 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a9c:	2014      	movs	r0, #20
 8009a9e:	f7f8 faf0 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	40005c00 	.word	0x40005c00
 8009ab0:	40021000 	.word	0x40021000

08009ab4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4610      	mov	r0, r2
 8009acc:	f7fe fdad 	bl	800862a <USBD_LL_SetupStage>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009aea:	78fa      	ldrb	r2, [r7, #3]
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	440b      	add	r3, r1
 8009af8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7fe fddf 	bl	80086c4 <USBD_LL_DataOutStage>
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009b20:	78fa      	ldrb	r2, [r7, #3]
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	440b      	add	r3, r1
 8009b2e:	333c      	adds	r3, #60	; 0x3c
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	4619      	mov	r1, r3
 8009b36:	f7fe fe36 	bl	80087a6 <USBD_LL_DataInStage>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe ff46 	bl	80089e2 <USBD_LL_SOF>
}
 8009b56:	bf00      	nop
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b66:	2301      	movs	r3, #1
 8009b68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d001      	beq.n	8009b76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b72:	f7f6 fe1f 	bl	80007b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b7c:	7bfa      	ldrb	r2, [r7, #15]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fef6 	bl	8008972 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe feaf 	bl	80088f0 <USBD_LL_Reset>
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fef0 	bl	8008990 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <HAL_PCD_SuspendCallback+0x30>)
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4a03      	ldr	r2, [pc, #12]	; (8009bcc <HAL_PCD_SuspendCallback+0x30>)
 8009bbe:	f043 0306 	orr.w	r3, r3, #6
 8009bc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	e000ed00 	.word	0xe000ed00

08009bd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe feea 	bl	80089b8 <USBD_LL_Resume>
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bf4:	4a28      	ldr	r2, [pc, #160]	; (8009c98 <USBD_LL_Init+0xac>)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a26      	ldr	r2, [pc, #152]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009c04:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c06:	4a25      	ldr	r2, [pc, #148]	; (8009c9c <USBD_LL_Init+0xb0>)
 8009c08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c0a:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c10:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c12:	2202      	movs	r2, #2
 8009c14:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c16:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c1c:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c22:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c28:	481b      	ldr	r0, [pc, #108]	; (8009c98 <USBD_LL_Init+0xac>)
 8009c2a:	f7f8 fbe1 	bl	80023f0 <HAL_PCD_Init>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c34:	f7f6 fdbe 	bl	80007b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c3e:	2318      	movs	r3, #24
 8009c40:	2200      	movs	r2, #0
 8009c42:	2100      	movs	r1, #0
 8009c44:	f7fa f855 	bl	8003cf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c4e:	2358      	movs	r3, #88	; 0x58
 8009c50:	2200      	movs	r2, #0
 8009c52:	2180      	movs	r1, #128	; 0x80
 8009c54:	f7fa f84d 	bl	8003cf2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c5e:	23c0      	movs	r3, #192	; 0xc0
 8009c60:	2200      	movs	r2, #0
 8009c62:	2181      	movs	r1, #129	; 0x81
 8009c64:	f7fa f845 	bl	8003cf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c72:	2200      	movs	r2, #0
 8009c74:	2101      	movs	r1, #1
 8009c76:	f7fa f83c 	bl	8003cf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c84:	2200      	movs	r2, #0
 8009c86:	2182      	movs	r1, #130	; 0x82
 8009c88:	f7fa f833 	bl	8003cf2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20001930 	.word	0x20001930
 8009c9c:	40005c00 	.word	0x40005c00

08009ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f8 fca5 	bl	8002606 <HAL_PCD_Start>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 f94e 	bl	8009f64 <USBD_Get_USB_Status>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	70fb      	strb	r3, [r7, #3]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70bb      	strb	r3, [r7, #2]
 8009cec:	4613      	mov	r3, r2
 8009cee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cfe:	78bb      	ldrb	r3, [r7, #2]
 8009d00:	883a      	ldrh	r2, [r7, #0]
 8009d02:	78f9      	ldrb	r1, [r7, #3]
 8009d04:	f7f8 fe1d 	bl	8002942 <HAL_PCD_EP_Open>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f928 	bl	8009f64 <USBD_Get_USB_Status>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f8 fe64 	bl	8002a0e <HAL_PCD_EP_Close>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f909 	bl	8009f64 <USBD_Get_USB_Status>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f8 ff24 	bl	8002bcc <HAL_PCD_EP_SetStall>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 f8ea 	bl	8009f64 <USBD_Get_USB_Status>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f8 ff65 	bl	8002c8c <HAL_PCD_EP_ClrStall>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f8cb 	bl	8009f64 <USBD_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da0c      	bge.n	8009e12 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	440b      	add	r3, r1
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	e00b      	b.n	8009e2a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	440b      	add	r3, r1
 8009e24:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e28:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e4e:	78fa      	ldrb	r2, [r7, #3]
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f8 fd50 	bl	80028f8 <HAL_PCD_SetAddress>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f880 	bl	8009f64 <USBD_Get_USB_Status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	460b      	mov	r3, r1
 8009e80:	72fb      	strb	r3, [r7, #11]
 8009e82:	4613      	mov	r3, r2
 8009e84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e94:	893b      	ldrh	r3, [r7, #8]
 8009e96:	7af9      	ldrb	r1, [r7, #11]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f7f8 fe54 	bl	8002b46 <HAL_PCD_EP_Transmit>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f85d 	bl	8009f64 <USBD_Get_USB_Status>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	72fb      	strb	r3, [r7, #11]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009eda:	893b      	ldrh	r3, [r7, #8]
 8009edc:	7af9      	ldrb	r1, [r7, #11]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	f7f8 fddd 	bl	8002a9e <HAL_PCD_EP_Receive>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f83a 	bl	8009f64 <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ef4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f8 fdff 	bl	8002b18 <HAL_PCD_EP_GetRxCount>
 8009f1a:	4603      	mov	r3, r0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	; (8009f38 <USBD_static_malloc+0x14>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr
 8009f38:	20001c1c 	.word	0x20001c1c

08009f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr

08009f4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr

08009f64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d817      	bhi.n	8009fa8 <USBD_Get_USB_Status+0x44>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <USBD_Get_USB_Status+0x1c>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009f91 	.word	0x08009f91
 8009f84:	08009f97 	.word	0x08009f97
 8009f88:	08009f9d 	.word	0x08009f9d
 8009f8c:	08009fa3 	.word	0x08009fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
    break;
 8009f94:	e00b      	b.n	8009fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f96:	2302      	movs	r3, #2
 8009f98:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9a:	e008      	b.n	8009fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa0:	e005      	b.n	8009fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa6:	e002      	b.n	8009fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fa8:	2302      	movs	r3, #2
 8009faa:	73fb      	strb	r3, [r7, #15]
    break;
 8009fac:	bf00      	nop
  }
  return usb_status;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop

08009fbc <__errno>:
 8009fbc:	4b01      	ldr	r3, [pc, #4]	; (8009fc4 <__errno+0x8>)
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	200003b0 	.word	0x200003b0

08009fc8 <__libc_init_array>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	2600      	movs	r6, #0
 8009fcc:	4d0c      	ldr	r5, [pc, #48]	; (800a000 <__libc_init_array+0x38>)
 8009fce:	4c0d      	ldr	r4, [pc, #52]	; (800a004 <__libc_init_array+0x3c>)
 8009fd0:	1b64      	subs	r4, r4, r5
 8009fd2:	10a4      	asrs	r4, r4, #2
 8009fd4:	42a6      	cmp	r6, r4
 8009fd6:	d109      	bne.n	8009fec <__libc_init_array+0x24>
 8009fd8:	f000 fcb0 	bl	800a93c <_init>
 8009fdc:	2600      	movs	r6, #0
 8009fde:	4d0a      	ldr	r5, [pc, #40]	; (800a008 <__libc_init_array+0x40>)
 8009fe0:	4c0a      	ldr	r4, [pc, #40]	; (800a00c <__libc_init_array+0x44>)
 8009fe2:	1b64      	subs	r4, r4, r5
 8009fe4:	10a4      	asrs	r4, r4, #2
 8009fe6:	42a6      	cmp	r6, r4
 8009fe8:	d105      	bne.n	8009ff6 <__libc_init_array+0x2e>
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff0:	4798      	blx	r3
 8009ff2:	3601      	adds	r6, #1
 8009ff4:	e7ee      	b.n	8009fd4 <__libc_init_array+0xc>
 8009ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ffa:	4798      	blx	r3
 8009ffc:	3601      	adds	r6, #1
 8009ffe:	e7f2      	b.n	8009fe6 <__libc_init_array+0x1e>
 800a000:	0800bb4c 	.word	0x0800bb4c
 800a004:	0800bb4c 	.word	0x0800bb4c
 800a008:	0800bb4c 	.word	0x0800bb4c
 800a00c:	0800bb50 	.word	0x0800bb50

0800a010 <memcpy>:
 800a010:	440a      	add	r2, r1
 800a012:	4291      	cmp	r1, r2
 800a014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a018:	d100      	bne.n	800a01c <memcpy+0xc>
 800a01a:	4770      	bx	lr
 800a01c:	b510      	push	{r4, lr}
 800a01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a022:	4291      	cmp	r1, r2
 800a024:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a028:	d1f9      	bne.n	800a01e <memcpy+0xe>
 800a02a:	bd10      	pop	{r4, pc}

0800a02c <memset>:
 800a02c:	4603      	mov	r3, r0
 800a02e:	4402      	add	r2, r0
 800a030:	4293      	cmp	r3, r2
 800a032:	d100      	bne.n	800a036 <memset+0xa>
 800a034:	4770      	bx	lr
 800a036:	f803 1b01 	strb.w	r1, [r3], #1
 800a03a:	e7f9      	b.n	800a030 <memset+0x4>

0800a03c <sniprintf>:
 800a03c:	b40c      	push	{r2, r3}
 800a03e:	b530      	push	{r4, r5, lr}
 800a040:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <sniprintf+0x64>)
 800a042:	1e0c      	subs	r4, r1, #0
 800a044:	681d      	ldr	r5, [r3, #0]
 800a046:	b09d      	sub	sp, #116	; 0x74
 800a048:	da08      	bge.n	800a05c <sniprintf+0x20>
 800a04a:	238b      	movs	r3, #139	; 0x8b
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	b01d      	add	sp, #116	; 0x74
 800a054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a058:	b002      	add	sp, #8
 800a05a:	4770      	bx	lr
 800a05c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a060:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a064:	bf0c      	ite	eq
 800a066:	4623      	moveq	r3, r4
 800a068:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a074:	9002      	str	r0, [sp, #8]
 800a076:	9006      	str	r0, [sp, #24]
 800a078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a07c:	4628      	mov	r0, r5
 800a07e:	ab21      	add	r3, sp, #132	; 0x84
 800a080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a082:	a902      	add	r1, sp, #8
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	f000 f869 	bl	800a15c <_svfiprintf_r>
 800a08a:	1c43      	adds	r3, r0, #1
 800a08c:	bfbc      	itt	lt
 800a08e:	238b      	movlt	r3, #139	; 0x8b
 800a090:	602b      	strlt	r3, [r5, #0]
 800a092:	2c00      	cmp	r4, #0
 800a094:	d0dd      	beq.n	800a052 <sniprintf+0x16>
 800a096:	2200      	movs	r2, #0
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	e7d9      	b.n	800a052 <sniprintf+0x16>
 800a09e:	bf00      	nop
 800a0a0:	200003b0 	.word	0x200003b0

0800a0a4 <__ssputs_r>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	688e      	ldr	r6, [r1, #8]
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	429e      	cmp	r6, r3
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	4690      	mov	r8, r2
 800a0b2:	461f      	mov	r7, r3
 800a0b4:	d838      	bhi.n	800a128 <__ssputs_r+0x84>
 800a0b6:	898a      	ldrh	r2, [r1, #12]
 800a0b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0bc:	d032      	beq.n	800a124 <__ssputs_r+0x80>
 800a0be:	6825      	ldr	r5, [r4, #0]
 800a0c0:	6909      	ldr	r1, [r1, #16]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	eba5 0901 	sub.w	r9, r5, r1
 800a0c8:	6965      	ldr	r5, [r4, #20]
 800a0ca:	444b      	add	r3, r9
 800a0cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0d4:	106d      	asrs	r5, r5, #1
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	bf38      	it	cc
 800a0da:	461d      	movcc	r5, r3
 800a0dc:	0553      	lsls	r3, r2, #21
 800a0de:	d531      	bpl.n	800a144 <__ssputs_r+0xa0>
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f000 fb61 	bl	800a7a8 <_malloc_r>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	b950      	cbnz	r0, 800a100 <__ssputs_r+0x5c>
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f0:	f8ca 3000 	str.w	r3, [sl]
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a100:	464a      	mov	r2, r9
 800a102:	6921      	ldr	r1, [r4, #16]
 800a104:	f7ff ff84 	bl	800a010 <memcpy>
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a112:	81a3      	strh	r3, [r4, #12]
 800a114:	6126      	str	r6, [r4, #16]
 800a116:	444e      	add	r6, r9
 800a118:	6026      	str	r6, [r4, #0]
 800a11a:	463e      	mov	r6, r7
 800a11c:	6165      	str	r5, [r4, #20]
 800a11e:	eba5 0509 	sub.w	r5, r5, r9
 800a122:	60a5      	str	r5, [r4, #8]
 800a124:	42be      	cmp	r6, r7
 800a126:	d900      	bls.n	800a12a <__ssputs_r+0x86>
 800a128:	463e      	mov	r6, r7
 800a12a:	4632      	mov	r2, r6
 800a12c:	4641      	mov	r1, r8
 800a12e:	6820      	ldr	r0, [r4, #0]
 800a130:	f000 fab8 	bl	800a6a4 <memmove>
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	2000      	movs	r0, #0
 800a138:	1b9b      	subs	r3, r3, r6
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	4433      	add	r3, r6
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	e7db      	b.n	800a0fc <__ssputs_r+0x58>
 800a144:	462a      	mov	r2, r5
 800a146:	f000 fba3 	bl	800a890 <_realloc_r>
 800a14a:	4606      	mov	r6, r0
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d1e1      	bne.n	800a114 <__ssputs_r+0x70>
 800a150:	4650      	mov	r0, sl
 800a152:	6921      	ldr	r1, [r4, #16]
 800a154:	f000 fac0 	bl	800a6d8 <_free_r>
 800a158:	e7c7      	b.n	800a0ea <__ssputs_r+0x46>
	...

0800a15c <_svfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	4698      	mov	r8, r3
 800a162:	898b      	ldrh	r3, [r1, #12]
 800a164:	4607      	mov	r7, r0
 800a166:	061b      	lsls	r3, r3, #24
 800a168:	460d      	mov	r5, r1
 800a16a:	4614      	mov	r4, r2
 800a16c:	b09d      	sub	sp, #116	; 0x74
 800a16e:	d50e      	bpl.n	800a18e <_svfiprintf_r+0x32>
 800a170:	690b      	ldr	r3, [r1, #16]
 800a172:	b963      	cbnz	r3, 800a18e <_svfiprintf_r+0x32>
 800a174:	2140      	movs	r1, #64	; 0x40
 800a176:	f000 fb17 	bl	800a7a8 <_malloc_r>
 800a17a:	6028      	str	r0, [r5, #0]
 800a17c:	6128      	str	r0, [r5, #16]
 800a17e:	b920      	cbnz	r0, 800a18a <_svfiprintf_r+0x2e>
 800a180:	230c      	movs	r3, #12
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a188:	e0d1      	b.n	800a32e <_svfiprintf_r+0x1d2>
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	616b      	str	r3, [r5, #20]
 800a18e:	2300      	movs	r3, #0
 800a190:	9309      	str	r3, [sp, #36]	; 0x24
 800a192:	2320      	movs	r3, #32
 800a194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a198:	2330      	movs	r3, #48	; 0x30
 800a19a:	f04f 0901 	mov.w	r9, #1
 800a19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a348 <_svfiprintf_r+0x1ec>
 800a1a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1aa:	4623      	mov	r3, r4
 800a1ac:	469a      	mov	sl, r3
 800a1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b2:	b10a      	cbz	r2, 800a1b8 <_svfiprintf_r+0x5c>
 800a1b4:	2a25      	cmp	r2, #37	; 0x25
 800a1b6:	d1f9      	bne.n	800a1ac <_svfiprintf_r+0x50>
 800a1b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1bc:	d00b      	beq.n	800a1d6 <_svfiprintf_r+0x7a>
 800a1be:	465b      	mov	r3, fp
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f7ff ff6d 	bl	800a0a4 <__ssputs_r>
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f000 80aa 	beq.w	800a324 <_svfiprintf_r+0x1c8>
 800a1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d2:	445a      	add	r2, fp
 800a1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 80a2 	beq.w	800a324 <_svfiprintf_r+0x1c8>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ea:	f10a 0a01 	add.w	sl, sl, #1
 800a1ee:	9304      	str	r3, [sp, #16]
 800a1f0:	9307      	str	r3, [sp, #28]
 800a1f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1f8:	4654      	mov	r4, sl
 800a1fa:	2205      	movs	r2, #5
 800a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a200:	4851      	ldr	r0, [pc, #324]	; (800a348 <_svfiprintf_r+0x1ec>)
 800a202:	f000 fa41 	bl	800a688 <memchr>
 800a206:	9a04      	ldr	r2, [sp, #16]
 800a208:	b9d8      	cbnz	r0, 800a242 <_svfiprintf_r+0xe6>
 800a20a:	06d0      	lsls	r0, r2, #27
 800a20c:	bf44      	itt	mi
 800a20e:	2320      	movmi	r3, #32
 800a210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a214:	0711      	lsls	r1, r2, #28
 800a216:	bf44      	itt	mi
 800a218:	232b      	movmi	r3, #43	; 0x2b
 800a21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a21e:	f89a 3000 	ldrb.w	r3, [sl]
 800a222:	2b2a      	cmp	r3, #42	; 0x2a
 800a224:	d015      	beq.n	800a252 <_svfiprintf_r+0xf6>
 800a226:	4654      	mov	r4, sl
 800a228:	2000      	movs	r0, #0
 800a22a:	f04f 0c0a 	mov.w	ip, #10
 800a22e:	9a07      	ldr	r2, [sp, #28]
 800a230:	4621      	mov	r1, r4
 800a232:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a236:	3b30      	subs	r3, #48	; 0x30
 800a238:	2b09      	cmp	r3, #9
 800a23a:	d94e      	bls.n	800a2da <_svfiprintf_r+0x17e>
 800a23c:	b1b0      	cbz	r0, 800a26c <_svfiprintf_r+0x110>
 800a23e:	9207      	str	r2, [sp, #28]
 800a240:	e014      	b.n	800a26c <_svfiprintf_r+0x110>
 800a242:	eba0 0308 	sub.w	r3, r0, r8
 800a246:	fa09 f303 	lsl.w	r3, r9, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	46a2      	mov	sl, r4
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	e7d2      	b.n	800a1f8 <_svfiprintf_r+0x9c>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	1d19      	adds	r1, r3, #4
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	9103      	str	r1, [sp, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfbb      	ittet	lt
 800a25e:	425b      	neglt	r3, r3
 800a260:	f042 0202 	orrlt.w	r2, r2, #2
 800a264:	9307      	strge	r3, [sp, #28]
 800a266:	9307      	strlt	r3, [sp, #28]
 800a268:	bfb8      	it	lt
 800a26a:	9204      	strlt	r2, [sp, #16]
 800a26c:	7823      	ldrb	r3, [r4, #0]
 800a26e:	2b2e      	cmp	r3, #46	; 0x2e
 800a270:	d10c      	bne.n	800a28c <_svfiprintf_r+0x130>
 800a272:	7863      	ldrb	r3, [r4, #1]
 800a274:	2b2a      	cmp	r3, #42	; 0x2a
 800a276:	d135      	bne.n	800a2e4 <_svfiprintf_r+0x188>
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	3402      	adds	r4, #2
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	9203      	str	r2, [sp, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfb8      	it	lt
 800a286:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a34c <_svfiprintf_r+0x1f0>
 800a290:	2203      	movs	r2, #3
 800a292:	4650      	mov	r0, sl
 800a294:	7821      	ldrb	r1, [r4, #0]
 800a296:	f000 f9f7 	bl	800a688 <memchr>
 800a29a:	b140      	cbz	r0, 800a2ae <_svfiprintf_r+0x152>
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	eba0 000a 	sub.w	r0, r0, sl
 800a2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	4303      	orrs	r3, r0
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b2:	2206      	movs	r2, #6
 800a2b4:	4826      	ldr	r0, [pc, #152]	; (800a350 <_svfiprintf_r+0x1f4>)
 800a2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ba:	f000 f9e5 	bl	800a688 <memchr>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d038      	beq.n	800a334 <_svfiprintf_r+0x1d8>
 800a2c2:	4b24      	ldr	r3, [pc, #144]	; (800a354 <_svfiprintf_r+0x1f8>)
 800a2c4:	bb1b      	cbnz	r3, 800a30e <_svfiprintf_r+0x1b2>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	3307      	adds	r3, #7
 800a2ca:	f023 0307 	bic.w	r3, r3, #7
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	4433      	add	r3, r6
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	e767      	b.n	800a1aa <_svfiprintf_r+0x4e>
 800a2da:	460c      	mov	r4, r1
 800a2dc:	2001      	movs	r0, #1
 800a2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2e2:	e7a5      	b.n	800a230 <_svfiprintf_r+0xd4>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f04f 0c0a 	mov.w	ip, #10
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	9305      	str	r3, [sp, #20]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f6:	3a30      	subs	r2, #48	; 0x30
 800a2f8:	2a09      	cmp	r2, #9
 800a2fa:	d903      	bls.n	800a304 <_svfiprintf_r+0x1a8>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0c5      	beq.n	800a28c <_svfiprintf_r+0x130>
 800a300:	9105      	str	r1, [sp, #20]
 800a302:	e7c3      	b.n	800a28c <_svfiprintf_r+0x130>
 800a304:	4604      	mov	r4, r0
 800a306:	2301      	movs	r3, #1
 800a308:	fb0c 2101 	mla	r1, ip, r1, r2
 800a30c:	e7f0      	b.n	800a2f0 <_svfiprintf_r+0x194>
 800a30e:	ab03      	add	r3, sp, #12
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	462a      	mov	r2, r5
 800a314:	4638      	mov	r0, r7
 800a316:	4b10      	ldr	r3, [pc, #64]	; (800a358 <_svfiprintf_r+0x1fc>)
 800a318:	a904      	add	r1, sp, #16
 800a31a:	f3af 8000 	nop.w
 800a31e:	1c42      	adds	r2, r0, #1
 800a320:	4606      	mov	r6, r0
 800a322:	d1d6      	bne.n	800a2d2 <_svfiprintf_r+0x176>
 800a324:	89ab      	ldrh	r3, [r5, #12]
 800a326:	065b      	lsls	r3, r3, #25
 800a328:	f53f af2c 	bmi.w	800a184 <_svfiprintf_r+0x28>
 800a32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a32e:	b01d      	add	sp, #116	; 0x74
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	ab03      	add	r3, sp, #12
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	462a      	mov	r2, r5
 800a33a:	4638      	mov	r0, r7
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <_svfiprintf_r+0x1fc>)
 800a33e:	a904      	add	r1, sp, #16
 800a340:	f000 f87c 	bl	800a43c <_printf_i>
 800a344:	e7eb      	b.n	800a31e <_svfiprintf_r+0x1c2>
 800a346:	bf00      	nop
 800a348:	0800bb17 	.word	0x0800bb17
 800a34c:	0800bb1d 	.word	0x0800bb1d
 800a350:	0800bb21 	.word	0x0800bb21
 800a354:	00000000 	.word	0x00000000
 800a358:	0800a0a5 	.word	0x0800a0a5

0800a35c <_printf_common>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	4616      	mov	r6, r2
 800a362:	4699      	mov	r9, r3
 800a364:	688a      	ldr	r2, [r1, #8]
 800a366:	690b      	ldr	r3, [r1, #16]
 800a368:	4607      	mov	r7, r0
 800a36a:	4293      	cmp	r3, r2
 800a36c:	bfb8      	it	lt
 800a36e:	4613      	movlt	r3, r2
 800a370:	6033      	str	r3, [r6, #0]
 800a372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a376:	460c      	mov	r4, r1
 800a378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a37c:	b10a      	cbz	r2, 800a382 <_printf_common+0x26>
 800a37e:	3301      	adds	r3, #1
 800a380:	6033      	str	r3, [r6, #0]
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	0699      	lsls	r1, r3, #26
 800a386:	bf42      	ittt	mi
 800a388:	6833      	ldrmi	r3, [r6, #0]
 800a38a:	3302      	addmi	r3, #2
 800a38c:	6033      	strmi	r3, [r6, #0]
 800a38e:	6825      	ldr	r5, [r4, #0]
 800a390:	f015 0506 	ands.w	r5, r5, #6
 800a394:	d106      	bne.n	800a3a4 <_printf_common+0x48>
 800a396:	f104 0a19 	add.w	sl, r4, #25
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	6832      	ldr	r2, [r6, #0]
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	dc28      	bgt.n	800a3f6 <_printf_common+0x9a>
 800a3a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3a8:	1e13      	subs	r3, r2, #0
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	bf18      	it	ne
 800a3ae:	2301      	movne	r3, #1
 800a3b0:	0692      	lsls	r2, r2, #26
 800a3b2:	d42d      	bmi.n	800a410 <_printf_common+0xb4>
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3bc:	47c0      	blx	r8
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d020      	beq.n	800a404 <_printf_common+0xa8>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	68e5      	ldr	r5, [r4, #12]
 800a3c6:	f003 0306 	and.w	r3, r3, #6
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	bf18      	it	ne
 800a3ce:	2500      	movne	r5, #0
 800a3d0:	6832      	ldr	r2, [r6, #0]
 800a3d2:	f04f 0600 	mov.w	r6, #0
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	bf08      	it	eq
 800a3da:	1aad      	subeq	r5, r5, r2
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	bf08      	it	eq
 800a3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	bfc4      	itt	gt
 800a3e8:	1a9b      	subgt	r3, r3, r2
 800a3ea:	18ed      	addgt	r5, r5, r3
 800a3ec:	341a      	adds	r4, #26
 800a3ee:	42b5      	cmp	r5, r6
 800a3f0:	d11a      	bne.n	800a428 <_printf_common+0xcc>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	e008      	b.n	800a408 <_printf_common+0xac>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	47c0      	blx	r8
 800a400:	3001      	adds	r0, #1
 800a402:	d103      	bne.n	800a40c <_printf_common+0xb0>
 800a404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40c:	3501      	adds	r5, #1
 800a40e:	e7c4      	b.n	800a39a <_printf_common+0x3e>
 800a410:	2030      	movs	r0, #48	; 0x30
 800a412:	18e1      	adds	r1, r4, r3
 800a414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a41e:	4422      	add	r2, r4
 800a420:	3302      	adds	r3, #2
 800a422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a426:	e7c5      	b.n	800a3b4 <_printf_common+0x58>
 800a428:	2301      	movs	r3, #1
 800a42a:	4622      	mov	r2, r4
 800a42c:	4649      	mov	r1, r9
 800a42e:	4638      	mov	r0, r7
 800a430:	47c0      	blx	r8
 800a432:	3001      	adds	r0, #1
 800a434:	d0e6      	beq.n	800a404 <_printf_common+0xa8>
 800a436:	3601      	adds	r6, #1
 800a438:	e7d9      	b.n	800a3ee <_printf_common+0x92>
	...

0800a43c <_printf_i>:
 800a43c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	7e0f      	ldrb	r7, [r1, #24]
 800a442:	4691      	mov	r9, r2
 800a444:	2f78      	cmp	r7, #120	; 0x78
 800a446:	4680      	mov	r8, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	469a      	mov	sl, r3
 800a44c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a44e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a452:	d807      	bhi.n	800a464 <_printf_i+0x28>
 800a454:	2f62      	cmp	r7, #98	; 0x62
 800a456:	d80a      	bhi.n	800a46e <_printf_i+0x32>
 800a458:	2f00      	cmp	r7, #0
 800a45a:	f000 80d9 	beq.w	800a610 <_printf_i+0x1d4>
 800a45e:	2f58      	cmp	r7, #88	; 0x58
 800a460:	f000 80a4 	beq.w	800a5ac <_printf_i+0x170>
 800a464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a46c:	e03a      	b.n	800a4e4 <_printf_i+0xa8>
 800a46e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a472:	2b15      	cmp	r3, #21
 800a474:	d8f6      	bhi.n	800a464 <_printf_i+0x28>
 800a476:	a101      	add	r1, pc, #4	; (adr r1, 800a47c <_printf_i+0x40>)
 800a478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a47c:	0800a4d5 	.word	0x0800a4d5
 800a480:	0800a4e9 	.word	0x0800a4e9
 800a484:	0800a465 	.word	0x0800a465
 800a488:	0800a465 	.word	0x0800a465
 800a48c:	0800a465 	.word	0x0800a465
 800a490:	0800a465 	.word	0x0800a465
 800a494:	0800a4e9 	.word	0x0800a4e9
 800a498:	0800a465 	.word	0x0800a465
 800a49c:	0800a465 	.word	0x0800a465
 800a4a0:	0800a465 	.word	0x0800a465
 800a4a4:	0800a465 	.word	0x0800a465
 800a4a8:	0800a5f7 	.word	0x0800a5f7
 800a4ac:	0800a519 	.word	0x0800a519
 800a4b0:	0800a5d9 	.word	0x0800a5d9
 800a4b4:	0800a465 	.word	0x0800a465
 800a4b8:	0800a465 	.word	0x0800a465
 800a4bc:	0800a619 	.word	0x0800a619
 800a4c0:	0800a465 	.word	0x0800a465
 800a4c4:	0800a519 	.word	0x0800a519
 800a4c8:	0800a465 	.word	0x0800a465
 800a4cc:	0800a465 	.word	0x0800a465
 800a4d0:	0800a5e1 	.word	0x0800a5e1
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	1d1a      	adds	r2, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	602a      	str	r2, [r5, #0]
 800a4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e0a4      	b.n	800a632 <_printf_i+0x1f6>
 800a4e8:	6820      	ldr	r0, [r4, #0]
 800a4ea:	6829      	ldr	r1, [r5, #0]
 800a4ec:	0606      	lsls	r6, r0, #24
 800a4ee:	f101 0304 	add.w	r3, r1, #4
 800a4f2:	d50a      	bpl.n	800a50a <_printf_i+0xce>
 800a4f4:	680e      	ldr	r6, [r1, #0]
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	da03      	bge.n	800a504 <_printf_i+0xc8>
 800a4fc:	232d      	movs	r3, #45	; 0x2d
 800a4fe:	4276      	negs	r6, r6
 800a500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a504:	230a      	movs	r3, #10
 800a506:	485e      	ldr	r0, [pc, #376]	; (800a680 <_printf_i+0x244>)
 800a508:	e019      	b.n	800a53e <_printf_i+0x102>
 800a50a:	680e      	ldr	r6, [r1, #0]
 800a50c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	bf18      	it	ne
 800a514:	b236      	sxthne	r6, r6
 800a516:	e7ef      	b.n	800a4f8 <_printf_i+0xbc>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	6820      	ldr	r0, [r4, #0]
 800a51c:	1d19      	adds	r1, r3, #4
 800a51e:	6029      	str	r1, [r5, #0]
 800a520:	0601      	lsls	r1, r0, #24
 800a522:	d501      	bpl.n	800a528 <_printf_i+0xec>
 800a524:	681e      	ldr	r6, [r3, #0]
 800a526:	e002      	b.n	800a52e <_printf_i+0xf2>
 800a528:	0646      	lsls	r6, r0, #25
 800a52a:	d5fb      	bpl.n	800a524 <_printf_i+0xe8>
 800a52c:	881e      	ldrh	r6, [r3, #0]
 800a52e:	2f6f      	cmp	r7, #111	; 0x6f
 800a530:	bf0c      	ite	eq
 800a532:	2308      	moveq	r3, #8
 800a534:	230a      	movne	r3, #10
 800a536:	4852      	ldr	r0, [pc, #328]	; (800a680 <_printf_i+0x244>)
 800a538:	2100      	movs	r1, #0
 800a53a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a53e:	6865      	ldr	r5, [r4, #4]
 800a540:	2d00      	cmp	r5, #0
 800a542:	bfa8      	it	ge
 800a544:	6821      	ldrge	r1, [r4, #0]
 800a546:	60a5      	str	r5, [r4, #8]
 800a548:	bfa4      	itt	ge
 800a54a:	f021 0104 	bicge.w	r1, r1, #4
 800a54e:	6021      	strge	r1, [r4, #0]
 800a550:	b90e      	cbnz	r6, 800a556 <_printf_i+0x11a>
 800a552:	2d00      	cmp	r5, #0
 800a554:	d04d      	beq.n	800a5f2 <_printf_i+0x1b6>
 800a556:	4615      	mov	r5, r2
 800a558:	fbb6 f1f3 	udiv	r1, r6, r3
 800a55c:	fb03 6711 	mls	r7, r3, r1, r6
 800a560:	5dc7      	ldrb	r7, [r0, r7]
 800a562:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a566:	4637      	mov	r7, r6
 800a568:	42bb      	cmp	r3, r7
 800a56a:	460e      	mov	r6, r1
 800a56c:	d9f4      	bls.n	800a558 <_printf_i+0x11c>
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d10b      	bne.n	800a58a <_printf_i+0x14e>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	07de      	lsls	r6, r3, #31
 800a576:	d508      	bpl.n	800a58a <_printf_i+0x14e>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	6861      	ldr	r1, [r4, #4]
 800a57c:	4299      	cmp	r1, r3
 800a57e:	bfde      	ittt	le
 800a580:	2330      	movle	r3, #48	; 0x30
 800a582:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a586:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a58a:	1b52      	subs	r2, r2, r5
 800a58c:	6122      	str	r2, [r4, #16]
 800a58e:	464b      	mov	r3, r9
 800a590:	4621      	mov	r1, r4
 800a592:	4640      	mov	r0, r8
 800a594:	f8cd a000 	str.w	sl, [sp]
 800a598:	aa03      	add	r2, sp, #12
 800a59a:	f7ff fedf 	bl	800a35c <_printf_common>
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d14c      	bne.n	800a63c <_printf_i+0x200>
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5a6:	b004      	add	sp, #16
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	4834      	ldr	r0, [pc, #208]	; (800a680 <_printf_i+0x244>)
 800a5ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5b2:	6829      	ldr	r1, [r5, #0]
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5ba:	6029      	str	r1, [r5, #0]
 800a5bc:	061d      	lsls	r5, r3, #24
 800a5be:	d514      	bpl.n	800a5ea <_printf_i+0x1ae>
 800a5c0:	07df      	lsls	r7, r3, #31
 800a5c2:	bf44      	itt	mi
 800a5c4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5c8:	6023      	strmi	r3, [r4, #0]
 800a5ca:	b91e      	cbnz	r6, 800a5d4 <_printf_i+0x198>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	f023 0320 	bic.w	r3, r3, #32
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	e7af      	b.n	800a538 <_printf_i+0xfc>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	f043 0320 	orr.w	r3, r3, #32
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	2378      	movs	r3, #120	; 0x78
 800a5e2:	4828      	ldr	r0, [pc, #160]	; (800a684 <_printf_i+0x248>)
 800a5e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5e8:	e7e3      	b.n	800a5b2 <_printf_i+0x176>
 800a5ea:	0659      	lsls	r1, r3, #25
 800a5ec:	bf48      	it	mi
 800a5ee:	b2b6      	uxthmi	r6, r6
 800a5f0:	e7e6      	b.n	800a5c0 <_printf_i+0x184>
 800a5f2:	4615      	mov	r5, r2
 800a5f4:	e7bb      	b.n	800a56e <_printf_i+0x132>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	6826      	ldr	r6, [r4, #0]
 800a5fa:	1d18      	adds	r0, r3, #4
 800a5fc:	6961      	ldr	r1, [r4, #20]
 800a5fe:	6028      	str	r0, [r5, #0]
 800a600:	0635      	lsls	r5, r6, #24
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	d501      	bpl.n	800a60a <_printf_i+0x1ce>
 800a606:	6019      	str	r1, [r3, #0]
 800a608:	e002      	b.n	800a610 <_printf_i+0x1d4>
 800a60a:	0670      	lsls	r0, r6, #25
 800a60c:	d5fb      	bpl.n	800a606 <_printf_i+0x1ca>
 800a60e:	8019      	strh	r1, [r3, #0]
 800a610:	2300      	movs	r3, #0
 800a612:	4615      	mov	r5, r2
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	e7ba      	b.n	800a58e <_printf_i+0x152>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	2100      	movs	r1, #0
 800a61c:	1d1a      	adds	r2, r3, #4
 800a61e:	602a      	str	r2, [r5, #0]
 800a620:	681d      	ldr	r5, [r3, #0]
 800a622:	6862      	ldr	r2, [r4, #4]
 800a624:	4628      	mov	r0, r5
 800a626:	f000 f82f 	bl	800a688 <memchr>
 800a62a:	b108      	cbz	r0, 800a630 <_printf_i+0x1f4>
 800a62c:	1b40      	subs	r0, r0, r5
 800a62e:	6060      	str	r0, [r4, #4]
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	2300      	movs	r3, #0
 800a636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63a:	e7a8      	b.n	800a58e <_printf_i+0x152>
 800a63c:	462a      	mov	r2, r5
 800a63e:	4649      	mov	r1, r9
 800a640:	4640      	mov	r0, r8
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	47d0      	blx	sl
 800a646:	3001      	adds	r0, #1
 800a648:	d0ab      	beq.n	800a5a2 <_printf_i+0x166>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	079b      	lsls	r3, r3, #30
 800a64e:	d413      	bmi.n	800a678 <_printf_i+0x23c>
 800a650:	68e0      	ldr	r0, [r4, #12]
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	4298      	cmp	r0, r3
 800a656:	bfb8      	it	lt
 800a658:	4618      	movlt	r0, r3
 800a65a:	e7a4      	b.n	800a5a6 <_printf_i+0x16a>
 800a65c:	2301      	movs	r3, #1
 800a65e:	4632      	mov	r2, r6
 800a660:	4649      	mov	r1, r9
 800a662:	4640      	mov	r0, r8
 800a664:	47d0      	blx	sl
 800a666:	3001      	adds	r0, #1
 800a668:	d09b      	beq.n	800a5a2 <_printf_i+0x166>
 800a66a:	3501      	adds	r5, #1
 800a66c:	68e3      	ldr	r3, [r4, #12]
 800a66e:	9903      	ldr	r1, [sp, #12]
 800a670:	1a5b      	subs	r3, r3, r1
 800a672:	42ab      	cmp	r3, r5
 800a674:	dcf2      	bgt.n	800a65c <_printf_i+0x220>
 800a676:	e7eb      	b.n	800a650 <_printf_i+0x214>
 800a678:	2500      	movs	r5, #0
 800a67a:	f104 0619 	add.w	r6, r4, #25
 800a67e:	e7f5      	b.n	800a66c <_printf_i+0x230>
 800a680:	0800bb28 	.word	0x0800bb28
 800a684:	0800bb39 	.word	0x0800bb39

0800a688 <memchr>:
 800a688:	4603      	mov	r3, r0
 800a68a:	b510      	push	{r4, lr}
 800a68c:	b2c9      	uxtb	r1, r1
 800a68e:	4402      	add	r2, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	4618      	mov	r0, r3
 800a694:	d101      	bne.n	800a69a <memchr+0x12>
 800a696:	2000      	movs	r0, #0
 800a698:	e003      	b.n	800a6a2 <memchr+0x1a>
 800a69a:	7804      	ldrb	r4, [r0, #0]
 800a69c:	3301      	adds	r3, #1
 800a69e:	428c      	cmp	r4, r1
 800a6a0:	d1f6      	bne.n	800a690 <memchr+0x8>
 800a6a2:	bd10      	pop	{r4, pc}

0800a6a4 <memmove>:
 800a6a4:	4288      	cmp	r0, r1
 800a6a6:	b510      	push	{r4, lr}
 800a6a8:	eb01 0402 	add.w	r4, r1, r2
 800a6ac:	d902      	bls.n	800a6b4 <memmove+0x10>
 800a6ae:	4284      	cmp	r4, r0
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	d807      	bhi.n	800a6c4 <memmove+0x20>
 800a6b4:	1e43      	subs	r3, r0, #1
 800a6b6:	42a1      	cmp	r1, r4
 800a6b8:	d008      	beq.n	800a6cc <memmove+0x28>
 800a6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6c2:	e7f8      	b.n	800a6b6 <memmove+0x12>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4402      	add	r2, r0
 800a6c8:	428a      	cmp	r2, r1
 800a6ca:	d100      	bne.n	800a6ce <memmove+0x2a>
 800a6cc:	bd10      	pop	{r4, pc}
 800a6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6d6:	e7f7      	b.n	800a6c8 <memmove+0x24>

0800a6d8 <_free_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4605      	mov	r5, r0
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	d040      	beq.n	800a762 <_free_r+0x8a>
 800a6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e4:	1f0c      	subs	r4, r1, #4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bfb8      	it	lt
 800a6ea:	18e4      	addlt	r4, r4, r3
 800a6ec:	f000 f910 	bl	800a910 <__malloc_lock>
 800a6f0:	4a1c      	ldr	r2, [pc, #112]	; (800a764 <_free_r+0x8c>)
 800a6f2:	6813      	ldr	r3, [r2, #0]
 800a6f4:	b933      	cbnz	r3, 800a704 <_free_r+0x2c>
 800a6f6:	6063      	str	r3, [r4, #4]
 800a6f8:	6014      	str	r4, [r2, #0]
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a700:	f000 b90c 	b.w	800a91c <__malloc_unlock>
 800a704:	42a3      	cmp	r3, r4
 800a706:	d908      	bls.n	800a71a <_free_r+0x42>
 800a708:	6820      	ldr	r0, [r4, #0]
 800a70a:	1821      	adds	r1, r4, r0
 800a70c:	428b      	cmp	r3, r1
 800a70e:	bf01      	itttt	eq
 800a710:	6819      	ldreq	r1, [r3, #0]
 800a712:	685b      	ldreq	r3, [r3, #4]
 800a714:	1809      	addeq	r1, r1, r0
 800a716:	6021      	streq	r1, [r4, #0]
 800a718:	e7ed      	b.n	800a6f6 <_free_r+0x1e>
 800a71a:	461a      	mov	r2, r3
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	b10b      	cbz	r3, 800a724 <_free_r+0x4c>
 800a720:	42a3      	cmp	r3, r4
 800a722:	d9fa      	bls.n	800a71a <_free_r+0x42>
 800a724:	6811      	ldr	r1, [r2, #0]
 800a726:	1850      	adds	r0, r2, r1
 800a728:	42a0      	cmp	r0, r4
 800a72a:	d10b      	bne.n	800a744 <_free_r+0x6c>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	4401      	add	r1, r0
 800a730:	1850      	adds	r0, r2, r1
 800a732:	4283      	cmp	r3, r0
 800a734:	6011      	str	r1, [r2, #0]
 800a736:	d1e0      	bne.n	800a6fa <_free_r+0x22>
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4401      	add	r1, r0
 800a73e:	6011      	str	r1, [r2, #0]
 800a740:	6053      	str	r3, [r2, #4]
 800a742:	e7da      	b.n	800a6fa <_free_r+0x22>
 800a744:	d902      	bls.n	800a74c <_free_r+0x74>
 800a746:	230c      	movs	r3, #12
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	e7d6      	b.n	800a6fa <_free_r+0x22>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	1821      	adds	r1, r4, r0
 800a750:	428b      	cmp	r3, r1
 800a752:	bf01      	itttt	eq
 800a754:	6819      	ldreq	r1, [r3, #0]
 800a756:	685b      	ldreq	r3, [r3, #4]
 800a758:	1809      	addeq	r1, r1, r0
 800a75a:	6021      	streq	r1, [r4, #0]
 800a75c:	6063      	str	r3, [r4, #4]
 800a75e:	6054      	str	r4, [r2, #4]
 800a760:	e7cb      	b.n	800a6fa <_free_r+0x22>
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20001e3c 	.word	0x20001e3c

0800a768 <sbrk_aligned>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4e0e      	ldr	r6, [pc, #56]	; (800a7a4 <sbrk_aligned+0x3c>)
 800a76c:	460c      	mov	r4, r1
 800a76e:	6831      	ldr	r1, [r6, #0]
 800a770:	4605      	mov	r5, r0
 800a772:	b911      	cbnz	r1, 800a77a <sbrk_aligned+0x12>
 800a774:	f000 f8bc 	bl	800a8f0 <_sbrk_r>
 800a778:	6030      	str	r0, [r6, #0]
 800a77a:	4621      	mov	r1, r4
 800a77c:	4628      	mov	r0, r5
 800a77e:	f000 f8b7 	bl	800a8f0 <_sbrk_r>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <sbrk_aligned+0x34>
 800a786:	1cc4      	adds	r4, r0, #3
 800a788:	f024 0403 	bic.w	r4, r4, #3
 800a78c:	42a0      	cmp	r0, r4
 800a78e:	d007      	beq.n	800a7a0 <sbrk_aligned+0x38>
 800a790:	1a21      	subs	r1, r4, r0
 800a792:	4628      	mov	r0, r5
 800a794:	f000 f8ac 	bl	800a8f0 <_sbrk_r>
 800a798:	3001      	adds	r0, #1
 800a79a:	d101      	bne.n	800a7a0 <sbrk_aligned+0x38>
 800a79c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	20001e40 	.word	0x20001e40

0800a7a8 <_malloc_r>:
 800a7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ac:	1ccd      	adds	r5, r1, #3
 800a7ae:	f025 0503 	bic.w	r5, r5, #3
 800a7b2:	3508      	adds	r5, #8
 800a7b4:	2d0c      	cmp	r5, #12
 800a7b6:	bf38      	it	cc
 800a7b8:	250c      	movcc	r5, #12
 800a7ba:	2d00      	cmp	r5, #0
 800a7bc:	4607      	mov	r7, r0
 800a7be:	db01      	blt.n	800a7c4 <_malloc_r+0x1c>
 800a7c0:	42a9      	cmp	r1, r5
 800a7c2:	d905      	bls.n	800a7d0 <_malloc_r+0x28>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	2600      	movs	r6, #0
 800a7c8:	603b      	str	r3, [r7, #0]
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	4e2e      	ldr	r6, [pc, #184]	; (800a88c <_malloc_r+0xe4>)
 800a7d2:	f000 f89d 	bl	800a910 <__malloc_lock>
 800a7d6:	6833      	ldr	r3, [r6, #0]
 800a7d8:	461c      	mov	r4, r3
 800a7da:	bb34      	cbnz	r4, 800a82a <_malloc_r+0x82>
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7ff ffc2 	bl	800a768 <sbrk_aligned>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	d14d      	bne.n	800a886 <_malloc_r+0xde>
 800a7ea:	6834      	ldr	r4, [r6, #0]
 800a7ec:	4626      	mov	r6, r4
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	d140      	bne.n	800a874 <_malloc_r+0xcc>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	eb04 0803 	add.w	r8, r4, r3
 800a7fc:	f000 f878 	bl	800a8f0 <_sbrk_r>
 800a800:	4580      	cmp	r8, r0
 800a802:	d13a      	bne.n	800a87a <_malloc_r+0xd2>
 800a804:	6821      	ldr	r1, [r4, #0]
 800a806:	3503      	adds	r5, #3
 800a808:	1a6d      	subs	r5, r5, r1
 800a80a:	f025 0503 	bic.w	r5, r5, #3
 800a80e:	3508      	adds	r5, #8
 800a810:	2d0c      	cmp	r5, #12
 800a812:	bf38      	it	cc
 800a814:	250c      	movcc	r5, #12
 800a816:	4638      	mov	r0, r7
 800a818:	4629      	mov	r1, r5
 800a81a:	f7ff ffa5 	bl	800a768 <sbrk_aligned>
 800a81e:	3001      	adds	r0, #1
 800a820:	d02b      	beq.n	800a87a <_malloc_r+0xd2>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	442b      	add	r3, r5
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	e00e      	b.n	800a848 <_malloc_r+0xa0>
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	1b52      	subs	r2, r2, r5
 800a82e:	d41e      	bmi.n	800a86e <_malloc_r+0xc6>
 800a830:	2a0b      	cmp	r2, #11
 800a832:	d916      	bls.n	800a862 <_malloc_r+0xba>
 800a834:	1961      	adds	r1, r4, r5
 800a836:	42a3      	cmp	r3, r4
 800a838:	6025      	str	r5, [r4, #0]
 800a83a:	bf18      	it	ne
 800a83c:	6059      	strne	r1, [r3, #4]
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	bf08      	it	eq
 800a842:	6031      	streq	r1, [r6, #0]
 800a844:	5162      	str	r2, [r4, r5]
 800a846:	604b      	str	r3, [r1, #4]
 800a848:	4638      	mov	r0, r7
 800a84a:	f104 060b 	add.w	r6, r4, #11
 800a84e:	f000 f865 	bl	800a91c <__malloc_unlock>
 800a852:	f026 0607 	bic.w	r6, r6, #7
 800a856:	1d23      	adds	r3, r4, #4
 800a858:	1af2      	subs	r2, r6, r3
 800a85a:	d0b6      	beq.n	800a7ca <_malloc_r+0x22>
 800a85c:	1b9b      	subs	r3, r3, r6
 800a85e:	50a3      	str	r3, [r4, r2]
 800a860:	e7b3      	b.n	800a7ca <_malloc_r+0x22>
 800a862:	6862      	ldr	r2, [r4, #4]
 800a864:	42a3      	cmp	r3, r4
 800a866:	bf0c      	ite	eq
 800a868:	6032      	streq	r2, [r6, #0]
 800a86a:	605a      	strne	r2, [r3, #4]
 800a86c:	e7ec      	b.n	800a848 <_malloc_r+0xa0>
 800a86e:	4623      	mov	r3, r4
 800a870:	6864      	ldr	r4, [r4, #4]
 800a872:	e7b2      	b.n	800a7da <_malloc_r+0x32>
 800a874:	4634      	mov	r4, r6
 800a876:	6876      	ldr	r6, [r6, #4]
 800a878:	e7b9      	b.n	800a7ee <_malloc_r+0x46>
 800a87a:	230c      	movs	r3, #12
 800a87c:	4638      	mov	r0, r7
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	f000 f84c 	bl	800a91c <__malloc_unlock>
 800a884:	e7a1      	b.n	800a7ca <_malloc_r+0x22>
 800a886:	6025      	str	r5, [r4, #0]
 800a888:	e7de      	b.n	800a848 <_malloc_r+0xa0>
 800a88a:	bf00      	nop
 800a88c:	20001e3c 	.word	0x20001e3c

0800a890 <_realloc_r>:
 800a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	4680      	mov	r8, r0
 800a896:	4614      	mov	r4, r2
 800a898:	460e      	mov	r6, r1
 800a89a:	b921      	cbnz	r1, 800a8a6 <_realloc_r+0x16>
 800a89c:	4611      	mov	r1, r2
 800a89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a2:	f7ff bf81 	b.w	800a7a8 <_malloc_r>
 800a8a6:	b92a      	cbnz	r2, 800a8b4 <_realloc_r+0x24>
 800a8a8:	f7ff ff16 	bl	800a6d8 <_free_r>
 800a8ac:	4625      	mov	r5, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	f000 f838 	bl	800a928 <_malloc_usable_size_r>
 800a8b8:	4284      	cmp	r4, r0
 800a8ba:	4607      	mov	r7, r0
 800a8bc:	d802      	bhi.n	800a8c4 <_realloc_r+0x34>
 800a8be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8c2:	d812      	bhi.n	800a8ea <_realloc_r+0x5a>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff ff6e 	bl	800a7a8 <_malloc_r>
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0ed      	beq.n	800a8ae <_realloc_r+0x1e>
 800a8d2:	42bc      	cmp	r4, r7
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	bf28      	it	cs
 800a8da:	463a      	movcs	r2, r7
 800a8dc:	f7ff fb98 	bl	800a010 <memcpy>
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7ff fef8 	bl	800a6d8 <_free_r>
 800a8e8:	e7e1      	b.n	800a8ae <_realloc_r+0x1e>
 800a8ea:	4635      	mov	r5, r6
 800a8ec:	e7df      	b.n	800a8ae <_realloc_r+0x1e>
	...

0800a8f0 <_sbrk_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4d05      	ldr	r5, [pc, #20]	; (800a90c <_sbrk_r+0x1c>)
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f6 f846 	bl	800098c <_sbrk>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_sbrk_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_sbrk_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20001e44 	.word	0x20001e44

0800a910 <__malloc_lock>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__malloc_lock+0x8>)
 800a912:	f000 b811 	b.w	800a938 <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	20001e48 	.word	0x20001e48

0800a91c <__malloc_unlock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_unlock+0x8>)
 800a91e:	f000 b80c 	b.w	800a93a <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	20001e48 	.word	0x20001e48

0800a928 <_malloc_usable_size_r>:
 800a928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92c:	1f18      	subs	r0, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfbc      	itt	lt
 800a932:	580b      	ldrlt	r3, [r1, r0]
 800a934:	18c0      	addlt	r0, r0, r3
 800a936:	4770      	bx	lr

0800a938 <__retarget_lock_acquire_recursive>:
 800a938:	4770      	bx	lr

0800a93a <__retarget_lock_release_recursive>:
 800a93a:	4770      	bx	lr

0800a93c <_init>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	bf00      	nop
 800a940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a942:	bc08      	pop	{r3}
 800a944:	469e      	mov	lr, r3
 800a946:	4770      	bx	lr

0800a948 <_fini>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr
