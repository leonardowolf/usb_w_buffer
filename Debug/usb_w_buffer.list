
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  0800c430  0800c430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5fc  0800d5fc  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5fc  0800d5fc  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5fc  0800d5fc  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d600  0800d600  0001d600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800d604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000418  0800da1c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e1c  0800da1c  00021e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d860  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058cd  00000000  00000000  0005dca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  00063570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f78  00000000  00000000  000657d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da04  00000000  00000000  00067748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022155  00000000  00000000  0008514c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7c2  00000000  00000000  000a72a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146a63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e8  00000000  00000000  00146ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c418 	.word	0x0800c418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800c418 	.word	0x0800c418

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fb90 	bl	80038b0 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fb8b 	bl	80038b0 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 fe54 	bl	8003e50 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 fe4d 	bl	8003e50 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 f80e 	bl	800624c <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 fe09 	bl	8003e50 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200005c0 	.word	0x200005c0
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <Start_APP+0x60>)
 800025e:	4a17      	ldr	r2, [pc, #92]	; (80002bc <Start_APP+0x64>)
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <Start_APP+0x6c>)
 8000264:	f001 fc36 	bl	8001ad4 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026a:	f003 f9ea 	bl	8003642 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800026e:	2100      	movs	r1, #0
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <Start_APP+0x6c>)
 8000272:	f003 f9f5 	bl	8003660 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000276:	2004      	movs	r0, #4
 8000278:	f000 fc0a 	bl	8000a90 <set_contrast>

		u8g2_SetDrawColor(&u8g2, 2);
 800027c:	2102      	movs	r1, #2
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <Start_APP+0x6c>)
 8000280:	f002 fc42 	bl	8002b08 <u8g2_SetDrawColor>
		u8g2_SetBitmapMode(&u8g2, 1);
 8000284:	2101      	movs	r1, #1
 8000286:	480f      	ldr	r0, [pc, #60]	; (80002c4 <Start_APP+0x6c>)
 8000288:	f001 f88a 	bl	80013a0 <u8g2_SetBitmapMode>
		u8g2_SetFontMode(&u8g2, 1);
 800028c:	2101      	movs	r1, #1
 800028e:	480d      	ldr	r0, [pc, #52]	; (80002c4 <Start_APP+0x6c>)
 8000290:	f002 f8ba 	bl	8002408 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <Start_APP+0x6c>)
 8000296:	f002 fa25 	bl	80026e4 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox3c_mf);
 800029a:	490b      	ldr	r1, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <Start_APP+0x6c>)
 800029e:	f002 fa2f 	bl	8002700 <u8g2_SetFont>
		disp_splash();
 80002a2:	f000 fc09 	bl	8000ab8 <disp_splash>
		text_insertion_point(0 , 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 faa1 	bl	80007f0 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002ae:	f000 fa63 	bl	8000778 <monitor_begin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	0800015d 	.word	0x0800015d
 80002bc:	080001cd 	.word	0x080001cd
 80002c0:	0800d558 	.word	0x0800d558
 80002c4:	20000434 	.word	0x20000434
 80002c8:	0800c514 	.word	0x0800c514

080002cc <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002d4:	bf00      	nop
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ff38 	bl	800014c <strlen>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29b      	uxth	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <monitor_send_string+0x2c>)
 80002e4:	f00a ffd4 	bl	800b290 <CDC_Transmit_FS>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f3      	beq.n	80002d6 <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200004c8 	.word	0x200004c8

080002fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800030c:	f006 fa22 	bl	8006754 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000310:	f000 f962 	bl	80005d8 <monitor_interrupt>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200005b8 	.word	0x200005b8
 8000320:	20000618 	.word	0x20000618

08000324 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af02      	add	r7, sp, #8
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800032e:	2204      	movs	r2, #4
 8000330:	498c      	ldr	r1, [pc, #560]	; (8000564 <monitor_check_cmd+0x240>)
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f00b fbfe 	bl	800bb34 <strncmp>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d108      	bne.n	8000350 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800033e:	4a8a      	ldr	r2, [pc, #552]	; (8000568 <monitor_check_cmd+0x244>)
 8000340:	2190      	movs	r1, #144	; 0x90
 8000342:	488a      	ldr	r0, [pc, #552]	; (800056c <monitor_check_cmd+0x248>)
 8000344:	f00b fbc2 	bl	800bacc <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000348:	4888      	ldr	r0, [pc, #544]	; (800056c <monitor_check_cmd+0x248>)
 800034a:	f7ff ffbf 	bl	80002cc <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 800034e:	e105      	b.n	800055c <monitor_check_cmd+0x238>
	else if (cmd[0] == LCD_CMD) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2bfe      	cmp	r3, #254	; 0xfe
 8000356:	f040 8101 	bne.w	800055c <monitor_check_cmd+0x238>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b31      	cmp	r3, #49	; 0x31
 8000362:	d109      	bne.n	8000378 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000364:	4b82      	ldr	r3, [pc, #520]	; (8000570 <monitor_check_cmd+0x24c>)
 8000366:	4a83      	ldr	r2, [pc, #524]	; (8000574 <monitor_check_cmd+0x250>)
 8000368:	2190      	movs	r1, #144	; 0x90
 800036a:	4880      	ldr	r0, [pc, #512]	; (800056c <monitor_check_cmd+0x248>)
 800036c:	f00b fbae 	bl	800bacc <sniprintf>
			monitor_send_string(ans);
 8000370:	487e      	ldr	r0, [pc, #504]	; (800056c <monitor_check_cmd+0x248>)
 8000372:	f7ff ffab 	bl	80002cc <monitor_send_string>
}
 8000376:	e0f1      	b.n	800055c <monitor_check_cmd+0x238>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b30      	cmp	r3, #48	; 0x30
 8000380:	d109      	bne.n	8000396 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 8000382:	4b7b      	ldr	r3, [pc, #492]	; (8000570 <monitor_check_cmd+0x24c>)
 8000384:	4a7c      	ldr	r2, [pc, #496]	; (8000578 <monitor_check_cmd+0x254>)
 8000386:	2190      	movs	r1, #144	; 0x90
 8000388:	4878      	ldr	r0, [pc, #480]	; (800056c <monitor_check_cmd+0x248>)
 800038a:	f00b fb9f 	bl	800bacc <sniprintf>
			monitor_send_string(ans);
 800038e:	4877      	ldr	r0, [pc, #476]	; (800056c <monitor_check_cmd+0x248>)
 8000390:	f7ff ff9c 	bl	80002cc <monitor_send_string>
}
 8000394:	e0e2      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SOFT_RESET) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b56      	cmp	r3, #86	; 0x56
 800039e:	d102      	bne.n	80003a6 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003a0:	f000 fb50 	bl	8000a44 <lcd_soft_reset>
}
 80003a4:	e0da      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b42      	cmp	r3, #66	; 0x42
 80003ae:	d103      	bne.n	80003b8 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 fb5b 	bl	8000a6c <enable_backlight>
}
 80003b6:	e0d1      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b46      	cmp	r3, #70	; 0x46
 80003c0:	d103      	bne.n	80003ca <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 fb52 	bl	8000a6c <enable_backlight>
}
 80003c8:	e0c8      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b66      	cmp	r3, #102	; 0x66
 80003d2:	d103      	bne.n	80003dc <monitor_check_cmd+0xb8>
			inverse_text(true);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fa37 	bl	8000848 <inverse_text>
}
 80003da:	e0bf      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b67      	cmp	r3, #103	; 0x67
 80003e4:	d103      	bne.n	80003ee <monitor_check_cmd+0xca>
			inverse_text(false);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fa2e 	bl	8000848 <inverse_text>
}
 80003ec:	e0b6      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b58      	cmp	r3, #88	; 0x58
 80003f6:	d102      	bne.n	80003fe <monitor_check_cmd+0xda>
			clear_display();
 80003f8:	f000 fb2a 	bl	8000a50 <clear_display>
}
 80003fc:	e0ae      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3301      	adds	r3, #1
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b70      	cmp	r3, #112	; 0x70
 8000406:	d10a      	bne.n	800041e <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3303      	adds	r3, #3
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3302      	adds	r3, #2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	4610      	mov	r0, r2
 8000418:	f000 fad8 	bl	80009cc <put_pixel>
}
 800041c:	e09e      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b71      	cmp	r3, #113	; 0x71
 8000426:	d10a      	bne.n	800043e <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3303      	adds	r3, #3
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3302      	adds	r3, #2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f000 fae6 	bl	8000a08 <erase_pixel>
}
 800043c:	e08e      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b43      	cmp	r3, #67	; 0x43
 8000446:	d103      	bne.n	8000450 <monitor_check_cmd+0x12c>
			auto_line_wrap(true);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 f9c1 	bl	80007d0 <auto_line_wrap>
}
 800044e:	e085      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b44      	cmp	r3, #68	; 0x44
 8000458:	d103      	bne.n	8000462 <monitor_check_cmd+0x13e>
			auto_line_wrap(false);
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f9b8 	bl	80007d0 <auto_line_wrap>
}
 8000460:	e07c      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SET_INSERT) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b47      	cmp	r3, #71	; 0x47
 800046a:	d10a      	bne.n	8000482 <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	4610      	mov	r0, r2
 800047c:	f000 f9b8 	bl	80007f0 <text_insertion_point>
}
 8000480:	e06c      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_HOME_INSERT) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3301      	adds	r3, #1
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b48      	cmp	r3, #72	; 0x48
 800048a:	d104      	bne.n	8000496 <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f9ae 	bl	80007f0 <text_insertion_point>
}
 8000494:	e062      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_READ_GPI) {
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b65      	cmp	r3, #101	; 0x65
 800049e:	d114      	bne.n	80004ca <monitor_check_cmd+0x1a6>
			if (cmd[2] == '0') {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3302      	adds	r3, #2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b30      	cmp	r3, #48	; 0x30
 80004a8:	d158      	bne.n	800055c <monitor_check_cmd+0x238>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <monitor_check_cmd+0x258>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
						ddp[1]);
 80004b0:	4b32      	ldr	r3, [pc, #200]	; (800057c <monitor_check_cmd+0x258>)
 80004b2:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	4613      	mov	r3, r2
 80004b8:	4a31      	ldr	r2, [pc, #196]	; (8000580 <monitor_check_cmd+0x25c>)
 80004ba:	2190      	movs	r1, #144	; 0x90
 80004bc:	482b      	ldr	r0, [pc, #172]	; (800056c <monitor_check_cmd+0x248>)
 80004be:	f00b fb05 	bl	800bacc <sniprintf>
				monitor_send_string(ans);
 80004c2:	482a      	ldr	r0, [pc, #168]	; (800056c <monitor_check_cmd+0x248>)
 80004c4:	f7ff ff02 	bl	80002cc <monitor_send_string>
}
 80004c8:	e048      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b69      	cmp	r3, #105	; 0x69
 80004d2:	d102      	bne.n	80004da <monitor_check_cmd+0x1b6>
			disp_splash();
 80004d4:	f000 faf0 	bl	8000ab8 <disp_splash>
}
 80004d8:	e040      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b76      	cmp	r3, #118	; 0x76
 80004e2:	d102      	bne.n	80004ea <monitor_check_cmd+0x1c6>
			def_thick_v_bar();
 80004e4:	f000 f9c0 	bl	8000868 <def_thick_v_bar>
}
 80004e8:	e038      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b73      	cmp	r3, #115	; 0x73
 80004f2:	d102      	bne.n	80004fa <monitor_check_cmd+0x1d6>
			def_thin_v_bar();
 80004f4:	f000 f9c4 	bl	8000880 <def_thin_v_bar>
}
 80004f8:	e030      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3301      	adds	r3, #1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b3d      	cmp	r3, #61	; 0x3d
 8000502:	d10a      	bne.n	800051a <monitor_check_cmd+0x1f6>
			draw_v_bar_graph(cmd[2], cmd[3]);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3302      	adds	r3, #2
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3303      	adds	r3, #3
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4610      	mov	r0, r2
 8000514:	f000 f9c0 	bl	8000898 <draw_v_bar_graph>
}
 8000518:	e020      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b3d      	cmp	r3, #61	; 0x3d
 8000522:	d10a      	bne.n	800053a <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3302      	adds	r3, #2
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3303      	adds	r3, #3
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	4610      	mov	r0, r2
 8000534:	f000 f9e0 	bl	80008f8 <erase_v_bar_graph>
}
 8000538:	e010      	b.n	800055c <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b7c      	cmp	r3, #124	; 0x7c
 8000542:	d10b      	bne.n	800055c <monitor_check_cmd+0x238>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3302      	adds	r3, #2
 8000548:	7818      	ldrb	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3303      	adds	r3, #3
 800054e:	7819      	ldrb	r1, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3304      	adds	r3, #4
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	f000 f9fe 	bl	8000958 <draw_h_bar_graph>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	0800c430 	.word	0x0800c430
 8000568:	0800c438 	.word	0x0800c438
 800056c:	20000558 	.word	0x20000558
 8000570:	0800c470 	.word	0x0800c470
 8000574:	0800c474 	.word	0x0800c474
 8000578:	0800c48c 	.word	0x0800c48c
 800057c:	20000000 	.word	0x20000000
 8000580:	0800c4a0 	.word	0x0800c4a0

08000584 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <app_usb_cbk+0x44>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <app_usb_cbk+0x48>)
 8000594:	4413      	add	r3, r2
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	f00b fa80 	bl	800baa0 <memcpy>
	size += len;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <app_usb_cbk+0x44>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <app_usb_cbk+0x44>)
 80005aa:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <app_usb_cbk+0x44>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b8f      	cmp	r3, #143	; 0x8f
 80005b2:	d902      	bls.n	80005ba <app_usb_cbk+0x36>
		new_cmd = true;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <app_usb_cbk+0x4c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <app_usb_cbk+0x50>)
 80005bc:	f006 f878 	bl	80066b0 <HAL_TIM_Base_Start_IT>

}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200005b4 	.word	0x200005b4
 80005cc:	200004c8 	.word	0x200004c8
 80005d0:	200005b8 	.word	0x200005b8
 80005d4:	20000618 	.word	0x20000618

080005d8 <monitor_interrupt>:

void monitor_interrupt(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80005de:	4b62      	ldr	r3, [pc, #392]	; (8000768 <monitor_interrupt+0x190>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	f000 80bb 	beq.w	800075e <monitor_interrupt+0x186>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80005ec:	4b5f      	ldr	r3, [pc, #380]	; (800076c <monitor_interrupt+0x194>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80005f2:	2300      	movs	r3, #0
 80005f4:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80005f6:	2300      	movs	r3, #0
 80005f8:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset <= size; offset++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e091      	b.n	8000724 <monitor_interrupt+0x14c>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a5b      	ldr	r2, [pc, #364]	; (8000770 <monitor_interrupt+0x198>)
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2bfd      	cmp	r3, #253	; 0xfd
 800060a:	d110      	bne.n	800062e <monitor_interrupt+0x56>
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	3301      	adds	r3, #1
 8000610:	4a57      	ldr	r2, [pc, #348]	; (8000770 <monitor_interrupt+0x198>)
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2bfe      	cmp	r3, #254	; 0xfe
 8000618:	d009      	beq.n	800062e <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	3301      	adds	r3, #1
 800061e:	4a54      	ldr	r2, [pc, #336]	; (8000770 <monitor_interrupt+0x198>)
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b14      	cmp	r3, #20
 8000626:	d002      	beq.n	800062e <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	3301      	adds	r3, #1
 800062c:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00c      	beq.n	800064e <monitor_interrupt+0x76>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <monitor_interrupt+0x198>)
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2bfe      	cmp	r3, #254	; 0xfe
 800063e:	d106      	bne.n	800064e <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a4a      	ldr	r2, [pc, #296]	; (8000770 <monitor_interrupt+0x198>)
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2bfd      	cmp	r3, #253	; 0xfd
 800064c:	d104      	bne.n	8000658 <monitor_interrupt+0x80>
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	4b46      	ldr	r3, [pc, #280]	; (800076c <monitor_interrupt+0x194>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o começo de outro e
				printable = true;
 8000658:	2301      	movs	r3, #1
 800065a:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d029      	beq.n	80006ba <monitor_interrupt+0xe2>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	4a41      	ldr	r2, [pc, #260]	; (8000770 <monitor_interrupt+0x198>)
 800066a:	1899      	adds	r1, r3, r2
 800066c:	797a      	ldrb	r2, [r7, #5]
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	461a      	mov	r2, r3
 8000674:	483f      	ldr	r0, [pc, #252]	; (8000774 <monitor_interrupt+0x19c>)
 8000676:	f00b fa71 	bl	800bb5c <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	b29a      	uxth	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	b29b      	uxth	r3, r3
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	483a      	ldr	r0, [pc, #232]	; (8000774 <monitor_interrupt+0x19c>)
 800068a:	f00a fe01 	bl	800b290 <CDC_Transmit_FS>
				lcd_print(ans);
 800068e:	4839      	ldr	r0, [pc, #228]	; (8000774 <monitor_interrupt+0x19c>)
 8000690:	f000 fabc 	bl	8000c0c <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000694:	225a      	movs	r2, #90	; 0x5a
 8000696:	2100      	movs	r1, #0
 8000698:	4836      	ldr	r0, [pc, #216]	; (8000774 <monitor_interrupt+0x19c>)
 800069a:	f00b fa0f 	bl	800babc <memset>
				printable = !printable;
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	bf14      	ite	ne
 80006a4:	2301      	movne	r3, #1
 80006a6:	2300      	moveq	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f083 0301 	eor.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	70fb      	strb	r3, [r7, #3]
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <monitor_interrupt+0x198>)
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2bfe      	cmp	r3, #254	; 0xfe
 80006c4:	d117      	bne.n	80006f6 <monitor_interrupt+0x11e>
				monitor_check_cmd((char*) cmd + offset, size);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4a29      	ldr	r2, [pc, #164]	; (8000770 <monitor_interrupt+0x198>)
 80006ca:	4413      	add	r3, r2
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <monitor_interrupt+0x194>)
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe26 	bl	8000324 <monitor_check_cmd>
				is_cmd = !is_cmd;
 80006d8:	793b      	ldrb	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f083 0301 	eor.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	713b      	strb	r3, [r7, #4]
 80006ec:	793b      	ldrb	r3, [r7, #4]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	713b      	strb	r3, [r7, #4]
 80006f4:	e013      	b.n	800071e <monitor_interrupt+0x146>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <monitor_interrupt+0x198>)
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2bfd      	cmp	r3, #253	; 0xfd
 8000700:	d10d      	bne.n	800071e <monitor_interrupt+0x146>
				is_cmd = !is_cmd;
 8000702:	793b      	ldrb	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf14      	ite	ne
 8000708:	2301      	movne	r3, #1
 800070a:	2300      	moveq	r3, #0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	713b      	strb	r3, [r7, #4]
 8000716:	793b      	ldrb	r3, [r7, #4]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	713b      	strb	r3, [r7, #4]
		for (offset = 0; offset <= size; offset++) {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <monitor_interrupt+0x194>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	f67f af68 	bls.w	8000600 <monitor_interrupt+0x28>
			}
		}
		size = 0;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <monitor_interrupt+0x194>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 8000736:	2290      	movs	r2, #144	; 0x90
 8000738:	2100      	movs	r1, #0
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <monitor_interrupt+0x198>)
 800073c:	f00b f9be 	bl	800babc <memset>
		new_cmd = !new_cmd;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <monitor_interrupt+0x190>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b03      	ldr	r3, [pc, #12]	; (8000768 <monitor_interrupt+0x190>)
 800075c:	701a      	strb	r2, [r3, #0]
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200005b8 	.word	0x200005b8
 800076c:	200005b4 	.word	0x200005b4
 8000770:	200004c8 	.word	0x200004c8
 8000774:	20000558 	.word	0x20000558

08000778 <monitor_begin>:

void monitor_begin(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <monitor_begin+0x48>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <monitor_begin+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <monitor_begin+0x50>)
 800078c:	2190      	movs	r1, #144	; 0x90
 800078e:	480f      	ldr	r0, [pc, #60]	; (80007cc <monitor_begin+0x54>)
 8000790:	f00b f99c 	bl	800bacc <sniprintf>
	monitor_send_string(ans);
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <monitor_begin+0x54>)
 8000796:	f7ff fd99 	bl	80002cc <monitor_send_string>
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	e006      	b.n	80007ae <monitor_begin+0x36>
		ans[i] = '\0';
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <monitor_begin+0x54>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3301      	adds	r3, #1
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0e      	cmp	r3, #14
 80007b2:	d9f5      	bls.n	80007a0 <monitor_begin+0x28>
	}
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200005b4 	.word	0x200005b4
 80007c4:	200005b8 	.word	0x200005b8
 80007c8:	0800c4ac 	.word	0x0800c4ac
 80007cc:	20000558 	.word	0x20000558

080007d0 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <auto_line_wrap+0x1c>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	7013      	strb	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200005ba 	.word	0x200005ba

080007f0 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <text_insertion_point+0x4c>)
 8000802:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000806:	b2db      	uxtb	r3, r3
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <text_insertion_point+0x50>)
 8000812:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <text_insertion_point+0x4c>)
 8000816:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800081a:	461a      	mov	r2, r3
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <text_insertion_point+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000822:	b2db      	uxtb	r3, r3
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <text_insertion_point+0x50>)
 800082e:	705a      	strb	r2, [r3, #1]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000434 	.word	0x20000434
 8000840:	200005bc 	.word	0x200005bc
 8000844:	2000022d 	.word	0x2000022d

08000848 <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <inverse_text+0x1c>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	7013      	strb	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200005b9 	.word	0x200005b9

08000868 <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <def_thick_v_bar+0x14>)
 800086e:	2205      	movs	r2, #5
 8000870:	701a      	strb	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2000022c 	.word	0x2000022c

08000880 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <def_thin_v_bar+0x14>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000022c 	.word	0x2000022c

08000898 <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <draw_v_bar_graph+0x54>)
 80008aa:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <draw_v_bar_graph+0x58>)
 80008ba:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <draw_v_bar_graph+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b299      	uxth	r1, r3
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <draw_v_bar_graph+0x58>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <draw_v_bar_graph+0x5c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b298      	uxth	r0, r3
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4603      	mov	r3, r0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <draw_v_bar_graph+0x54>)
 80008d8:	f000 fe22 	bl	8001520 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <draw_v_bar_graph+0x54>)
 80008de:	f000 ff25 	bl	800172c <u8g2_SendBuffer>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000434 	.word	0x20000434
 80008f0:	200005bc 	.word	0x200005bc
 80008f4:	2000022c 	.word	0x2000022c

080008f8 <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <erase_v_bar_graph+0x54>)
 800090a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800090e:	b2db      	uxtb	r3, r3
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <erase_v_bar_graph+0x58>)
 800091a:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <erase_v_bar_graph+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b299      	uxth	r1, r3
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <erase_v_bar_graph+0x58>)
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <erase_v_bar_graph+0x5c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b298      	uxth	r0, r3
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	b29b      	uxth	r3, r3
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4603      	mov	r3, r0
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <erase_v_bar_graph+0x54>)
 8000938:	f000 fdf2 	bl	8001520 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <erase_v_bar_graph+0x54>)
 800093e:	f000 fef5 	bl	800172c <u8g2_SendBuffer>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000434 	.word	0x20000434
 8000950:	200005bc 	.word	0x200005bc
 8000954:	2000022c 	.word	0x2000022c

08000958 <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	460b      	mov	r3, r1
 8000964:	71bb      	strb	r3, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <draw_h_bar_graph+0x6c>)
 800096c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000970:	b2db      	uxtb	r3, r3
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <draw_h_bar_graph+0x70>)
 800097c:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <draw_h_bar_graph+0x6c>)
 8000980:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000984:	b2db      	uxtb	r3, r3
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <draw_h_bar_graph+0x70>)
 8000990:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <draw_h_bar_graph+0x70>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b299      	uxth	r1, r3
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <draw_h_bar_graph+0x70>)
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	b29a      	uxth	r2, r3
 800099e:	797b      	ldrb	r3, [r7, #5]
 80009a0:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <draw_h_bar_graph+0x6c>)
 80009a4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	4603      	mov	r3, r0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <draw_h_bar_graph+0x6c>)
 80009b0:	f000 fdb6 	bl	8001520 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <draw_h_bar_graph+0x6c>)
 80009b6:	f000 feb9 	bl	800172c <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000434 	.word	0x20000434
 80009c8:	200005bc 	.word	0x200005bc

080009cc <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 80009dc:	2101      	movs	r1, #1
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <put_pixel+0x38>)
 80009e0:	f002 f892 	bl	8002b08 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	79ba      	ldrb	r2, [r7, #6]
 80009ea:	b292      	uxth	r2, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <put_pixel+0x38>)
 80009f0:	f002 f857 	bl	8002aa2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <put_pixel+0x38>)
 80009f6:	f000 fe99 	bl	800172c <u8g2_SendBuffer>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000434 	.word	0x20000434

08000a08 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <erase_pixel+0x38>)
 8000a1c:	f002 f874 	bl	8002b08 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	79ba      	ldrb	r2, [r7, #6]
 8000a26:	b292      	uxth	r2, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <erase_pixel+0x38>)
 8000a2c:	f002 f839 	bl	8002aa2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <erase_pixel+0x38>)
 8000a32:	f000 fe7b 	bl	800172c <u8g2_SendBuffer>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000434 	.word	0x20000434

08000a44 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000a48:	f003 f86d 	bl	8003b26 <HAL_NVIC_SystemReset>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff feca 	bl	80007f0 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <clear_display+0x18>)
 8000a5e:	f001 f813 	bl	8001a88 <u8g2_ClearDisplay>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000434 	.word	0x20000434

08000a6c <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <enable_backlight+0x20>)
 8000a7e:	f003 f9e7 	bl	8003e50 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010800 	.word	0x40010800

08000a90 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	00d2      	lsls	r2, r2, #3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <set_contrast+0x24>)
 8000aa8:	f002 fdeb 	bl	8003682 <u8x8_SetContrast>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000434 	.word	0x20000434

08000ab8 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <disp_splash+0x28>)
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	2318      	movs	r3, #24
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	23b4      	movs	r3, #180	; 0xb4
 8000ac8:	2214      	movs	r2, #20
 8000aca:	2106      	movs	r1, #6
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <disp_splash+0x2c>)
 8000ace:	f000 fce4 	bl	800149a <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <disp_splash+0x2c>)
 8000ad4:	f000 fe2a 	bl	800172c <u8g2_SendBuffer>

}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	20000434 	.word	0x20000434

08000ae8 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	f7ff fb26 	bl	800014c <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <str_warper+0x120>)
 8000b08:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	if (wrap->wrap_times) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d06f      	beq.n	8000c00 <str_warper+0x118>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e066      	b.n	8000bf4 <str_warper+0x10c>
			if (aux < N_LINES) {
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d82d      	bhi.n	8000b88 <str_warper+0xa0>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4413      	add	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b4a:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	18d0      	adds	r0, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	461a      	mov	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000b6a:	2213      	movs	r2, #19
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f00a fff5 	bl	800bb5c <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	3313      	adds	r3, #19
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e032      	b.n	8000bee <str_warper+0x106>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000ba6:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	18d4      	adds	r4, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fab5 	bl	800014c <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4629      	mov	r1, r5
 8000be8:	4620      	mov	r0, r4
 8000bea:	f00a ffb7 	bl	800bb5c <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d992      	bls.n	8000b26 <str_warper+0x3e>
			}
		}
	}
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	cccccccd 	.word	0xcccccccd

08000c0c <lcd_print>:
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b0a1      	sub	sp, #132	; 0x84
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool clean_it = false;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	if (text_invertion) {
 8000c20:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <lcd_print+0x248>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d06d      	beq.n	8000d04 <lcd_print+0xf8>
		if (text_wrap) {
 8000c28:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <lcd_print+0x24c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d046      	beq.n	8000cbe <lcd_print+0xb2>
			str_warper(&wrap, txt);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff56 	bl	8000ae8 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000c42:	e035      	b.n	8000cb0 <lcd_print+0xa4>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c44:	4b85      	ldr	r3, [pc, #532]	; (8000e5c <lcd_print+0x250>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4b84      	ldr	r3, [pc, #528]	; (8000e5c <lcd_print+0x250>)
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 8000c50:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000c54:	f107 0108 	add.w	r1, r7, #8
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c62:	9303      	str	r3, [sp, #12]
 8000c64:	2300      	movs	r3, #0
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2320      	movs	r3, #32
 8000c72:	4622      	mov	r2, r4
 8000c74:	4601      	mov	r1, r0
 8000c76:	487a      	ldr	r0, [pc, #488]	; (8000e60 <lcd_print+0x254>)
 8000c78:	f000 feb2 	bl	80019e0 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000c7c:	4878      	ldr	r0, [pc, #480]	; (8000e60 <lcd_print+0x254>)
 8000c7e:	f000 fd55 	bl	800172c <u8g2_SendBuffer>
				clean_it = !clean_it;
 8000c82:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f083 0301 	eor.w	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000c9a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000caa:	3301      	adds	r3, #1
 8000cac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000cb0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000cb4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d9c3      	bls.n	8000c44 <lcd_print+0x38>
 8000cbc:	e0a9      	b.n	8000e12 <lcd_print+0x206>
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
		} else {
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000cbe:	4b67      	ldr	r3, [pc, #412]	; (8000e5c <lcd_print+0x250>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <lcd_print+0x250>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2320      	movs	r3, #32
 8000cdc:	4860      	ldr	r0, [pc, #384]	; (8000e60 <lcd_print+0x254>)
 8000cde:	f000 fe7f 	bl	80019e0 <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8000ce2:	485f      	ldr	r0, [pc, #380]	; (8000e60 <lcd_print+0x254>)
 8000ce4:	f000 fd22 	bl	800172c <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	485d      	ldr	r0, [pc, #372]	; (8000e60 <lcd_print+0x254>)
 8000cec:	f001 fd86 	bl	80027fc <u8g2_GetStrWidth>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <lcd_print+0x250>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	b2cb      	uxtb	r3, r1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <lcd_print+0x250>)
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e086      	b.n	8000e12 <lcd_print+0x206>
		}

	} else {
		if (text_wrap) {
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <lcd_print+0x24c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d068      	beq.n	8000dde <lcd_print+0x1d2>
			str_warper(&wrap, txt);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fee8 	bl	8000ae8 <str_warper>
			if (wrap.wrap_times) {
 8000d18:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d046      	beq.n	8000dae <lcd_print+0x1a2>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d26:	e03b      	b.n	8000da0 <lcd_print+0x194>
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d28:	4b4c      	ldr	r3, [pc, #304]	; (8000e5c <lcd_print+0x250>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <lcd_print+0x250>)
 8000d30:	785b      	ldrb	r3, [r3, #1]
 8000d32:	b29c      	uxth	r4, r3
							wrap.wrap_str[aux]);
 8000d34:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000d38:	f107 0108 	add.w	r1, r7, #8
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d46:	4622      	mov	r2, r4
 8000d48:	4601      	mov	r1, r0
 8000d4a:	4845      	ldr	r0, [pc, #276]	; (8000e60 <lcd_print+0x254>)
 8000d4c:	f001 fc1a 	bl	8002584 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 8000d50:	4843      	ldr	r0, [pc, #268]	; (8000e60 <lcd_print+0x254>)
 8000d52:	f000 fceb 	bl	800172c <u8g2_SendBuffer>

					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 8000d56:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <lcd_print+0x250>)
 8000d58:	785a      	ldrb	r2, [r3, #1]
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <lcd_print+0x254>)
 8000d5c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <lcd_print+0x258>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <lcd_print+0x250>)
 8000d70:	705a      	strb	r2, [r3, #1]

					clean_it = !clean_it;
 8000d72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f083 0301 	eor.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000d8a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000d96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000da0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000da4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d9bd      	bls.n	8000d28 <lcd_print+0x11c>
 8000dac:	e031      	b.n	8000e12 <lcd_print+0x206>
				}
			} else {
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <lcd_print+0x250>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b298      	uxth	r0, r3
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <lcd_print+0x250>)
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29c      	uxth	r4, r3
 8000dba:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000dbe:	f107 0108 	add.w	r1, r7, #8
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	4622      	mov	r2, r4
 8000dce:	4601      	mov	r1, r0
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <lcd_print+0x254>)
 8000dd2:	f001 fbd7 	bl	8002584 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000dd6:	4822      	ldr	r0, [pc, #136]	; (8000e60 <lcd_print+0x254>)
 8000dd8:	f000 fca8 	bl	800172c <u8g2_SendBuffer>
 8000ddc:	e019      	b.n	8000e12 <lcd_print+0x206>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <lcd_print+0x250>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b299      	uxth	r1, r3
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <lcd_print+0x250>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	481c      	ldr	r0, [pc, #112]	; (8000e60 <lcd_print+0x254>)
 8000dee:	f001 fbc9 	bl	8002584 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <lcd_print+0x254>)
 8000df4:	f000 fc9a 	bl	800172c <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4819      	ldr	r0, [pc, #100]	; (8000e60 <lcd_print+0x254>)
 8000dfc:	f001 fcfe 	bl	80027fc <u8g2_GetStrWidth>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <lcd_print+0x250>)
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	b2cb      	uxtb	r3, r1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <lcd_print+0x250>)
 8000e10:	701a      	strb	r2, [r3, #0]
		}
	}
	if (clean_it) {
 8000e12:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d018      	beq.n	8000e4c <lcd_print+0x240>

		memset(wrap.wrap_str, 0, sizeof(wrap.wrap_str));
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2264      	movs	r2, #100	; 0x64
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00a fe4a 	bl	800babc <memset>
		clean_it = !clean_it;
 8000e28:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f083 0301 	eor.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000e40:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3774      	adds	r7, #116	; 0x74
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	200005b9 	.word	0x200005b9
 8000e58:	200005ba 	.word	0x200005ba
 8000e5c:	200005bc 	.word	0x200005bc
 8000e60:	20000434 	.word	0x20000434
 8000e64:	2000022d 	.word	0x2000022d

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f002 fcbe 	bl	80037ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f80c 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f8e6 	bl	8001044 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e78:	f00a f92e 	bl	800b0d8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000e7c:	f000 f860 	bl	8000f40 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e80:	f000 f894 	bl	8000fac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8000e84:	f7ff f9e8 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000e88:	bf30      	wfi
 8000e8a:	e7fd      	b.n	8000e88 <main+0x20>

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fe0e 	bl	800babc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 fc90 	bl	8005808 <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eee:	f000 f92f 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fefc 	bl	8005d0c <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f1a:	f000 f919 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 f855 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f34:	f000 f90c 	bl	8001150 <Error_Handler>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3750      	adds	r7, #80	; 0x50
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <MX_SPI1_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f74:	2208      	movs	r2, #8
 8000f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_SPI1_Init+0x64>)
 8000f92:	f005 f8d7 	bl	8006144 <HAL_SPI_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f9c:	f000 f8d8 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200005c0 	.word	0x200005c0
 8000fa8:	40013000 	.word	0x40013000

08000fac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fd2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000fd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fe0:	221d      	movs	r2, #29
 8000fe2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM2_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_TIM2_Init+0x94>)
 8000ff2:	f005 fb0d 	bl	8006610 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ffc:	f000 f8a8 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_TIM2_Init+0x94>)
 800100e:	f005 fcd7 	bl	80069c0 <HAL_TIM_ConfigClockSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001018:	f000 f89a 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_TIM2_Init+0x94>)
 800102a:	f005 fea9 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f88c 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000618 	.word	0x20000618

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <MX_GPIO_Init+0xfc>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a38      	ldr	r2, [pc, #224]	; (8001140 <MX_GPIO_Init+0xfc>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <MX_GPIO_Init+0xfc>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_GPIO_Init+0xfc>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <MX_GPIO_Init+0xfc>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_GPIO_Init+0xfc>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_GPIO_Init+0xfc>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <MX_GPIO_Init+0xfc>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_GPIO_Init+0xfc>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_GPIO_Init+0xfc>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <MX_GPIO_Init+0xfc>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_GPIO_Init+0xfc>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4821      	ldr	r0, [pc, #132]	; (8001144 <MX_GPIO_Init+0x100>)
 80010c0:	f002 fec6 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <MX_GPIO_Init+0x104>)
 80010ca:	f002 fec1 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	481d      	ldr	r0, [pc, #116]	; (8001148 <MX_GPIO_Init+0x104>)
 80010d4:	f002 febc 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2103      	movs	r1, #3
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <MX_GPIO_Init+0x108>)
 80010de:	f002 feb7 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <MX_GPIO_Init+0x100>)
 80010fc:	f002 fd24 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001100:	2350      	movs	r3, #80	; 0x50
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_GPIO_Init+0x104>)
 8001118:	f002 fd16 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800111c:	2303      	movs	r3, #3
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_GPIO_Init+0x108>)
 8001134:	f002 fd08 	bl	8003b48 <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	40011000 	.word	0x40011000
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_MspInit+0x7c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <HAL_MspInit+0x7c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_MspInit+0x7c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_MspInit+0x7c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_MspInit+0x7c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_MspInit+0x7c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2005      	movs	r0, #5
 8001198:	f002 fc9b 	bl	8003ad2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800119c:	2005      	movs	r0, #5
 800119e:	f002 fcb4 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2005      	movs	r0, #5
 80011a8:	f002 fc93 	bl	8003ad2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011ac:	2005      	movs	r0, #5
 80011ae:	f002 fcac 	bl	8003b0a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_MspInit+0x80>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_MspInit+0x80>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_SPI_MspInit+0x70>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d123      	bne.n	8001248 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_SPI_MspInit+0x74>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_SPI_MspInit+0x74>)
 8001206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_SPI_MspInit+0x74>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_SPI_MspInit+0x74>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_SPI_MspInit+0x74>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_SPI_MspInit+0x74>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_SPI_MspInit+0x78>)
 8001244:	f002 fc80 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013000 	.word	0x40013000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800

0800125c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126c:	d113      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201c      	movs	r0, #28
 800128c:	f002 fc21 	bl	8003ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001290:	201c      	movs	r0, #28
 8001292:	f002 fc3a 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f002 fac5 	bl	8003878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001306:	f002 feec 	bl	80040e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20001900 	.word	0x20001900

08001314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM2_IRQHandler+0x10>)
 800131a:	f005 fa49 	bl	80067b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000618 	.word	0x20000618

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f00a fb78 	bl	800ba4c <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20005000 	.word	0x20005000
 8001388:	00000400 	.word	0x00000400
 800138c:	20000660 	.word	0x20000660
 8001390:	20001e20 	.word	0x20001e20

08001394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b088      	sub	sp, #32
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	4608      	mov	r0, r1
 80013c8:	4611      	mov	r1, r2
 80013ca:	461a      	mov	r2, r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	817b      	strh	r3, [r7, #10]
 80013d0:	460b      	mov	r3, r1
 80013d2:	813b      	strh	r3, [r7, #8]
 80013d4:	4613      	mov	r3, r2
 80013d6:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013de:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80013e0:	7dbb      	ldrb	r3, [r7, #22]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80013ee:	897a      	ldrh	r2, [r7, #10]
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4413      	add	r3, r2
 80013f4:	b298      	uxth	r0, r3
 80013f6:	893b      	ldrh	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	893a      	ldrh	r2, [r7, #8]
 80013fe:	8979      	ldrh	r1, [r7, #10]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4603      	mov	r3, r0
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f001 fbc8 	bl	8002b9a <u8g2_IsIntersection>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d040      	beq.n	8001492 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001410:	2301      	movs	r3, #1
 8001412:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001414:	e035      	b.n	8001482 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	4013      	ands	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	7dba      	ldrb	r2, [r7, #22]
 8001428:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800142c:	893a      	ldrh	r2, [r7, #8]
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f001 fa76 	bl	8002928 <u8g2_DrawHVLine>
 800143c:	e010      	b.n	8001460 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10b      	bne.n	8001460 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	7d7a      	ldrb	r2, [r7, #21]
 800144c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001450:	893a      	ldrh	r2, [r7, #8]
 8001452:	8979      	ldrh	r1, [r7, #10]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f001 fa64 	bl	8002928 <u8g2_DrawHVLine>
    }
    x++;
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	3301      	adds	r3, #1
 8001464:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
      b++;
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	3301      	adds	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
    }
    len--;
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	3b01      	subs	r3, #1
 8001480:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1c6      	bne.n	8001416 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	7dba      	ldrb	r2, [r7, #22]
 800148c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001490:	e000      	b.n	8001494 <u8g2_DrawHXBM+0xd6>
    return;
 8001492:	bf00      	nop
}
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b088      	sub	sp, #32
 800149e:	af02      	add	r7, sp, #8
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	4608      	mov	r0, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	817b      	strh	r3, [r7, #10]
 80014ac:	460b      	mov	r3, r1
 80014ae:	813b      	strh	r3, [r7, #8]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80014b8:	8afb      	ldrh	r3, [r7, #22]
 80014ba:	3307      	adds	r3, #7
 80014bc:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80014c4:	897a      	ldrh	r2, [r7, #10]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	b298      	uxth	r0, r3
 80014cc:	893a      	ldrh	r2, [r7, #8]
 80014ce:	8c3b      	ldrh	r3, [r7, #32]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	893a      	ldrh	r2, [r7, #8]
 80014d6:	8979      	ldrh	r1, [r7, #10]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4603      	mov	r3, r0
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f001 fb5c 	bl	8002b9a <u8g2_IsIntersection>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80014e8:	e012      	b.n	8001510 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80014ea:	88f8      	ldrh	r0, [r7, #6]
 80014ec:	893a      	ldrh	r2, [r7, #8]
 80014ee:	8979      	ldrh	r1, [r7, #10]
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4603      	mov	r3, r0
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff61 	bl	80013be <u8g2_DrawHXBM>
    bitmap += blen;
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	4413      	add	r3, r2
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001504:	893b      	ldrh	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	813b      	strh	r3, [r7, #8]
    h--;
 800150a:	8c3b      	ldrh	r3, [r7, #32]
 800150c:	3b01      	subs	r3, #1
 800150e:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001510:	8c3b      	ldrh	r3, [r7, #32]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e9      	bne.n	80014ea <u8g2_DrawXBM+0x50>
 8001516:	e000      	b.n	800151a <u8g2_DrawXBM+0x80>
    return;
 8001518:	bf00      	nop
  }
}
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	817b      	strh	r3, [r7, #10]
 8001532:	460b      	mov	r3, r1
 8001534:	813b      	strh	r3, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800153a:	897a      	ldrh	r2, [r7, #10]
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4413      	add	r3, r2
 8001540:	b298      	uxth	r0, r3
 8001542:	893a      	ldrh	r2, [r7, #8]
 8001544:	8b3b      	ldrh	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	b29b      	uxth	r3, r3
 800154a:	893a      	ldrh	r2, [r7, #8]
 800154c:	8979      	ldrh	r1, [r7, #10]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f001 fb21 	bl	8002b9a <u8g2_IsIntersection>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800155e:	e00d      	b.n	800157c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	893a      	ldrh	r2, [r7, #8]
 8001564:	8979      	ldrh	r1, [r7, #10]
 8001566:	2000      	movs	r0, #0
 8001568:	9000      	str	r0, [sp, #0]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f001 f9dc 	bl	8002928 <u8g2_DrawHVLine>
    y++;    
 8001570:	893b      	ldrh	r3, [r7, #8]
 8001572:	3301      	adds	r3, #1
 8001574:	813b      	strh	r3, [r7, #8]
    h--;
 8001576:	8b3b      	ldrh	r3, [r7, #24]
 8001578:	3b01      	subs	r3, #1
 800157a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 800157c:	8b3b      	ldrh	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <u8g2_DrawBox+0x40>
 8001582:	e000      	b.n	8001586 <u8g2_DrawBox+0x66>
    return;
 8001584:	bf00      	nop
  }
}
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	817b      	strh	r3, [r7, #10]
 800159e:	460b      	mov	r3, r1
 80015a0:	813b      	strh	r3, [r7, #8]
 80015a2:	4613      	mov	r3, r2
 80015a4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80015aa:	897a      	ldrh	r2, [r7, #10]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4413      	add	r3, r2
 80015b0:	b298      	uxth	r0, r3
 80015b2:	893a      	ldrh	r2, [r7, #8]
 80015b4:	8c3b      	ldrh	r3, [r7, #32]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	893a      	ldrh	r2, [r7, #8]
 80015bc:	8979      	ldrh	r1, [r7, #10]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4603      	mov	r3, r0
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 fae9 	bl	8002b9a <u8g2_IsIntersection>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d037      	beq.n	800163e <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	893a      	ldrh	r2, [r7, #8]
 80015d2:	8979      	ldrh	r1, [r7, #10]
 80015d4:	2000      	movs	r0, #0
 80015d6:	9000      	str	r0, [sp, #0]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f001 f9a5 	bl	8002928 <u8g2_DrawHVLine>
  if (h >= 2) {
 80015de:	8c3b      	ldrh	r3, [r7, #32]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d92d      	bls.n	8001640 <u8g2_DrawFrame+0xb4>
    h-=2;
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	3b02      	subs	r3, #2
 80015e8:	843b      	strh	r3, [r7, #32]
    y++;
 80015ea:	893b      	ldrh	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80015f0:	8c3b      	ldrh	r3, [r7, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01a      	beq.n	800162c <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80015f6:	8c3b      	ldrh	r3, [r7, #32]
 80015f8:	893a      	ldrh	r2, [r7, #8]
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	2001      	movs	r0, #1
 80015fe:	9000      	str	r0, [sp, #0]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f001 f991 	bl	8002928 <u8g2_DrawHVLine>
      x+=w;
 8001606:	897a      	ldrh	r2, [r7, #10]
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4413      	add	r3, r2
 800160c:	817b      	strh	r3, [r7, #10]
      x--;
 800160e:	897b      	ldrh	r3, [r7, #10]
 8001610:	3b01      	subs	r3, #1
 8001612:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001614:	8c3b      	ldrh	r3, [r7, #32]
 8001616:	893a      	ldrh	r2, [r7, #8]
 8001618:	8979      	ldrh	r1, [r7, #10]
 800161a:	2001      	movs	r0, #1
 800161c:	9000      	str	r0, [sp, #0]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f001 f982 	bl	8002928 <u8g2_DrawHVLine>
      y+=h;
 8001624:	893a      	ldrh	r2, [r7, #8]
 8001626:	8c3b      	ldrh	r3, [r7, #32]
 8001628:	4413      	add	r3, r2
 800162a:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	893a      	ldrh	r2, [r7, #8]
 8001630:	8af9      	ldrh	r1, [r7, #22]
 8001632:	2000      	movs	r0, #0
 8001634:	9000      	str	r0, [sp, #0]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f001 f976 	bl	8002928 <u8g2_DrawHVLine>
 800163c:	e000      	b.n	8001640 <u8g2_DrawFrame+0xb4>
    return;
 800163e:	bf00      	nop
  }
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	7c1b      	ldrb	r3, [r3, #16]
 8001654:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00a fa21 	bl	800babc <memset>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af02      	add	r7, sp, #8
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	70fb      	strb	r3, [r7, #3]
 800168e:	4613      	mov	r3, r2
 8001690:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7c1b      	ldrb	r3, [r3, #16]
 8001698:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	89ba      	ldrh	r2, [r7, #12]
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80016b0:	89bb      	ldrh	r3, [r7, #12]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80016be:	7bf9      	ldrb	r1, [r7, #15]
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	460b      	mov	r3, r1
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 ff88 	bl	80035e0 <u8x8_DrawTile>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ea:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016f2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	7c5b      	ldrb	r3, [r3, #17]
 80016fa:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80016fc:	7bba      	ldrb	r2, [r7, #14]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffbd 	bl	8001682 <u8g2_send_tile_row>
    src_row++;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	3301      	adds	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	3301      	adds	r3, #1
 8001712:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	429a      	cmp	r2, r3
 800171a:	d203      	bcs.n	8001724 <u8g2_send_buffer+0x4c>
 800171c:	7bba      	ldrb	r2, [r7, #14]
 800171e:	7b3b      	ldrb	r3, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3eb      	bcc.n	80016fc <u8g2_send_buffer+0x24>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffcf 	bl	80016d8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f001 ffb2 	bl	80036a4 <u8x8_RefreshDisplay>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff5b 	bl	8001646 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001790:	2100      	movs	r1, #0
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffd8 	bl	8001748 <u8g2_SetBufferCurrTileRow>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff95 	bl	80016d8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017b4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4413      	add	r3, r2
 80017c0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	7c5b      	ldrb	r3, [r3, #17]
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d304      	bcc.n	80017d8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f001 ff68 	bl	80036a4 <u8x8_RefreshDisplay>
    return 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e00d      	b.n	80017f4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff2f 	bl	8001646 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffab 	bl	8001748 <u8g2_SetBufferCurrTileRow>
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	817b      	strh	r3, [r7, #10]
 800180e:	460b      	mov	r3, r1
 8001810:	813b      	strh	r3, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8001816:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001818:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800181a:	2308      	movs	r3, #8
 800181c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800182c:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001834:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800183c:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8001848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800184e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001850:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8001858:	897b      	ldrh	r3, [r7, #10]
 800185a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800185c:	8b7a      	ldrh	r2, [r7, #26]
 800185e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8001864:	8b7a      	ldrh	r2, [r7, #26]
 8001866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 800186c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800186e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	8c3b      	ldrh	r3, [r7, #32]
 800187a:	4413      	add	r3, r2
 800187c:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	4798      	blx	r3
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	8afb      	ldrh	r3, [r7, #22]
 8001890:	4413      	add	r3, r2
 8001892:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001894:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001898:	b29b      	uxth	r3, r3
 800189a:	8afa      	ldrh	r2, [r7, #22]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80018a0:	8afa      	ldrh	r2, [r7, #22]
 80018a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80018a8:	8afa      	ldrh	r2, [r7, #22]
 80018aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80018b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b21b      	sxth	r3, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80018c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018c6:	440b      	add	r3, r1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 80018d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d067      	beq.n	80019a8 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 80018d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018dc:	429a      	cmp	r2, r3
 80018de:	d109      	bne.n	80018f4 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80018e0:	7f7b      	ldrb	r3, [r7, #29]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f001 f90a 	bl	8002b08 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80018f4:	8b38      	ldrh	r0, [r7, #24]
 80018f6:	8afa      	ldrh	r2, [r7, #22]
 80018f8:	8b79      	ldrh	r1, [r7, #26]
 80018fa:	8abb      	ldrh	r3, [r7, #20]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	4603      	mov	r3, r0
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fe43 	bl	800158c <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001906:	7f7b      	ldrb	r3, [r7, #29]
 8001908:	4619      	mov	r1, r3
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f001 f8fc 	bl	8002b08 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	f003 0318 	and.w	r3, r3, #24
 8001916:	2b00      	cmp	r3, #0
 8001918:	d042      	beq.n	80019a0 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800191a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	429a      	cmp	r2, r3
 8001924:	d13c      	bne.n	80019a0 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	10db      	asrs	r3, r3, #3
 800192a:	b29b      	uxth	r3, r3
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001932:	8a7b      	ldrh	r3, [r7, #18]
 8001934:	3b01      	subs	r3, #1
 8001936:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001938:	2300      	movs	r3, #0
 800193a:	847b      	strh	r3, [r7, #34]	; 0x22
 800193c:	e02c      	b.n	8001998 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800193e:	8b7a      	ldrh	r2, [r7, #26]
 8001940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001942:	4413      	add	r3, r2
 8001944:	b29a      	uxth	r2, r3
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	4413      	add	r3, r2
 800194a:	b299      	uxth	r1, r3
 800194c:	8afa      	ldrh	r2, [r7, #22]
 800194e:	8abb      	ldrh	r3, [r7, #20]
 8001950:	4413      	add	r3, r2
 8001952:	b29a      	uxth	r2, r3
 8001954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001956:	4413      	add	r3, r2
 8001958:	b29a      	uxth	r2, r3
 800195a:	8a7b      	ldrh	r3, [r7, #18]
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	8b3b      	ldrh	r3, [r7, #24]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f001 f86b 	bl	8002a3e <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001968:	8b7a      	ldrh	r2, [r7, #26]
 800196a:	8b3b      	ldrh	r3, [r7, #24]
 800196c:	4413      	add	r3, r2
 800196e:	b29a      	uxth	r2, r3
 8001970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001972:	4413      	add	r3, r2
 8001974:	b29a      	uxth	r2, r3
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	4413      	add	r3, r2
 800197a:	b299      	uxth	r1, r3
 800197c:	8afa      	ldrh	r2, [r7, #22]
 800197e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001980:	4413      	add	r3, r2
 8001982:	b29a      	uxth	r2, r3
 8001984:	8a7b      	ldrh	r3, [r7, #18]
 8001986:	4413      	add	r3, r2
 8001988:	b29a      	uxth	r2, r3
 800198a:	8abb      	ldrh	r3, [r7, #20]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f001 f86f 	bl	8002a70 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001994:	3301      	adds	r3, #1
 8001996:	847b      	strh	r3, [r7, #34]	; 0x22
 8001998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800199c:	429a      	cmp	r2, r3
 800199e:	d3ce      	bcc.n	800193e <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80019a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a2:	3b01      	subs	r3, #1
 80019a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80019a6:	e757      	b.n	8001858 <u8g2_DrawButtonFrame+0x5c>
      break;
 80019a8:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d011      	beq.n	80019d8 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80019b4:	2102      	movs	r1, #2
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f001 f8a6 	bl	8002b08 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80019bc:	8b38      	ldrh	r0, [r7, #24]
 80019be:	8afa      	ldrh	r2, [r7, #22]
 80019c0:	8b79      	ldrh	r1, [r7, #26]
 80019c2:	8abb      	ldrh	r3, [r7, #20]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	4603      	mov	r3, r0
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fda9 	bl	8001520 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 80019ce:	7f7b      	ldrb	r3, [r7, #29]
 80019d0:	4619      	mov	r1, r3
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f001 f898 	bl	8002b08 <u8g2_SetDrawColor>
  }
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	817b      	strh	r3, [r7, #10]
 80019f2:	460b      	mov	r3, r1
 80019f4:	813b      	strh	r3, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80019fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 ff11 	bl	8002824 <u8g2_GetUTF8Width>
 8001a02:	4603      	mov	r3, r0
 8001a04:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001a06:	2300      	movs	r3, #0
 8001a08:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001a14:	8afb      	ldrh	r3, [r7, #22]
 8001a16:	3301      	adds	r3, #1
 8001a18:	0fda      	lsrs	r2, r3, #31
 8001a1a:	4413      	add	r3, r2
 8001a1c:	105b      	asrs	r3, r3, #1
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	897b      	ldrh	r3, [r7, #10]
 8001a24:	4413      	add	r3, r2
 8001a26:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001a28:	8afa      	ldrh	r2, [r7, #22]
 8001a2a:	8c3b      	ldrh	r3, [r7, #32]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20d      	bcs.n	8001a4c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8001a3a:	8c3a      	ldrh	r2, [r7, #32]
 8001a3c:	8afb      	ldrh	r3, [r7, #22]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	0fda      	lsrs	r2, r3, #31
 8001a42:	4413      	add	r3, r2
 8001a44:	105b      	asrs	r3, r3, #1
 8001a46:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001a48:	8c3b      	ldrh	r3, [r7, #32]
 8001a4a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fcda 	bl	8002408 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001a54:	893a      	ldrh	r2, [r7, #8]
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fd92 	bl	8002584 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001a60:	897a      	ldrh	r2, [r7, #10]
 8001a62:	8abb      	ldrh	r3, [r7, #20]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b299      	uxth	r1, r3
 8001a68:	88f8      	ldrh	r0, [r7, #6]
 8001a6a:	893a      	ldrh	r2, [r7, #8]
 8001a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	8afb      	ldrh	r3, [r7, #22]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4603      	mov	r3, r0
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff febe 	bl	80017fc <u8g2_DrawButtonFrame>
  
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fe71 	bl	8001778 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe82 	bl	80017a0 <u8g2_NextPage>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fe4f 	bl	8001748 <u8g2_SetBufferCurrTileRow>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	701a      	strb	r2, [r3, #0]
  return buf;
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000664 	.word	0x20000664

08001ad4 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8001aea:	490c      	ldr	r1, [pc, #48]	; (8001b1c <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f001 fe39 	bl	8003764 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001af2:	f107 0313 	add.w	r3, r7, #19
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffdc 	bl	8001ab4 <u8g2_m_24_8_f>
 8001afc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001afe:	7cfa      	ldrb	r2, [r7, #19]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8001b06:	6979      	ldr	r1, [r7, #20]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f001 f92f 	bl	8002d6c <u8g2_SetupBuffer>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	080032fd 	.word	0x080032fd
 8001b1c:	080034dd 	.word	0x080034dd
 8001b20:	08002bf1 	.word	0x08002bf1

08001b24 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	81fb      	strh	r3, [r7, #14]
	font++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	4413      	add	r3, r2
 8001b76:	81fb      	strh	r3, [r7, #14]
	return pos;
 8001b78:	89fb      	ldrh	r3, [r7, #14]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6838      	ldr	r0, [r7, #0]
 8001b92:	f7ff ffc7 	bl	8001b24 <u8g2_font_get_byte>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	6838      	ldr	r0, [r7, #0]
 8001ba2:	f7ff ffbf 	bl	8001b24 <u8g2_font_get_byte>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001bae:	2102      	movs	r1, #2
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f7ff ffb7 	bl	8001b24 <u8g2_font_get_byte>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	f7ff ffaf 	bl	8001b24 <u8g2_font_get_byte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001bce:	2104      	movs	r1, #4
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f7ff ffa7 	bl	8001b24 <u8g2_font_get_byte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001bde:	2105      	movs	r1, #5
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f7ff ff9f 	bl	8001b24 <u8g2_font_get_byte>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001bee:	2106      	movs	r1, #6
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	f7ff ff97 	bl	8001b24 <u8g2_font_get_byte>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001bfe:	2107      	movs	r1, #7
 8001c00:	6838      	ldr	r0, [r7, #0]
 8001c02:	f7ff ff8f 	bl	8001b24 <u8g2_font_get_byte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001c0e:	2108      	movs	r1, #8
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f7ff ff87 	bl	8001b24 <u8g2_font_get_byte>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001c1e:	2109      	movs	r1, #9
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f7ff ff7f 	bl	8001b24 <u8g2_font_get_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001c2e:	210a      	movs	r1, #10
 8001c30:	6838      	ldr	r0, [r7, #0]
 8001c32:	f7ff ff77 	bl	8001b24 <u8g2_font_get_byte>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001c3e:	210b      	movs	r1, #11
 8001c40:	6838      	ldr	r0, [r7, #0]
 8001c42:	f7ff ff6f 	bl	8001b24 <u8g2_font_get_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001c4e:	210c      	movs	r1, #12
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f7ff ff67 	bl	8001b24 <u8g2_font_get_byte>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001c5e:	210d      	movs	r1, #13
 8001c60:	6838      	ldr	r0, [r7, #0]
 8001c62:	f7ff ff5f 	bl	8001b24 <u8g2_font_get_byte>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b25a      	sxtb	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001c6e:	210e      	movs	r1, #14
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f7ff ff57 	bl	8001b24 <u8g2_font_get_byte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001c7e:	210f      	movs	r1, #15
 8001c80:	6838      	ldr	r0, [r7, #0]
 8001c82:	f7ff ff4f 	bl	8001b24 <u8g2_font_get_byte>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b25a      	sxtb	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001c8e:	2110      	movs	r1, #16
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f7ff ff47 	bl	8001b24 <u8g2_font_get_byte>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001c9e:	2111      	movs	r1, #17
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f7ff ff50 	bl	8001b46 <u8g2_font_get_word>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001cae:	2113      	movs	r1, #19
 8001cb0:	6838      	ldr	r0, [r7, #0]
 8001cb2:	f7ff ff48 	bl	8001b46 <u8g2_font_get_word>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001cbe:	2115      	movs	r1, #21
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f7ff ff40 	bl	8001b46 <u8g2_font_get_word>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	82da      	strh	r2, [r3, #22]
#endif
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
 8001ce6:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	fa42 f303 	asr.w	r3, r2, r3
 8001cf8:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001cfa:	7b7b      	ldrb	r3, [r7, #13]
 8001cfc:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001cfe:	7bba      	ldrb	r2, [r7, #14]
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	4413      	add	r3, r2
 8001d04:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	d91a      	bls.n	8001d42 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001d10:	7b3a      	ldrb	r2, [r7, #12]
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7b3b      	ldrb	r3, [r7, #12]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	4013      	ands	r3, r2
 8001d56:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7bba      	ldrb	r2, [r7, #14]
 8001d5c:	731a      	strb	r2, [r3, #12]
	return val;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffab 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001d8e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	73fb      	strb	r3, [r7, #15]
	return v;
 8001da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001db0:	b490      	push	{r4, r7}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4604      	mov	r4, r0
 8001db8:	4608      	mov	r0, r1
 8001dba:	4611      	mov	r1, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	80fb      	strh	r3, [r7, #6]
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	717b      	strb	r3, [r7, #5]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	713b      	strb	r3, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d014      	beq.n	8001dfe <u8g2_add_vector_y+0x4e>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	dc19      	bgt.n	8001e0c <u8g2_add_vector_y+0x5c>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <u8g2_add_vector_y+0x32>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d007      	beq.n	8001df0 <u8g2_add_vector_y+0x40>
 8001de0:	e014      	b.n	8001e0c <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001de2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4413      	add	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
		break;
 8001dee:	e014      	b.n	8001e1a <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001df0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4413      	add	r3, r2
 8001dfa:	80fb      	strh	r3, [r7, #6]
		break;
 8001dfc:	e00d      	b.n	8001e1a <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001dfe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	80fb      	strh	r3, [r7, #6]
		break;
 8001e0a:	e006      	b.n	8001e1a <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001e0c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	80fb      	strh	r3, [r7, #6]
		break;
 8001e18:	bf00      	nop
	}
	return dy;
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc90      	pop	{r4, r7}
 8001e24:	4770      	bx	lr

08001e26 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001e26:	b490      	push	{r4, r7}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	4608      	mov	r0, r1
 8001e30:	4611      	mov	r1, r2
 8001e32:	461a      	mov	r2, r3
 8001e34:	4623      	mov	r3, r4
 8001e36:	80fb      	strh	r3, [r7, #6]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	717b      	strb	r3, [r7, #5]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	713b      	strb	r3, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d014      	beq.n	8001e74 <u8g2_add_vector_x+0x4e>
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	dc19      	bgt.n	8001e82 <u8g2_add_vector_x+0x5c>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <u8g2_add_vector_x+0x32>
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <u8g2_add_vector_x+0x40>
 8001e56:	e014      	b.n	8001e82 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001e58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4413      	add	r3, r2
 8001e62:	80fb      	strh	r3, [r7, #6]
		break;
 8001e64:	e014      	b.n	8001e90 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001e66:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	80fb      	strh	r3, [r7, #6]
		break;
 8001e72:	e00d      	b.n	8001e90 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8001e74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	80fb      	strh	r3, [r7, #6]
		break;
 8001e80:	e006      	b.n	8001e90 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8001e82:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
		break;
 8001e8e:	bf00      	nop
	}
	return dx;
 8001e90:	88fb      	ldrh	r3, [r7, #6]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc90      	pop	{r4, r7}
 8001e9a:	4770      	bx	lr

08001e9c <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3360      	adds	r3, #96	; 0x60
 8001eb0:	613b      	str	r3, [r7, #16]

	cnt = len;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ebc:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ec4:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ecc:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	7d7b      	ldrb	r3, [r7, #21]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8001eda:	7dfa      	ldrb	r2, [r7, #23]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d201      	bcs.n	8001ee6 <u8g2_font_decode_len+0x4a>
			current = cnt;
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	88db      	ldrh	r3, [r3, #6]
 8001ef0:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001ef2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001ef6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	7c1b      	ldrb	r3, [r3, #16]
 8001efe:	89b8      	ldrh	r0, [r7, #12]
 8001f00:	f7ff ff91 	bl	8001e26 <u8g2_add_vector_x>
 8001f04:	4603      	mov	r3, r0
 8001f06:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001f08:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001f0c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	7c1b      	ldrb	r3, [r3, #16]
 8001f14:	8978      	ldrh	r0, [r7, #10]
 8001f16:	f7ff ff4b 	bl	8001db0 <u8g2_add_vector_y>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8001f1e:	78bb      	ldrb	r3, [r7, #2]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	7b9a      	ldrb	r2, [r3, #14]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001f2e:	7dbb      	ldrb	r3, [r7, #22]
 8001f30:	b298      	uxth	r0, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	7c1b      	ldrb	r3, [r3, #16]
 8001f36:	897a      	ldrh	r2, [r7, #10]
 8001f38:	89b9      	ldrh	r1, [r7, #12]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fcf2 	bl	8002928 <u8g2_DrawHVLine>
 8001f44:	e013      	b.n	8001f6e <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	7b5b      	ldrb	r3, [r3, #13]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	7bda      	ldrb	r2, [r3, #15]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001f58:	7dbb      	ldrb	r3, [r7, #22]
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	7c1b      	ldrb	r3, [r3, #16]
 8001f60:	897a      	ldrh	r2, [r7, #10]
 8001f62:	89b9      	ldrh	r1, [r7, #12]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	4603      	mov	r3, r0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fcdd 	bl	8002928 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8001f6e:	7dfa      	ldrb	r2, [r7, #23]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d309      	bcc.n	8001f8a <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8001f76:	7dfa      	ldrb	r2, [r7, #23]
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	757b      	strb	r3, [r7, #21]
		ly++;
 8001f82:	7d3b      	ldrb	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8001f88:	e79d      	b.n	8001ec6 <u8g2_font_decode_len+0x2a>
			break;
 8001f8a:	bf00      	nop
	}
	lx += cnt;
 8001f8c:	7d7a      	ldrb	r2, [r7, #21]
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	4413      	add	r3, r2
 8001f92:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8001f94:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8001f9c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	725a      	strb	r2, [r3, #9]

}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3360      	adds	r3, #96	; 0x60
 8001fba:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001fce:	4619      	mov	r1, r3
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fe80 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b25a      	sxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fe75 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b25a      	sxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	7b9b      	ldrb	r3, [r3, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	73da      	strb	r2, [r3, #15]
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffbc 	bl	8001fac <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800203a:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002042:	4619      	mov	r1, r3
 8002044:	6978      	ldr	r0, [r7, #20]
 8002046:	f7ff fe90 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
 800204a:	4603      	mov	r3, r0
 800204c:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002054:	4619      	mov	r1, r3
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff fe87 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
 800205c:	4603      	mov	r3, r0
 800205e:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002066:	4619      	mov	r1, r3
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7ff fe7e 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
 800206e:	4603      	mov	r3, r0
 8002070:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f340 80d7 	ble.w	800222c <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	8898      	ldrh	r0, [r3, #4]
 8002082:	7cfa      	ldrb	r2, [r7, #19]
 8002084:	7c7b      	ldrb	r3, [r7, #17]
 8002086:	4413      	add	r3, r2
 8002088:	b2db      	uxtb	r3, r3
 800208a:	425b      	negs	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	b25a      	sxtb	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	7c1b      	ldrb	r3, [r3, #16]
 8002094:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002098:	f7ff fec5 	bl	8001e26 <u8g2_add_vector_x>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	88d8      	ldrh	r0, [r3, #6]
 80020a8:	7cfa      	ldrb	r2, [r7, #19]
 80020aa:	7c7b      	ldrb	r3, [r7, #17]
 80020ac:	4413      	add	r3, r2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	425b      	negs	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	b25a      	sxtb	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	7c1b      	ldrb	r3, [r3, #16]
 80020ba:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80020be:	f7ff fe77 	bl	8001db0 <u8g2_add_vector_y>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	88db      	ldrh	r3, [r3, #6]
 80020d4:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 80020d6:	8bfb      	ldrh	r3, [r7, #30]
 80020d8:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 80020da:	8b7b      	ldrh	r3, [r7, #26]
 80020dc:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	7c1b      	ldrb	r3, [r3, #16]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d85a      	bhi.n	800219c <u8g2_font_decode_glyph+0x180>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <u8g2_font_decode_glyph+0xd0>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002119 	.word	0x08002119
 80020f4:	08002141 	.word	0x08002141
 80020f8:	08002175 	.word	0x08002175
			case 0:
				x1 += decode->glyph_width;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002102:	b29a      	uxth	r2, r3
 8002104:	8bbb      	ldrh	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 800210a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800210e:	b29a      	uxth	r2, r3
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	833b      	strh	r3, [r7, #24]
				break;
 8002116:	e041      	b.n	800219c <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002118:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800211c:	b29b      	uxth	r3, r3
 800211e:	8bfa      	ldrh	r2, [r7, #30]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002124:	8bfb      	ldrh	r3, [r7, #30]
 8002126:	3301      	adds	r3, #1
 8002128:	83fb      	strh	r3, [r7, #30]
				x1++;
 800212a:	8bbb      	ldrh	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002136:	b29a      	uxth	r2, r3
 8002138:	8b3b      	ldrh	r3, [r7, #24]
 800213a:	4413      	add	r3, r2
 800213c:	833b      	strh	r3, [r7, #24]
				break;
 800213e:	e02d      	b.n	800219c <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002146:	b29b      	uxth	r3, r3
 8002148:	8bfa      	ldrh	r2, [r7, #30]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800214e:	8bfb      	ldrh	r3, [r7, #30]
 8002150:	3301      	adds	r3, #1
 8002152:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002154:	8bbb      	ldrh	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 800215a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800215e:	b29b      	uxth	r3, r3
 8002160:	8b7a      	ldrh	r2, [r7, #26]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002166:	8b7b      	ldrh	r3, [r7, #26]
 8002168:	3301      	adds	r3, #1
 800216a:	837b      	strh	r3, [r7, #26]
				y1++;
 800216c:	8b3b      	ldrh	r3, [r7, #24]
 800216e:	3301      	adds	r3, #1
 8002170:	833b      	strh	r3, [r7, #24]
				break;
 8002172:	e013      	b.n	800219c <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002178:	b29a      	uxth	r2, r3
 800217a:	8bbb      	ldrh	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002186:	b29b      	uxth	r3, r3
 8002188:	8b7a      	ldrh	r2, [r7, #26]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	3301      	adds	r3, #1
 8002192:	837b      	strh	r3, [r7, #26]
				y1++;
 8002194:	8b3b      	ldrh	r3, [r7, #24]
 8002196:	3301      	adds	r3, #1
 8002198:	833b      	strh	r3, [r7, #24]
				break;
 800219a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 800219c:	8bb8      	ldrh	r0, [r7, #28]
 800219e:	8b7a      	ldrh	r2, [r7, #26]
 80021a0:	8bf9      	ldrh	r1, [r7, #30]
 80021a2:	8b3b      	ldrh	r3, [r7, #24]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fcf6 	bl	8002b9a <u8g2_IsIntersection>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <u8g2_font_decode_glyph+0x19e>
				return d;
 80021b4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80021b8:	e03a      	b.n	8002230 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80021cc:	4619      	mov	r1, r3
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff fd81 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80021de:	4619      	mov	r1, r3
 80021e0:	6978      	ldr	r0, [r7, #20]
 80021e2:	f7ff fd78 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fe53 	bl	8001e9c <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fe4d 	bl	8001e9c <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002202:	2101      	movs	r1, #1
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f7ff fd66 	bl	8001cd6 <u8g2_font_decode_get_unsigned_bits>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ec      	bne.n	80021ea <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002216:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800221a:	429a      	cmp	r2, r3
 800221c:	dd00      	ble.n	8002220 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800221e:	e7d2      	b.n	80021c6 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002220:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	7b9a      	ldrb	r2, [r3, #14]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 800222c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3317      	adds	r3, #23
 800224e:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d82a      	bhi.n	80022ac <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d907      	bls.n	800226c <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002262:	461a      	mov	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d906      	bls.n	8002280 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002278:	461a      	mov	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04e      	beq.n	8002328 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	429a      	cmp	r2, r3
 8002294:	d102      	bne.n	800229c <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3302      	adds	r3, #2
 800229a:	e049      	b.n	8002330 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80022aa:	e7e9      	b.n	8002280 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80022b2:	461a      	mov	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 80022be:	2100      	movs	r1, #0
 80022c0:	6938      	ldr	r0, [r7, #16]
 80022c2:	f7ff fc40 	bl	8001b46 <u8g2_font_get_word>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 80022d0:	2102      	movs	r1, #2
 80022d2:	6938      	ldr	r0, [r7, #16]
 80022d4:	f7ff fc37 	bl	8001b46 <u8g2_font_get_word>
 80022d8:	4603      	mov	r3, r0
 80022da:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	3304      	adds	r3, #4
 80022e0:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 80022e2:	89fa      	ldrh	r2, [r7, #14]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3e9      	bcc.n	80022be <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	4313      	orrs	r3, r2
 8002302:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 800230a:	89fa      	ldrh	r2, [r7, #14]
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	429a      	cmp	r2, r3
 8002310:	d102      	bne.n	8002318 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3303      	adds	r3, #3
 8002316:	e00b      	b.n	8002330 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3302      	adds	r3, #2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002326:	e7e0      	b.n	80022ea <u8g2_font_get_glyph_data+0xb2>
				break;
 8002328:	bf00      	nop
 800232a:	e000      	b.n	800232e <u8g2_font_get_glyph_data+0xf6>
				break;
 800232c:	bf00      	nop
		}
	}
#endif

	return NULL;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	460b      	mov	r3, r1
 800234c:	813b      	strh	r3, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	897a      	ldrh	r2, [r7, #10]
 800235a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	893a      	ldrh	r2, [r7, #8]
 8002362:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4619      	mov	r1, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff ff64 	bl	8002238 <u8g2_font_get_glyph_data>
 8002370:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7ff fe4e 	bl	800201c <u8g2_font_decode_glyph>
 8002380:	4603      	mov	r3, r0
 8002382:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002384:	8afb      	ldrh	r3, [r7, #22]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff4a 	bl	8002238 <u8g2_font_get_glyph_data>
 80023a4:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <u8g2_GetGlyphWidth+0x22>
		return 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e027      	b.n	8002400 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fdfa 	bl	8001fac <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f7ff fccf 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff fcc0 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7ff fcb6 	bl	8001d6a <u8g2_font_decode_get_signed_bits>
 80023fe:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
	...

08002428 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	813b      	strh	r3, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002448:	2b03      	cmp	r3, #3
 800244a:	d833      	bhi.n	80024b4 <u8g2_DrawGlyph+0x8c>
 800244c:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <u8g2_DrawGlyph+0x2c>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	08002465 	.word	0x08002465
 8002458:	08002479 	.word	0x08002479
 800245c:	0800248d 	.word	0x0800248d
 8002460:	080024a1 	.word	0x080024a1
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	4798      	blx	r3
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	4413      	add	r3, r2
 8002474:	813b      	strh	r3, [r7, #8]
		break;
 8002476:	e01d      	b.n	80024b4 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	4798      	blx	r3
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	817b      	strh	r3, [r7, #10]
		break;
 800248a:	e013      	b.n	80024b4 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	4798      	blx	r3
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	813b      	strh	r3, [r7, #8]
		break;
 800249e:	e009      	b.n	80024b4 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	4798      	blx	r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	897b      	ldrh	r3, [r7, #10]
 80024ae:	4413      	add	r3, r2
 80024b0:	817b      	strh	r3, [r7, #10]
		break;
 80024b2:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	893a      	ldrh	r2, [r7, #8]
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff ff3c 	bl	8002338 <u8g2_font_draw_glyph>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop

080024cc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	4613      	mov	r3, r2
 80024dc:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fd86 	bl	8002ff0 <u8x8_utf8_init>
	sum = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	4611      	mov	r1, r2
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	4798      	blx	r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 80024fa:	8abb      	ldrh	r3, [r7, #20]
 80024fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002500:	4293      	cmp	r3, r2
 8002502:	d038      	beq.n	8002576 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 800250a:	8abb      	ldrh	r3, [r7, #20]
 800250c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002510:	4293      	cmp	r3, r2
 8002512:	d0e9      	beq.n	80024e8 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002514:	8abb      	ldrh	r3, [r7, #20]
 8002516:	893a      	ldrh	r2, [r7, #8]
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff ff84 	bl	8002428 <u8g2_DrawGlyph>
 8002520:	4603      	mov	r3, r0
 8002522:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800252a:	2b03      	cmp	r3, #3
 800252c:	d81e      	bhi.n	800256c <u8g2_draw_string+0xa0>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <u8g2_draw_string+0x68>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002545 	.word	0x08002545
 8002538:	0800254f 	.word	0x0800254f
 800253c:	08002559 	.word	0x08002559
 8002540:	08002563 	.word	0x08002563
			case 0:
				x += delta;
 8002544:	897a      	ldrh	r2, [r7, #10]
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	4413      	add	r3, r2
 800254a:	817b      	strh	r3, [r7, #10]
				break;
 800254c:	e00e      	b.n	800256c <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 800254e:	893a      	ldrh	r2, [r7, #8]
 8002550:	8a7b      	ldrh	r3, [r7, #18]
 8002552:	4413      	add	r3, r2
 8002554:	813b      	strh	r3, [r7, #8]
				break;
 8002556:	e009      	b.n	800256c <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8002558:	897a      	ldrh	r2, [r7, #10]
 800255a:	8a7b      	ldrh	r3, [r7, #18]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	817b      	strh	r3, [r7, #10]
				break;
 8002560:	e004      	b.n	800256c <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8002562:	893a      	ldrh	r2, [r7, #8]
 8002564:	8a7b      	ldrh	r3, [r7, #18]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	813b      	strh	r3, [r7, #8]
				break;
 800256a:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 800256c:	8afa      	ldrh	r2, [r7, #22]
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	4413      	add	r3, r2
 8002572:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002574:	e7b8      	b.n	80024e8 <u8g2_draw_string+0x1c>
			break;
 8002576:	bf00      	nop
		}
	}
	return sum;
 8002578:	8afb      	ldrh	r3, [r7, #22]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop

08002584 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	4613      	mov	r3, r2
 8002594:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <u8g2_DrawUTF8+0x30>)
 800259a:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 800259c:	893a      	ldrh	r2, [r7, #8]
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff ff92 	bl	80024cc <u8g2_draw_string>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	08003037 	.word	0x08003037

080025b8 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05d      	beq.n	8002684 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d04d      	beq.n	8002686 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11c      	bne.n	800262e <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002600:	429a      	cmp	r2, r3
 8002602:	da05      	bge.n	8002610 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 800261c:	429a      	cmp	r2, r3
 800261e:	dd32      	ble.n	8002686 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800262c:	e02b      	b.n	8002686 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002634:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800263c:	4619      	mov	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002644:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8002646:	429a      	cmp	r2, r3
 8002648:	da0d      	bge.n	8002666 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002650:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4413      	add	r3, r2
 800265c:	b2db      	uxtb	r3, r3
 800265e:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002672:	429a      	cmp	r2, r3
 8002674:	dd07      	ble.n	8002686 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002682:	e000      	b.n	8002686 <u8g2_UpdateRefHeight+0xce>
		return;
 8002684:	bf00      	nop
	}
}
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	return 0;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a03      	ldr	r2, [pc, #12]	; (80026bc <u8g2_SetFontPosBaseline+0x18>)
 80026b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	0800268f 	.word	0x0800268f

080026c0 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80026ce:	81fb      	strh	r3, [r7, #14]
	tmp++;
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	3301      	adds	r3, #1
 80026d4:	81fb      	strh	r3, [r7, #14]
	return tmp;
 80026d6:	89fb      	ldrh	r3, [r7, #14]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <u8g2_SetFontPosTop+0x18>)
 80026f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	080026c1 	.word	0x080026c1

08002700 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d00b      	beq.n	800272c <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3374      	adds	r3, #116	; 0x74
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa2f 	bl	8001b84 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff46 	bl	80025b8 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fc50 	bl	8002ff0 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	4611      	mov	r1, r2
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	4603      	mov	r3, r0
 8002768:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 800276a:	893b      	ldrh	r3, [r7, #8]
 800276c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002770:	4293      	cmp	r3, r2
 8002772:	d01c      	beq.n	80027ae <u8g2_string_width+0x7a>
			break;
		str++;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002780:	4293      	cmp	r3, r2
 8002782:	d0e9      	beq.n	8002758 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff fe00 	bl	800238e <u8g2_GetGlyphWidth>
 800278e:	4603      	mov	r3, r0
 8002790:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8002792:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002796:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800279a:	d103      	bne.n	80027a4 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80027a2:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 80027a4:	89fa      	ldrh	r2, [r7, #14]
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80027ac:	e7d4      	b.n	8002758 <u8g2_string_width+0x24>
			break;
 80027ae:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01b      	beq.n	80027f2 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 80027ba:	89fa      	ldrh	r2, [r7, #14]
 80027bc:	89bb      	ldrh	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	4413      	add	r3, r2
 80027ce:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	4413      	add	r3, r2
 80027dc:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 80027de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dd05      	ble.n	80027f2 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 80027e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	4413      	add	r3, r2
 80027f0:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 80027f2:	89fb      	ldrh	r3, [r7, #14]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <u8g2_GetStrWidth+0x24>)
 800280a:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ff90 	bl	8002734 <u8g2_string_width>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800300b 	.word	0x0800300b

08002824 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <u8g2_GetUTF8Width+0x24>)
 8002832:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff7c 	bl	8002734 <u8g2_string_width>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08003037 	.word	0x08003037

0800284c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	460b      	mov	r3, r1
 800285c:	80fb      	strh	r3, [r7, #6]
 800285e:	4613      	mov	r3, r2
 8002860:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002868:	8afb      	ldrh	r3, [r7, #22]
 800286a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	8abb      	ldrh	r3, [r7, #20]
 8002872:	4413      	add	r3, r2
 8002874:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002876:	8afa      	ldrh	r2, [r7, #22]
 8002878:	8abb      	ldrh	r3, [r7, #20]
 800287a:	429a      	cmp	r2, r3
 800287c:	d90b      	bls.n	8002896 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800287e:	8afa      	ldrh	r2, [r7, #22]
 8002880:	88bb      	ldrh	r3, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d205      	bcs.n	8002892 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	82bb      	strh	r3, [r7, #20]
      b--;
 800288a:	8abb      	ldrh	r3, [r7, #20]
 800288c:	3b01      	subs	r3, #1
 800288e:	82bb      	strh	r3, [r7, #20]
 8002890:	e001      	b.n	8002896 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002896:	8afa      	ldrh	r2, [r7, #22]
 8002898:	88bb      	ldrh	r3, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d301      	bcc.n	80028a2 <u8g2_clip_intersection2+0x56>
    return 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	e01c      	b.n	80028dc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80028a2:	8aba      	ldrh	r2, [r7, #20]
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d801      	bhi.n	80028ae <u8g2_clip_intersection2+0x62>
    return 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e016      	b.n	80028dc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80028ae:	8afa      	ldrh	r2, [r7, #22]
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d201      	bcs.n	80028ba <u8g2_clip_intersection2+0x6e>
    a = c;
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80028ba:	8aba      	ldrh	r2, [r7, #20]
 80028bc:	88bb      	ldrh	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d901      	bls.n	80028c6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80028c2:	88bb      	ldrh	r3, [r7, #4]
 80028c4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8afa      	ldrh	r2, [r7, #22]
 80028ca:	801a      	strh	r2, [r3, #0]
  b -= a;
 80028cc:	8aba      	ldrh	r2, [r7, #20]
 80028ce:	8afb      	ldrh	r3, [r7, #22]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	8aba      	ldrh	r2, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
  return 1;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80028e6:	b590      	push	{r4, r7, lr}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	4608      	mov	r0, r1
 80028f0:	4611      	mov	r1, r2
 80028f2:	461a      	mov	r2, r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	817b      	strh	r3, [r7, #10]
 80028f8:	460b      	mov	r3, r1
 80028fa:	813b      	strh	r3, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002904:	893a      	ldrh	r2, [r7, #8]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800290e:	88f8      	ldrh	r0, [r7, #6]
 8002910:	893a      	ldrh	r2, [r7, #8]
 8002912:	8979      	ldrh	r1, [r7, #10]
 8002914:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	4603      	mov	r3, r0
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	47a0      	blx	r4
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bd90      	pop	{r4, r7, pc}

08002928 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b087      	sub	sp, #28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d075      	beq.n	8002a38 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d072      	beq.n	8002a38 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d91a      	bls.n	800298e <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002958:	f897 3020 	ldrb.w	r3, [r7, #32]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d109      	bne.n	8002974 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002960:	897a      	ldrh	r2, [r7, #10]
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	b29b      	uxth	r3, r3
 8002968:	817b      	strh	r3, [r7, #10]
	  x++;
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	3301      	adds	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	e00c      	b.n	800298e <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002974:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d108      	bne.n	800298e <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	813b      	strh	r3, [r7, #8]
	  y++;
 8002986:	893b      	ldrh	r3, [r7, #8]
 8002988:	3301      	adds	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800298e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800299a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11a      	bne.n	80029d8 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d83b      	bhi.n	8002a26 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d937      	bls.n	8002a2a <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80029c6:	1db9      	adds	r1, r7, #6
 80029c8:	f107 000a 	add.w	r0, r7, #10
 80029cc:	f7ff ff3e 	bl	800284c <u8g2_clip_intersection2>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11a      	bne.n	8002a0c <u8g2_DrawHVLine+0xe4>
	  return;
 80029d6:	e02f      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d824      	bhi.n	8002a2e <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d920      	bls.n	8002a32 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80029fc:	1db9      	adds	r1, r7, #6
 80029fe:	f107 0008 	add.w	r0, r7, #8
 8002a02:	f7ff ff23 	bl	800284c <u8g2_clip_intersection2>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d014      	beq.n	8002a36 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	689c      	ldr	r4, [r3, #8]
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	88f8      	ldrh	r0, [r7, #6]
 8002a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	4603      	mov	r3, r0
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	47a0      	blx	r4
 8002a24:	e008      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
	  return;
 8002a26:	bf00      	nop
 8002a28:	e006      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
	  return;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
	  return;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
	  return;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <u8g2_DrawHVLine+0x110>
	  return;
 8002a36:	bf00      	nop
    }
}
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}

08002a3e <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	817b      	strh	r3, [r7, #10]
 8002a50:	460b      	mov	r3, r1
 8002a52:	813b      	strh	r3, [r7, #8]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	893a      	ldrh	r2, [r7, #8]
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	2000      	movs	r0, #0
 8002a60:	9000      	str	r0, [sp, #0]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff60 	bl	8002928 <u8g2_DrawHVLine>
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	460b      	mov	r3, r1
 8002a84:	813b      	strh	r3, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	2001      	movs	r0, #1
 8002a92:	9000      	str	r0, [sp, #0]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff ff47 	bl	8002928 <u8g2_DrawHVLine>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002ab8:	883a      	ldrh	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d31a      	bcc.n	8002af4 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002ac4:	883a      	ldrh	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d216      	bcs.n	8002af8 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d312      	bcc.n	8002afc <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d20e      	bcs.n	8002b00 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002ae2:	883a      	ldrh	r2, [r7, #0]
 8002ae4:	8879      	ldrh	r1, [r7, #2]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2301      	movs	r3, #1
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff1b 	bl	8002928 <u8g2_DrawHVLine>
 8002af2:	e006      	b.n	8002b02 <u8g2_DrawPixel+0x60>
    return;
 8002af4:	bf00      	nop
 8002af6:	e004      	b.n	8002b02 <u8g2_DrawPixel+0x60>
    return;
 8002af8:	bf00      	nop
 8002afa:	e002      	b.n	8002b02 <u8g2_DrawPixel+0x60>
    return;
 8002afc:	bf00      	nop
 8002afe:	e000      	b.n	8002b02 <u8g2_DrawPixel+0x60>
    return;
 8002b00:	bf00      	nop
}
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d903      	bls.n	8002b2a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002b34:	b490      	push	{r4, r7}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	80fb      	strh	r3, [r7, #6]
 8002b46:	4603      	mov	r3, r0
 8002b48:	80bb      	strh	r3, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	807b      	strh	r3, [r7, #2]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	88bb      	ldrh	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d20d      	bcs.n	8002b76 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002b5a:	883a      	ldrh	r2, [r7, #0]
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d901      	bls.n	8002b66 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e014      	b.n	8002b90 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	883b      	ldrh	r3, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d901      	bls.n	8002b72 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e00c      	b.n	8002b90 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002b76:	883a      	ldrh	r2, [r7, #0]
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d907      	bls.n	8002b8e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d901      	bls.n	8002b8a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e002      	b.n	8002b90 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002b8e:	2300      	movs	r3, #0
    }
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc90      	pop	{r4, r7}
 8002b98:	4770      	bx	lr

08002b9a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	817b      	strh	r3, [r7, #10]
 8002bac:	460b      	mov	r3, r1
 8002bae:	813b      	strh	r3, [r7, #8]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002bc0:	8b3b      	ldrh	r3, [r7, #24]
 8002bc2:	893a      	ldrh	r2, [r7, #8]
 8002bc4:	f7ff ffb6 	bl	8002b34 <u8g2_is_intersection_decision_tree>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <u8g2_IsIntersection+0x38>
    return 0; 
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e00a      	b.n	8002be8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	897a      	ldrh	r2, [r7, #10]
 8002be2:	f7ff ffa7 	bl	8002b34 <u8g2_is_intersection_decision_tree>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002c0e:	7efb      	ldrb	r3, [r7, #27]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002c1a:	7e3a      	ldrb	r2, [r7, #24]
 8002c1c:	7efb      	ldrb	r3, [r7, #27]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d801      	bhi.n	8002c3a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002c36:	7e3b      	ldrb	r3, [r7, #24]
 8002c38:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d001      	beq.n	8002c48 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002c44:	7e3b      	ldrb	r3, [r7, #24]
 8002c46:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002c4c:	8afb      	ldrh	r3, [r7, #22]
 8002c4e:	f023 0307 	bic.w	r3, r3, #7
 8002c52:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	7c1b      	ldrb	r3, [r3, #16]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8afa      	ldrh	r2, [r7, #22]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d117      	bne.n	8002cb2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	7ebb      	ldrb	r3, [r7, #26]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	7e7b      	ldrb	r3, [r7, #25]
 8002c96:	4053      	eors	r3, r2
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
	len--;
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e8      	bne.n	8002c82 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002cb0:	e038      	b.n	8002d24 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	7ebb      	ldrb	r3, [r7, #26]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	7e7b      	ldrb	r3, [r7, #25]
 8002cc6:	4053      	eors	r3, r2
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002cce:	7efb      	ldrb	r3, [r7, #27]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002cd4:	7efb      	ldrb	r3, [r7, #27]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	76fb      	strb	r3, [r7, #27]
      len--;
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002ce2:	7efb      	ldrb	r3, [r7, #27]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d114      	bne.n	8002d12 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002cec:	461a      	mov	r2, r3
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d801      	bhi.n	8002d02 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d008      	beq.n	8002d1e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	767b      	strb	r3, [r7, #25]
 8002d10:	e005      	b.n	8002d1e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002d12:	7ebb      	ldrb	r3, [r7, #26]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002d18:	7e7b      	ldrb	r3, [r7, #25]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1c6      	bne.n	8002cb2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002d24:	bf00      	nop
 8002d26:	3724      	adds	r7, #36	; 0x24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ffad 	bl	8002d2e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff fc65 	bl	80026a4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dfe:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e00:	89fb      	ldrh	r3, [r7, #14]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	89fa      	ldrh	r2, [r7, #14]
 8002e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	7c1b      	ldrb	r3, [r3, #16]
 8002e10:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002e12:	89fb      	ldrh	r3, [r7, #14]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	89fa      	ldrh	r2, [r7, #14]
 8002e1c:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e24:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e26:	89fb      	ldrh	r3, [r7, #14]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	89fa      	ldrh	r2, [r7, #14]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e38:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002e42:	4413      	add	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	7c52      	ldrb	r2, [r2, #17]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	dd08      	ble.n	8002e5e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	7c5b      	ldrb	r3, [r3, #17]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	4413      	add	r3, r2
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	8a9a      	ldrh	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	8ada      	ldrh	r2, [r3, #22]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4603      	mov	r3, r0
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fe63 	bl	8002b9a <u8g2_IsIntersection>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002ee2:	e03b      	b.n	8002f5c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d205      	bcs.n	8002f08 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d905      	bls.n	8002f24 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d205      	bcs.n	8002f40 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d905      	bls.n	8002f5c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff3c 	bl	8002dea <u8g2_update_dimension_common>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff7b 	bl	8002eaa <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002fd6:	88f8      	ldrh	r0, [r7, #6]
 8002fd8:	893a      	ldrh	r2, [r7, #8]
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	7e3b      	ldrb	r3, [r7, #24]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff fc7f 	bl	80028e6 <u8g2_draw_hv_line_2dir>
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <u8x8_ascii_next+0x18>
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	2b0a      	cmp	r3, #10
 8003020:	d102      	bne.n	8003028 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003026:	e001      	b.n	800302c <u8x8_ascii_next+0x22>
  return b;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	b29b      	uxth	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <u8x8_utf8_next+0x18>
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	2b0a      	cmp	r3, #10
 800304c:	d102      	bne.n	8003054 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800304e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003052:	e06e      	b.n	8003132 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800305a:	2b00      	cmp	r3, #0
 800305c:	d145      	bne.n	80030ea <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	2bfb      	cmp	r3, #251	; 0xfb
 8003062:	d908      	bls.n	8003076 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2205      	movs	r2, #5
 8003068:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	70fb      	strb	r3, [r7, #3]
 8003074:	e032      	b.n	80030dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	2bf7      	cmp	r3, #247	; 0xf7
 800307a:	d908      	bls.n	800308e <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2204      	movs	r2, #4
 8003080:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	70fb      	strb	r3, [r7, #3]
 800308c:	e026      	b.n	80030dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	2bef      	cmp	r3, #239	; 0xef
 8003092:	d908      	bls.n	80030a6 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	70fb      	strb	r3, [r7, #3]
 80030a4:	e01a      	b.n	80030dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2bdf      	cmp	r3, #223	; 0xdf
 80030aa:	d908      	bls.n	80030be <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	e00e      	b.n	80030dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	2bbf      	cmp	r3, #191	; 0xbf
 80030c2:	d908      	bls.n	80030d6 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	70fb      	strb	r3, [r7, #3]
 80030d4:	e002      	b.n	80030dc <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	e02a      	b.n	8003132 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80030e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80030e8:	e023      	b.n	8003132 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8c1b      	ldrh	r3, [r3, #32]
 80030fe:	019b      	lsls	r3, r3, #6
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800310c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8c1a      	ldrh	r2, [r3, #32]
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003128:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800312c:	e001      	b.n	8003132 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8c1b      	ldrh	r3, [r3, #32]
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691c      	ldr	r4, [r3, #16]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	2300      	movs	r3, #0
 8003150:	2120      	movs	r1, #32
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	47a0      	blx	r4
 8003156:	4603      	mov	r3, r0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}

08003160 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	460b      	mov	r3, r1
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691c      	ldr	r4, [r3, #16]
 8003172:	7afa      	ldrb	r2, [r7, #11]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2117      	movs	r1, #23
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	47a0      	blx	r4
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}

08003186 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003192:	1cfb      	adds	r3, r7, #3
 8003194:	461a      	mov	r2, r3
 8003196:	2101      	movs	r1, #1
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ffe1 	bl	8003160 <u8x8_byte_SendBytes>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68dc      	ldr	r4, [r3, #12]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	2300      	movs	r3, #0
 80031bc:	2115      	movs	r1, #21
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	47a0      	blx	r4
 80031c2:	4603      	mov	r3, r0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68dc      	ldr	r4, [r3, #12]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	2300      	movs	r3, #0
 80031e0:	2116      	movs	r1, #22
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	47a0      	blx	r4
 80031e6:	4603      	mov	r3, r0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}

080031f0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	460b      	mov	r3, r1
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68dc      	ldr	r4, [r3, #12]
 8003202:	7afa      	ldrb	r2, [r7, #11]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2117      	movs	r1, #23
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	47a0      	blx	r4
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}

08003216 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68dc      	ldr	r4, [r3, #12]
 8003222:	2300      	movs	r3, #0
 8003224:	2200      	movs	r2, #0
 8003226:	2118      	movs	r1, #24
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	47a0      	blx	r4
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}

08003236 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003236:	b590      	push	{r4, r7, lr}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68dc      	ldr	r4, [r3, #12]
 8003242:	2300      	movs	r3, #0
 8003244:	2200      	movs	r2, #0
 8003246:	2119      	movs	r1, #25
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	47a0      	blx	r4
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}

08003256 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	73fb      	strb	r3, [r7, #15]
    data++;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2bfe      	cmp	r3, #254	; 0xfe
 8003270:	d031      	beq.n	80032d6 <u8x8_cad_SendSequence+0x80>
 8003272:	2bfe      	cmp	r3, #254	; 0xfe
 8003274:	dc3d      	bgt.n	80032f2 <u8x8_cad_SendSequence+0x9c>
 8003276:	2b19      	cmp	r3, #25
 8003278:	dc3b      	bgt.n	80032f2 <u8x8_cad_SendSequence+0x9c>
 800327a:	2b18      	cmp	r3, #24
 800327c:	da23      	bge.n	80032c6 <u8x8_cad_SendSequence+0x70>
 800327e:	2b16      	cmp	r3, #22
 8003280:	dc02      	bgt.n	8003288 <u8x8_cad_SendSequence+0x32>
 8003282:	2b15      	cmp	r3, #21
 8003284:	da03      	bge.n	800328e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003286:	e034      	b.n	80032f2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003288:	2b17      	cmp	r3, #23
 800328a:	d00e      	beq.n	80032aa <u8x8_cad_SendSequence+0x54>
	return;
 800328c:	e031      	b.n	80032f2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68dc      	ldr	r4, [r3, #12]
 8003298:	7bba      	ldrb	r2, [r7, #14]
 800329a:	7bf9      	ldrb	r1, [r7, #15]
 800329c:	2300      	movs	r3, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	47a0      	blx	r4
	  data++;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	603b      	str	r3, [r7, #0]
	  break;
 80032a8:	e022      	b.n	80032f0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80032b0:	f107 030e 	add.w	r3, r7, #14
 80032b4:	461a      	mov	r2, r3
 80032b6:	2101      	movs	r1, #1
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff99 	bl	80031f0 <u8x8_cad_SendData>
	  data++;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	603b      	str	r3, [r7, #0]
	  break;
 80032c4:	e014      	b.n	80032f0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68dc      	ldr	r4, [r3, #12]
 80032ca:	7bf9      	ldrb	r1, [r7, #15]
 80032cc:	2300      	movs	r3, #0
 80032ce:	2200      	movs	r2, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	47a0      	blx	r4
	  break;
 80032d4:	e00c      	b.n	80032f0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80032dc:	7bbb      	ldrb	r3, [r7, #14]
 80032de:	461a      	mov	r2, r3
 80032e0:	2129      	movs	r1, #41	; 0x29
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9ed 	bl	80036c2 <u8x8_gpio_call>
	  data++;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
	  break;
 80032ee:	bf00      	nop
    cmd = *data;
 80032f0:	e7b6      	b.n	8003260 <u8x8_cad_SendSequence+0xa>
	return;
 80032f2:	bf00      	nop
    }
  }
}
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}
	...

080032fc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	72fb      	strb	r3, [r7, #11]
 800330a:	4613      	mov	r3, r2
 800330c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	3b14      	subs	r3, #20
 8003312:	2b05      	cmp	r3, #5
 8003314:	d82f      	bhi.n	8003376 <u8x8_cad_001+0x7a>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <u8x8_cad_001+0x20>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	08003365 	.word	0x08003365
 8003320:	08003335 	.word	0x08003335
 8003324:	08003349 	.word	0x08003349
 8003328:	0800335d 	.word	0x0800335d
 800332c:	08003365 	.word	0x08003365
 8003330:	08003365 	.word	0x08003365
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003334:	2100      	movs	r1, #0
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff ff00 	bl	800313c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800333c:	7abb      	ldrb	r3, [r7, #10]
 800333e:	4619      	mov	r1, r3
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff ff20 	bl	8003186 <u8x8_byte_SendByte>
      break;
 8003346:	e018      	b.n	800337a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003348:	2100      	movs	r1, #0
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fef6 	bl	800313c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003350:	7abb      	ldrb	r3, [r7, #10]
 8003352:	4619      	mov	r1, r3
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff ff16 	bl	8003186 <u8x8_byte_SendByte>
      break;
 800335a:	e00e      	b.n	800337a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800335c:	2101      	movs	r1, #1
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff feec 	bl	800313c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691c      	ldr	r4, [r3, #16]
 8003368:	7aba      	ldrb	r2, [r7, #10]
 800336a:	7af9      	ldrb	r1, [r7, #11]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	47a0      	blx	r4
 8003372:	4603      	mov	r3, r0
 8003374:	e002      	b.n	800337c <u8x8_cad_001+0x80>
    default:
      return 0;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <u8x8_cad_001+0x80>
  }
  return 1;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	72fb      	strb	r3, [r7, #11]
 8003392:	4613      	mov	r3, r2
 8003394:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	3b0b      	subs	r3, #11
 800339a:	2b04      	cmp	r3, #4
 800339c:	f200 808e 	bhi.w	80034bc <u8x8_d_uc1604_common+0x138>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <u8x8_d_uc1604_common+0x24>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	08003451 	.word	0x08003451
 80033ac:	080034bd 	.word	0x080034bd
 80033b0:	0800346b 	.word	0x0800346b
 80033b4:	0800349d 	.word	0x0800349d
 80033b8:	080033bd 	.word	0x080033bd
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff ff2a 	bl	8003216 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	795b      	ldrb	r3, [r3, #5]
 80033c6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fee5 	bl	80031a8 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f043 0310 	orr.w	r3, r3, #16
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fedb 	bl	80031a8 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	799b      	ldrb	r3, [r3, #6]
 80033f6:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80033fe:	7dbb      	ldrb	r3, [r7, #22]
 8003400:	4413      	add	r3, r2
 8003402:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003404:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b25b      	sxtb	r3, r3
 800340e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fec5 	bl	80031a8 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003424:	7d7b      	ldrb	r3, [r7, #21]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003430:	7d7b      	ldrb	r3, [r7, #21]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4619      	mov	r1, r3
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff feda 	bl	80031f0 <u8x8_cad_SendData>
	arg_int--;
 800343c:	7abb      	ldrb	r3, [r7, #10]
 800343e:	3b01      	subs	r3, #1
 8003440:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003442:	7abb      	ldrb	r3, [r7, #10]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f3      	bne.n	8003430 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fef4 	bl	8003236 <u8x8_cad_EndTransfer>
      break;
 800344e:	e037      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003450:	7abb      	ldrb	r3, [r7, #10]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003456:	491d      	ldr	r1, [pc, #116]	; (80034cc <u8x8_d_uc1604_common+0x148>)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fefc 	bl	8003256 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 800345e:	e02f      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003460:	491b      	ldr	r1, [pc, #108]	; (80034d0 <u8x8_d_uc1604_common+0x14c>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fef7 	bl	8003256 <u8x8_cad_SendSequence>
      break;
 8003468:	e02a      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800346a:	7abb      	ldrb	r3, [r7, #10]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003470:	4918      	ldr	r1, [pc, #96]	; (80034d4 <u8x8_d_uc1604_common+0x150>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff feef 	bl	8003256 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	7c9a      	ldrb	r2, [r3, #18]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003484:	e01c      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003486:	4914      	ldr	r1, [pc, #80]	; (80034d8 <u8x8_d_uc1604_common+0x154>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fee4 	bl	8003256 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	7cda      	ldrb	r2, [r3, #19]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800349a:	e011      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff feba 	bl	8003216 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80034a2:	2181      	movs	r1, #129	; 0x81
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fe7f 	bl	80031a8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 80034aa:	7abb      	ldrb	r3, [r7, #10]
 80034ac:	4619      	mov	r1, r3
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fe8c 	bl	80031cc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff febe 	bl	8003236 <u8x8_cad_EndTransfer>
      break;
 80034ba:	e001      	b.n	80034c0 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	0800d564 	.word	0x0800d564
 80034d0:	0800d574 	.word	0x0800d574
 80034d4:	0800d57c 	.word	0x0800d57c
 80034d8:	0800d584 	.word	0x0800d584

080034dc <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	72fb      	strb	r3, [r7, #11]
 80034ea:	4613      	mov	r3, r2
 80034ec:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80034ee:	7aba      	ldrb	r2, [r7, #10]
 80034f0:	7af9      	ldrb	r1, [r7, #11]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff45 	bl	8003384 <u8x8_d_uc1604_common>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d114      	bne.n	800352a <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	2b09      	cmp	r3, #9
 8003504:	d002      	beq.n	800350c <u8x8_d_uc1604_jlx19264+0x30>
 8003506:	2b0a      	cmp	r3, #10
 8003508:	d005      	beq.n	8003516 <u8x8_d_uc1604_jlx19264+0x3a>
 800350a:	e00c      	b.n	8003526 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 800350c:	490a      	ldr	r1, [pc, #40]	; (8003538 <u8x8_d_uc1604_jlx19264+0x5c>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f816 	bl	8003540 <u8x8_d_helper_display_setup_memory>
	break;
 8003514:	e00a      	b.n	800352c <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f825 	bl	8003566 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 800351c:	4907      	ldr	r1, [pc, #28]	; (800353c <u8x8_d_uc1604_jlx19264+0x60>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fe99 	bl	8003256 <u8x8_cad_SendSequence>
	break;
 8003524:	e002      	b.n	800352c <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003526:	2300      	movs	r3, #0
 8003528:	e001      	b.n	800352e <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 800352a:	bf00      	nop
  return 1;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	0800d58c 	.word	0x0800d58c
 800353c:	0800d5a4 	.word	0x0800d5a4

08003540 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	7c9a      	ldrb	r2, [r3, #18]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695c      	ldr	r4, [r3, #20]
 8003572:	2300      	movs	r3, #0
 8003574:	2200      	movs	r2, #0
 8003576:	2128      	movs	r1, #40	; 0x28
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68dc      	ldr	r4, [r3, #12]
 8003580:	2300      	movs	r3, #0
 8003582:	2200      	movs	r2, #0
 8003584:	2114      	movs	r1, #20
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800358a:	2201      	movs	r2, #1
 800358c:	214b      	movs	r1, #75	; 0x4b
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f897 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	2129      	movs	r1, #41	; 0x29
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f88f 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	214b      	movs	r1, #75	; 0x4b
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f88a 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	791b      	ldrb	r3, [r3, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	2129      	movs	r1, #41	; 0x29
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f882 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80035be:	2201      	movs	r2, #1
 80035c0:	214b      	movs	r1, #75	; 0x4b
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f87d 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	795b      	ldrb	r3, [r3, #5]
 80035ce:	461a      	mov	r2, r3
 80035d0:	2129      	movs	r1, #41	; 0x29
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f875 	bl	80036c2 <u8x8_gpio_call>
}    
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	70fb      	strb	r3, [r7, #3]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70bb      	strb	r3, [r7, #2]
 80035f6:	4613      	mov	r3, r2
 80035f8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003602:	787b      	ldrb	r3, [r7, #1]
 8003604:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689c      	ldr	r4, [r3, #8]
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	2201      	movs	r2, #1
 8003614:	210f      	movs	r1, #15
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	47a0      	blx	r4
 800361a:	4603      	mov	r3, r0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	bd90      	pop	{r4, r7, pc}

08003624 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689c      	ldr	r4, [r3, #8]
 8003630:	2300      	movs	r3, #0
 8003632:	2200      	movs	r2, #0
 8003634:	2109      	movs	r1, #9
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	47a0      	blx	r4
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}

08003642 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003642:	b590      	push	{r4, r7, lr}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689c      	ldr	r4, [r3, #8]
 800364e:	2300      	movs	r3, #0
 8003650:	2200      	movs	r2, #0
 8003652:	210a      	movs	r1, #10
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	47a0      	blx	r4
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bd90      	pop	{r4, r7, pc}

08003660 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689c      	ldr	r4, [r3, #8]
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	2300      	movs	r3, #0
 8003674:	210b      	movs	r1, #11
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	47a0      	blx	r4
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003682:	b590      	push	{r4, r7, lr}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689c      	ldr	r4, [r3, #8]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	2300      	movs	r3, #0
 8003696:	210e      	movs	r1, #14
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	47a0      	blx	r4
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}

080036a4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689c      	ldr	r4, [r3, #8]
 80036b0:	2300      	movs	r3, #0
 80036b2:	2200      	movs	r2, #0
 80036b4:	2110      	movs	r1, #16
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	47a0      	blx	r4
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
 80036ce:	4613      	mov	r3, r2
 80036d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695c      	ldr	r4, [r3, #20]
 80036d6:	78ba      	ldrb	r2, [r7, #2]
 80036d8:	78f9      	ldrb	r1, [r7, #3]
 80036da:	2300      	movs	r3, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	47a0      	blx	r4
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}

080036e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	72fb      	strb	r3, [r7, #11]
 80036f6:	4613      	mov	r3, r2
 80036f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <u8x8_SetupDefaults+0x58>)
 800371a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <u8x8_SetupDefaults+0x58>)
 8003720:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <u8x8_SetupDefaults+0x58>)
 8003726:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <u8x8_SetupDefaults+0x58>)
 800372c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	22ff      	movs	r2, #255	; 0xff
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	080036e9 	.word	0x080036e9

08003764 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ffc8 	bl	8003708 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ff47 	bl	8003624 <u8x8_SetupMemory>
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037a2:	490d      	ldr	r1, [pc, #52]	; (80037d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a8:	e002      	b.n	80037b0 <LoopCopyDataInit>

080037aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ae:	3304      	adds	r3, #4

080037b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b4:	d3f9      	bcc.n	80037aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037b8:	4c0a      	ldr	r4, [pc, #40]	; (80037e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037bc:	e001      	b.n	80037c2 <LoopFillZerobss>

080037be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c0:	3204      	adds	r2, #4

080037c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c4:	d3fb      	bcc.n	80037be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037c6:	f7fd fde5 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ca:	f008 f945 	bl	800ba58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ce:	f7fd fb4b 	bl	8000e68 <main>
  bx lr
 80037d2:	4770      	bx	lr
  ldr r0, =_sdata
 80037d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d8:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80037dc:	0800d604 	.word	0x0800d604
  ldr r2, =_sbss
 80037e0:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80037e4:	20001e1c 	.word	0x20001e1c

080037e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037e8:	e7fe      	b.n	80037e8 <ADC1_2_IRQHandler>
	...

080037ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_Init+0x28>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_Init+0x28>)
 80037f6:	f043 0310 	orr.w	r3, r3, #16
 80037fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fc:	2003      	movs	r0, #3
 80037fe:	f000 f95d 	bl	8003abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003802:	200f      	movs	r0, #15
 8003804:	f000 f808 	bl	8003818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003808:	f7fd fca8 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000

08003818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_InitTick+0x54>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_InitTick+0x58>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f979 	bl	8003b2e <HAL_SYSTICK_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00e      	b.n	8003864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d80a      	bhi.n	8003862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384c:	2200      	movs	r2, #0
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003854:	f000 f93d 	bl	8003ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003858:	4a06      	ldr	r2, [pc, #24]	; (8003874 <HAL_InitTick+0x5c>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000230 	.word	0x20000230
 8003870:	20000238 	.word	0x20000238
 8003874:	20000234 	.word	0x20000234

08003878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_IncTick+0x1c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_IncTick+0x20>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4413      	add	r3, r2
 8003888:	4a03      	ldr	r2, [pc, #12]	; (8003898 <HAL_IncTick+0x20>)
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000238 	.word	0x20000238
 8003898:	20000c64 	.word	0x20000c64

0800389c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_GetTick+0x10>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	20000c64 	.word	0x20000c64

080038b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff fff0 	bl	800389c <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c8:	d005      	beq.n	80038d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_Delay+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038d6:	bf00      	nop
 80038d8:	f7ff ffe0 	bl	800389c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d8f7      	bhi.n	80038d8 <HAL_Delay+0x28>
  {
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000238 	.word	0x20000238

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4906      	ldr	r1, [pc, #24]	; (8003990 <__NVIC_EnableIRQ+0x34>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a50:	f3bf 8f4f 	dsb	sy
}
 8003a54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <__NVIC_SystemReset+0x24>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a5e:	4904      	ldr	r1, [pc, #16]	; (8003a70 <__NVIC_SystemReset+0x24>)
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_SystemReset+0x28>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a66:	f3bf 8f4f 	dsb	sy
}
 8003a6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <__NVIC_SystemReset+0x20>
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	05fa0004 	.word	0x05fa0004

08003a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a88:	d301      	bcc.n	8003a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <SysTick_Config+0x40>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a96:	210f      	movs	r1, #15
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	f7ff ff7a 	bl	8003994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff17 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae4:	f7ff ff2c 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff7a 	bl	80039e8 <NVIC_EncodePriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff49 	bl	8003994 <__NVIC_SetPriority>
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff1f 	bl	800395c <__NVIC_EnableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b2a:	f7ff ff8f 	bl	8003a4c <__NVIC_SystemReset>

08003b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ff9e 	bl	8003a78 <SysTick_Config>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b08b      	sub	sp, #44	; 0x2c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5a:	e169      	b.n	8003e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f040 8158 	bne.w	8003e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a9a      	ldr	r2, [pc, #616]	; (8003de8 <HAL_GPIO_Init+0x2a0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d05e      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
 8003b84:	4a98      	ldr	r2, [pc, #608]	; (8003de8 <HAL_GPIO_Init+0x2a0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d875      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003b8a:	4a98      	ldr	r2, [pc, #608]	; (8003dec <HAL_GPIO_Init+0x2a4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d058      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
 8003b90:	4a96      	ldr	r2, [pc, #600]	; (8003dec <HAL_GPIO_Init+0x2a4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d86f      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003b96:	4a96      	ldr	r2, [pc, #600]	; (8003df0 <HAL_GPIO_Init+0x2a8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d052      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
 8003b9c:	4a94      	ldr	r2, [pc, #592]	; (8003df0 <HAL_GPIO_Init+0x2a8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d869      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003ba2:	4a94      	ldr	r2, [pc, #592]	; (8003df4 <HAL_GPIO_Init+0x2ac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d04c      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
 8003ba8:	4a92      	ldr	r2, [pc, #584]	; (8003df4 <HAL_GPIO_Init+0x2ac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d863      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003bae:	4a92      	ldr	r2, [pc, #584]	; (8003df8 <HAL_GPIO_Init+0x2b0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d046      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
 8003bb4:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_GPIO_Init+0x2b0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d85d      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003bba:	2b12      	cmp	r3, #18
 8003bbc:	d82a      	bhi.n	8003c14 <HAL_GPIO_Init+0xcc>
 8003bbe:	2b12      	cmp	r3, #18
 8003bc0:	d859      	bhi.n	8003c76 <HAL_GPIO_Init+0x12e>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_GPIO_Init+0x80>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003c43 	.word	0x08003c43
 8003bcc:	08003c1d 	.word	0x08003c1d
 8003bd0:	08003c2f 	.word	0x08003c2f
 8003bd4:	08003c71 	.word	0x08003c71
 8003bd8:	08003c77 	.word	0x08003c77
 8003bdc:	08003c77 	.word	0x08003c77
 8003be0:	08003c77 	.word	0x08003c77
 8003be4:	08003c77 	.word	0x08003c77
 8003be8:	08003c77 	.word	0x08003c77
 8003bec:	08003c77 	.word	0x08003c77
 8003bf0:	08003c77 	.word	0x08003c77
 8003bf4:	08003c77 	.word	0x08003c77
 8003bf8:	08003c77 	.word	0x08003c77
 8003bfc:	08003c77 	.word	0x08003c77
 8003c00:	08003c77 	.word	0x08003c77
 8003c04:	08003c77 	.word	0x08003c77
 8003c08:	08003c77 	.word	0x08003c77
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	4a79      	ldr	r2, [pc, #484]	; (8003dfc <HAL_GPIO_Init+0x2b4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c1a:	e02c      	b.n	8003c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	623b      	str	r3, [r7, #32]
          break;
 8003c22:	e029      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	623b      	str	r3, [r7, #32]
          break;
 8003c2c:	e024      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	3308      	adds	r3, #8
 8003c34:	623b      	str	r3, [r7, #32]
          break;
 8003c36:	e01f      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	623b      	str	r3, [r7, #32]
          break;
 8003c40:	e01a      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	623b      	str	r3, [r7, #32]
          break;
 8003c4e:	e013      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c58:	2308      	movs	r3, #8
 8003c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	611a      	str	r2, [r3, #16]
          break;
 8003c62:	e009      	b.n	8003c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c64:	2308      	movs	r3, #8
 8003c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	615a      	str	r2, [r3, #20]
          break;
 8003c6e:	e003      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c70:	2300      	movs	r3, #0
 8003c72:	623b      	str	r3, [r7, #32]
          break;
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x130>
          break;
 8003c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2bff      	cmp	r3, #255	; 0xff
 8003c7c:	d801      	bhi.n	8003c82 <HAL_GPIO_Init+0x13a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	e001      	b.n	8003c86 <HAL_GPIO_Init+0x13e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2bff      	cmp	r3, #255	; 0xff
 8003c8c:	d802      	bhi.n	8003c94 <HAL_GPIO_Init+0x14c>
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	e002      	b.n	8003c9a <HAL_GPIO_Init+0x152>
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	3b08      	subs	r3, #8
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	210f      	movs	r1, #15
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	401a      	ands	r2, r3
 8003cac:	6a39      	ldr	r1, [r7, #32]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80b1 	beq.w	8003e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cc8:	4b4d      	ldr	r3, [pc, #308]	; (8003e00 <HAL_GPIO_Init+0x2b8>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4a4c      	ldr	r2, [pc, #304]	; (8003e00 <HAL_GPIO_Init+0x2b8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6193      	str	r3, [r2, #24]
 8003cd4:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <HAL_GPIO_Init+0x2b8>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ce0:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_GPIO_Init+0x2bc>)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <HAL_GPIO_Init+0x2c0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_GPIO_Init+0x1ec>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	; (8003e0c <HAL_GPIO_Init+0x2c4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00d      	beq.n	8003d30 <HAL_GPIO_Init+0x1e8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3e      	ldr	r2, [pc, #248]	; (8003e10 <HAL_GPIO_Init+0x2c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <HAL_GPIO_Init+0x1e4>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <HAL_GPIO_Init+0x2cc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_GPIO_Init+0x1e0>
 8003d24:	2303      	movs	r3, #3
 8003d26:	e006      	b.n	8003d36 <HAL_GPIO_Init+0x1ee>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	e004      	b.n	8003d36 <HAL_GPIO_Init+0x1ee>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e002      	b.n	8003d36 <HAL_GPIO_Init+0x1ee>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_GPIO_Init+0x1ee>
 8003d34:	2300      	movs	r3, #0
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	f002 0203 	and.w	r2, r2, #3
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d46:	492f      	ldr	r1, [pc, #188]	; (8003e04 <HAL_GPIO_Init+0x2bc>)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	492c      	ldr	r1, [pc, #176]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	e006      	b.n	8003d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	4928      	ldr	r1, [pc, #160]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	4922      	ldr	r1, [pc, #136]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	e006      	b.n	8003da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	491e      	ldr	r1, [pc, #120]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4918      	ldr	r1, [pc, #96]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
 8003dbc:	e006      	b.n	8003dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	4914      	ldr	r1, [pc, #80]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d021      	beq.n	8003e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_GPIO_Init+0x2d0>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
 8003de4:	e021      	b.n	8003e2a <HAL_GPIO_Init+0x2e2>
 8003de6:	bf00      	nop
 8003de8:	10320000 	.word	0x10320000
 8003dec:	10310000 	.word	0x10310000
 8003df0:	10220000 	.word	0x10220000
 8003df4:	10210000 	.word	0x10210000
 8003df8:	10120000 	.word	0x10120000
 8003dfc:	10110000 	.word	0x10110000
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40010800 	.word	0x40010800
 8003e0c:	40010c00 	.word	0x40010c00
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	4909      	ldr	r1, [pc, #36]	; (8003e4c <HAL_GPIO_Init+0x304>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f47f ae8e 	bne.w	8003b5c <HAL_GPIO_Init+0x14>
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	372c      	adds	r7, #44	; 0x2c
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e6c:	e003      	b.n	8003e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	b08b      	sub	sp, #44	; 0x2c
 8003e84:	af06      	add	r7, sp, #24
 8003e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0fd      	b.n	800408e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f007 fb26 	bl	800b4f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fff7 	bl	8006eac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	687e      	ldr	r6, [r7, #4]
 8003ec6:	466d      	mov	r5, sp
 8003ec8:	f106 0410 	add.w	r4, r6, #16
 8003ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	1d33      	adds	r3, r6, #4
 8003ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed8:	6838      	ldr	r0, [r7, #0]
 8003eda:	f002 ffc1 	bl	8006e60 <USB_CoreInit>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0ce      	b.n	800408e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f002 fff2 	bl	8006ee0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e04c      	b.n	8003f9c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	3301      	adds	r3, #1
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	b298      	uxth	r0, r3
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3336      	adds	r3, #54	; 0x36
 8003f40:	4602      	mov	r2, r0
 8003f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	440b      	add	r3, r1
 8003f54:	3303      	adds	r3, #3
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	3338      	adds	r3, #56	; 0x38
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	333c      	adds	r3, #60	; 0x3c
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	3340      	adds	r3, #64	; 0x40
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3ad      	bcc.n	8003f02 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e044      	b.n	8004036 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	440b      	add	r3, r1
 8003fba:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	440b      	add	r3, r1
 8004012:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3301      	adds	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3b5      	bcc.n	8003fac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	687e      	ldr	r6, [r7, #4]
 8004048:	466d      	mov	r5, sp
 800404a:	f106 0410 	add.w	r4, r6, #16
 800404e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	1d33      	adds	r3, r6, #4
 8004058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800405a:	6838      	ldr	r0, [r7, #0]
 800405c:	f002 ff4c 	bl	8006ef8 <USB_DevInit>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00d      	b.n	800408e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 fbfe 	bl	8009888 <USB_DevDisconnect>

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004096 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_PCD_Start+0x16>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e016      	b.n	80040da <HAL_PCD_Start+0x44>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fee1 	bl	8006e80 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80040be:	2101      	movs	r1, #1
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f007 fc8c 	bl	800b9de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f005 fbd2 	bl	8009874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f005 fbd4 	bl	800989c <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	d102      	bne.n	8004106 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb5f 	bl	80047c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f005 fbc6 	bl	800989c <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d112      	bne.n	8004142 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412e:	b292      	uxth	r2, r2
 8004130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f007 fa5a 	bl	800b5ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800413a:	2100      	movs	r1, #0
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f923 	bl	8004388 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f005 fba8 	bl	800989c <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004156:	d10b      	bne.n	8004170 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800416a:	b292      	uxth	r2, r2
 800416c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f005 fb91 	bl	800989c <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004184:	d10b      	bne.n	800419e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004198:	b292      	uxth	r2, r2
 800419a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f005 fb7a 	bl	800989c <USB_ReadInterrupts>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d126      	bne.n	8004202 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	b292      	uxth	r2, r2
 80041c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0208 	bic.w	r2, r2, #8
 80041de:	b292      	uxth	r2, r2
 80041e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f007 fa3b 	bl	800b660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fc:	b292      	uxth	r2, r2
 80041fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f005 fb48 	bl	800989c <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	f040 8082 	bne.w	800431e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e010      	b.n	8004242 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	7ffb      	ldrb	r3, [r7, #31]
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	b292      	uxth	r2, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	3320      	adds	r3, #32
 8004236:	443b      	add	r3, r7
 8004238:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800423c:	7ffb      	ldrb	r3, [r7, #31]
 800423e:	3301      	adds	r3, #1
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	7ffb      	ldrb	r3, [r7, #31]
 8004244:	2b07      	cmp	r3, #7
 8004246:	d9eb      	bls.n	8004220 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	b292      	uxth	r2, r2
 800425c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	b292      	uxth	r2, r2
 8004274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004278:	bf00      	nop
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004282:	b29b      	uxth	r3, r3
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f6      	beq.n	800427a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429e:	b292      	uxth	r2, r2
 80042a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e00f      	b.n	80042ca <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4611      	mov	r1, r2
 80042b2:	7ffa      	ldrb	r2, [r7, #31]
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	440a      	add	r2, r1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	3320      	adds	r3, #32
 80042bc:	443b      	add	r3, r7
 80042be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80042c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	3301      	adds	r3, #1
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	d9ec      	bls.n	80042aa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	b292      	uxth	r2, r2
 80042e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	b292      	uxth	r2, r2
 80042fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0204 	orr.w	r2, r2, #4
 8004312:	b292      	uxth	r2, r2
 8004314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f007 f987 	bl	800b62c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f005 faba 	bl	800989c <USB_ReadInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004332:	d10e      	bne.n	8004352 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004346:	b292      	uxth	r2, r2
 8004348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f007 f940 	bl	800b5d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f005 faa0 	bl	800989c <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d10b      	bne.n	8004380 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437a:	b292      	uxth	r2, r2
 800437c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004380:	bf00      	nop
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_PCD_SetAddress+0x1a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e013      	b.n	80043ca <HAL_PCD_SetAddress+0x42>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f005 fa47 	bl	800984e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	70fb      	strb	r3, [r7, #3]
 80043e4:	460b      	mov	r3, r1
 80043e6:	803b      	strh	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da0e      	bge.n	8004416 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	705a      	strb	r2, [r3, #1]
 8004414:	e00e      	b.n	8004434 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 0207 	and.w	r2, r3, #7
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004440:	883a      	ldrh	r2, [r7, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	78ba      	ldrb	r2, [r7, #2]
 800444a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800445e:	78bb      	ldrb	r3, [r7, #2]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d102      	bne.n	800446a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_EP_Open+0xa6>
 8004474:	2302      	movs	r3, #2
 8004476:	e00e      	b.n	8004496 <HAL_PCD_EP_Open+0xc4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f002 fd56 	bl	8006f38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004494:	7afb      	ldrb	r3, [r7, #11]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da0e      	bge.n	80044d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	705a      	strb	r2, [r3, #1]
 80044ce:	e00e      	b.n	80044ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	f003 0207 	and.w	r2, r3, #7
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_PCD_EP_Close+0x6a>
 8004504:	2302      	movs	r3, #2
 8004506:	e00e      	b.n	8004526 <HAL_PCD_EP_Close+0x88>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	4618      	mov	r0, r3
 8004518:	f003 f878 	bl	800760c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	460b      	mov	r3, r1
 800453c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	f003 0207 	and.w	r2, r3, #7
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 fa2a 	bl	80079e4 <USB_EPStartXfer>
 8004590:	e005      	b.n	800459e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6979      	ldr	r1, [r7, #20]
 8004598:	4618      	mov	r0, r3
 800459a:	f003 fa23 	bl	80079e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 0207 	and.w	r2, r3, #7
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	460b      	mov	r3, r1
 80045e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2201      	movs	r2, #1
 8004620:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004622:	7afb      	ldrb	r3, [r7, #11]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	b2da      	uxtb	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800462e:	7afb      	ldrb	r3, [r7, #11]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	4618      	mov	r0, r3
 8004640:	f003 f9d0 	bl	80079e4 <USB_EPStartXfer>
 8004644:	e005      	b.n	8004652 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	4618      	mov	r0, r3
 800464e:	f003 f9c9 	bl	80079e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d901      	bls.n	800467a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04c      	b.n	8004714 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800467a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da0e      	bge.n	80046a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	705a      	strb	r2, [r3, #1]
 800469e:	e00c      	b.n	80046ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_PCD_EP_SetStall+0x7e>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e01c      	b.n	8004714 <HAL_PCD_EP_SetStall+0xb8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 ffb3 	bl	8009654 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f005 f8d8 	bl	80098ba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d901      	bls.n	800473a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e040      	b.n	80047bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800473a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da0e      	bge.n	8004760 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	705a      	strb	r2, [r3, #1]
 800475e:	e00e      	b.n	800477e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 0207 	and.w	r2, r3, #7
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_PCD_EP_ClrStall+0x82>
 800479a:	2302      	movs	r3, #2
 800479c:	e00e      	b.n	80047bc <HAL_PCD_EP_ClrStall+0xa0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f004 ffa1 	bl	80096f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047cc:	e2ec      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80047d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80047e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f040 8161 	bne.w	8004ab0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d152      	bne.n	800489e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	81fb      	strh	r3, [r7, #14]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004818:	b29b      	uxth	r3, r3
 800481a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3328      	adds	r3, #40	; 0x28
 8004820:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482a:	b29b      	uxth	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	3302      	adds	r3, #2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	441a      	add	r2, r3
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800485c:	2100      	movs	r1, #0
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f006 fe9d 	bl	800b59e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 829b 	beq.w	8004da8 <PCD_EP_ISR_Handler+0x5e4>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8296 	bne.w	8004da8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004888:	b2da      	uxtb	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b292      	uxth	r2, r2
 8004890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800489c:	e284      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d034      	beq.n	8004922 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	3306      	adds	r3, #6
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f005 f82f 	bl	800995a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29a      	uxth	r2, r3
 8004904:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004908:	4013      	ands	r3, r2
 800490a:	823b      	strh	r3, [r7, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	8a3a      	ldrh	r2, [r7, #16]
 8004912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004916:	b292      	uxth	r2, r2
 8004918:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f006 fe12 	bl	800b544 <HAL_PCD_SetupStageCallback>
 8004920:	e242      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004922:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004926:	2b00      	cmp	r3, #0
 8004928:	f280 823e 	bge.w	8004da8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004938:	4013      	ands	r3, r2
 800493a:	83bb      	strh	r3, [r7, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	8bba      	ldrh	r2, [r7, #28]
 8004942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004946:	b292      	uxth	r2, r2
 8004948:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	3306      	adds	r3, #6
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d019      	beq.n	80049b2 <PCD_EP_ISR_Handler+0x1ee>
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	6959      	ldr	r1, [r3, #20]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004996:	b29b      	uxth	r3, r3
 8004998:	f004 ffdf 	bl	800995a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	441a      	add	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049aa:	2100      	movs	r1, #0
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f006 fddb 	bl	800b568 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 81f2 	bne.w	8004da8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	4413      	add	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d112      	bne.n	8004a12 <PCD_EP_ISR_Handler+0x24e>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	e02f      	b.n	8004a72 <PCD_EP_ISR_Handler+0x2ae>
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b3e      	cmp	r3, #62	; 0x3e
 8004a18:	d813      	bhi.n	8004a42 <PCD_EP_ISR_Handler+0x27e>
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <PCD_EP_ISR_Handler+0x270>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	3301      	adds	r3, #1
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e017      	b.n	8004a72 <PCD_EP_ISR_Handler+0x2ae>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <PCD_EP_ISR_Handler+0x298>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	827b      	strh	r3, [r7, #18]
 8004a84:	8a7b      	ldrh	r3, [r7, #18]
 8004a86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a8a:	827b      	strh	r3, [r7, #18]
 8004a8c:	8a7b      	ldrh	r3, [r7, #18]
 8004a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a92:	827b      	strh	r3, [r7, #18]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	8a7b      	ldrh	r3, [r7, #18]
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]
 8004aae:	e17b      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ac2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f280 80ea 	bge.w	8004ca0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004afa:	b292      	uxth	r2, r2
 8004afc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004afe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d122      	bne.n	8004b62 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3306      	adds	r3, #6
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b44:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8087 	beq.w	8004c5c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	6959      	ldr	r1, [r3, #20]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	88da      	ldrh	r2, [r3, #6]
 8004b5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b5c:	f004 fefd 	bl	800995a <USB_ReadPMA>
 8004b60:	e07c      	b.n	8004c5c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	78db      	ldrb	r3, [r3, #3]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d108      	bne.n	8004b7c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f927 	bl	8004dc4 <HAL_PCD_EP_DB_Receive>
 8004b76:	4603      	mov	r3, r0
 8004b78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b7a:	e06f      	b.n	8004c5c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d021      	beq.n	8004c1a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	3302      	adds	r3, #2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02a      	beq.n	8004c5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	6959      	ldr	r1, [r3, #20]
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	891a      	ldrh	r2, [r3, #8]
 8004c12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c14:	f004 fea1 	bl	800995a <USB_ReadPMA>
 8004c18:	e020      	b.n	8004c5c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3306      	adds	r3, #6
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c42:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	6959      	ldr	r1, [r3, #20]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	895a      	ldrh	r2, [r3, #10]
 8004c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c58:	f004 fe7f 	bl	800995a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c62:	441a      	add	r2, r3
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c6e:	441a      	add	r2, r3
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <PCD_EP_ISR_Handler+0x4c2>
 8004c7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d206      	bcs.n	8004c94 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f006 fc6b 	bl	800b568 <HAL_PCD_DataOutStageCallback>
 8004c92:	e005      	b.n	8004ca0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 fea2 	bl	80079e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07e      	beq.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004caa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd8:	843b      	strh	r3, [r7, #32]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	8c3b      	ldrh	r3, [r7, #32]
 8004cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d00c      	beq.n	8004d18 <PCD_EP_ISR_Handler+0x554>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	78db      	ldrb	r3, [r3, #3]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d146      	bne.n	8004d9c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004d0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d141      	bne.n	8004d9c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d40:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	8bfb      	ldrh	r3, [r7, #30]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d906      	bls.n	8004d5a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	8bfb      	ldrh	r3, [r7, #30]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	619a      	str	r2, [r3, #24]
 8004d58:	e002      	b.n	8004d60 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f006 fc15 	bl	800b59e <HAL_PCD_DataInStageCallback>
 8004d74:	e018      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	8bfb      	ldrh	r3, [r7, #30]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	8bfb      	ldrh	r3, [r7, #30]
 8004d88:	441a      	add	r2, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f002 fe25 	bl	80079e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004d9a:	e005      	b.n	8004da8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f91b 	bl	8004fde <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f6ff ad0a 	blt.w	80047ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3738      	adds	r7, #56	; 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d07e      	beq.n	8004eda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	3302      	adds	r3, #2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	8b7b      	ldrh	r3, [r7, #26]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d306      	bcc.n	8004e1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	8b7b      	ldrh	r3, [r7, #26]
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	e002      	b.n	8004e24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d123      	bne.n	8004e74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	833b      	strh	r3, [r7, #24]
 8004e48:	8b3b      	ldrh	r3, [r7, #24]
 8004e4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e4e:	833b      	strh	r3, [r7, #24]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	8b3b      	ldrh	r3, [r7, #24]
 8004e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01f      	beq.n	8004ebe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	82fb      	strh	r3, [r7, #22]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	8afb      	ldrh	r3, [r7, #22]
 8004eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ebe:	8b7b      	ldrh	r3, [r7, #26]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8087 	beq.w	8004fd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6959      	ldr	r1, [r3, #20]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	891a      	ldrh	r2, [r3, #8]
 8004ed2:	8b7b      	ldrh	r3, [r7, #26]
 8004ed4:	f004 fd41 	bl	800995a <USB_ReadPMA>
 8004ed8:	e07c      	b.n	8004fd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	3306      	adds	r3, #6
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	8b7b      	ldrh	r3, [r7, #26]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d306      	bcc.n	8004f1c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	8b7b      	ldrh	r3, [r7, #26]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	619a      	str	r2, [r3, #24]
 8004f1a:	e002      	b.n	8004f22 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d123      	bne.n	8004f72 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	83fb      	strh	r3, [r7, #30]
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f4c:	83fb      	strh	r3, [r7, #30]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8bfb      	ldrh	r3, [r7, #30]
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11f      	bne.n	8004fbc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	83bb      	strh	r3, [r7, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8bbb      	ldrh	r3, [r7, #28]
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fbc:	8b7b      	ldrh	r3, [r7, #26]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6959      	ldr	r1, [r3, #20]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	895a      	ldrh	r2, [r3, #10]
 8004fce:	8b7b      	ldrh	r3, [r7, #26]
 8004fd0:	f004 fcc3 	bl	800995a <USB_ReadPMA>
    }
  }

  return count;
 8004fd4:	8b7b      	ldrh	r3, [r7, #26]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b0a2      	sub	sp, #136	; 0x88
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 81c7 	beq.w	8005386 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005000:	b29b      	uxth	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	3302      	adds	r3, #2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005020:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800502c:	429a      	cmp	r2, r3
 800502e:	d907      	bls.n	8005040 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	619a      	str	r2, [r3, #24]
 800503e:	e002      	b.n	8005046 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80b9 	bne.w	80051c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d126      	bne.n	80050a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	4413      	add	r3, r2
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	4413      	add	r3, r2
 800507a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800508a:	b29a      	uxth	r2, r3
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e01a      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d116      	bne.n	80050dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	4413      	add	r3, r2
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	011a      	lsls	r2, r3, #4
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	4413      	add	r3, r2
 80050d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	2200      	movs	r2, #0
 80050da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d126      	bne.n	8005138 <HAL_PCD_EP_DB_Transmit+0x15a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	011a      	lsls	r2, r3, #4
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	4413      	add	r3, r2
 800510c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800511c:	b29a      	uxth	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e017      	b.n	8005168 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d113      	bne.n	8005168 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	4413      	add	r3, r2
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	011a      	lsls	r2, r3, #4
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2200      	movs	r2, #0
 8005166:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	4619      	mov	r1, r3
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f006 fa15 	bl	800b59e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 82d4 	beq.w	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	827b      	strh	r3, [r7, #18]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	8a7b      	ldrh	r3, [r7, #18]
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]
 80051c0:	e2b2      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d021      	beq.n	8005210 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520c:	b29b      	uxth	r3, r3
 800520e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 8286 	bne.w	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005224:	441a      	add	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005232:	441a      	add	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	429a      	cmp	r2, r3
 8005242:	d309      	bcc.n	8005258 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005250:	1ad2      	subs	r2, r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	621a      	str	r2, [r3, #32]
 8005256:	e015      	b.n	8005284 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005264:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800526e:	e009      	b.n	8005284 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2200      	movs	r2, #0
 8005282:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d155      	bne.n	8005338 <HAL_PCD_EP_DB_Transmit+0x35a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	63bb      	str	r3, [r7, #56]	; 0x38
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	4413      	add	r3, r2
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d112      	bne.n	80052e0 <HAL_PCD_EP_DB_Transmit+0x302>
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e047      	b.n	8005370 <HAL_PCD_EP_DB_Transmit+0x392>
 80052e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e2:	2b3e      	cmp	r3, #62	; 0x3e
 80052e4:	d811      	bhi.n	800530a <HAL_PCD_EP_DB_Transmit+0x32c>
 80052e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_PCD_EP_DB_Transmit+0x31e>
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	3301      	adds	r3, #1
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80052fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fe:	b29b      	uxth	r3, r3
 8005300:	029b      	lsls	r3, r3, #10
 8005302:	b29a      	uxth	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	e032      	b.n	8005370 <HAL_PCD_EP_DB_Transmit+0x392>
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <HAL_PCD_EP_DB_Transmit+0x342>
 800531a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531c:	3b01      	subs	r3, #1
 800531e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005322:	b29b      	uxth	r3, r3
 8005324:	029b      	lsls	r3, r3, #10
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005330:	b29a      	uxth	r2, r3
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e01b      	b.n	8005370 <HAL_PCD_EP_DB_Transmit+0x392>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d117      	bne.n	8005370 <HAL_PCD_EP_DB_Transmit+0x392>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005354:	4413      	add	r3, r2
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	4413      	add	r3, r2
 8005362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536a:	b29a      	uxth	r2, r3
 800536c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6959      	ldr	r1, [r3, #20]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	891a      	ldrh	r2, [r3, #8]
 800537c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537e:	b29b      	uxth	r3, r3
 8005380:	f004 faa6 	bl	80098d0 <USB_WritePMA>
 8005384:	e1d0      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	3306      	adds	r3, #6
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d307      	bcc.n	80053ce <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053c6:	1ad2      	subs	r2, r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	e002      	b.n	80053d4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 80c4 	bne.w	8005566 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d126      	bne.n	8005434 <HAL_PCD_EP_DB_Transmit+0x456>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	4413      	add	r3, r2
 80053fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	011a      	lsls	r2, r3, #4
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	4413      	add	r3, r2
 8005408:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800540c:	66bb      	str	r3, [r7, #104]	; 0x68
 800540e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005418:	b29a      	uxth	r2, r3
 800541a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542c:	b29a      	uxth	r2, r3
 800542e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	e01a      	b.n	800546a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d116      	bne.n	800546a <HAL_PCD_EP_DB_Transmit+0x48c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	677b      	str	r3, [r7, #116]	; 0x74
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	4413      	add	r3, r2
 8005452:	677b      	str	r3, [r7, #116]	; 0x74
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	011a      	lsls	r2, r3, #4
 800545a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545c:	4413      	add	r3, r2
 800545e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005462:	673b      	str	r3, [r7, #112]	; 0x70
 8005464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005466:	2200      	movs	r2, #0
 8005468:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d12f      	bne.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005490:	4413      	add	r3, r2
 8005492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	011a      	lsls	r2, r3, #4
 800549c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	e017      	b.n	8005508 <HAL_PCD_EP_DB_Transmit+0x52a>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d113      	bne.n	8005508 <HAL_PCD_EP_DB_Transmit+0x52a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ee:	4413      	add	r3, r2
 80054f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	011a      	lsls	r2, r3, #4
 80054f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fa:	4413      	add	r3, r2
 80054fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005500:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005504:	2200      	movs	r2, #0
 8005506:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4619      	mov	r1, r3
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f006 f845 	bl	800b59e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 8104 	bne.w	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]
 8005564:	e0e0      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d121      	bne.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	f040 80b4 	bne.w	8005728 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c8:	441a      	add	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055d6:	441a      	add	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d309      	bcc.n	80055fc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	621a      	str	r2, [r3, #32]
 80055fa:	e015      	b.n	8005628 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d107      	bne.n	8005614 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005608:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005612:	e009      	b.n	8005628 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	667b      	str	r3, [r7, #100]	; 0x64
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d155      	bne.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564a:	4413      	add	r3, r2
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	011a      	lsls	r2, r3, #4
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	4413      	add	r3, r2
 8005658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800565c:	65bb      	str	r3, [r7, #88]	; 0x58
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	2b00      	cmp	r3, #0
 8005662:	d112      	bne.n	800568a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566e:	b29a      	uxth	r2, r3
 8005670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005682:	b29a      	uxth	r2, r3
 8005684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e044      	b.n	8005714 <HAL_PCD_EP_DB_Transmit+0x736>
 800568a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568c:	2b3e      	cmp	r3, #62	; 0x3e
 800568e:	d811      	bhi.n	80056b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	657b      	str	r3, [r7, #84]	; 0x54
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80056a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a2:	3301      	adds	r3, #1
 80056a4:	657b      	str	r3, [r7, #84]	; 0x54
 80056a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e02f      	b.n	8005714 <HAL_PCD_EP_DB_Transmit+0x736>
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <HAL_PCD_EP_DB_Transmit+0x6ec>
 80056c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c6:	3b01      	subs	r3, #1
 80056c8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	029b      	lsls	r3, r3, #10
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e018      	b.n	8005714 <HAL_PCD_EP_DB_Transmit+0x736>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d114      	bne.n	8005714 <HAL_PCD_EP_DB_Transmit+0x736>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f8:	4413      	add	r3, r2
 80056fa:	667b      	str	r3, [r7, #100]	; 0x64
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	011a      	lsls	r2, r3, #4
 8005702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005704:	4413      	add	r3, r2
 8005706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570a:	663b      	str	r3, [r7, #96]	; 0x60
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	b29a      	uxth	r2, r3
 8005710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005712:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6959      	ldr	r1, [r3, #20]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	895a      	ldrh	r2, [r3, #10]
 8005720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005722:	b29b      	uxth	r3, r3
 8005724:	f004 f8d4 	bl	80098d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005742:	823b      	strh	r3, [r7, #16]
 8005744:	8a3b      	ldrh	r3, [r7, #16]
 8005746:	f083 0310 	eor.w	r3, r3, #16
 800574a:	823b      	strh	r3, [r7, #16]
 800574c:	8a3b      	ldrh	r3, [r7, #16]
 800574e:	f083 0320 	eor.w	r3, r3, #32
 8005752:	823b      	strh	r3, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	8a3b      	ldrh	r3, [r7, #16]
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3788      	adds	r7, #136	; 0x88
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	817b      	strh	r3, [r7, #10]
 8005790:	4613      	mov	r3, r2
 8005792:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005794:	897b      	ldrh	r3, [r7, #10]
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e009      	b.n	80057cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057b8:	897a      	ldrh	r2, [r7, #10]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	80da      	strh	r2, [r3, #6]
 80057e0:	e00b      	b.n	80057fa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2201      	movs	r2, #1
 80057e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
	...

08005808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e272      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8087 	beq.w	8005936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005828:	4b92      	ldr	r3, [pc, #584]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b04      	cmp	r3, #4
 8005832:	d00c      	beq.n	800584e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d112      	bne.n	8005866 <HAL_RCC_OscConfig+0x5e>
 8005840:	4b8c      	ldr	r3, [pc, #560]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d10b      	bne.n	8005866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584e:	4b89      	ldr	r3, [pc, #548]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06c      	beq.n	8005934 <HAL_RCC_OscConfig+0x12c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d168      	bne.n	8005934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e24c      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586e:	d106      	bne.n	800587e <HAL_RCC_OscConfig+0x76>
 8005870:	4b80      	ldr	r3, [pc, #512]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7f      	ldr	r2, [pc, #508]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e02e      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x98>
 8005886:	4b7b      	ldr	r3, [pc, #492]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800588c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b78      	ldr	r3, [pc, #480]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a77      	ldr	r2, [pc, #476]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e01d      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0xbc>
 80058aa:	4b72      	ldr	r3, [pc, #456]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a71      	ldr	r2, [pc, #452]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4b6f      	ldr	r3, [pc, #444]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6e      	ldr	r2, [pc, #440]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e00b      	b.n	80058dc <HAL_RCC_OscConfig+0xd4>
 80058c4:	4b6b      	ldr	r3, [pc, #428]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6a      	ldr	r2, [pc, #424]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a67      	ldr	r2, [pc, #412]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80058d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd ffda 	bl	800389c <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ec:	f7fd ffd6 	bl	800389c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e200      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b5d      	ldr	r3, [pc, #372]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0xe4>
 800590a:	e014      	b.n	8005936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fd ffc6 	bl	800389c <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005914:	f7fd ffc2 	bl	800389c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e1ec      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005926:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x10c>
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d063      	beq.n	8005a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005942:	4b4c      	ldr	r3, [pc, #304]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800594e:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b08      	cmp	r3, #8
 8005958:	d11c      	bne.n	8005994 <HAL_RCC_OscConfig+0x18c>
 800595a:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d116      	bne.n	8005994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_RCC_OscConfig+0x176>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e1c0      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4939      	ldr	r1, [pc, #228]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	e03a      	b.n	8005a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599c:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_RCC_OscConfig+0x270>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7fd ff7b 	bl	800389c <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059aa:	f7fd ff77 	bl	800389c <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e1a1      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c8:	4b2a      	ldr	r3, [pc, #168]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4927      	ldr	r1, [pc, #156]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
 80059dc:	e015      	b.n	8005a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059de:	4b26      	ldr	r3, [pc, #152]	; (8005a78 <HAL_RCC_OscConfig+0x270>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fd ff5a 	bl	800389c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ec:	f7fd ff56 	bl	800389c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e180      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03a      	beq.n	8005a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d019      	beq.n	8005a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a1e:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_RCC_OscConfig+0x274>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a24:	f7fd ff3a 	bl	800389c <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2c:	f7fd ff36 	bl	800389c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e160      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f000 faa6 	bl	8005f9c <RCC_Delay>
 8005a50:	e01c      	b.n	8005a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_OscConfig+0x274>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fd ff20 	bl	800389c <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5e:	e00f      	b.n	8005a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fd ff1c 	bl	800389c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d908      	bls.n	8005a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e146      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	42420000 	.word	0x42420000
 8005a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a80:	4b92      	ldr	r3, [pc, #584]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e9      	bne.n	8005a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a6 	beq.w	8005be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aaa:	4b88      	ldr	r3, [pc, #544]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4a87      	ldr	r2, [pc, #540]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	61d3      	str	r3, [r2, #28]
 8005ab6:	4b85      	ldr	r3, [pc, #532]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4b82      	ldr	r3, [pc, #520]	; (8005cd0 <HAL_RCC_OscConfig+0x4c8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d118      	bne.n	8005b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	4b7f      	ldr	r3, [pc, #508]	; (8005cd0 <HAL_RCC_OscConfig+0x4c8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7e      	ldr	r2, [pc, #504]	; (8005cd0 <HAL_RCC_OscConfig+0x4c8>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ade:	f7fd fedd 	bl	800389c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fd fed9 	bl	800389c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	; 0x64
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e103      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	4b75      	ldr	r3, [pc, #468]	; (8005cd0 <HAL_RCC_OscConfig+0x4c8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <HAL_RCC_OscConfig+0x312>
 8005b0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4a6e      	ldr	r2, [pc, #440]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6213      	str	r3, [r2, #32]
 8005b18:	e02d      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x334>
 8005b22:	4b6a      	ldr	r3, [pc, #424]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	4a69      	ldr	r2, [pc, #420]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	6213      	str	r3, [r2, #32]
 8005b2e:	4b67      	ldr	r3, [pc, #412]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4a66      	ldr	r2, [pc, #408]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	6213      	str	r3, [r2, #32]
 8005b3a:	e01c      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x356>
 8005b44:	4b61      	ldr	r3, [pc, #388]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4a60      	ldr	r2, [pc, #384]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	6213      	str	r3, [r2, #32]
 8005b50:	4b5e      	ldr	r3, [pc, #376]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	4a5d      	ldr	r2, [pc, #372]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6213      	str	r3, [r2, #32]
 8005b5c:	e00b      	b.n	8005b76 <HAL_RCC_OscConfig+0x36e>
 8005b5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	4a5a      	ldr	r2, [pc, #360]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	6213      	str	r3, [r2, #32]
 8005b6a:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d015      	beq.n	8005baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fd fe8d 	bl	800389c <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fd fe89 	bl	800389c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0b1      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9c:	4b4b      	ldr	r3, [pc, #300]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ee      	beq.n	8005b86 <HAL_RCC_OscConfig+0x37e>
 8005ba8:	e014      	b.n	8005bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005baa:	f7fd fe77 	bl	800389c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fd fe73 	bl	800389c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e09b      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc8:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ee      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b3c      	ldr	r3, [pc, #240]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4a3b      	ldr	r2, [pc, #236]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8087 	beq.w	8005cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bf0:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 030c 	and.w	r3, r3, #12
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d061      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d146      	bne.n	8005c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c04:	4b33      	ldr	r3, [pc, #204]	; (8005cd4 <HAL_RCC_OscConfig+0x4cc>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0a:	f7fd fe47 	bl	800389c <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fd fe43 	bl	800389c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e06d      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c24:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d108      	bne.n	8005c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4921      	ldr	r1, [pc, #132]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a19      	ldr	r1, [r3, #32]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	491b      	ldr	r1, [pc, #108]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x4cc>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fd fe17 	bl	800389c <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c72:	f7fd fe13 	bl	800389c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e03d      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x46a>
 8005c90:	e035      	b.n	8005cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <HAL_RCC_OscConfig+0x4cc>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd fe00 	bl	800389c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fd fdfc 	bl	800389c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e026      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x498>
 8005cbe:	e01e      	b.n	8005cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e019      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	40007000 	.word	0x40007000
 8005cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCC_OscConfig+0x500>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d106      	bne.n	8005cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d001      	beq.n	8005cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40021000 	.word	0x40021000

08005d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0d0      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d20:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d910      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b67      	ldr	r3, [pc, #412]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0207 	bic.w	r2, r3, #7
 8005d36:	4965      	ldr	r1, [pc, #404]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b63      	ldr	r3, [pc, #396]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0b8      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d68:	4b59      	ldr	r3, [pc, #356]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a58      	ldr	r2, [pc, #352]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d80:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a52      	ldr	r2, [pc, #328]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8c:	4b50      	ldr	r3, [pc, #320]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	494d      	ldr	r1, [pc, #308]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d040      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d107      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d115      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e07f      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e073      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dda:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e06b      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dea:	4b39      	ldr	r3, [pc, #228]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f023 0203 	bic.w	r2, r3, #3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4936      	ldr	r1, [pc, #216]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dfc:	f7fd fd4e 	bl	800389c <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e04:	f7fd fd4a 	bl	800389c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e053      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f003 020c 	and.w	r2, r3, #12
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d1eb      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d210      	bcs.n	8005e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 0207 	bic.w	r2, r3, #7
 8005e42:	4922      	ldr	r1, [pc, #136]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e032      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e68:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4916      	ldr	r1, [pc, #88]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e9a:	f000 f821 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	490a      	ldr	r1, [pc, #40]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8005eac:	5ccb      	ldrb	r3, [r1, r3]
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8005eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCC_ClockConfig+0x1d0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fcac 	bl	8003818 <HAL_InitTick>

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40022000 	.word	0x40022000
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800c504 	.word	0x0800c504
 8005ed8:	20000230 	.word	0x20000230
 8005edc:	20000234 	.word	0x20000234

08005ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee0:	b490      	push	{r4, r7}
 8005ee2:	b08a      	sub	sp, #40	; 0x28
 8005ee4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <HAL_RCC_GetSysClockFreq+0xac>)
 8005ee8:	1d3c      	adds	r4, r7, #4
 8005eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ef0:	f240 2301 	movw	r3, #513	; 0x201
 8005ef4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f0a:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d002      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0x46>
 8005f1e:	e02b      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f20:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f22:	623b      	str	r3, [r7, #32]
      break;
 8005f24:	e02b      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	0c9b      	lsrs	r3, r3, #18
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	3328      	adds	r3, #40	; 0x28
 8005f30:	443b      	add	r3, r7
 8005f32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f42:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0c5b      	lsrs	r3, r3, #17
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	3328      	adds	r3, #40	; 0x28
 8005f4e:	443b      	add	r3, r7
 8005f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f5a:	fb03 f202 	mul.w	r2, r3, r2
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	e004      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4a0b      	ldr	r2, [pc, #44]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6c:	fb02 f303 	mul.w	r3, r2, r3
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	623b      	str	r3, [r7, #32]
      break;
 8005f76:	e002      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f7a:	623b      	str	r3, [r7, #32]
      break;
 8005f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3728      	adds	r7, #40	; 0x28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc90      	pop	{r4, r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	0800c4bc 	.word	0x0800c4bc
 8005f90:	40021000 	.word	0x40021000
 8005f94:	007a1200 	.word	0x007a1200
 8005f98:	003d0900 	.word	0x003d0900

08005f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <RCC_Delay+0x34>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <RCC_Delay+0x38>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a5b      	lsrs	r3, r3, #9
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fb8:	bf00      	nop
  }
  while (Delay --);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	60fa      	str	r2, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f9      	bne.n	8005fb8 <RCC_Delay+0x1c>
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	20000230 	.word	0x20000230
 8005fd4:	10624dd3 	.word	0x10624dd3

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d07d      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff8:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006004:	4b4c      	ldr	r3, [pc, #304]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4a4b      	ldr	r2, [pc, #300]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600e:	61d3      	str	r3, [r2, #28]
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	4b46      	ldr	r3, [pc, #280]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d118      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800602c:	4b43      	ldr	r3, [pc, #268]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a42      	ldr	r2, [pc, #264]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006036:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006038:	f7fd fc30 	bl	800389c <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603e:	e008      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006040:	f7fd fc2c 	bl	800389c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b64      	cmp	r3, #100	; 0x64
 800604c:	d901      	bls.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e06d      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006052:	4b3a      	ldr	r3, [pc, #232]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800605e:	4b36      	ldr	r3, [pc, #216]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006066:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d027      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800607c:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006086:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608c:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006092:	4a29      	ldr	r2, [pc, #164]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d014      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fd fbfb 	bl	800389c <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fd fbf7 	bl	800389c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e036      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0ee      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	4917      	ldr	r1, [pc, #92]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e4:	4b14      	ldr	r3, [pc, #80]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	490b      	ldr	r1, [pc, #44]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610a:	4313      	orrs	r3, r2
 800610c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800611a:	4b07      	ldr	r3, [pc, #28]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4904      	ldr	r1, [pc, #16]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40021000 	.word	0x40021000
 800613c:	40007000 	.word	0x40007000
 8006140:	42420440 	.word	0x42420440

08006144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e076      	b.n	8006244 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d009      	beq.n	800617c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	61da      	str	r2, [r3, #28]
 800616e:	e005      	b.n	800617c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb f822 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	ea42 0103 	orr.w	r1, r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	0c1a      	lsrs	r2, r3, #16
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f002 0204 	and.w	r2, r2, #4
 8006222:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006232:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_SPI_Transmit+0x22>
 800626a:	2302      	movs	r3, #2
 800626c:	e126      	b.n	80064bc <HAL_SPI_Transmit+0x270>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006276:	f7fd fb11 	bl	800389c <HAL_GetTick>
 800627a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d002      	beq.n	8006292 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800628c:	2302      	movs	r3, #2
 800628e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006290:	e10b      	b.n	80064aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_SPI_Transmit+0x52>
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062a2:	e102      	b.n	80064aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2203      	movs	r2, #3
 80062a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	88fa      	ldrh	r2, [r7, #6]
 80062c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d10f      	bne.n	800630c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800630a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d007      	beq.n	800632a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006332:	d14b      	bne.n	80063cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_Transmit+0xf6>
 800633c:	8afb      	ldrh	r3, [r7, #22]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d13e      	bne.n	80063c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006366:	e02b      	b.n	80063c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d112      	bne.n	800639c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	86da      	strh	r2, [r3, #54]	; 0x36
 800639a:	e011      	b.n	80063c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800639c:	f7fd fa7e 	bl	800389c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d803      	bhi.n	80063b4 <HAL_SPI_Transmit+0x168>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_Transmit+0x16e>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063be:	e074      	b.n	80064aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ce      	bne.n	8006368 <HAL_SPI_Transmit+0x11c>
 80063ca:	e04c      	b.n	8006466 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Transmit+0x18e>
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d140      	bne.n	800645c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006400:	e02c      	b.n	800645c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d113      	bne.n	8006438 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	86da      	strh	r2, [r3, #54]	; 0x36
 8006436:	e011      	b.n	800645c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006438:	f7fd fa30 	bl	800389c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d803      	bhi.n	8006450 <HAL_SPI_Transmit+0x204>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644e:	d102      	bne.n	8006456 <HAL_SPI_Transmit+0x20a>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	77fb      	strb	r3, [r7, #31]
          goto error;
 800645a:	e026      	b.n	80064aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1cd      	bne.n	8006402 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8b2 	bl	80065d4 <SPI_EndRxTxTransaction>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e000      	b.n	80064aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80064a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064d4:	f7fd f9e2 	bl	800389c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4413      	add	r3, r2
 80064e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064e4:	f7fd f9da 	bl	800389c <HAL_GetTick>
 80064e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ea:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	0d1b      	lsrs	r3, r3, #20
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064fa:	e054      	b.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006502:	d050      	beq.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006504:	f7fd f9ca 	bl	800389c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	429a      	cmp	r2, r3
 8006512:	d902      	bls.n	800651a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d13d      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006532:	d111      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653c:	d004      	beq.n	8006548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	d107      	bne.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006560:	d10f      	bne.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e017      	b.n	80065c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d19b      	bne.n	80064fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000230 	.word	0x20000230

080065d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	2180      	movs	r1, #128	; 0x80
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff ff6a 	bl	80064c4 <SPI_WaitFlagStateUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e000      	b.n	8006608 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e041      	b.n	80066a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fe10 	bl	800125c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f000 fa9e 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d001      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e03a      	b.n	800673e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIM_Base_Start_IT+0x98>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00e      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x58>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f2:	d009      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x58>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a14      	ldr	r2, [pc, #80]	; (800674c <HAL_TIM_Base_Start_IT+0x9c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x58>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <HAL_TIM_Base_Start_IT+0xa0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d111      	bne.n	800672c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b06      	cmp	r3, #6
 8006718:	d010      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672a:	e007      	b.n	800673c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800

08006754 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	f241 1311 	movw	r3, #4369	; 0x1111
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <HAL_TIM_Base_Stop_IT+0x48>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	f240 4344 	movw	r3, #1092	; 0x444
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_TIM_Base_Stop_IT+0x48>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d122      	bne.n	800680c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d11b      	bne.n	800680c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0202 	mvn.w	r2, #2
 80067dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9b1 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f9a4 	bl	8006b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f9b3 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b04      	cmp	r3, #4
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b04      	cmp	r3, #4
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0204 	mvn.w	r2, #4
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f987 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f97a 	bl	8006b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f989 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b08      	cmp	r3, #8
 800686c:	d122      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d11b      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0208 	mvn.w	r2, #8
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2204      	movs	r2, #4
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f95d 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f950 	bl	8006b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f95f 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d122      	bne.n	8006908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0210 	mvn.w	r2, #16
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2208      	movs	r2, #8
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f933 	bl	8006b5a <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f926 	bl	8006b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f935 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d10e      	bne.n	8006934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0201 	mvn.w	r2, #1
 800692c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7f9 fce4 	bl	80002fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b80      	cmp	r3, #128	; 0x80
 8006940:	d10e      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d107      	bne.n	8006960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa77 	bl	8006e4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d10e      	bne.n	800698c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d107      	bne.n	800698c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8f9 	bl	8006b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d10e      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d107      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0220 	mvn.w	r2, #32
 80069b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa42 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_ConfigClockSource+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e0b3      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x180>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d03e      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0xd0>
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a16:	f200 8087 	bhi.w	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	f000 8085 	beq.w	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d87f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a28:	2b70      	cmp	r3, #112	; 0x70
 8006a2a:	d01a      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0xa2>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d87b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d050      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x116>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d877      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d03c      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xf6>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d873      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d058      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x136>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d86f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d064      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d86b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d060      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d867      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d05c      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d05a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a60:	e062      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6899      	ldr	r1, [r3, #8]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f000 f966 	bl	8006d42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	609a      	str	r2, [r3, #8]
      break;
 8006a8e:	e04e      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f000 f94f 	bl	8006d42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	609a      	str	r2, [r3, #8]
      break;
 8006ab4:	e03b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 f8c6 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2150      	movs	r1, #80	; 0x50
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f91d 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e02b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 f8e4 	bl	8006cb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2160      	movs	r1, #96	; 0x60
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f90d 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006af4:	e01b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 f8a6 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f8fd 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006b14:	e00b      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f000 f8f4 	bl	8006d0e <TIM_ITRx_SetConfig>
        break;
 8006b26:	e002      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <TIM_Base_SetConfig+0xb8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_Base_SetConfig+0x30>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d007      	beq.n	8006bc0 <TIM_Base_SetConfig+0x30>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a26      	ldr	r2, [pc, #152]	; (8006c4c <TIM_Base_SetConfig+0xbc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_Base_SetConfig+0x30>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a25      	ldr	r2, [pc, #148]	; (8006c50 <TIM_Base_SetConfig+0xc0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <TIM_Base_SetConfig+0xb8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_Base_SetConfig+0x62>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d007      	beq.n	8006bf2 <TIM_Base_SetConfig+0x62>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <TIM_Base_SetConfig+0xbc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_Base_SetConfig+0x62>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <TIM_Base_SetConfig+0xc0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d108      	bne.n	8006c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <TIM_Base_SetConfig+0xb8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d103      	bne.n	8006c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	615a      	str	r2, [r3, #20]
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800

08006c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 030a 	bic.w	r3, r3, #10
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f023 0210 	bic.w	r2, r3, #16
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	031b      	lsls	r3, r3, #12
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr

08006d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f043 0307 	orr.w	r3, r3, #7
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	021a      	lsls	r2, r3, #8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e046      	b.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de4:	d009      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10c      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e60:	b084      	sub	sp, #16
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	f107 0014 	add.w	r0, r7, #20
 8006e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	b004      	add	sp, #16
 8006e7e:	4770      	bx	lr

08006e80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006eb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ef8:	b084      	sub	sp, #16
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	f107 0014 	add.w	r0, r7, #20
 8006f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	b004      	add	sp, #16
 8006f36:	4770      	bx	lr

08006f38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b09b      	sub	sp, #108	; 0x6c
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d81f      	bhi.n	8006faa <USB_ActivateEndpoint+0x72>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <USB_ActivateEndpoint+0x38>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fb3 	.word	0x08006fb3
 8006f7c:	08006f8f 	.word	0x08006f8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006f8c:	e012      	b.n	8006fb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006f92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006f9a:	e00b      	b.n	8006fb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fa4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006fa8:	e004      	b.n	8006fb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006fb0:	e000      	b.n	8006fb4 <USB_ActivateEndpoint+0x7c>
      break;
 8006fb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	7b1b      	ldrb	r3, [r3, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 8149 	bne.w	80072b8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8084 	beq.w	8007138 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	011a      	lsls	r2, r3, #4
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	88db      	ldrh	r3, [r3, #6]
 8007058:	085b      	lsrs	r3, r3, #1
 800705a:	b29b      	uxth	r3, r3
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	81fb      	strh	r3, [r7, #14]
 8007072:	89fb      	ldrh	r3, [r7, #14]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01b      	beq.n	80070b4 <USB_ActivateEndpoint+0x17c>
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	81bb      	strh	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	89bb      	ldrh	r3, [r7, #12]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	78db      	ldrb	r3, [r3, #3]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d020      	beq.n	80070fe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d2:	813b      	strh	r3, [r7, #8]
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	f083 0320 	eor.w	r3, r3, #32
 80070da:	813b      	strh	r3, [r7, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	893b      	ldrh	r3, [r7, #8]
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]
 80070fc:	e27f      	b.n	80075fe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	817b      	strh	r3, [r7, #10]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	897b      	ldrh	r3, [r7, #10]
 8007122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	b29b      	uxth	r3, r3
 8007134:	8013      	strh	r3, [r2, #0]
 8007136:	e262      	b.n	80075fe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007142:	b29b      	uxth	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	4413      	add	r3, r2
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	4413      	add	r3, r2
 8007156:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	88db      	ldrh	r3, [r3, #6]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	4413      	add	r3, r2
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	011a      	lsls	r2, r3, #4
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	4413      	add	r3, r2
 800718a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800718e:	623b      	str	r3, [r7, #32]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d112      	bne.n	80071be <USB_ActivateEndpoint+0x286>
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e02f      	b.n	800721e <USB_ActivateEndpoint+0x2e6>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b3e      	cmp	r3, #62	; 0x3e
 80071c4:	d813      	bhi.n	80071ee <USB_ActivateEndpoint+0x2b6>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	663b      	str	r3, [r7, #96]	; 0x60
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USB_ActivateEndpoint+0x2a8>
 80071da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071dc:	3301      	adds	r3, #1
 80071de:	663b      	str	r3, [r7, #96]	; 0x60
 80071e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	029b      	lsls	r3, r3, #10
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e017      	b.n	800721e <USB_ActivateEndpoint+0x2e6>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	663b      	str	r3, [r7, #96]	; 0x60
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <USB_ActivateEndpoint+0x2d0>
 8007202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007204:	3b01      	subs	r3, #1
 8007206:	663b      	str	r3, [r7, #96]	; 0x60
 8007208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800720a:	b29b      	uxth	r3, r3
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	b29b      	uxth	r3, r3
 8007210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007218:	b29a      	uxth	r2, r3
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	83fb      	strh	r3, [r7, #30]
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01b      	beq.n	800726e <USB_ActivateEndpoint+0x336>
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	83bb      	strh	r3, [r7, #28]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8bbb      	ldrh	r3, [r7, #28]
 800725a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	b29b      	uxth	r3, r3
 800726c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	837b      	strh	r3, [r7, #26]
 8007286:	8b7b      	ldrh	r3, [r7, #26]
 8007288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800728c:	837b      	strh	r3, [r7, #26]
 800728e:	8b7b      	ldrh	r3, [r7, #26]
 8007290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007294:	837b      	strh	r3, [r7, #26]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	8b7b      	ldrh	r3, [r7, #26]
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]
 80072b6:	e1a2      	b.n	80075fe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fe:	b29b      	uxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007304:	4413      	add	r3, r2
 8007306:	65bb      	str	r3, [r7, #88]	; 0x58
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	011a      	lsls	r2, r3, #4
 800730e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007310:	4413      	add	r3, r2
 8007312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007316:	657b      	str	r3, [r7, #84]	; 0x54
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	891b      	ldrh	r3, [r3, #8]
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	b29b      	uxth	r3, r3
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	653b      	str	r3, [r7, #80]	; 0x50
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	4413      	add	r3, r2
 800733a:	653b      	str	r3, [r7, #80]	; 0x50
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007344:	4413      	add	r3, r2
 8007346:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800734a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	895b      	ldrh	r3, [r3, #10]
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	b29b      	uxth	r3, r3
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 8091 	bne.w	8007488 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01b      	beq.n	80073b6 <USB_ActivateEndpoint+0x47e>
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	441a      	add	r2, r3
 80073a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80073c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01b      	beq.n	8007406 <USB_ActivateEndpoint+0x4ce>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800741e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007424:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007426:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007428:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800742c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007464:	867b      	strh	r3, [r7, #50]	; 0x32
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	441a      	add	r2, r3
 8007470:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
 8007486:	e0ba      	b.n	80075fe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007498:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800749c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01d      	beq.n	80074e0 <USB_ActivateEndpoint+0x5a8>
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	441a      	add	r2, r3
 80074c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80074cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074dc:	b29b      	uxth	r3, r3
 80074de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80074f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01d      	beq.n	8007538 <USB_ActivateEndpoint+0x600>
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007534:	b29b      	uxth	r3, r3
 8007536:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	78db      	ldrb	r3, [r3, #3]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d024      	beq.n	800758a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007556:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800755a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800755e:	f083 0320 	eor.w	r3, r3, #32
 8007562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007584:	b29b      	uxth	r3, r3
 8007586:	8013      	strh	r3, [r2, #0]
 8007588:	e01d      	b.n	80075c6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	441a      	add	r2, r3
 80075ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80075fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007602:	4618      	mov	r0, r3
 8007604:	376c      	adds	r7, #108	; 0x6c
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800760c:	b480      	push	{r7}
 800760e:	b08d      	sub	sp, #52	; 0x34
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	7b1b      	ldrb	r3, [r3, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 808e 	bne.w	800773c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d044      	beq.n	80076b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	81bb      	strh	r3, [r7, #12]
 8007636:	89bb      	ldrh	r3, [r7, #12]
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01b      	beq.n	8007678 <USB_DeactivateEndpoint+0x6c>
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	817b      	strh	r3, [r7, #10]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	897b      	ldrh	r3, [r7, #10]
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	813b      	strh	r3, [r7, #8]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	893b      	ldrh	r3, [r7, #8]
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]
 80076b0:	e192      	b.n	80079d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	827b      	strh	r3, [r7, #18]
 80076c0:	8a7b      	ldrh	r3, [r7, #18]
 80076c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01b      	beq.n	8007702 <USB_DeactivateEndpoint+0xf6>
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e0:	823b      	strh	r3, [r7, #16]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	441a      	add	r2, r3
 80076ec:	8a3b      	ldrh	r3, [r7, #16]
 80076ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007718:	81fb      	strh	r3, [r7, #14]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	441a      	add	r2, r3
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007736:	b29b      	uxth	r3, r3
 8007738:	8013      	strh	r3, [r2, #0]
 800773a:	e14d      	b.n	80079d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f040 80a5 	bne.w	8007890 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	843b      	strh	r3, [r7, #32]
 8007754:	8c3b      	ldrh	r3, [r7, #32]
 8007756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01b      	beq.n	8007796 <USB_DeactivateEndpoint+0x18a>
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007774:	83fb      	strh	r3, [r7, #30]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	8bfb      	ldrh	r3, [r7, #30]
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	83bb      	strh	r3, [r7, #28]
 80077a4:	8bbb      	ldrh	r3, [r7, #28]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01b      	beq.n	80077e6 <USB_DeactivateEndpoint+0x1da>
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c4:	837b      	strh	r3, [r7, #26]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	441a      	add	r2, r3
 80077d0:	8b7b      	ldrh	r3, [r7, #26]
 80077d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fc:	833b      	strh	r3, [r7, #24]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	441a      	add	r2, r3
 8007808:	8b3b      	ldrh	r3, [r7, #24]
 800780a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800781a:	b29b      	uxth	r3, r3
 800781c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	82fb      	strh	r3, [r7, #22]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	8afb      	ldrh	r3, [r7, #22]
 8007842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	b29b      	uxth	r3, r3
 8007854:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786c:	82bb      	strh	r3, [r7, #20]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	441a      	add	r2, r3
 8007878:	8abb      	ldrh	r3, [r7, #20]
 800787a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	b29b      	uxth	r3, r3
 800788c:	8013      	strh	r3, [r2, #0]
 800788e:	e0a3      	b.n	80079d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800789e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <USB_DeactivateEndpoint+0x2d4>
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80078ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80078f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <USB_DeactivateEndpoint+0x324>
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800791c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800792c:	b29b      	uxth	r3, r3
 800792e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	441a      	add	r2, r3
 8007952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800795c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007964:	b29b      	uxth	r3, r3
 8007966:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799c:	b29b      	uxth	r3, r3
 800799e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	441a      	add	r2, r3
 80079c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80079c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3734      	adds	r7, #52	; 0x34
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr

080079e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b0cc      	sub	sp, #304	; 0x130
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f2:	6018      	str	r0, [r3, #0]
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	f041 817d 	bne.w	8008d0a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d908      	bls.n	8007a3e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a3c:	e007      	b.n	8007a4e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	7b1b      	ldrb	r3, [r3, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d152      	bne.n	8007b04 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6959      	ldr	r1, [r3, #20]
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	88da      	ldrh	r2, [r3, #6]
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a84:	6800      	ldr	r0, [r0, #0]
 8007a86:	f001 ff23 	bl	80098d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007abc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	011a      	lsls	r2, r3, #4
 8007ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	f001 b8b5 	b.w	8008c6e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	78db      	ldrb	r3, [r3, #3]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	f040 84c6 	bne.w	80084a2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	f240 8443 	bls.w	80083ba <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6a1a      	ldr	r2, [r3, #32]
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 823e 	beq.w	8008052 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007bde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007be2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 809a 	bne.w	8007d30 <USB_EPStartXfer+0x34c>
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	4619      	mov	r1, r3
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c2e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	440a      	add	r2, r1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	011a      	lsls	r2, r3, #4
 8007c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d122      	bne.n	8007cae <USB_EPStartXfer+0x2ca>
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e079      	b.n	8007da2 <USB_EPStartXfer+0x3be>
 8007cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8007cb4:	d81b      	bhi.n	8007cee <USB_EPStartXfer+0x30a>
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <USB_EPStartXfer+0x2f2>
 8007ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	029b      	lsls	r3, r3, #10
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	e059      	b.n	8007da2 <USB_EPStartXfer+0x3be>
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <USB_EPStartXfer+0x32a>
 8007d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	e038      	b.n	8007da2 <USB_EPStartXfer+0x3be>
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d130      	bne.n	8007da2 <USB_EPStartXfer+0x3be>
 8007d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4619      	mov	r1, r3
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d5e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	440a      	add	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	011a      	lsls	r2, r3, #4
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	895b      	ldrh	r3, [r3, #10]
 8007dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6959      	ldr	r1, [r3, #20]
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007dc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007dcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007dd0:	6800      	ldr	r0, [r0, #0]
 8007dd2:	f001 fd7d 	bl	80098d0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de6:	441a      	add	r2, r3
 8007de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d90f      	bls.n	8007e30 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e20:	1ad2      	subs	r2, r2, r3
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	621a      	str	r2, [r3, #32]
 8007e2e:	e00e      	b.n	8007e4e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 809a 	bne.w	8007f94 <USB_EPStartXfer+0x5b0>
 8007e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e6c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4619      	mov	r1, r3
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e92:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	440a      	add	r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	011a      	lsls	r2, r3, #4
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d122      	bne.n	8007f12 <USB_EPStartXfer+0x52e>
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e083      	b.n	800801a <USB_EPStartXfer+0x636>
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	2b3e      	cmp	r3, #62	; 0x3e
 8007f18:	d81b      	bhi.n	8007f52 <USB_EPStartXfer+0x56e>
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <USB_EPStartXfer+0x556>
 8007f30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f34:	3301      	adds	r3, #1
 8007f36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	e063      	b.n	800801a <USB_EPStartXfer+0x636>
 8007f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <USB_EPStartXfer+0x58e>
 8007f68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e042      	b.n	800801a <USB_EPStartXfer+0x636>
 8007f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d13a      	bne.n	800801a <USB_EPStartXfer+0x636>
 8007fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4619      	mov	r1, r3
 8007fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	440a      	add	r2, r1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	011a      	lsls	r2, r3, #4
 8007fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008002:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	b29a      	uxth	r2, r3
 800800e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008012:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	891b      	ldrh	r3, [r3, #8]
 8008026:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6959      	ldr	r1, [r3, #20]
 8008036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803a:	b29b      	uxth	r3, r3
 800803c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008040:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008044:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008048:	6800      	ldr	r0, [r0, #0]
 800804a:	f001 fc41 	bl	80098d0 <USB_WritePMA>
 800804e:	f000 be0e 	b.w	8008c6e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d16d      	bne.n	800813e <USB_EPStartXfer+0x75a>
 8008062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	64bb      	str	r3, [r7, #72]	; 0x48
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008082:	4413      	add	r3, r2
 8008084:	64bb      	str	r3, [r7, #72]	; 0x48
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	011a      	lsls	r2, r3, #4
 8008094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008096:	4413      	add	r3, r2
 8008098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800809c:	647b      	str	r3, [r7, #68]	; 0x44
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <USB_EPStartXfer+0x6e8>
 80080a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	e063      	b.n	8008194 <USB_EPStartXfer+0x7b0>
 80080cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d0:	2b3e      	cmp	r3, #62	; 0x3e
 80080d2:	d817      	bhi.n	8008104 <USB_EPStartXfer+0x720>
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <USB_EPStartXfer+0x710>
 80080ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080ee:	3301      	adds	r3, #1
 80080f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	e047      	b.n	8008194 <USB_EPStartXfer+0x7b0>
 8008104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2b00      	cmp	r3, #0
 8008118:	d104      	bne.n	8008124 <USB_EPStartXfer+0x740>
 800811a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800811e:	3b01      	subs	r3, #1
 8008120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008128:	b29b      	uxth	r3, r3
 800812a:	029b      	lsls	r3, r3, #10
 800812c:	b29b      	uxth	r3, r3
 800812e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008136:	b29a      	uxth	r2, r3
 8008138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e02a      	b.n	8008194 <USB_EPStartXfer+0x7b0>
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d122      	bne.n	8008194 <USB_EPStartXfer+0x7b0>
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	653b      	str	r3, [r7, #80]	; 0x50
 800815a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816e:	4413      	add	r3, r2
 8008170:	653b      	str	r3, [r7, #80]	; 0x50
 8008172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	011a      	lsls	r2, r3, #4
 8008180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008182:	4413      	add	r3, r2
 8008184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800818a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818e:	b29a      	uxth	r2, r3
 8008190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	891b      	ldrh	r3, [r3, #8]
 80081a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6959      	ldr	r1, [r3, #20]
 80081b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80081be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80081c2:	6800      	ldr	r0, [r0, #0]
 80081c4:	f001 fb84 	bl	80098d0 <USB_WritePMA>
            ep->xfer_buff += len;
 80081c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d8:	441a      	add	r2, r3
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a1a      	ldr	r2, [r3, #32]
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d90f      	bls.n	8008222 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	621a      	str	r2, [r3, #32]
 8008220:	e00e      	b.n	8008240 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2200      	movs	r2, #0
 800823e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	643b      	str	r3, [r7, #64]	; 0x40
 800824c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d16d      	bne.n	8008338 <USB_EPStartXfer+0x954>
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	63bb      	str	r3, [r7, #56]	; 0x38
 8008268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008276:	b29b      	uxth	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	4413      	add	r3, r2
 800827e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	011a      	lsls	r2, r3, #4
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	4413      	add	r3, r2
 8008292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
 8008298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d112      	bne.n	80082c6 <USB_EPStartXfer+0x8e2>
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082be:	b29a      	uxth	r2, r3
 80082c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	e05d      	b.n	8008382 <USB_EPStartXfer+0x99e>
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	2b3e      	cmp	r3, #62	; 0x3e
 80082cc:	d817      	bhi.n	80082fe <USB_EPStartXfer+0x91a>
 80082ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80082d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <USB_EPStartXfer+0x90a>
 80082e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082e8:	3301      	adds	r3, #1
 80082ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80082ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	029b      	lsls	r3, r3, #10
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	e041      	b.n	8008382 <USB_EPStartXfer+0x99e>
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <USB_EPStartXfer+0x93a>
 8008314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008318:	3b01      	subs	r3, #1
 800831a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800831e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008322:	b29b      	uxth	r3, r3
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	b29b      	uxth	r3, r3
 8008328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008330:	b29a      	uxth	r2, r3
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e024      	b.n	8008382 <USB_EPStartXfer+0x99e>
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d11c      	bne.n	8008382 <USB_EPStartXfer+0x99e>
 8008348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008356:	b29b      	uxth	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835c:	4413      	add	r3, r2
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
 8008360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	011a      	lsls	r2, r3, #4
 800836e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008370:	4413      	add	r3, r2
 8008372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	b29a      	uxth	r2, r3
 800837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	895b      	ldrh	r3, [r3, #10]
 800838e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6959      	ldr	r1, [r3, #20]
 800839e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083b0:	6800      	ldr	r0, [r0, #0]
 80083b2:	f001 fa8d 	bl	80098d0 <USB_WritePMA>
 80083b6:	f000 bc5a 	b.w	8008c6e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80083ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80083ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80083ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	441a      	add	r2, r3
 800840e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008422:	b29b      	uxth	r3, r3
 8008424:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008440:	b29b      	uxth	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008446:	4413      	add	r3, r2
 8008448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	011a      	lsls	r2, r3, #4
 8008458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800845a:	4413      	add	r3, r2
 800845c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008460:	65bb      	str	r3, [r7, #88]	; 0x58
 8008462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008466:	b29a      	uxth	r2, r3
 8008468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800846a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	891b      	ldrh	r3, [r3, #8]
 8008478:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800847c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6959      	ldr	r1, [r3, #20]
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	b29b      	uxth	r3, r3
 800848e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008492:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008496:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	f001 fa18 	bl	80098d0 <USB_WritePMA>
 80084a0:	e3e5      	b.n	8008c6e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80084a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80084cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	441a      	add	r2, r3
 80084e6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80084fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a1a      	ldr	r2, [r3, #32]
 800850a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 81bc 	beq.w	80088bc <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d16d      	bne.n	800863e <USB_EPStartXfer+0xc5a>
 8008562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	67bb      	str	r3, [r7, #120]	; 0x78
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857c:	b29b      	uxth	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008582:	4413      	add	r3, r2
 8008584:	67bb      	str	r3, [r7, #120]	; 0x78
 8008586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	011a      	lsls	r2, r3, #4
 8008594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008596:	4413      	add	r3, r2
 8008598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800859c:	677b      	str	r3, [r7, #116]	; 0x74
 800859e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d112      	bne.n	80085cc <USB_EPStartXfer+0xbe8>
 80085a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	e060      	b.n	800868e <USB_EPStartXfer+0xcaa>
 80085cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d0:	2b3e      	cmp	r3, #62	; 0x3e
 80085d2:	d817      	bhi.n	8008604 <USB_EPStartXfer+0xc20>
 80085d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80085de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <USB_EPStartXfer+0xc10>
 80085ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80085f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	029b      	lsls	r3, r3, #10
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e044      	b.n	800868e <USB_EPStartXfer+0xcaa>
 8008604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800860e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2b00      	cmp	r3, #0
 8008618:	d104      	bne.n	8008624 <USB_EPStartXfer+0xc40>
 800861a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800861e:	3b01      	subs	r3, #1
 8008620:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008624:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008628:	b29b      	uxth	r3, r3
 800862a:	029b      	lsls	r3, r3, #10
 800862c:	b29b      	uxth	r3, r3
 800862e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008636:	b29a      	uxth	r2, r3
 8008638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	e027      	b.n	800868e <USB_EPStartXfer+0xcaa>
 800863e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d11f      	bne.n	800868e <USB_EPStartXfer+0xcaa>
 800864e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865c:	b29b      	uxth	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008664:	4413      	add	r3, r2
 8008666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800866a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	011a      	lsls	r2, r3, #4
 8008678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800867c:	4413      	add	r3, r2
 800867e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008688:	b29a      	uxth	r2, r3
 800868a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800868c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	895b      	ldrh	r3, [r3, #10]
 800869a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6959      	ldr	r1, [r3, #20]
 80086aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80086b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f001 f907 	bl	80098d0 <USB_WritePMA>
          ep->xfer_buff += len;
 80086c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d2:	441a      	add	r2, r3
 80086d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d90f      	bls.n	800871c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80086fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	621a      	str	r2, [r3, #32]
 800871a:	e00e      	b.n	800873a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800871c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800872c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800873a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8295 	beq.w	8008c6e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d16d      	bne.n	8008830 <USB_EPStartXfer+0xe4c>
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876e:	b29b      	uxth	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008774:	4413      	add	r3, r2
 8008776:	66bb      	str	r3, [r7, #104]	; 0x68
 8008778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008788:	4413      	add	r3, r2
 800878a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800878e:	667b      	str	r3, [r7, #100]	; 0x64
 8008790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d112      	bne.n	80087be <USB_EPStartXfer+0xdda>
 8008798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e063      	b.n	8008886 <USB_EPStartXfer+0xea2>
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c2:	2b3e      	cmp	r3, #62	; 0x3e
 80087c4:	d817      	bhi.n	80087f6 <USB_EPStartXfer+0xe12>
 80087c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <USB_EPStartXfer+0xe02>
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	029b      	lsls	r3, r3, #10
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	e047      	b.n	8008886 <USB_EPStartXfer+0xea2>
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USB_EPStartXfer+0xe32>
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	3b01      	subs	r3, #1
 8008812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008828:	b29a      	uxth	r2, r3
 800882a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	e02a      	b.n	8008886 <USB_EPStartXfer+0xea2>
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d122      	bne.n	8008886 <USB_EPStartXfer+0xea2>
 8008840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	673b      	str	r3, [r7, #112]	; 0x70
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008860:	4413      	add	r3, r2
 8008862:	673b      	str	r3, [r7, #112]	; 0x70
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	011a      	lsls	r2, r3, #4
 8008872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008874:	4413      	add	r3, r2
 8008876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800887a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800887c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008880:	b29a      	uxth	r2, r3
 8008882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008884:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	891b      	ldrh	r3, [r3, #8]
 8008892:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6959      	ldr	r1, [r3, #20]
 80088a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80088b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80088b4:	6800      	ldr	r0, [r0, #0]
 80088b6:	f001 f80b 	bl	80098d0 <USB_WritePMA>
 80088ba:	e1d8      	b.n	8008c6e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	785b      	ldrb	r3, [r3, #1]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d178      	bne.n	80089be <USB_EPStartXfer+0xfda>
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f0:	4413      	add	r3, r2
 80088f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	011a      	lsls	r2, r3, #4
 8008904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008908:	4413      	add	r3, r2
 800890a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800890e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d116      	bne.n	8008948 <USB_EPStartXfer+0xf64>
 800891a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b29b      	uxth	r3, r3
 8008922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008926:	b29a      	uxth	r2, r3
 8008928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e06b      	b.n	8008a20 <USB_EPStartXfer+0x103c>
 8008948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894c:	2b3e      	cmp	r3, #62	; 0x3e
 800894e:	d818      	bhi.n	8008982 <USB_EPStartXfer+0xf9e>
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800895a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <USB_EPStartXfer+0xf8c>
 8008966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800896a:	3301      	adds	r3, #1
 800896c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008974:	b29b      	uxth	r3, r3
 8008976:	029b      	lsls	r3, r3, #10
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e04e      	b.n	8008a20 <USB_EPStartXfer+0x103c>
 8008982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800898c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <USB_EPStartXfer+0xfbe>
 8008998:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800899c:	3b01      	subs	r3, #1
 800899e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80089a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	029b      	lsls	r3, r3, #10
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089ba:	801a      	strh	r2, [r3, #0]
 80089bc:	e030      	b.n	8008a20 <USB_EPStartXfer+0x103c>
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d128      	bne.n	8008a20 <USB_EPStartXfer+0x103c>
 80089ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089f2:	4413      	add	r3, r2
 80089f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	011a      	lsls	r2, r3, #4
 8008a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	891b      	ldrh	r3, [r3, #8]
 8008a2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6959      	ldr	r1, [r3, #20]
 8008a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a46:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008a4a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	f000 ff3e 	bl	80098d0 <USB_WritePMA>
          ep->xfer_buff += len;
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	695a      	ldr	r2, [r3, #20]
 8008a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a64:	441a      	add	r2, r3
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6a1a      	ldr	r2, [r3, #32]
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d90f      	bls.n	8008aae <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	621a      	str	r2, [r3, #32]
 8008aac:	e00e      	b.n	8008acc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80cc 	beq.w	8008c6e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d178      	bne.n	8008be6 <USB_EPStartXfer+0x1202>
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b18:	4413      	add	r3, r2
 8008b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	011a      	lsls	r2, r3, #4
 8008b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b30:	4413      	add	r3, r2
 8008b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <USB_EPStartXfer+0x118c>
 8008b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b54:	801a      	strh	r2, [r3, #0]
 8008b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b6c:	801a      	strh	r2, [r3, #0]
 8008b6e:	e064      	b.n	8008c3a <USB_EPStartXfer+0x1256>
 8008b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b74:	2b3e      	cmp	r3, #62	; 0x3e
 8008b76:	d818      	bhi.n	8008baa <USB_EPStartXfer+0x11c6>
 8008b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <USB_EPStartXfer+0x11b4>
 8008b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b92:	3301      	adds	r3, #1
 8008b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	029b      	lsls	r3, r3, #10
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba6:	801a      	strh	r2, [r3, #0]
 8008ba8:	e047      	b.n	8008c3a <USB_EPStartXfer+0x1256>
 8008baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <USB_EPStartXfer+0x11e6>
 8008bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	e029      	b.n	8008c3a <USB_EPStartXfer+0x1256>
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d121      	bne.n	8008c3a <USB_EPStartXfer+0x1256>
 8008bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	011a      	lsls	r2, r3, #4
 8008c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c24:	4413      	add	r3, r2
 8008c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	895b      	ldrh	r3, [r3, #10]
 8008c46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6959      	ldr	r1, [r3, #20]
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c60:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c64:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c68:	6800      	ldr	r0, [r0, #0]
 8008c6a:	f000 fe31 	bl	80098d0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c90:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9c:	8013      	strh	r3, [r2, #0]
 8008c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008ca6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008caa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008cae:	8812      	ldrh	r2, [r2, #0]
 8008cb0:	f082 0210 	eor.w	r2, r2, #16
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008cbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cc2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008cc6:	8812      	ldrh	r2, [r2, #0]
 8008cc8:	f082 0220 	eor.w	r2, r2, #32
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	441a      	add	r2, r3
 8008ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cec:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8013      	strh	r3, [r2, #0]
 8008d06:	f000 bc9f 	b.w	8009648 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	7b1b      	ldrb	r3, [r3, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 80ae 	bne.w	8008e78 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699a      	ldr	r2, [r3, #24]
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d917      	bls.n	8008d68 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	619a      	str	r2, [r3, #24]
 8008d66:	e00e      	b.n	8008d86 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008daa:	4413      	add	r3, r2
 8008dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	011a      	lsls	r2, r3, #4
 8008dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d116      	bne.n	8008e02 <USB_EPStartXfer+0x141e>
 8008dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dfe:	801a      	strh	r2, [r3, #0]
 8008e00:	e3e8      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
 8008e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e06:	2b3e      	cmp	r3, #62	; 0x3e
 8008e08:	d818      	bhi.n	8008e3c <USB_EPStartXfer+0x1458>
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <USB_EPStartXfer+0x1446>
 8008e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e24:	3301      	adds	r3, #1
 8008e26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	e3cb      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
 8008e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	f003 031f 	and.w	r3, r3, #31
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <USB_EPStartXfer+0x1478>
 8008e52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e56:	3b01      	subs	r3, #1
 8008e58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	029b      	lsls	r3, r3, #10
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	e3ad      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	78db      	ldrb	r3, [r3, #3]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	f040 8200 	bne.w	800928a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 8091 	bne.w	8008fbe <USB_EPStartXfer+0x15da>
 8008e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	011a      	lsls	r2, r3, #4
 8008ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ed8:	4413      	add	r3, r2
 8008eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d116      	bne.n	8008f20 <USB_EPStartXfer+0x153c>
 8008ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e083      	b.n	8009028 <USB_EPStartXfer+0x1644>
 8008f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f2e:	d820      	bhi.n	8008f72 <USB_EPStartXfer+0x158e>
 8008f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <USB_EPStartXfer+0x157c>
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	029b      	lsls	r3, r3, #10
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e05a      	b.n	8009028 <USB_EPStartXfer+0x1644>
 8008f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <USB_EPStartXfer+0x15be>
 8008f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	029b      	lsls	r3, r3, #10
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e034      	b.n	8009028 <USB_EPStartXfer+0x1644>
 8008fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d12c      	bne.n	8009028 <USB_EPStartXfer+0x1644>
 8008fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	011a      	lsls	r2, r3, #4
 8009006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800900a:	4413      	add	r3, r2
 800900c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	b29a      	uxth	r2, r3
 8009022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800903a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f040 8091 	bne.w	800916a <USB_EPStartXfer+0x1786>
 8009048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009064:	b29b      	uxth	r3, r3
 8009066:	461a      	mov	r2, r3
 8009068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800906c:	4413      	add	r3, r2
 800906e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	011a      	lsls	r2, r3, #4
 8009080:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009084:	4413      	add	r3, r2
 8009086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800908a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800908e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d116      	bne.n	80090cc <USB_EPStartXfer+0x16e8>
 800909e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	e07c      	b.n	80091c6 <USB_EPStartXfer+0x17e2>
 80090cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	2b3e      	cmp	r3, #62	; 0x3e
 80090da:	d820      	bhi.n	800911e <USB_EPStartXfer+0x173a>
 80090dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <USB_EPStartXfer+0x1728>
 8009102:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009106:	3301      	adds	r3, #1
 8009108:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800910c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009110:	b29b      	uxth	r3, r3
 8009112:	029b      	lsls	r3, r3, #10
 8009114:	b29a      	uxth	r2, r3
 8009116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e053      	b.n	80091c6 <USB_EPStartXfer+0x17e2>
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <USB_EPStartXfer+0x176a>
 8009144:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009148:	3b01      	subs	r3, #1
 800914a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800914e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009152:	b29b      	uxth	r3, r3
 8009154:	029b      	lsls	r3, r3, #10
 8009156:	b29b      	uxth	r3, r3
 8009158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009160:	b29a      	uxth	r2, r3
 8009162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009166:	801a      	strh	r2, [r3, #0]
 8009168:	e02d      	b.n	80091c6 <USB_EPStartXfer+0x17e2>
 800916a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d125      	bne.n	80091c6 <USB_EPStartXfer+0x17e2>
 800917a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800917e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009188:	b29b      	uxth	r3, r3
 800918a:	461a      	mov	r2, r3
 800918c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009190:	4413      	add	r3, r2
 8009192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	011a      	lsls	r2, r3, #4
 80091a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091a8:	4413      	add	r3, r2
 80091aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091c4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80091c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 81fe 	beq.w	80095d4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80091d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80091f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80091fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <USB_EPStartXfer+0x182c>
 8009204:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10d      	bne.n	800922c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009210:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009218:	2b00      	cmp	r3, #0
 800921a:	f040 81db 	bne.w	80095d4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800921e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 81d4 	bne.w	80095d4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800922c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009252:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	441a      	add	r2, r3
 8009270:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800927c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009284:	b29b      	uxth	r3, r3
 8009286:	8013      	strh	r3, [r2, #0]
 8009288:	e1a4      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	f040 819a 	bne.w	80095d0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800929c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699a      	ldr	r2, [r3, #24]
 80092a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d917      	bls.n	80092e8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80092b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80092c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d8:	1ad2      	subs	r2, r2, r3
 80092da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	619a      	str	r2, [r3, #24]
 80092e6:	e00e      	b.n	8009306 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80092e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2200      	movs	r2, #0
 8009304:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	785b      	ldrb	r3, [r3, #1]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d178      	bne.n	8009408 <USB_EPStartXfer+0x1a24>
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009332:	b29b      	uxth	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800933a:	4413      	add	r3, r2
 800933c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	011a      	lsls	r2, r3, #4
 800934e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009352:	4413      	add	r3, r2
 8009354:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800935c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d116      	bne.n	8009392 <USB_EPStartXfer+0x19ae>
 8009364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009370:	b29a      	uxth	r2, r3
 8009372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009376:	801a      	strh	r2, [r3, #0]
 8009378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009388:	b29a      	uxth	r2, r3
 800938a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800938e:	801a      	strh	r2, [r3, #0]
 8009390:	e06b      	b.n	800946a <USB_EPStartXfer+0x1a86>
 8009392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009396:	2b3e      	cmp	r3, #62	; 0x3e
 8009398:	d818      	bhi.n	80093cc <USB_EPStartXfer+0x19e8>
 800939a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939e:	085b      	lsrs	r3, r3, #1
 80093a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <USB_EPStartXfer+0x19d6>
 80093b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b4:	3301      	adds	r3, #1
 80093b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093be:	b29b      	uxth	r3, r3
 80093c0:	029b      	lsls	r3, r3, #10
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e04e      	b.n	800946a <USB_EPStartXfer+0x1a86>
 80093cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d0:	095b      	lsrs	r3, r3, #5
 80093d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d104      	bne.n	80093ec <USB_EPStartXfer+0x1a08>
 80093e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093e6:	3b01      	subs	r3, #1
 80093e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29a      	uxth	r2, r3
 8009400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	e030      	b.n	800946a <USB_EPStartXfer+0x1a86>
 8009408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d128      	bne.n	800946a <USB_EPStartXfer+0x1a86>
 8009418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009434:	b29b      	uxth	r3, r3
 8009436:	461a      	mov	r2, r3
 8009438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943c:	4413      	add	r3, r2
 800943e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	011a      	lsls	r2, r3, #4
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	4413      	add	r3, r2
 8009456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800945a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800945e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009462:	b29a      	uxth	r2, r3
 8009464:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d178      	bne.n	800957a <USB_EPStartXfer+0x1b96>
 8009488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	461a      	mov	r2, r3
 80094a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ac:	4413      	add	r3, r2
 80094ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	011a      	lsls	r2, r3, #4
 80094c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c4:	4413      	add	r3, r2
 80094c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d116      	bne.n	8009504 <USB_EPStartXfer+0x1b20>
 80094d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094e8:	801a      	strh	r2, [r3, #0]
 80094ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009500:	801a      	strh	r2, [r3, #0]
 8009502:	e067      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
 8009504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009508:	2b3e      	cmp	r3, #62	; 0x3e
 800950a:	d818      	bhi.n	800953e <USB_EPStartXfer+0x1b5a>
 800950c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009510:	085b      	lsrs	r3, r3, #1
 8009512:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <USB_EPStartXfer+0x1b48>
 8009522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009526:	3301      	adds	r3, #1
 8009528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800952c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009530:	b29b      	uxth	r3, r3
 8009532:	029b      	lsls	r3, r3, #10
 8009534:	b29a      	uxth	r2, r3
 8009536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800953a:	801a      	strh	r2, [r3, #0]
 800953c:	e04a      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
 800953e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <USB_EPStartXfer+0x1b7a>
 8009554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009558:	3b01      	subs	r3, #1
 800955a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800955e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29b      	uxth	r3, r3
 8009568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009570:	b29a      	uxth	r2, r3
 8009572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009576:	801a      	strh	r2, [r3, #0]
 8009578:	e02c      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
 800957a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d124      	bne.n	80095d4 <USB_EPStartXfer+0x1bf0>
 800958a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009598:	b29b      	uxth	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	4413      	add	r3, r2
 80095a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	011a      	lsls	r2, r3, #4
 80095b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b8:	4413      	add	r3, r2
 80095ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	e001      	b.n	80095d4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e03a      	b.n	800964a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80095fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009602:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009606:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800960a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800960e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009612:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	441a      	add	r2, r3
 8009630:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009644:	b29b      	uxth	r3, r3
 8009646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d020      	beq.n	80096a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967c:	81bb      	strh	r3, [r7, #12]
 800967e:	89bb      	ldrh	r3, [r7, #12]
 8009680:	f083 0310 	eor.w	r3, r3, #16
 8009684:	81bb      	strh	r3, [r7, #12]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	441a      	add	r2, r3
 8009690:	89bb      	ldrh	r3, [r7, #12]
 8009692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800969a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800969e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	8013      	strh	r3, [r2, #0]
 80096a6:	e01f      	b.n	80096e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096be:	81fb      	strh	r3, [r7, #14]
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096c6:	81fb      	strh	r3, [r7, #14]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	441a      	add	r2, r3
 80096d2:	89fb      	ldrh	r3, [r7, #14]
 80096d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	7b1b      	ldrb	r3, [r3, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f040 809d 	bne.w	8009842 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	785b      	ldrb	r3, [r3, #1]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d04c      	beq.n	80097aa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	823b      	strh	r3, [r7, #16]
 800971e:	8a3b      	ldrh	r3, [r7, #16]
 8009720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01b      	beq.n	8009760 <USB_EPClearStall+0x6c>
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973e:	81fb      	strh	r3, [r7, #14]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	441a      	add	r2, r3
 800974a:	89fb      	ldrh	r3, [r7, #14]
 800974c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800975c:	b29b      	uxth	r3, r3
 800975e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	78db      	ldrb	r3, [r3, #3]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d06c      	beq.n	8009842 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800977e:	81bb      	strh	r3, [r7, #12]
 8009780:	89bb      	ldrh	r3, [r7, #12]
 8009782:	f083 0320 	eor.w	r3, r3, #32
 8009786:	81bb      	strh	r3, [r7, #12]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	441a      	add	r2, r3
 8009792:	89bb      	ldrh	r3, [r7, #12]
 8009794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	8013      	strh	r3, [r2, #0]
 80097a8:	e04b      	b.n	8009842 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	82fb      	strh	r3, [r7, #22]
 80097b8:	8afb      	ldrh	r3, [r7, #22]
 80097ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01b      	beq.n	80097fa <USB_EPClearStall+0x106>
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d8:	82bb      	strh	r3, [r7, #20]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	441a      	add	r2, r3
 80097e4:	8abb      	ldrh	r3, [r7, #20]
 80097e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	b29b      	uxth	r3, r3
 8009808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800980c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009810:	827b      	strh	r3, [r7, #18]
 8009812:	8a7b      	ldrh	r3, [r7, #18]
 8009814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009818:	827b      	strh	r3, [r7, #18]
 800981a:	8a7b      	ldrh	r3, [r7, #18]
 800981c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009820:	827b      	strh	r3, [r7, #18]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	441a      	add	r2, r3
 800982c:	8a7b      	ldrh	r3, [r7, #18]
 800982e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	b29b      	uxth	r3, r3
 8009840:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr

0800984e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d103      	bne.n	8009868 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2280      	movs	r2, #128	; 0x80
 8009864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr

08009874 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr

0800989c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098ae:	68fb      	ldr	r3, [r7, #12]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr

080098ba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bc80      	pop	{r7}
 80098ce:	4770      	bx	lr

080098d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b08d      	sub	sp, #52	; 0x34
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4611      	mov	r1, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	460b      	mov	r3, r1
 80098e0:	80fb      	strh	r3, [r7, #6]
 80098e2:	4613      	mov	r3, r2
 80098e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80098e6:	88bb      	ldrh	r3, [r7, #4]
 80098e8:	3301      	adds	r3, #1
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	005a      	lsls	r2, r3, #1
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009908:	e01e      	b.n	8009948 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	3301      	adds	r3, #1
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	021b      	lsls	r3, r3, #8
 800991e:	b29b      	uxth	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	b29a      	uxth	r2, r3
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	3302      	adds	r3, #2
 8009934:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	3302      	adds	r3, #2
 800993a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	3301      	adds	r3, #1
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	3b01      	subs	r3, #1
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1dd      	bne.n	800990a <USB_WritePMA+0x3a>
  }
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	3734      	adds	r7, #52	; 0x34
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr

0800995a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800995a:	b480      	push	{r7}
 800995c:	b08b      	sub	sp, #44	; 0x2c
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	4611      	mov	r1, r2
 8009966:	461a      	mov	r2, r3
 8009968:	460b      	mov	r3, r1
 800996a:	80fb      	strh	r3, [r7, #6]
 800996c:	4613      	mov	r3, r2
 800996e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009970:	88bb      	ldrh	r3, [r7, #4]
 8009972:	085b      	lsrs	r3, r3, #1
 8009974:	b29b      	uxth	r3, r3
 8009976:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009980:	88fb      	ldrh	r3, [r7, #6]
 8009982:	005a      	lsls	r2, r3, #1
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800998c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
 8009992:	e01b      	b.n	80099cc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	3302      	adds	r3, #2
 80099a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	3301      	adds	r3, #1
 80099ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	3301      	adds	r3, #1
 80099be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	3302      	adds	r3, #2
 80099c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	3b01      	subs	r3, #1
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e0      	bne.n	8009994 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80099d2:	88bb      	ldrh	r3, [r7, #4]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	701a      	strb	r2, [r3, #0]
  }
}
 80099ee:	bf00      	nop
 80099f0:	372c      	adds	r7, #44	; 0x2c
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7c1b      	ldrb	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d115      	bne.n	8009a3c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a14:	2202      	movs	r2, #2
 8009a16:	2181      	movs	r1, #129	; 0x81
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fea4 	bl	800b766 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a28:	2202      	movs	r2, #2
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fe9a 	bl	800b766 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009a3a:	e012      	b.n	8009a62 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	2202      	movs	r2, #2
 8009a40:	2181      	movs	r1, #129	; 0x81
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fe8f 	bl	800b766 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	2202      	movs	r2, #2
 8009a52:	2101      	movs	r1, #1
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fe86 	bl	800b766 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a62:	2308      	movs	r3, #8
 8009a64:	2203      	movs	r2, #3
 8009a66:	2182      	movs	r1, #130	; 0x82
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 fe7c 	bl	800b766 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a78:	f001 ff9c 	bl	800b9b4 <USBD_static_malloc>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	e026      	b.n	8009ae2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	7c1b      	ldrb	r3, [r3, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ac8:	2101      	movs	r1, #1
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 ff3c 	bl	800b948 <USBD_LL_PrepareReceive>
 8009ad0:	e007      	b.n	8009ae2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	2101      	movs	r1, #1
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 ff33 	bl	800b948 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009afc:	2181      	movs	r1, #129	; 0x81
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 fe57 	bl	800b7b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 fe50 	bl	800b7b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b1a:	2182      	movs	r1, #130	; 0x82
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 fe48 	bl	800b7b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00e      	beq.n	8009b50 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 ff42 	bl	800b9cc <USBD_static_free>
    pdev->pClassData = NULL;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d039      	beq.n	8009bf8 <USBD_CDC_Setup+0x9e>
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d17f      	bne.n	8009c88 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	88db      	ldrh	r3, [r3, #6]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d029      	beq.n	8009be4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	da11      	bge.n	8009bbe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ba6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	88d2      	ldrh	r2, [r2, #6]
 8009bac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bae:	6939      	ldr	r1, [r7, #16]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	88db      	ldrh	r3, [r3, #6]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fa09 	bl	800afce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009bbc:	e06b      	b.n	8009c96 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	785a      	ldrb	r2, [r3, #1]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	88db      	ldrh	r3, [r3, #6]
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bd4:	6939      	ldr	r1, [r7, #16]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88db      	ldrh	r3, [r3, #6]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fa24 	bl	800b02a <USBD_CtlPrepareRx>
      break;
 8009be2:	e058      	b.n	8009c96 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	7850      	ldrb	r0, [r2, #1]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	4798      	blx	r3
      break;
 8009bf6:	e04e      	b.n	8009c96 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b0b      	cmp	r3, #11
 8009bfe:	d02e      	beq.n	8009c5e <USBD_CDC_Setup+0x104>
 8009c00:	2b0b      	cmp	r3, #11
 8009c02:	dc38      	bgt.n	8009c76 <USBD_CDC_Setup+0x11c>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <USBD_CDC_Setup+0xb4>
 8009c08:	2b0a      	cmp	r3, #10
 8009c0a:	d014      	beq.n	8009c36 <USBD_CDC_Setup+0xdc>
 8009c0c:	e033      	b.n	8009c76 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d107      	bne.n	8009c28 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c18:	f107 030c 	add.w	r3, r7, #12
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 f9d4 	bl	800afce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c26:	e02e      	b.n	8009c86 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f001 f965 	bl	800aefa <USBD_CtlError>
            ret = USBD_FAIL;
 8009c30:	2302      	movs	r3, #2
 8009c32:	75fb      	strb	r3, [r7, #23]
          break;
 8009c34:	e027      	b.n	8009c86 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d107      	bne.n	8009c50 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c40:	f107 030f 	add.w	r3, r7, #15
 8009c44:	2201      	movs	r2, #1
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f9c0 	bl	800afce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c4e:	e01a      	b.n	8009c86 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 f951 	bl	800aefa <USBD_CtlError>
            ret = USBD_FAIL;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	75fb      	strb	r3, [r7, #23]
          break;
 8009c5c:	e013      	b.n	8009c86 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d00d      	beq.n	8009c84 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 f945 	bl	800aefa <USBD_CtlError>
            ret = USBD_FAIL;
 8009c70:	2302      	movs	r3, #2
 8009c72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c74:	e006      	b.n	8009c84 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 f93e 	bl	800aefa <USBD_CtlError>
          ret = USBD_FAIL;
 8009c7e:	2302      	movs	r3, #2
 8009c80:	75fb      	strb	r3, [r7, #23]
          break;
 8009c82:	e000      	b.n	8009c86 <USBD_CDC_Setup+0x12c>
          break;
 8009c84:	bf00      	nop
      }
      break;
 8009c86:	e006      	b.n	8009c96 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 f935 	bl	800aefa <USBD_CtlError>
      ret = USBD_FAIL;
 8009c90:	2302      	movs	r3, #2
 8009c92:	75fb      	strb	r3, [r7, #23]
      break;
 8009c94:	bf00      	nop
  }

  return ret;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d03a      	beq.n	8009d3c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009cc6:	78fa      	ldrb	r2, [r7, #3]
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	331c      	adds	r3, #28
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d029      	beq.n	8009d30 <USBD_CDC_DataIn+0x90>
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	331c      	adds	r3, #28
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	78f9      	ldrb	r1, [r7, #3]
 8009cf0:	68b8      	ldr	r0, [r7, #8]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	4403      	add	r3, r0
 8009cfc:	3338      	adds	r3, #56	; 0x38
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d110      	bne.n	8009d30 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	440b      	add	r3, r1
 8009d1c:	331c      	adds	r3, #28
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d22:	78f9      	ldrb	r1, [r7, #3]
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 fdea 	bl	800b902 <USBD_LL_Transmit>
 8009d2e:	e003      	b.n	8009d38 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e000      	b.n	8009d3e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009d3c:	2302      	movs	r3, #2
  }
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fe15 	bl	800b98e <USBD_LL_GetRxDataSize>
 8009d64:	4602      	mov	r2, r0
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4798      	blx	r3

    return USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d92:	2302      	movs	r3, #2
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009daa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d015      	beq.n	8009de2 <USBD_CDC_EP0_RxReady+0x46>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009dbc:	2bff      	cmp	r3, #255	; 0xff
 8009dbe:	d010      	beq.n	8009de2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009dce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dd6:	b292      	uxth	r2, r2
 8009dd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2243      	movs	r2, #67	; 0x43
 8009df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009dfa:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	200002c4 	.word	0x200002c4

08009e0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2243      	movs	r2, #67	; 0x43
 8009e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009e1a:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20000280 	.word	0x20000280

08009e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2243      	movs	r2, #67	; 0x43
 8009e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009e3a:	4b03      	ldr	r3, [pc, #12]	; (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000308 	.word	0x20000308

08009e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	220a      	movs	r2, #10
 8009e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	; (8009e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	2000023c 	.word	0x2000023c

08009e6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e76:	2302      	movs	r3, #2
 8009e78:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009eb6:	88fa      	ldrh	r2, [r7, #6]
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	371c      	adds	r7, #28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bc80      	pop	{r7}
 8009ec8:	4770      	bx	lr

08009eca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b085      	sub	sp, #20
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01c      	beq.n	8009f44 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d115      	bne.n	8009f40 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2181      	movs	r1, #129	; 0x81
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fce3 	bl	800b902 <USBD_LL_Transmit>

      return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e002      	b.n	8009f46 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e000      	b.n	8009f46 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009f44:	2302      	movs	r3, #2
  }
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d017      	beq.n	8009f98 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7c1b      	ldrb	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d109      	bne.n	8009f84 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fce3 	bl	800b948 <USBD_LL_PrepareReceive>
 8009f82:	e007      	b.n	8009f94 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f8a:	2340      	movs	r3, #64	; 0x40
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 fcda 	bl	800b948 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	e000      	b.n	8009f9a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f98:	2302      	movs	r3, #2
  }
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	4613      	mov	r3, r2
 8009fae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e01a      	b.n	8009ff0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	79fa      	ldrb	r2, [r7, #7]
 8009fe6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f001 fb47 	bl	800b67c <USBD_LL_Init>

  return USBD_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d006      	beq.n	800a01a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
 800a018:	e001      	b.n	800a01e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a01a:	2302      	movs	r3, #2
 800a01c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	bc80      	pop	{r7}
 800a028:	4770      	bx	lr

0800a02a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fb7c 	bl	800b730 <USBD_LL_Start>

  return USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr

0800a056 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a062:	2302      	movs	r3, #2
 800a064:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00c      	beq.n	800a08a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	4611      	mov	r1, r2
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	78fa      	ldrb	r2, [r7, #3]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	4798      	blx	r3

  return USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fed8 	bl	800ae82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d016      	beq.n	800a124 <USBD_LL_SetupStage+0x6a>
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d81c      	bhi.n	800a134 <USBD_LL_SetupStage+0x7a>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <USBD_LL_SetupStage+0x4a>
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d008      	beq.n	800a114 <USBD_LL_SetupStage+0x5a>
 800a102:	e017      	b.n	800a134 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f9cb 	bl	800a4a8 <USBD_StdDevReq>
      break;
 800a112:	e01a      	b.n	800a14a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa2d 	bl	800a57c <USBD_StdItfReq>
      break;
 800a122:	e012      	b.n	800a14a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fa6d 	bl	800a60c <USBD_StdEPReq>
      break;
 800a132:	e00a      	b.n	800a14a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a13a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 fb54 	bl	800b7f0 <USBD_LL_StallEP>
      break;
 800a148:	bf00      	nop
  }

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	460b      	mov	r3, r1
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d14b      	bne.n	800a200 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a16e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a176:	2b03      	cmp	r3, #3
 800a178:	d134      	bne.n	800a1e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	429a      	cmp	r2, r3
 800a184:	d919      	bls.n	800a1ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d203      	bcs.n	800a1a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	e002      	b.n	800a1ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 ff57 	bl	800b066 <USBD_CtlContinueRx>
 800a1b8:	e038      	b.n	800a22c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d105      	bne.n	800a1dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 ff54 	bl	800b08a <USBD_CtlSendStatus>
 800a1e2:	e023      	b.n	800a22c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ea:	2b05      	cmp	r3, #5
 800a1ec:	d11e      	bne.n	800a22c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f001 faf9 	bl	800b7f0 <USBD_LL_StallEP>
 800a1fe:	e015      	b.n	800a22c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00d      	beq.n	800a228 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a212:	2b03      	cmp	r3, #3
 800a214:	d108      	bne.n	800a228 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	7afa      	ldrb	r2, [r7, #11]
 800a220:	4611      	mov	r1, r2
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	4798      	blx	r3
 800a226:	e001      	b.n	800a22c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a228:	2302      	movs	r3, #2
 800a22a:	e000      	b.n	800a22e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	460b      	mov	r3, r1
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d17f      	bne.n	800a34a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3314      	adds	r3, #20
 800a24e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a256:	2b02      	cmp	r3, #2
 800a258:	d15c      	bne.n	800a314 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	429a      	cmp	r2, r3
 800a264:	d915      	bls.n	800a292 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 fec1 	bl	800b006 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f001 fb5c 	bl	800b948 <USBD_LL_PrepareReceive>
 800a290:	e04e      	b.n	800a330 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	6912      	ldr	r2, [r2, #16]
 800a29a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a29e:	fb01 f202 	mul.w	r2, r1, r2
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11c      	bne.n	800a2e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d316      	bcc.n	800a2e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d20f      	bcs.n	800a2e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 fe9d 	bl	800b006 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2100      	movs	r1, #0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f001 fb34 	bl	800b948 <USBD_LL_PrepareReceive>
 800a2e0:	e026      	b.n	800a330 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00a      	beq.n	800a304 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d105      	bne.n	800a304 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a304:	2180      	movs	r1, #128	; 0x80
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f001 fa72 	bl	800b7f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 fecf 	bl	800b0b0 <USBD_CtlReceiveStatus>
 800a312:	e00d      	b.n	800a330 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d004      	beq.n	800a328 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a324:	2b00      	cmp	r3, #0
 800a326:	d103      	bne.n	800a330 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a328:	2180      	movs	r1, #128	; 0x80
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 fa60 	bl	800b7f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a336:	2b01      	cmp	r3, #1
 800a338:	d11d      	bne.n	800a376 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fe81 	bl	800a042 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a348:	e015      	b.n	800a376 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00d      	beq.n	800a372 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d108      	bne.n	800a372 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	7afa      	ldrb	r2, [r7, #11]
 800a36a:	4611      	mov	r1, r2
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	4798      	blx	r3
 800a370:	e001      	b.n	800a376 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a372:	2302      	movs	r3, #2
 800a374:	e000      	b.n	800a378 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 f9e9 	bl	800b766 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2240      	movs	r2, #64	; 0x40
 800a3a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f9db 	bl	800b766 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2240      	movs	r2, #64	; 0x40
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6852      	ldr	r2, [r2, #4]
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
  }

  return USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	78fa      	ldrb	r2, [r7, #3]
 800a412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bc80      	pop	{r7}
 800a41e:	4770      	bx	lr

0800a420 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2204      	movs	r2, #4
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	bc80      	pop	{r7}
 800a446:	4770      	bx	lr

0800a448 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a456:	2b04      	cmp	r3, #4
 800a458:	d105      	bne.n	800a466 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr

0800a472 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a480:	2b03      	cmp	r3, #3
 800a482:	d10b      	bne.n	800a49c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4be:	2b40      	cmp	r3, #64	; 0x40
 800a4c0:	d005      	beq.n	800a4ce <USBD_StdDevReq+0x26>
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	d84f      	bhi.n	800a566 <USBD_StdDevReq+0xbe>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d009      	beq.n	800a4de <USBD_StdDevReq+0x36>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d14b      	bne.n	800a566 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	4798      	blx	r3
      break;
 800a4dc:	e048      	b.n	800a570 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	785b      	ldrb	r3, [r3, #1]
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	d839      	bhi.n	800a55a <USBD_StdDevReq+0xb2>
 800a4e6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <USBD_StdDevReq+0x44>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a53d 	.word	0x0800a53d
 800a4f0:	0800a551 	.word	0x0800a551
 800a4f4:	0800a55b 	.word	0x0800a55b
 800a4f8:	0800a547 	.word	0x0800a547
 800a4fc:	0800a55b 	.word	0x0800a55b
 800a500:	0800a51f 	.word	0x0800a51f
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a55b 	.word	0x0800a55b
 800a50c:	0800a533 	.word	0x0800a533
 800a510:	0800a529 	.word	0x0800a529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f9dc 	bl	800a8d4 <USBD_GetDescriptor>
          break;
 800a51c:	e022      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fb3f 	bl	800aba4 <USBD_SetAddress>
          break;
 800a526:	e01d      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fb7e 	bl	800ac2c <USBD_SetConfig>
          break;
 800a530:	e018      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fc07 	bl	800ad48 <USBD_GetConfig>
          break;
 800a53a:	e013      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fc37 	bl	800adb2 <USBD_GetStatus>
          break;
 800a544:	e00e      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc65 	bl	800ae18 <USBD_SetFeature>
          break;
 800a54e:	e009      	b.n	800a564 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fc74 	bl	800ae40 <USBD_ClrFeature>
          break;
 800a558:	e004      	b.n	800a564 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fccc 	bl	800aefa <USBD_CtlError>
          break;
 800a562:	bf00      	nop
      }
      break;
 800a564:	e004      	b.n	800a570 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fcc6 	bl	800aefa <USBD_CtlError>
      break;
 800a56e:	bf00      	nop
  }

  return ret;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a592:	2b40      	cmp	r3, #64	; 0x40
 800a594:	d005      	beq.n	800a5a2 <USBD_StdItfReq+0x26>
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d82e      	bhi.n	800a5f8 <USBD_StdItfReq+0x7c>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <USBD_StdItfReq+0x26>
 800a59e:	2b20      	cmp	r3, #32
 800a5a0:	d12a      	bne.n	800a5f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d81d      	bhi.n	800a5ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	889b      	ldrh	r3, [r3, #4]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d813      	bhi.n	800a5e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88db      	ldrh	r3, [r3, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d110      	bne.n	800a5f4 <USBD_StdItfReq+0x78>
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10d      	bne.n	800a5f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fd56 	bl	800b08a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5de:	e009      	b.n	800a5f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fc89 	bl	800aefa <USBD_CtlError>
          break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fc84 	bl	800aefa <USBD_CtlError>
          break;
 800a5f2:	e000      	b.n	800a5f6 <USBD_StdItfReq+0x7a>
          break;
 800a5f4:	bf00      	nop
      }
      break;
 800a5f6:	e004      	b.n	800a602 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fc7d 	bl	800aefa <USBD_CtlError>
      break;
 800a600:	bf00      	nop
  }

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	889b      	ldrh	r3, [r3, #4]
 800a61e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a628:	2b40      	cmp	r3, #64	; 0x40
 800a62a:	d007      	beq.n	800a63c <USBD_StdEPReq+0x30>
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	f200 8146 	bhi.w	800a8be <USBD_StdEPReq+0x2b2>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <USBD_StdEPReq+0x40>
 800a636:	2b20      	cmp	r3, #32
 800a638:	f040 8141 	bne.w	800a8be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
      break;
 800a64a:	e13d      	b.n	800a8c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a654:	2b20      	cmp	r3, #32
 800a656:	d10a      	bne.n	800a66e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	e12d      	b.n	800a8ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d007      	beq.n	800a686 <USBD_StdEPReq+0x7a>
 800a676:	2b03      	cmp	r3, #3
 800a678:	f300 811b 	bgt.w	800a8b2 <USBD_StdEPReq+0x2a6>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d072      	beq.n	800a766 <USBD_StdEPReq+0x15a>
 800a680:	2b01      	cmp	r3, #1
 800a682:	d03a      	beq.n	800a6fa <USBD_StdEPReq+0xee>
 800a684:	e115      	b.n	800a8b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d002      	beq.n	800a696 <USBD_StdEPReq+0x8a>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d015      	beq.n	800a6c0 <USBD_StdEPReq+0xb4>
 800a694:	e02b      	b.n	800a6ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <USBD_StdEPReq+0xaa>
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d009      	beq.n	800a6b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f8a2 	bl	800b7f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6ac:	2180      	movs	r1, #128	; 0x80
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 f89e 	bl	800b7f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6b4:	e020      	b.n	800a6f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fc1e 	bl	800aefa <USBD_CtlError>
              break;
 800a6be:	e01b      	b.n	800a6f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	885b      	ldrh	r3, [r3, #2]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10e      	bne.n	800a6e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <USBD_StdEPReq+0xda>
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b80      	cmp	r3, #128	; 0x80
 800a6d2:	d008      	beq.n	800a6e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f885 	bl	800b7f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fccf 	bl	800b08a <USBD_CtlSendStatus>

              break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fc02 	bl	800aefa <USBD_CtlError>
              break;
 800a6f6:	bf00      	nop
          }
          break;
 800a6f8:	e0e0      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a700:	2b02      	cmp	r3, #2
 800a702:	d002      	beq.n	800a70a <USBD_StdEPReq+0xfe>
 800a704:	2b03      	cmp	r3, #3
 800a706:	d015      	beq.n	800a734 <USBD_StdEPReq+0x128>
 800a708:	e026      	b.n	800a758 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <USBD_StdEPReq+0x11e>
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d009      	beq.n	800a72a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 f868 	bl	800b7f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a720:	2180      	movs	r1, #128	; 0x80
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 f864 	bl	800b7f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a728:	e01c      	b.n	800a764 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fbe4 	bl	800aefa <USBD_CtlError>
              break;
 800a732:	e017      	b.n	800a764 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	885b      	ldrh	r3, [r3, #2]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d112      	bne.n	800a762 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 f86f 	bl	800b82e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc9a 	bl	800b08a <USBD_CtlSendStatus>
              }
              break;
 800a756:	e004      	b.n	800a762 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fbcd 	bl	800aefa <USBD_CtlError>
              break;
 800a760:	e000      	b.n	800a764 <USBD_StdEPReq+0x158>
              break;
 800a762:	bf00      	nop
          }
          break;
 800a764:	e0aa      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d002      	beq.n	800a776 <USBD_StdEPReq+0x16a>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d032      	beq.n	800a7da <USBD_StdEPReq+0x1ce>
 800a774:	e097      	b.n	800a8a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <USBD_StdEPReq+0x180>
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d004      	beq.n	800a78c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fbb8 	bl	800aefa <USBD_CtlError>
                break;
 800a78a:	e091      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a78c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	da0b      	bge.n	800a7ac <USBD_StdEPReq+0x1a0>
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	3310      	adds	r3, #16
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	e00b      	b.n	800a7c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fbfb 	bl	800afce <USBD_CtlSendData>
              break;
 800a7d8:	e06a      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	da11      	bge.n	800a806 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3318      	adds	r3, #24
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d117      	bne.n	800a82c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fb7b 	bl	800aefa <USBD_CtlError>
                  break;
 800a804:	e054      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	f003 020f 	and.w	r2, r3, #15
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	440b      	add	r3, r1
 800a818:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb68 	bl	800aefa <USBD_CtlError>
                  break;
 800a82a:	e041      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a830:	2b00      	cmp	r3, #0
 800a832:	da0b      	bge.n	800a84c <USBD_StdEPReq+0x240>
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	3310      	adds	r3, #16
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	4413      	add	r3, r2
 800a848:	3304      	adds	r3, #4
 800a84a:	e00b      	b.n	800a864 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4413      	add	r3, r2
 800a862:	3304      	adds	r3, #4
 800a864:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <USBD_StdEPReq+0x266>
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b80      	cmp	r3, #128	; 0x80
 800a870:	d103      	bne.n	800a87a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e00e      	b.n	800a898 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fff4 	bl	800b86c <USBD_LL_IsStallEP>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e002      	b.n	800a898 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2202      	movs	r2, #2
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb95 	bl	800afce <USBD_CtlSendData>
              break;
 800a8a4:	e004      	b.n	800a8b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fb26 	bl	800aefa <USBD_CtlError>
              break;
 800a8ae:	bf00      	nop
          }
          break;
 800a8b0:	e004      	b.n	800a8bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fb20 	bl	800aefa <USBD_CtlError>
          break;
 800a8ba:	bf00      	nop
      }
      break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fb1a 	bl	800aefa <USBD_CtlError>
      break;
 800a8c6:	bf00      	nop
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	885b      	ldrh	r3, [r3, #2]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	f200 8128 	bhi.w	800ab4a <USBD_GetDescriptor+0x276>
 800a8fa:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <USBD_GetDescriptor+0x2c>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a91d 	.word	0x0800a91d
 800a904:	0800a935 	.word	0x0800a935
 800a908:	0800a975 	.word	0x0800a975
 800a90c:	0800ab4b 	.word	0x0800ab4b
 800a910:	0800ab4b 	.word	0x0800ab4b
 800a914:	0800aaeb 	.word	0x0800aaeb
 800a918:	0800ab17 	.word	0x0800ab17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	7c12      	ldrb	r2, [r2, #16]
 800a928:	f107 0108 	add.w	r1, r7, #8
 800a92c:	4610      	mov	r0, r2
 800a92e:	4798      	blx	r3
 800a930:	60f8      	str	r0, [r7, #12]
      break;
 800a932:	e112      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	7c1b      	ldrb	r3, [r3, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10d      	bne.n	800a958 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	f107 0208 	add.w	r2, r7, #8
 800a948:	4610      	mov	r0, r2
 800a94a:	4798      	blx	r3
 800a94c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3301      	adds	r3, #1
 800a952:	2202      	movs	r2, #2
 800a954:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a956:	e100      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	f107 0208 	add.w	r2, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3301      	adds	r3, #1
 800a96e:	2202      	movs	r2, #2
 800a970:	701a      	strb	r2, [r3, #0]
      break;
 800a972:	e0f2      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	885b      	ldrh	r3, [r3, #2]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b05      	cmp	r3, #5
 800a97c:	f200 80ac 	bhi.w	800aad8 <USBD_GetDescriptor+0x204>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <USBD_GetDescriptor+0xb4>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9d5 	.word	0x0800a9d5
 800a990:	0800aa09 	.word	0x0800aa09
 800a994:	0800aa3d 	.word	0x0800aa3d
 800a998:	0800aa71 	.word	0x0800aa71
 800a99c:	0800aaa5 	.word	0x0800aaa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	7c12      	ldrb	r2, [r2, #16]
 800a9b8:	f107 0108 	add.w	r1, r7, #8
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4798      	blx	r3
 800a9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9c2:	e091      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa97 	bl	800aefa <USBD_CtlError>
            err++;
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9d2:	e089      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	7c12      	ldrb	r2, [r2, #16]
 800a9ec:	f107 0108 	add.w	r1, r7, #8
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
 800a9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9f6:	e077      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa7d 	bl	800aefa <USBD_CtlError>
            err++;
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	3301      	adds	r3, #1
 800aa04:	72fb      	strb	r3, [r7, #11]
          break;
 800aa06:	e06f      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	f107 0108 	add.w	r1, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2a:	e05d      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa63 	bl	800aefa <USBD_CtlError>
            err++;
 800aa34:	7afb      	ldrb	r3, [r7, #11]
 800aa36:	3301      	adds	r3, #1
 800aa38:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3a:	e055      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7c12      	ldrb	r2, [r2, #16]
 800aa54:	f107 0108 	add.w	r1, r7, #8
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4798      	blx	r3
 800aa5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa5e:	e043      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa49 	bl	800aefa <USBD_CtlError>
            err++;
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa6e:	e03b      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa92:	e029      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa2f 	bl	800aefa <USBD_CtlError>
            err++;
 800aa9c:	7afb      	ldrb	r3, [r7, #11]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa2:	e021      	b.n	800aae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e00f      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fa15 	bl	800aefa <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e007      	b.n	800aae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa0d 	bl	800aefa <USBD_CtlError>
          err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aae6:	e038      	b.n	800ab5a <USBD_GetDescriptor+0x286>
 800aae8:	e037      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7c1b      	ldrb	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafa:	f107 0208 	add.w	r2, r7, #8
 800aafe:	4610      	mov	r0, r2
 800ab00:	4798      	blx	r3
 800ab02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab04:	e029      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f9f6 	bl	800aefa <USBD_CtlError>
        err++;
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	3301      	adds	r3, #1
 800ab12:	72fb      	strb	r3, [r7, #11]
      break;
 800ab14:	e021      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7c1b      	ldrb	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10d      	bne.n	800ab3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab26:	f107 0208 	add.w	r2, r7, #8
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4798      	blx	r3
 800ab2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	2207      	movs	r2, #7
 800ab36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab38:	e00f      	b.n	800ab5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f9dc 	bl	800aefa <USBD_CtlError>
        err++;
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	3301      	adds	r3, #1
 800ab46:	72fb      	strb	r3, [r7, #11]
      break;
 800ab48:	e007      	b.n	800ab5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9d4 	bl	800aefa <USBD_CtlError>
      err++;
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	3301      	adds	r3, #1
 800ab56:	72fb      	strb	r3, [r7, #11]
      break;
 800ab58:	bf00      	nop
  }

  if (err != 0U)
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11c      	bne.n	800ab9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <USBD_GetDescriptor+0x2b6>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	88db      	ldrh	r3, [r3, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	88da      	ldrh	r2, [r3, #6]
 800ab72:	893b      	ldrh	r3, [r7, #8]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	bf28      	it	cs
 800ab78:	4613      	movcs	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab7e:	893b      	ldrh	r3, [r7, #8]
 800ab80:	461a      	mov	r2, r3
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa22 	bl	800afce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	88db      	ldrh	r3, [r3, #6]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d104      	bne.n	800ab9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa79 	bl	800b08a <USBD_CtlSendStatus>
 800ab98:	e000      	b.n	800ab9c <USBD_GetDescriptor+0x2c8>
    return;
 800ab9a:	bf00      	nop
    }
  }
}
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop

0800aba4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d130      	bne.n	800ac18 <USBD_SetAddress+0x74>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	88db      	ldrh	r3, [r3, #6]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d12c      	bne.n	800ac18 <USBD_SetAddress+0x74>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	885b      	ldrh	r3, [r3, #2]
 800abc2:	2b7f      	cmp	r3, #127	; 0x7f
 800abc4:	d828      	bhi.n	800ac18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d104      	bne.n	800abe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f98b 	bl	800aefa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe4:	e01d      	b.n	800ac22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7bfa      	ldrb	r2, [r7, #15]
 800abea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fe66 	bl	800b8c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fa46 	bl	800b08a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0c:	e009      	b.n	800ac22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac16:	e004      	b.n	800ac22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f96d 	bl	800aefa <USBD_CtlError>
  }
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	4b41      	ldr	r3, [pc, #260]	; (800ad44 <USBD_SetConfig+0x118>)
 800ac3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac40:	4b40      	ldr	r3, [pc, #256]	; (800ad44 <USBD_SetConfig+0x118>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d904      	bls.n	800ac52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f955 	bl	800aefa <USBD_CtlError>
 800ac50:	e075      	b.n	800ad3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d002      	beq.n	800ac62 <USBD_SetConfig+0x36>
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d023      	beq.n	800aca8 <USBD_SetConfig+0x7c>
 800ac60:	e062      	b.n	800ad28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac62:	4b38      	ldr	r3, [pc, #224]	; (800ad44 <USBD_SetConfig+0x118>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01a      	beq.n	800aca0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac6a:	4b36      	ldr	r3, [pc, #216]	; (800ad44 <USBD_SetConfig+0x118>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2203      	movs	r2, #3
 800ac78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac7c:	4b31      	ldr	r3, [pc, #196]	; (800ad44 <USBD_SetConfig+0x118>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff f9e7 	bl	800a056 <USBD_SetClassConfig>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d104      	bne.n	800ac98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f932 	bl	800aefa <USBD_CtlError>
            return;
 800ac96:	e052      	b.n	800ad3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9f6 	bl	800b08a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac9e:	e04e      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f9f2 	bl	800b08a <USBD_CtlSendStatus>
        break;
 800aca6:	e04a      	b.n	800ad3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aca8:	4b26      	ldr	r3, [pc, #152]	; (800ad44 <USBD_SetConfig+0x118>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d112      	bne.n	800acd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800acb8:	4b22      	ldr	r3, [pc, #136]	; (800ad44 <USBD_SetConfig+0x118>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800acc2:	4b20      	ldr	r3, [pc, #128]	; (800ad44 <USBD_SetConfig+0x118>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff f9e3 	bl	800a094 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f9db 	bl	800b08a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acd4:	e033      	b.n	800ad3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800acd6:	4b1b      	ldr	r3, [pc, #108]	; (800ad44 <USBD_SetConfig+0x118>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d01d      	beq.n	800ad20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff f9d1 	bl	800a094 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800acf2:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <USBD_SetConfig+0x118>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800acfc:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <USBD_SetConfig+0x118>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff f9a7 	bl	800a056 <USBD_SetClassConfig>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d104      	bne.n	800ad18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f8f2 	bl	800aefa <USBD_CtlError>
            return;
 800ad16:	e012      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f9b6 	bl	800b08a <USBD_CtlSendStatus>
        break;
 800ad1e:	e00e      	b.n	800ad3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f9b2 	bl	800b08a <USBD_CtlSendStatus>
        break;
 800ad26:	e00a      	b.n	800ad3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8e5 	bl	800aefa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <USBD_SetConfig+0x118>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff f9ac 	bl	800a094 <USBD_ClrClassConfig>
        break;
 800ad3c:	bf00      	nop
    }
  }
}
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000c68 	.word	0x20000c68

0800ad48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	88db      	ldrh	r3, [r3, #6]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d004      	beq.n	800ad64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f8cc 	bl	800aefa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad62:	e022      	b.n	800adaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	dc02      	bgt.n	800ad74 <USBD_GetConfig+0x2c>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dc03      	bgt.n	800ad7a <USBD_GetConfig+0x32>
 800ad72:	e015      	b.n	800ada0 <USBD_GetConfig+0x58>
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetConfig+0x48>
 800ad78:	e012      	b.n	800ada0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3308      	adds	r3, #8
 800ad84:	2201      	movs	r2, #1
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f920 	bl	800afce <USBD_CtlSendData>
        break;
 800ad8e:	e00c      	b.n	800adaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	2201      	movs	r2, #1
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f918 	bl	800afce <USBD_CtlSendData>
        break;
 800ad9e:	e004      	b.n	800adaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8a9 	bl	800aefa <USBD_CtlError>
        break;
 800ada8:	bf00      	nop
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d81e      	bhi.n	800ae06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	88db      	ldrh	r3, [r3, #6]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d004      	beq.n	800adda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f891 	bl	800aefa <USBD_CtlError>
        break;
 800add8:	e01a      	b.n	800ae10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d005      	beq.n	800adf6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f043 0202 	orr.w	r2, r3, #2
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	330c      	adds	r3, #12
 800adfa:	2202      	movs	r2, #2
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8e5 	bl	800afce <USBD_CtlSendData>
      break;
 800ae04:	e004      	b.n	800ae10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f876 	bl	800aefa <USBD_CtlError>
      break;
 800ae0e:	bf00      	nop
  }
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d106      	bne.n	800ae38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f929 	bl	800b08a <USBD_CtlSendStatus>
  }
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae50:	3b01      	subs	r3, #1
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d80b      	bhi.n	800ae6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	885b      	ldrh	r3, [r3, #2]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d10c      	bne.n	800ae78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f90f 	bl	800b08a <USBD_CtlSendStatus>
      }
      break;
 800ae6c:	e004      	b.n	800ae78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f842 	bl	800aefa <USBD_CtlError>
      break;
 800ae76:	e000      	b.n	800ae7a <USBD_ClrFeature+0x3a>
      break;
 800ae78:	bf00      	nop
  }
}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	785a      	ldrb	r2, [r3, #1]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	3302      	adds	r3, #2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	3303      	adds	r3, #3
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	3304      	adds	r3, #4
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	3305      	adds	r3, #5
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	4413      	add	r3, r2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	3306      	adds	r3, #6
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	3307      	adds	r3, #7
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	021b      	lsls	r3, r3, #8
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	4413      	add	r3, r2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	80da      	strh	r2, [r3, #6]

}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800af04:	2180      	movs	r1, #128	; 0x80
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fc72 	bl	800b7f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fc6e 	bl	800b7f0 <USBD_LL_StallEP>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d032      	beq.n	800af98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 f834 	bl	800afa0 <USBD_GetLen>
 800af38:	4603      	mov	r3, r0
 800af3a:	3301      	adds	r3, #1
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	75fa      	strb	r2, [r7, #23]
 800af4c:	461a      	mov	r2, r3
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	4413      	add	r3, r2
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	7812      	ldrb	r2, [r2, #0]
 800af56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	75fa      	strb	r2, [r7, #23]
 800af5e:	461a      	mov	r2, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	4413      	add	r3, r2
 800af64:	2203      	movs	r2, #3
 800af66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af68:	e012      	b.n	800af90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	60fa      	str	r2, [r7, #12]
 800af70:	7dfa      	ldrb	r2, [r7, #23]
 800af72:	1c51      	adds	r1, r2, #1
 800af74:	75f9      	strb	r1, [r7, #23]
 800af76:	4611      	mov	r1, r2
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	440a      	add	r2, r1
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	75fa      	strb	r2, [r7, #23]
 800af86:	461a      	mov	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4413      	add	r3, r2
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e8      	bne.n	800af6a <USBD_GetString+0x4e>
    }
  }
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800afac:	e005      	b.n	800afba <USBD_GetLen+0x1a>
  {
    len++;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	3301      	adds	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3301      	adds	r3, #1
 800afb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1f5      	bne.n	800afae <USBD_GetLen+0xe>
  }

  return len;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	4613      	mov	r3, r2
 800afda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2202      	movs	r2, #2
 800afe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800afe4:	88fa      	ldrh	r2, [r7, #6]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800afea:	88fa      	ldrh	r2, [r7, #6]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aff0:	88fb      	ldrh	r3, [r7, #6]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	2100      	movs	r1, #0
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 fc83 	bl	800b902 <USBD_LL_Transmit>

  return USBD_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	4613      	mov	r3, r2
 800b012:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	2100      	movs	r1, #0
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 fc71 	bl	800b902 <USBD_LL_Transmit>

  return USBD_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	4613      	mov	r3, r2
 800b036:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2203      	movs	r2, #3
 800b03c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b048:	88fa      	ldrh	r2, [r7, #6]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	2100      	movs	r1, #0
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 fc76 	bl	800b948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	4613      	mov	r3, r2
 800b072:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fc64 	bl	800b948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2204      	movs	r2, #4
 800b096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b09a:	2300      	movs	r3, #0
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc2e 	bl	800b902 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2205      	movs	r2, #5
 800b0bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fc3e 	bl	800b948 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4912      	ldr	r1, [pc, #72]	; (800b128 <MX_USB_DEVICE_Init+0x50>)
 800b0e0:	4812      	ldr	r0, [pc, #72]	; (800b12c <MX_USB_DEVICE_Init+0x54>)
 800b0e2:	f7fe ff5e 	bl	8009fa2 <USBD_Init>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0ec:	f7f6 f830 	bl	8001150 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b0f0:	490f      	ldr	r1, [pc, #60]	; (800b130 <MX_USB_DEVICE_Init+0x58>)
 800b0f2:	480e      	ldr	r0, [pc, #56]	; (800b12c <MX_USB_DEVICE_Init+0x54>)
 800b0f4:	f7fe ff80 	bl	8009ff8 <USBD_RegisterClass>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b0fe:	f7f6 f827 	bl	8001150 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b102:	490c      	ldr	r1, [pc, #48]	; (800b134 <MX_USB_DEVICE_Init+0x5c>)
 800b104:	4809      	ldr	r0, [pc, #36]	; (800b12c <MX_USB_DEVICE_Init+0x54>)
 800b106:	f7fe feb1 	bl	8009e6c <USBD_CDC_RegisterInterface>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b110:	f7f6 f81e 	bl	8001150 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b114:	4805      	ldr	r0, [pc, #20]	; (800b12c <MX_USB_DEVICE_Init+0x54>)
 800b116:	f7fe ff88 	bl	800a02a <USBD_Start>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b120:	f7f6 f816 	bl	8001150 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b124:	bf00      	nop
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20000364 	.word	0x20000364
 800b12c:	20000c6c 	.word	0x20000c6c
 800b130:	20000248 	.word	0x20000248
 800b134:	20000354 	.word	0x20000354

0800b138 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b13c:	2200      	movs	r2, #0
 800b13e:	4905      	ldr	r1, [pc, #20]	; (800b154 <CDC_Init_FS+0x1c>)
 800b140:	4805      	ldr	r0, [pc, #20]	; (800b158 <CDC_Init_FS+0x20>)
 800b142:	f7fe fea9 	bl	8009e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b146:	4905      	ldr	r1, [pc, #20]	; (800b15c <CDC_Init_FS+0x24>)
 800b148:	4803      	ldr	r0, [pc, #12]	; (800b158 <CDC_Init_FS+0x20>)
 800b14a:	f7fe febe 	bl	8009eca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b14e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b150:	4618      	mov	r0, r3
 800b152:	bd80      	pop	{r7, pc}
 800b154:	20001318 	.word	0x20001318
 800b158:	20000c6c 	.word	0x20000c6c
 800b15c:	20000f30 	.word	0x20000f30

0800b160 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b164:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b166:	4618      	mov	r0, r3
 800b168:	46bd      	mov	sp, r7
 800b16a:	bc80      	pop	{r7}
 800b16c:	4770      	bx	lr
	...

0800b170 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
 800b17c:	4613      	mov	r3, r2
 800b17e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b23      	cmp	r3, #35	; 0x23
 800b184:	d85c      	bhi.n	800b240 <CDC_Control_FS+0xd0>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <CDC_Control_FS+0x1c>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b241 	.word	0x0800b241
 800b190:	0800b241 	.word	0x0800b241
 800b194:	0800b241 	.word	0x0800b241
 800b198:	0800b241 	.word	0x0800b241
 800b19c:	0800b241 	.word	0x0800b241
 800b1a0:	0800b241 	.word	0x0800b241
 800b1a4:	0800b241 	.word	0x0800b241
 800b1a8:	0800b241 	.word	0x0800b241
 800b1ac:	0800b241 	.word	0x0800b241
 800b1b0:	0800b241 	.word	0x0800b241
 800b1b4:	0800b241 	.word	0x0800b241
 800b1b8:	0800b241 	.word	0x0800b241
 800b1bc:	0800b241 	.word	0x0800b241
 800b1c0:	0800b241 	.word	0x0800b241
 800b1c4:	0800b241 	.word	0x0800b241
 800b1c8:	0800b241 	.word	0x0800b241
 800b1cc:	0800b241 	.word	0x0800b241
 800b1d0:	0800b241 	.word	0x0800b241
 800b1d4:	0800b241 	.word	0x0800b241
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b241 	.word	0x0800b241
 800b1e0:	0800b241 	.word	0x0800b241
 800b1e4:	0800b241 	.word	0x0800b241
 800b1e8:	0800b241 	.word	0x0800b241
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b241 	.word	0x0800b241
 800b1f4:	0800b241 	.word	0x0800b241
 800b1f8:	0800b241 	.word	0x0800b241
 800b1fc:	0800b241 	.word	0x0800b241
 800b200:	0800b241 	.word	0x0800b241
 800b204:	0800b241 	.word	0x0800b241
 800b208:	0800b241 	.word	0x0800b241
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b22f 	.word	0x0800b22f
 800b214:	0800b241 	.word	0x0800b241
 800b218:	0800b241 	.word	0x0800b241
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800b21c:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <CDC_Control_FS+0xe0>)
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	6810      	ldr	r0, [r2, #0]
 800b222:	6018      	str	r0, [r3, #0]
 800b224:	8891      	ldrh	r1, [r2, #4]
 800b226:	7992      	ldrb	r2, [r2, #6]
 800b228:	8099      	strh	r1, [r3, #4]
 800b22a:	719a      	strb	r2, [r3, #6]
    break;
 800b22c:	e009      	b.n	800b242 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	4a07      	ldr	r2, [pc, #28]	; (800b250 <CDC_Control_FS+0xe0>)
 800b232:	6810      	ldr	r0, [r2, #0]
 800b234:	6018      	str	r0, [r3, #0]
 800b236:	8891      	ldrh	r1, [r2, #4]
 800b238:	7992      	ldrb	r2, [r2, #6]
 800b23a:	8099      	strh	r1, [r3, #4]
 800b23c:	719a      	strb	r2, [r3, #6]
    break;
 800b23e:	e000      	b.n	800b242 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b240:	bf00      	nop
  }

  return (USBD_OK);
 800b242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	2000034c 	.word	0x2000034c

0800b254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d005      	beq.n	800b272 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7f5 f989 	bl	8000584 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	4805      	ldr	r0, [pc, #20]	; (800b28c <CDC_Receive_FS+0x38>)
 800b276:	f7fe fe28 	bl	8009eca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b27a:	4804      	ldr	r0, [pc, #16]	; (800b28c <CDC_Receive_FS+0x38>)
 800b27c:	f7fe fe67 	bl	8009f4e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000c6c 	.word	0x20000c6c

0800b290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e00b      	b.n	800b2ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2b6:	887b      	ldrh	r3, [r7, #2]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2be:	f7fe fdeb 	bl	8009e98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2c2:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2c4:	f7fe fe14 	bl	8009ef0 <USBD_CDC_TransmitPacket>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000c6c 	.word	0x20000c6c

0800b2dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	6039      	str	r1, [r7, #0]
 800b2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2212      	movs	r2, #18
 800b2ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2ee:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bc80      	pop	{r7}
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20000380 	.word	0x20000380

0800b300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	6039      	str	r1, [r7, #0]
 800b30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2204      	movs	r2, #4
 800b310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b312:	4b03      	ldr	r3, [pc, #12]	; (800b320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20000394 	.word	0x20000394

0800b324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d105      	bne.n	800b342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	4907      	ldr	r1, [pc, #28]	; (800b358 <USBD_FS_ProductStrDescriptor+0x34>)
 800b33a:	4808      	ldr	r0, [pc, #32]	; (800b35c <USBD_FS_ProductStrDescriptor+0x38>)
 800b33c:	f7ff fdee 	bl	800af1c <USBD_GetString>
 800b340:	e004      	b.n	800b34c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	4904      	ldr	r1, [pc, #16]	; (800b358 <USBD_FS_ProductStrDescriptor+0x34>)
 800b346:	4805      	ldr	r0, [pc, #20]	; (800b35c <USBD_FS_ProductStrDescriptor+0x38>)
 800b348:	f7ff fde8 	bl	800af1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20001700 	.word	0x20001700
 800b35c:	0800c4cc 	.word	0x0800c4cc

0800b360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	4603      	mov	r3, r0
 800b368:	6039      	str	r1, [r7, #0]
 800b36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	4904      	ldr	r1, [pc, #16]	; (800b380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b370:	4804      	ldr	r0, [pc, #16]	; (800b384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b372:	f7ff fdd3 	bl	800af1c <USBD_GetString>
  return USBD_StrDesc;
 800b376:	4b02      	ldr	r3, [pc, #8]	; (800b380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20001700 	.word	0x20001700
 800b384:	0800c4e0 	.word	0x0800c4e0

0800b388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	221a      	movs	r2, #26
 800b398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b39a:	f000 f843 	bl	800b424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b39e:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000398 	.word	0x20000398

0800b3ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d105      	bne.n	800b3ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	4907      	ldr	r1, [pc, #28]	; (800b3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3c2:	4808      	ldr	r0, [pc, #32]	; (800b3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3c4:	f7ff fdaa 	bl	800af1c <USBD_GetString>
 800b3c8:	e004      	b.n	800b3d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	4904      	ldr	r1, [pc, #16]	; (800b3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3ce:	4805      	ldr	r0, [pc, #20]	; (800b3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3d0:	f7ff fda4 	bl	800af1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20001700 	.word	0x20001700
 800b3e4:	0800c4e8 	.word	0x0800c4e8

0800b3e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	6039      	str	r1, [r7, #0]
 800b3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	4907      	ldr	r1, [pc, #28]	; (800b41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3fe:	4808      	ldr	r0, [pc, #32]	; (800b420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b400:	f7ff fd8c 	bl	800af1c <USBD_GetString>
 800b404:	e004      	b.n	800b410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	4904      	ldr	r1, [pc, #16]	; (800b41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b40a:	4805      	ldr	r0, [pc, #20]	; (800b420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b40c:	f7ff fd86 	bl	800af1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20001700 	.word	0x20001700
 800b420:	0800c4f4 	.word	0x0800c4f4

0800b424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b42a:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <Get_SerialNum+0x44>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b430:	4b0e      	ldr	r3, [pc, #56]	; (800b46c <Get_SerialNum+0x48>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b436:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <Get_SerialNum+0x4c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4413      	add	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d009      	beq.n	800b45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b44a:	2208      	movs	r2, #8
 800b44c:	4909      	ldr	r1, [pc, #36]	; (800b474 <Get_SerialNum+0x50>)
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f814 	bl	800b47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b454:	2204      	movs	r2, #4
 800b456:	4908      	ldr	r1, [pc, #32]	; (800b478 <Get_SerialNum+0x54>)
 800b458:	68b8      	ldr	r0, [r7, #8]
 800b45a:	f000 f80f 	bl	800b47c <IntToUnicode>
  }
}
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	1ffff7e8 	.word	0x1ffff7e8
 800b46c:	1ffff7ec 	.word	0x1ffff7ec
 800b470:	1ffff7f0 	.word	0x1ffff7f0
 800b474:	2000039a 	.word	0x2000039a
 800b478:	200003aa 	.word	0x200003aa

0800b47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b48e:	2300      	movs	r3, #0
 800b490:	75fb      	strb	r3, [r7, #23]
 800b492:	e027      	b.n	800b4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	0f1b      	lsrs	r3, r3, #28
 800b498:	2b09      	cmp	r3, #9
 800b49a:	d80b      	bhi.n	800b4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	0f1b      	lsrs	r3, r3, #28
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3230      	adds	r2, #48	; 0x30
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e00a      	b.n	800b4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	0f1b      	lsrs	r3, r3, #28
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4619      	mov	r1, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	440b      	add	r3, r1
 800b4c4:	3237      	adds	r2, #55	; 0x37
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	4413      	add	r3, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	75fb      	strb	r3, [r7, #23]
 800b4e4:	7dfa      	ldrb	r2, [r7, #23]
 800b4e6:	79fb      	ldrb	r3, [r7, #7]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d3d3      	bcc.n	800b494 <IntToUnicode+0x18>
  }
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a0d      	ldr	r2, [pc, #52]	; (800b53c <HAL_PCD_MspInit+0x44>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d113      	bne.n	800b532 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <HAL_PCD_MspInit+0x48>)
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	4a0c      	ldr	r2, [pc, #48]	; (800b540 <HAL_PCD_MspInit+0x48>)
 800b510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b514:	61d3      	str	r3, [r2, #28]
 800b516:	4b0a      	ldr	r3, [pc, #40]	; (800b540 <HAL_PCD_MspInit+0x48>)
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b522:	2200      	movs	r2, #0
 800b524:	2100      	movs	r1, #0
 800b526:	2014      	movs	r0, #20
 800b528:	f7f8 fad3 	bl	8003ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b52c:	2014      	movs	r0, #20
 800b52e:	f7f8 faec 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40005c00 	.word	0x40005c00
 800b540:	40021000 	.word	0x40021000

0800b544 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b558:	4619      	mov	r1, r3
 800b55a:	4610      	mov	r0, r2
 800b55c:	f7fe fdad 	bl	800a0ba <USBD_LL_SetupStage>
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b57a:	78fa      	ldrb	r2, [r7, #3]
 800b57c:	6879      	ldr	r1, [r7, #4]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	440b      	add	r3, r1
 800b588:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	4619      	mov	r1, r3
 800b592:	f7fe fddf 	bl	800a154 <USBD_LL_DataOutStage>
}
 800b596:	bf00      	nop
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b5b0:	78fa      	ldrb	r2, [r7, #3]
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	440b      	add	r3, r1
 800b5be:	333c      	adds	r3, #60	; 0x3c
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	78fb      	ldrb	r3, [r7, #3]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	f7fe fe36 	bl	800a236 <USBD_LL_DataInStage>
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe ff46 	bl	800a472 <USBD_LL_SOF>
}
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d001      	beq.n	800b606 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b602:	f7f5 fda5 	bl	8001150 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b60c:	7bfa      	ldrb	r2, [r7, #15]
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe fef6 	bl	800a402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe feaf 	bl	800a380 <USBD_LL_Reset>
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fef0 	bl	800a420 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d005      	beq.n	800b654 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b648:	4b04      	ldr	r3, [pc, #16]	; (800b65c <HAL_PCD_SuspendCallback+0x30>)
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	4a03      	ldr	r2, [pc, #12]	; (800b65c <HAL_PCD_SuspendCallback+0x30>)
 800b64e:	f043 0306 	orr.w	r3, r3, #6
 800b652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	e000ed00 	.word	0xe000ed00

0800b660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe feea 	bl	800a448 <USBD_LL_Resume>
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b684:	4a28      	ldr	r2, [pc, #160]	; (800b728 <USBD_LL_Init+0xac>)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a26      	ldr	r2, [pc, #152]	; (800b728 <USBD_LL_Init+0xac>)
 800b690:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b694:	4b24      	ldr	r3, [pc, #144]	; (800b728 <USBD_LL_Init+0xac>)
 800b696:	4a25      	ldr	r2, [pc, #148]	; (800b72c <USBD_LL_Init+0xb0>)
 800b698:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b69a:	4b23      	ldr	r3, [pc, #140]	; (800b728 <USBD_LL_Init+0xac>)
 800b69c:	2208      	movs	r2, #8
 800b69e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b6a0:	4b21      	ldr	r3, [pc, #132]	; (800b728 <USBD_LL_Init+0xac>)
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b6a6:	4b20      	ldr	r3, [pc, #128]	; (800b728 <USBD_LL_Init+0xac>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b6ac:	4b1e      	ldr	r3, [pc, #120]	; (800b728 <USBD_LL_Init+0xac>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <USBD_LL_Init+0xac>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b6b8:	481b      	ldr	r0, [pc, #108]	; (800b728 <USBD_LL_Init+0xac>)
 800b6ba:	f7f8 fbe1 	bl	8003e80 <HAL_PCD_Init>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b6c4:	f7f5 fd44 	bl	8001150 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ce:	2318      	movs	r3, #24
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	f7fa f855 	bl	8005782 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6de:	2358      	movs	r3, #88	; 0x58
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2180      	movs	r1, #128	; 0x80
 800b6e4:	f7fa f84d 	bl	8005782 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ee:	23c0      	movs	r3, #192	; 0xc0
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2181      	movs	r1, #129	; 0x81
 800b6f4:	f7fa f845 	bl	8005782 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b702:	2200      	movs	r2, #0
 800b704:	2101      	movs	r1, #1
 800b706:	f7fa f83c 	bl	8005782 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b710:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b714:	2200      	movs	r2, #0
 800b716:	2182      	movs	r1, #130	; 0x82
 800b718:	f7fa f833 	bl	8005782 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20001900 	.word	0x20001900
 800b72c:	40005c00 	.word	0x40005c00

0800b730 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b746:	4618      	mov	r0, r3
 800b748:	f7f8 fca5 	bl	8004096 <HAL_PCD_Start>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f94e 	bl	800b9f4 <USBD_Get_USB_Status>
 800b758:	4603      	mov	r3, r0
 800b75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	461a      	mov	r2, r3
 800b774:	4603      	mov	r3, r0
 800b776:	70fb      	strb	r3, [r7, #3]
 800b778:	460b      	mov	r3, r1
 800b77a:	70bb      	strb	r3, [r7, #2]
 800b77c:	4613      	mov	r3, r2
 800b77e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b78e:	78bb      	ldrb	r3, [r7, #2]
 800b790:	883a      	ldrh	r2, [r7, #0]
 800b792:	78f9      	ldrb	r1, [r7, #3]
 800b794:	f7f8 fe1d 	bl	80043d2 <HAL_PCD_EP_Open>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f928 	bl	800b9f4 <USBD_Get_USB_Status>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f8 fe64 	bl	800449e <HAL_PCD_EP_Close>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f909 	bl	800b9f4 <USBD_Get_USB_Status>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7f8 ff24 	bl	800465c <HAL_PCD_EP_SetStall>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 f8ea 	bl	800b9f4 <USBD_Get_USB_Status>
 800b820:	4603      	mov	r3, r0
 800b822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b824:	7bbb      	ldrb	r3, [r7, #14]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b848:	78fa      	ldrb	r2, [r7, #3]
 800b84a:	4611      	mov	r1, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7f8 ff65 	bl	800471c <HAL_PCD_EP_ClrStall>
 800b852:	4603      	mov	r3, r0
 800b854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 f8cb 	bl	800b9f4 <USBD_Get_USB_Status>
 800b85e:	4603      	mov	r3, r0
 800b860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b862:	7bbb      	ldrb	r3, [r7, #14]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b87e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b884:	2b00      	cmp	r3, #0
 800b886:	da0c      	bge.n	800b8a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	440b      	add	r3, r1
 800b89c:	3302      	adds	r3, #2
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	e00b      	b.n	800b8ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8a8:	68f9      	ldr	r1, [r7, #12]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	440b      	add	r3, r1
 800b8b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b8b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bc80      	pop	{r7}
 800b8c2:	4770      	bx	lr

0800b8c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8de:	78fa      	ldrb	r2, [r7, #3]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f8 fd50 	bl	8004388 <HAL_PCD_SetAddress>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f880 	bl	800b9f4 <USBD_Get_USB_Status>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b086      	sub	sp, #24
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	461a      	mov	r2, r3
 800b90e:	460b      	mov	r3, r1
 800b910:	72fb      	strb	r3, [r7, #11]
 800b912:	4613      	mov	r3, r2
 800b914:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b924:	893b      	ldrh	r3, [r7, #8]
 800b926:	7af9      	ldrb	r1, [r7, #11]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	f7f8 fe54 	bl	80045d6 <HAL_PCD_EP_Transmit>
 800b92e:	4603      	mov	r3, r0
 800b930:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 f85d 	bl	800b9f4 <USBD_Get_USB_Status>
 800b93a:	4603      	mov	r3, r0
 800b93c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b93e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	607a      	str	r2, [r7, #4]
 800b952:	461a      	mov	r2, r3
 800b954:	460b      	mov	r3, r1
 800b956:	72fb      	strb	r3, [r7, #11]
 800b958:	4613      	mov	r3, r2
 800b95a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b96a:	893b      	ldrh	r3, [r7, #8]
 800b96c:	7af9      	ldrb	r1, [r7, #11]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	f7f8 fddd 	bl	800452e <HAL_PCD_EP_Receive>
 800b974:	4603      	mov	r3, r0
 800b976:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f83a 	bl	800b9f4 <USBD_Get_USB_Status>
 800b980:	4603      	mov	r3, r0
 800b982:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b984:	7dbb      	ldrb	r3, [r7, #22]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9a0:	78fa      	ldrb	r2, [r7, #3]
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7f8 fdff 	bl	80045a8 <HAL_PCD_EP_GetRxCount>
 800b9aa:	4603      	mov	r3, r0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <USBD_static_malloc+0x14>)
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bc80      	pop	{r7}
 800b9c6:	4770      	bx	lr
 800b9c8:	20001bec 	.word	0x20001bec

0800b9cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]

}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr

0800b9de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b9ea:	bf00      	nop
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bc80      	pop	{r7}
 800b9f2:	4770      	bx	lr

0800b9f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d817      	bhi.n	800ba38 <USBD_Get_USB_Status+0x44>
 800ba08:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <USBD_Get_USB_Status+0x1c>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800ba21 	.word	0x0800ba21
 800ba14:	0800ba27 	.word	0x0800ba27
 800ba18:	0800ba2d 	.word	0x0800ba2d
 800ba1c:	0800ba33 	.word	0x0800ba33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]
    break;
 800ba24:	e00b      	b.n	800ba3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba26:	2302      	movs	r3, #2
 800ba28:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2a:	e008      	b.n	800ba3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba30:	e005      	b.n	800ba3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba32:	2302      	movs	r3, #2
 800ba34:	73fb      	strb	r3, [r7, #15]
    break;
 800ba36:	e002      	b.n	800ba3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3c:	bf00      	nop
  }
  return usb_status;
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bc80      	pop	{r7}
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	200003b4 	.word	0x200003b4

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	4d0c      	ldr	r5, [pc, #48]	; (800ba90 <__libc_init_array+0x38>)
 800ba5e:	4c0d      	ldr	r4, [pc, #52]	; (800ba94 <__libc_init_array+0x3c>)
 800ba60:	1b64      	subs	r4, r4, r5
 800ba62:	10a4      	asrs	r4, r4, #2
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	f000 fcd6 	bl	800c418 <_init>
 800ba6c:	2600      	movs	r6, #0
 800ba6e:	4d0a      	ldr	r5, [pc, #40]	; (800ba98 <__libc_init_array+0x40>)
 800ba70:	4c0a      	ldr	r4, [pc, #40]	; (800ba9c <__libc_init_array+0x44>)
 800ba72:	1b64      	subs	r4, r4, r5
 800ba74:	10a4      	asrs	r4, r4, #2
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	0800d5fc 	.word	0x0800d5fc
 800ba94:	0800d5fc 	.word	0x0800d5fc
 800ba98:	0800d5fc 	.word	0x0800d5fc
 800ba9c:	0800d600 	.word	0x0800d600

0800baa0 <memcpy>:
 800baa0:	440a      	add	r2, r1
 800baa2:	4291      	cmp	r1, r2
 800baa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baa8:	d100      	bne.n	800baac <memcpy+0xc>
 800baaa:	4770      	bx	lr
 800baac:	b510      	push	{r4, lr}
 800baae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab2:	4291      	cmp	r1, r2
 800bab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab8:	d1f9      	bne.n	800baae <memcpy+0xe>
 800baba:	bd10      	pop	{r4, pc}

0800babc <memset>:
 800babc:	4603      	mov	r3, r0
 800babe:	4402      	add	r2, r0
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d100      	bne.n	800bac6 <memset+0xa>
 800bac4:	4770      	bx	lr
 800bac6:	f803 1b01 	strb.w	r1, [r3], #1
 800baca:	e7f9      	b.n	800bac0 <memset+0x4>

0800bacc <sniprintf>:
 800bacc:	b40c      	push	{r2, r3}
 800bace:	b530      	push	{r4, r5, lr}
 800bad0:	4b17      	ldr	r3, [pc, #92]	; (800bb30 <sniprintf+0x64>)
 800bad2:	1e0c      	subs	r4, r1, #0
 800bad4:	681d      	ldr	r5, [r3, #0]
 800bad6:	b09d      	sub	sp, #116	; 0x74
 800bad8:	da08      	bge.n	800baec <sniprintf+0x20>
 800bada:	238b      	movs	r3, #139	; 0x8b
 800badc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	b01d      	add	sp, #116	; 0x74
 800bae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bae8:	b002      	add	sp, #8
 800baea:	4770      	bx	lr
 800baec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800baf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800baf4:	bf0c      	ite	eq
 800baf6:	4623      	moveq	r3, r4
 800baf8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb04:	9002      	str	r0, [sp, #8]
 800bb06:	9006      	str	r0, [sp, #24]
 800bb08:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	ab21      	add	r3, sp, #132	; 0x84
 800bb10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb12:	a902      	add	r1, sp, #8
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	f000 f88f 	bl	800bc38 <_svfiprintf_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	bfbc      	itt	lt
 800bb1e:	238b      	movlt	r3, #139	; 0x8b
 800bb20:	602b      	strlt	r3, [r5, #0]
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	d0dd      	beq.n	800bae2 <sniprintf+0x16>
 800bb26:	2200      	movs	r2, #0
 800bb28:	9b02      	ldr	r3, [sp, #8]
 800bb2a:	701a      	strb	r2, [r3, #0]
 800bb2c:	e7d9      	b.n	800bae2 <sniprintf+0x16>
 800bb2e:	bf00      	nop
 800bb30:	200003b4 	.word	0x200003b4

0800bb34 <strncmp>:
 800bb34:	4603      	mov	r3, r0
 800bb36:	b510      	push	{r4, lr}
 800bb38:	b172      	cbz	r2, 800bb58 <strncmp+0x24>
 800bb3a:	3901      	subs	r1, #1
 800bb3c:	1884      	adds	r4, r0, r2
 800bb3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb46:	4290      	cmp	r0, r2
 800bb48:	d101      	bne.n	800bb4e <strncmp+0x1a>
 800bb4a:	42a3      	cmp	r3, r4
 800bb4c:	d101      	bne.n	800bb52 <strncmp+0x1e>
 800bb4e:	1a80      	subs	r0, r0, r2
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1f3      	bne.n	800bb3e <strncmp+0xa>
 800bb56:	e7fa      	b.n	800bb4e <strncmp+0x1a>
 800bb58:	4610      	mov	r0, r2
 800bb5a:	e7f9      	b.n	800bb50 <strncmp+0x1c>

0800bb5c <strncpy>:
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	3901      	subs	r1, #1
 800bb62:	b132      	cbz	r2, 800bb72 <strncpy+0x16>
 800bb64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb68:	3a01      	subs	r2, #1
 800bb6a:	f803 4b01 	strb.w	r4, [r3], #1
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	d1f7      	bne.n	800bb62 <strncpy+0x6>
 800bb72:	2100      	movs	r1, #0
 800bb74:	441a      	add	r2, r3
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d100      	bne.n	800bb7c <strncpy+0x20>
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	f803 1b01 	strb.w	r1, [r3], #1
 800bb80:	e7f9      	b.n	800bb76 <strncpy+0x1a>

0800bb82 <__ssputs_r>:
 800bb82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb86:	688e      	ldr	r6, [r1, #8]
 800bb88:	4682      	mov	sl, r0
 800bb8a:	429e      	cmp	r6, r3
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	4690      	mov	r8, r2
 800bb90:	461f      	mov	r7, r3
 800bb92:	d838      	bhi.n	800bc06 <__ssputs_r+0x84>
 800bb94:	898a      	ldrh	r2, [r1, #12]
 800bb96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb9a:	d032      	beq.n	800bc02 <__ssputs_r+0x80>
 800bb9c:	6825      	ldr	r5, [r4, #0]
 800bb9e:	6909      	ldr	r1, [r1, #16]
 800bba0:	3301      	adds	r3, #1
 800bba2:	eba5 0901 	sub.w	r9, r5, r1
 800bba6:	6965      	ldr	r5, [r4, #20]
 800bba8:	444b      	add	r3, r9
 800bbaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbb2:	106d      	asrs	r5, r5, #1
 800bbb4:	429d      	cmp	r5, r3
 800bbb6:	bf38      	it	cc
 800bbb8:	461d      	movcc	r5, r3
 800bbba:	0553      	lsls	r3, r2, #21
 800bbbc:	d531      	bpl.n	800bc22 <__ssputs_r+0xa0>
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f000 fb60 	bl	800c284 <_malloc_r>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	b950      	cbnz	r0, 800bbde <__ssputs_r+0x5c>
 800bbc8:	230c      	movs	r3, #12
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbce:	f8ca 3000 	str.w	r3, [sl]
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbde:	464a      	mov	r2, r9
 800bbe0:	6921      	ldr	r1, [r4, #16]
 800bbe2:	f7ff ff5d 	bl	800baa0 <memcpy>
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	6126      	str	r6, [r4, #16]
 800bbf4:	444e      	add	r6, r9
 800bbf6:	6026      	str	r6, [r4, #0]
 800bbf8:	463e      	mov	r6, r7
 800bbfa:	6165      	str	r5, [r4, #20]
 800bbfc:	eba5 0509 	sub.w	r5, r5, r9
 800bc00:	60a5      	str	r5, [r4, #8]
 800bc02:	42be      	cmp	r6, r7
 800bc04:	d900      	bls.n	800bc08 <__ssputs_r+0x86>
 800bc06:	463e      	mov	r6, r7
 800bc08:	4632      	mov	r2, r6
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	f000 fab7 	bl	800c180 <memmove>
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	2000      	movs	r0, #0
 800bc16:	1b9b      	subs	r3, r3, r6
 800bc18:	60a3      	str	r3, [r4, #8]
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	4433      	add	r3, r6
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	e7db      	b.n	800bbda <__ssputs_r+0x58>
 800bc22:	462a      	mov	r2, r5
 800bc24:	f000 fba2 	bl	800c36c <_realloc_r>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d1e1      	bne.n	800bbf2 <__ssputs_r+0x70>
 800bc2e:	4650      	mov	r0, sl
 800bc30:	6921      	ldr	r1, [r4, #16]
 800bc32:	f000 fabf 	bl	800c1b4 <_free_r>
 800bc36:	e7c7      	b.n	800bbc8 <__ssputs_r+0x46>

0800bc38 <_svfiprintf_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	4698      	mov	r8, r3
 800bc3e:	898b      	ldrh	r3, [r1, #12]
 800bc40:	4607      	mov	r7, r0
 800bc42:	061b      	lsls	r3, r3, #24
 800bc44:	460d      	mov	r5, r1
 800bc46:	4614      	mov	r4, r2
 800bc48:	b09d      	sub	sp, #116	; 0x74
 800bc4a:	d50e      	bpl.n	800bc6a <_svfiprintf_r+0x32>
 800bc4c:	690b      	ldr	r3, [r1, #16]
 800bc4e:	b963      	cbnz	r3, 800bc6a <_svfiprintf_r+0x32>
 800bc50:	2140      	movs	r1, #64	; 0x40
 800bc52:	f000 fb17 	bl	800c284 <_malloc_r>
 800bc56:	6028      	str	r0, [r5, #0]
 800bc58:	6128      	str	r0, [r5, #16]
 800bc5a:	b920      	cbnz	r0, 800bc66 <_svfiprintf_r+0x2e>
 800bc5c:	230c      	movs	r3, #12
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc64:	e0d1      	b.n	800be0a <_svfiprintf_r+0x1d2>
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	616b      	str	r3, [r5, #20]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6e:	2320      	movs	r3, #32
 800bc70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc74:	2330      	movs	r3, #48	; 0x30
 800bc76:	f04f 0901 	mov.w	r9, #1
 800bc7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be24 <_svfiprintf_r+0x1ec>
 800bc82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc86:	4623      	mov	r3, r4
 800bc88:	469a      	mov	sl, r3
 800bc8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc8e:	b10a      	cbz	r2, 800bc94 <_svfiprintf_r+0x5c>
 800bc90:	2a25      	cmp	r2, #37	; 0x25
 800bc92:	d1f9      	bne.n	800bc88 <_svfiprintf_r+0x50>
 800bc94:	ebba 0b04 	subs.w	fp, sl, r4
 800bc98:	d00b      	beq.n	800bcb2 <_svfiprintf_r+0x7a>
 800bc9a:	465b      	mov	r3, fp
 800bc9c:	4622      	mov	r2, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff ff6e 	bl	800bb82 <__ssputs_r>
 800bca6:	3001      	adds	r0, #1
 800bca8:	f000 80aa 	beq.w	800be00 <_svfiprintf_r+0x1c8>
 800bcac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcae:	445a      	add	r2, fp
 800bcb0:	9209      	str	r2, [sp, #36]	; 0x24
 800bcb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80a2 	beq.w	800be00 <_svfiprintf_r+0x1c8>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc6:	f10a 0a01 	add.w	sl, sl, #1
 800bcca:	9304      	str	r3, [sp, #16]
 800bccc:	9307      	str	r3, [sp, #28]
 800bcce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcd4:	4654      	mov	r4, sl
 800bcd6:	2205      	movs	r2, #5
 800bcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcdc:	4851      	ldr	r0, [pc, #324]	; (800be24 <_svfiprintf_r+0x1ec>)
 800bcde:	f000 fa41 	bl	800c164 <memchr>
 800bce2:	9a04      	ldr	r2, [sp, #16]
 800bce4:	b9d8      	cbnz	r0, 800bd1e <_svfiprintf_r+0xe6>
 800bce6:	06d0      	lsls	r0, r2, #27
 800bce8:	bf44      	itt	mi
 800bcea:	2320      	movmi	r3, #32
 800bcec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcf0:	0711      	lsls	r1, r2, #28
 800bcf2:	bf44      	itt	mi
 800bcf4:	232b      	movmi	r3, #43	; 0x2b
 800bcf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bd00:	d015      	beq.n	800bd2e <_svfiprintf_r+0xf6>
 800bd02:	4654      	mov	r4, sl
 800bd04:	2000      	movs	r0, #0
 800bd06:	f04f 0c0a 	mov.w	ip, #10
 800bd0a:	9a07      	ldr	r2, [sp, #28]
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd12:	3b30      	subs	r3, #48	; 0x30
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	d94e      	bls.n	800bdb6 <_svfiprintf_r+0x17e>
 800bd18:	b1b0      	cbz	r0, 800bd48 <_svfiprintf_r+0x110>
 800bd1a:	9207      	str	r2, [sp, #28]
 800bd1c:	e014      	b.n	800bd48 <_svfiprintf_r+0x110>
 800bd1e:	eba0 0308 	sub.w	r3, r0, r8
 800bd22:	fa09 f303 	lsl.w	r3, r9, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	46a2      	mov	sl, r4
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	e7d2      	b.n	800bcd4 <_svfiprintf_r+0x9c>
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	1d19      	adds	r1, r3, #4
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	9103      	str	r1, [sp, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bfbb      	ittet	lt
 800bd3a:	425b      	neglt	r3, r3
 800bd3c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd40:	9307      	strge	r3, [sp, #28]
 800bd42:	9307      	strlt	r3, [sp, #28]
 800bd44:	bfb8      	it	lt
 800bd46:	9204      	strlt	r2, [sp, #16]
 800bd48:	7823      	ldrb	r3, [r4, #0]
 800bd4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd4c:	d10c      	bne.n	800bd68 <_svfiprintf_r+0x130>
 800bd4e:	7863      	ldrb	r3, [r4, #1]
 800bd50:	2b2a      	cmp	r3, #42	; 0x2a
 800bd52:	d135      	bne.n	800bdc0 <_svfiprintf_r+0x188>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	3402      	adds	r4, #2
 800bd58:	1d1a      	adds	r2, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	9203      	str	r2, [sp, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	bfb8      	it	lt
 800bd62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800be28 <_svfiprintf_r+0x1f0>
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4650      	mov	r0, sl
 800bd70:	7821      	ldrb	r1, [r4, #0]
 800bd72:	f000 f9f7 	bl	800c164 <memchr>
 800bd76:	b140      	cbz	r0, 800bd8a <_svfiprintf_r+0x152>
 800bd78:	2340      	movs	r3, #64	; 0x40
 800bd7a:	eba0 000a 	sub.w	r0, r0, sl
 800bd7e:	fa03 f000 	lsl.w	r0, r3, r0
 800bd82:	9b04      	ldr	r3, [sp, #16]
 800bd84:	3401      	adds	r4, #1
 800bd86:	4303      	orrs	r3, r0
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8e:	2206      	movs	r2, #6
 800bd90:	4826      	ldr	r0, [pc, #152]	; (800be2c <_svfiprintf_r+0x1f4>)
 800bd92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd96:	f000 f9e5 	bl	800c164 <memchr>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d038      	beq.n	800be10 <_svfiprintf_r+0x1d8>
 800bd9e:	4b24      	ldr	r3, [pc, #144]	; (800be30 <_svfiprintf_r+0x1f8>)
 800bda0:	bb1b      	cbnz	r3, 800bdea <_svfiprintf_r+0x1b2>
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	3307      	adds	r3, #7
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	3308      	adds	r3, #8
 800bdac:	9303      	str	r3, [sp, #12]
 800bdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb0:	4433      	add	r3, r6
 800bdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb4:	e767      	b.n	800bc86 <_svfiprintf_r+0x4e>
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	2001      	movs	r0, #1
 800bdba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdbe:	e7a5      	b.n	800bd0c <_svfiprintf_r+0xd4>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f04f 0c0a 	mov.w	ip, #10
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	3401      	adds	r4, #1
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd2:	3a30      	subs	r2, #48	; 0x30
 800bdd4:	2a09      	cmp	r2, #9
 800bdd6:	d903      	bls.n	800bde0 <_svfiprintf_r+0x1a8>
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0c5      	beq.n	800bd68 <_svfiprintf_r+0x130>
 800bddc:	9105      	str	r1, [sp, #20]
 800bdde:	e7c3      	b.n	800bd68 <_svfiprintf_r+0x130>
 800bde0:	4604      	mov	r4, r0
 800bde2:	2301      	movs	r3, #1
 800bde4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde8:	e7f0      	b.n	800bdcc <_svfiprintf_r+0x194>
 800bdea:	ab03      	add	r3, sp, #12
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	462a      	mov	r2, r5
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	4b10      	ldr	r3, [pc, #64]	; (800be34 <_svfiprintf_r+0x1fc>)
 800bdf4:	a904      	add	r1, sp, #16
 800bdf6:	f3af 8000 	nop.w
 800bdfa:	1c42      	adds	r2, r0, #1
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	d1d6      	bne.n	800bdae <_svfiprintf_r+0x176>
 800be00:	89ab      	ldrh	r3, [r5, #12]
 800be02:	065b      	lsls	r3, r3, #25
 800be04:	f53f af2c 	bmi.w	800bc60 <_svfiprintf_r+0x28>
 800be08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be0a:	b01d      	add	sp, #116	; 0x74
 800be0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be10:	ab03      	add	r3, sp, #12
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	462a      	mov	r2, r5
 800be16:	4638      	mov	r0, r7
 800be18:	4b06      	ldr	r3, [pc, #24]	; (800be34 <_svfiprintf_r+0x1fc>)
 800be1a:	a904      	add	r1, sp, #16
 800be1c:	f000 f87c 	bl	800bf18 <_printf_i>
 800be20:	e7eb      	b.n	800bdfa <_svfiprintf_r+0x1c2>
 800be22:	bf00      	nop
 800be24:	0800d5c7 	.word	0x0800d5c7
 800be28:	0800d5cd 	.word	0x0800d5cd
 800be2c:	0800d5d1 	.word	0x0800d5d1
 800be30:	00000000 	.word	0x00000000
 800be34:	0800bb83 	.word	0x0800bb83

0800be38 <_printf_common>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	4616      	mov	r6, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	688a      	ldr	r2, [r1, #8]
 800be42:	690b      	ldr	r3, [r1, #16]
 800be44:	4607      	mov	r7, r0
 800be46:	4293      	cmp	r3, r2
 800be48:	bfb8      	it	lt
 800be4a:	4613      	movlt	r3, r2
 800be4c:	6033      	str	r3, [r6, #0]
 800be4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be52:	460c      	mov	r4, r1
 800be54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be58:	b10a      	cbz	r2, 800be5e <_printf_common+0x26>
 800be5a:	3301      	adds	r3, #1
 800be5c:	6033      	str	r3, [r6, #0]
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	0699      	lsls	r1, r3, #26
 800be62:	bf42      	ittt	mi
 800be64:	6833      	ldrmi	r3, [r6, #0]
 800be66:	3302      	addmi	r3, #2
 800be68:	6033      	strmi	r3, [r6, #0]
 800be6a:	6825      	ldr	r5, [r4, #0]
 800be6c:	f015 0506 	ands.w	r5, r5, #6
 800be70:	d106      	bne.n	800be80 <_printf_common+0x48>
 800be72:	f104 0a19 	add.w	sl, r4, #25
 800be76:	68e3      	ldr	r3, [r4, #12]
 800be78:	6832      	ldr	r2, [r6, #0]
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	dc28      	bgt.n	800bed2 <_printf_common+0x9a>
 800be80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be84:	1e13      	subs	r3, r2, #0
 800be86:	6822      	ldr	r2, [r4, #0]
 800be88:	bf18      	it	ne
 800be8a:	2301      	movne	r3, #1
 800be8c:	0692      	lsls	r2, r2, #26
 800be8e:	d42d      	bmi.n	800beec <_printf_common+0xb4>
 800be90:	4649      	mov	r1, r9
 800be92:	4638      	mov	r0, r7
 800be94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d020      	beq.n	800bee0 <_printf_common+0xa8>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	68e5      	ldr	r5, [r4, #12]
 800bea2:	f003 0306 	and.w	r3, r3, #6
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	bf18      	it	ne
 800beaa:	2500      	movne	r5, #0
 800beac:	6832      	ldr	r2, [r6, #0]
 800beae:	f04f 0600 	mov.w	r6, #0
 800beb2:	68a3      	ldr	r3, [r4, #8]
 800beb4:	bf08      	it	eq
 800beb6:	1aad      	subeq	r5, r5, r2
 800beb8:	6922      	ldr	r2, [r4, #16]
 800beba:	bf08      	it	eq
 800bebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bec0:	4293      	cmp	r3, r2
 800bec2:	bfc4      	itt	gt
 800bec4:	1a9b      	subgt	r3, r3, r2
 800bec6:	18ed      	addgt	r5, r5, r3
 800bec8:	341a      	adds	r4, #26
 800beca:	42b5      	cmp	r5, r6
 800becc:	d11a      	bne.n	800bf04 <_printf_common+0xcc>
 800bece:	2000      	movs	r0, #0
 800bed0:	e008      	b.n	800bee4 <_printf_common+0xac>
 800bed2:	2301      	movs	r3, #1
 800bed4:	4652      	mov	r2, sl
 800bed6:	4649      	mov	r1, r9
 800bed8:	4638      	mov	r0, r7
 800beda:	47c0      	blx	r8
 800bedc:	3001      	adds	r0, #1
 800bede:	d103      	bne.n	800bee8 <_printf_common+0xb0>
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee8:	3501      	adds	r5, #1
 800beea:	e7c4      	b.n	800be76 <_printf_common+0x3e>
 800beec:	2030      	movs	r0, #48	; 0x30
 800beee:	18e1      	adds	r1, r4, r3
 800bef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800befa:	4422      	add	r2, r4
 800befc:	3302      	adds	r3, #2
 800befe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf02:	e7c5      	b.n	800be90 <_printf_common+0x58>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4622      	mov	r2, r4
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	47c0      	blx	r8
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d0e6      	beq.n	800bee0 <_printf_common+0xa8>
 800bf12:	3601      	adds	r6, #1
 800bf14:	e7d9      	b.n	800beca <_printf_common+0x92>
	...

0800bf18 <_printf_i>:
 800bf18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	7e0f      	ldrb	r7, [r1, #24]
 800bf1e:	4691      	mov	r9, r2
 800bf20:	2f78      	cmp	r7, #120	; 0x78
 800bf22:	4680      	mov	r8, r0
 800bf24:	460c      	mov	r4, r1
 800bf26:	469a      	mov	sl, r3
 800bf28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf2e:	d807      	bhi.n	800bf40 <_printf_i+0x28>
 800bf30:	2f62      	cmp	r7, #98	; 0x62
 800bf32:	d80a      	bhi.n	800bf4a <_printf_i+0x32>
 800bf34:	2f00      	cmp	r7, #0
 800bf36:	f000 80d9 	beq.w	800c0ec <_printf_i+0x1d4>
 800bf3a:	2f58      	cmp	r7, #88	; 0x58
 800bf3c:	f000 80a4 	beq.w	800c088 <_printf_i+0x170>
 800bf40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf48:	e03a      	b.n	800bfc0 <_printf_i+0xa8>
 800bf4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf4e:	2b15      	cmp	r3, #21
 800bf50:	d8f6      	bhi.n	800bf40 <_printf_i+0x28>
 800bf52:	a101      	add	r1, pc, #4	; (adr r1, 800bf58 <_printf_i+0x40>)
 800bf54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf58:	0800bfb1 	.word	0x0800bfb1
 800bf5c:	0800bfc5 	.word	0x0800bfc5
 800bf60:	0800bf41 	.word	0x0800bf41
 800bf64:	0800bf41 	.word	0x0800bf41
 800bf68:	0800bf41 	.word	0x0800bf41
 800bf6c:	0800bf41 	.word	0x0800bf41
 800bf70:	0800bfc5 	.word	0x0800bfc5
 800bf74:	0800bf41 	.word	0x0800bf41
 800bf78:	0800bf41 	.word	0x0800bf41
 800bf7c:	0800bf41 	.word	0x0800bf41
 800bf80:	0800bf41 	.word	0x0800bf41
 800bf84:	0800c0d3 	.word	0x0800c0d3
 800bf88:	0800bff5 	.word	0x0800bff5
 800bf8c:	0800c0b5 	.word	0x0800c0b5
 800bf90:	0800bf41 	.word	0x0800bf41
 800bf94:	0800bf41 	.word	0x0800bf41
 800bf98:	0800c0f5 	.word	0x0800c0f5
 800bf9c:	0800bf41 	.word	0x0800bf41
 800bfa0:	0800bff5 	.word	0x0800bff5
 800bfa4:	0800bf41 	.word	0x0800bf41
 800bfa8:	0800bf41 	.word	0x0800bf41
 800bfac:	0800c0bd 	.word	0x0800c0bd
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	602a      	str	r2, [r5, #0]
 800bfb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e0a4      	b.n	800c10e <_printf_i+0x1f6>
 800bfc4:	6820      	ldr	r0, [r4, #0]
 800bfc6:	6829      	ldr	r1, [r5, #0]
 800bfc8:	0606      	lsls	r6, r0, #24
 800bfca:	f101 0304 	add.w	r3, r1, #4
 800bfce:	d50a      	bpl.n	800bfe6 <_printf_i+0xce>
 800bfd0:	680e      	ldr	r6, [r1, #0]
 800bfd2:	602b      	str	r3, [r5, #0]
 800bfd4:	2e00      	cmp	r6, #0
 800bfd6:	da03      	bge.n	800bfe0 <_printf_i+0xc8>
 800bfd8:	232d      	movs	r3, #45	; 0x2d
 800bfda:	4276      	negs	r6, r6
 800bfdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe0:	230a      	movs	r3, #10
 800bfe2:	485e      	ldr	r0, [pc, #376]	; (800c15c <_printf_i+0x244>)
 800bfe4:	e019      	b.n	800c01a <_printf_i+0x102>
 800bfe6:	680e      	ldr	r6, [r1, #0]
 800bfe8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bfec:	602b      	str	r3, [r5, #0]
 800bfee:	bf18      	it	ne
 800bff0:	b236      	sxthne	r6, r6
 800bff2:	e7ef      	b.n	800bfd4 <_printf_i+0xbc>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	6820      	ldr	r0, [r4, #0]
 800bff8:	1d19      	adds	r1, r3, #4
 800bffa:	6029      	str	r1, [r5, #0]
 800bffc:	0601      	lsls	r1, r0, #24
 800bffe:	d501      	bpl.n	800c004 <_printf_i+0xec>
 800c000:	681e      	ldr	r6, [r3, #0]
 800c002:	e002      	b.n	800c00a <_printf_i+0xf2>
 800c004:	0646      	lsls	r6, r0, #25
 800c006:	d5fb      	bpl.n	800c000 <_printf_i+0xe8>
 800c008:	881e      	ldrh	r6, [r3, #0]
 800c00a:	2f6f      	cmp	r7, #111	; 0x6f
 800c00c:	bf0c      	ite	eq
 800c00e:	2308      	moveq	r3, #8
 800c010:	230a      	movne	r3, #10
 800c012:	4852      	ldr	r0, [pc, #328]	; (800c15c <_printf_i+0x244>)
 800c014:	2100      	movs	r1, #0
 800c016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c01a:	6865      	ldr	r5, [r4, #4]
 800c01c:	2d00      	cmp	r5, #0
 800c01e:	bfa8      	it	ge
 800c020:	6821      	ldrge	r1, [r4, #0]
 800c022:	60a5      	str	r5, [r4, #8]
 800c024:	bfa4      	itt	ge
 800c026:	f021 0104 	bicge.w	r1, r1, #4
 800c02a:	6021      	strge	r1, [r4, #0]
 800c02c:	b90e      	cbnz	r6, 800c032 <_printf_i+0x11a>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	d04d      	beq.n	800c0ce <_printf_i+0x1b6>
 800c032:	4615      	mov	r5, r2
 800c034:	fbb6 f1f3 	udiv	r1, r6, r3
 800c038:	fb03 6711 	mls	r7, r3, r1, r6
 800c03c:	5dc7      	ldrb	r7, [r0, r7]
 800c03e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c042:	4637      	mov	r7, r6
 800c044:	42bb      	cmp	r3, r7
 800c046:	460e      	mov	r6, r1
 800c048:	d9f4      	bls.n	800c034 <_printf_i+0x11c>
 800c04a:	2b08      	cmp	r3, #8
 800c04c:	d10b      	bne.n	800c066 <_printf_i+0x14e>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	07de      	lsls	r6, r3, #31
 800c052:	d508      	bpl.n	800c066 <_printf_i+0x14e>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	6861      	ldr	r1, [r4, #4]
 800c058:	4299      	cmp	r1, r3
 800c05a:	bfde      	ittt	le
 800c05c:	2330      	movle	r3, #48	; 0x30
 800c05e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c062:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c066:	1b52      	subs	r2, r2, r5
 800c068:	6122      	str	r2, [r4, #16]
 800c06a:	464b      	mov	r3, r9
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f8cd a000 	str.w	sl, [sp]
 800c074:	aa03      	add	r2, sp, #12
 800c076:	f7ff fedf 	bl	800be38 <_printf_common>
 800c07a:	3001      	adds	r0, #1
 800c07c:	d14c      	bne.n	800c118 <_printf_i+0x200>
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c082:	b004      	add	sp, #16
 800c084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c088:	4834      	ldr	r0, [pc, #208]	; (800c15c <_printf_i+0x244>)
 800c08a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c08e:	6829      	ldr	r1, [r5, #0]
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	f851 6b04 	ldr.w	r6, [r1], #4
 800c096:	6029      	str	r1, [r5, #0]
 800c098:	061d      	lsls	r5, r3, #24
 800c09a:	d514      	bpl.n	800c0c6 <_printf_i+0x1ae>
 800c09c:	07df      	lsls	r7, r3, #31
 800c09e:	bf44      	itt	mi
 800c0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800c0a4:	6023      	strmi	r3, [r4, #0]
 800c0a6:	b91e      	cbnz	r6, 800c0b0 <_printf_i+0x198>
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	f023 0320 	bic.w	r3, r3, #32
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	2310      	movs	r3, #16
 800c0b2:	e7af      	b.n	800c014 <_printf_i+0xfc>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	f043 0320 	orr.w	r3, r3, #32
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	2378      	movs	r3, #120	; 0x78
 800c0be:	4828      	ldr	r0, [pc, #160]	; (800c160 <_printf_i+0x248>)
 800c0c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0c4:	e7e3      	b.n	800c08e <_printf_i+0x176>
 800c0c6:	0659      	lsls	r1, r3, #25
 800c0c8:	bf48      	it	mi
 800c0ca:	b2b6      	uxthmi	r6, r6
 800c0cc:	e7e6      	b.n	800c09c <_printf_i+0x184>
 800c0ce:	4615      	mov	r5, r2
 800c0d0:	e7bb      	b.n	800c04a <_printf_i+0x132>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	6826      	ldr	r6, [r4, #0]
 800c0d6:	1d18      	adds	r0, r3, #4
 800c0d8:	6961      	ldr	r1, [r4, #20]
 800c0da:	6028      	str	r0, [r5, #0]
 800c0dc:	0635      	lsls	r5, r6, #24
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	d501      	bpl.n	800c0e6 <_printf_i+0x1ce>
 800c0e2:	6019      	str	r1, [r3, #0]
 800c0e4:	e002      	b.n	800c0ec <_printf_i+0x1d4>
 800c0e6:	0670      	lsls	r0, r6, #25
 800c0e8:	d5fb      	bpl.n	800c0e2 <_printf_i+0x1ca>
 800c0ea:	8019      	strh	r1, [r3, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4615      	mov	r5, r2
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	e7ba      	b.n	800c06a <_printf_i+0x152>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	1d1a      	adds	r2, r3, #4
 800c0fa:	602a      	str	r2, [r5, #0]
 800c0fc:	681d      	ldr	r5, [r3, #0]
 800c0fe:	6862      	ldr	r2, [r4, #4]
 800c100:	4628      	mov	r0, r5
 800c102:	f000 f82f 	bl	800c164 <memchr>
 800c106:	b108      	cbz	r0, 800c10c <_printf_i+0x1f4>
 800c108:	1b40      	subs	r0, r0, r5
 800c10a:	6060      	str	r0, [r4, #4]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	2300      	movs	r3, #0
 800c112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c116:	e7a8      	b.n	800c06a <_printf_i+0x152>
 800c118:	462a      	mov	r2, r5
 800c11a:	4649      	mov	r1, r9
 800c11c:	4640      	mov	r0, r8
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	47d0      	blx	sl
 800c122:	3001      	adds	r0, #1
 800c124:	d0ab      	beq.n	800c07e <_printf_i+0x166>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	079b      	lsls	r3, r3, #30
 800c12a:	d413      	bmi.n	800c154 <_printf_i+0x23c>
 800c12c:	68e0      	ldr	r0, [r4, #12]
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	4298      	cmp	r0, r3
 800c132:	bfb8      	it	lt
 800c134:	4618      	movlt	r0, r3
 800c136:	e7a4      	b.n	800c082 <_printf_i+0x16a>
 800c138:	2301      	movs	r3, #1
 800c13a:	4632      	mov	r2, r6
 800c13c:	4649      	mov	r1, r9
 800c13e:	4640      	mov	r0, r8
 800c140:	47d0      	blx	sl
 800c142:	3001      	adds	r0, #1
 800c144:	d09b      	beq.n	800c07e <_printf_i+0x166>
 800c146:	3501      	adds	r5, #1
 800c148:	68e3      	ldr	r3, [r4, #12]
 800c14a:	9903      	ldr	r1, [sp, #12]
 800c14c:	1a5b      	subs	r3, r3, r1
 800c14e:	42ab      	cmp	r3, r5
 800c150:	dcf2      	bgt.n	800c138 <_printf_i+0x220>
 800c152:	e7eb      	b.n	800c12c <_printf_i+0x214>
 800c154:	2500      	movs	r5, #0
 800c156:	f104 0619 	add.w	r6, r4, #25
 800c15a:	e7f5      	b.n	800c148 <_printf_i+0x230>
 800c15c:	0800d5d8 	.word	0x0800d5d8
 800c160:	0800d5e9 	.word	0x0800d5e9

0800c164 <memchr>:
 800c164:	4603      	mov	r3, r0
 800c166:	b510      	push	{r4, lr}
 800c168:	b2c9      	uxtb	r1, r1
 800c16a:	4402      	add	r2, r0
 800c16c:	4293      	cmp	r3, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	d101      	bne.n	800c176 <memchr+0x12>
 800c172:	2000      	movs	r0, #0
 800c174:	e003      	b.n	800c17e <memchr+0x1a>
 800c176:	7804      	ldrb	r4, [r0, #0]
 800c178:	3301      	adds	r3, #1
 800c17a:	428c      	cmp	r4, r1
 800c17c:	d1f6      	bne.n	800c16c <memchr+0x8>
 800c17e:	bd10      	pop	{r4, pc}

0800c180 <memmove>:
 800c180:	4288      	cmp	r0, r1
 800c182:	b510      	push	{r4, lr}
 800c184:	eb01 0402 	add.w	r4, r1, r2
 800c188:	d902      	bls.n	800c190 <memmove+0x10>
 800c18a:	4284      	cmp	r4, r0
 800c18c:	4623      	mov	r3, r4
 800c18e:	d807      	bhi.n	800c1a0 <memmove+0x20>
 800c190:	1e43      	subs	r3, r0, #1
 800c192:	42a1      	cmp	r1, r4
 800c194:	d008      	beq.n	800c1a8 <memmove+0x28>
 800c196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19e:	e7f8      	b.n	800c192 <memmove+0x12>
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	4402      	add	r2, r0
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	d100      	bne.n	800c1aa <memmove+0x2a>
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1b2:	e7f7      	b.n	800c1a4 <memmove+0x24>

0800c1b4 <_free_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	d040      	beq.n	800c23e <_free_r+0x8a>
 800c1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c0:	1f0c      	subs	r4, r1, #4
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bfb8      	it	lt
 800c1c6:	18e4      	addlt	r4, r4, r3
 800c1c8:	f000 f910 	bl	800c3ec <__malloc_lock>
 800c1cc:	4a1c      	ldr	r2, [pc, #112]	; (800c240 <_free_r+0x8c>)
 800c1ce:	6813      	ldr	r3, [r2, #0]
 800c1d0:	b933      	cbnz	r3, 800c1e0 <_free_r+0x2c>
 800c1d2:	6063      	str	r3, [r4, #4]
 800c1d4:	6014      	str	r4, [r2, #0]
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1dc:	f000 b90c 	b.w	800c3f8 <__malloc_unlock>
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d908      	bls.n	800c1f6 <_free_r+0x42>
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	1821      	adds	r1, r4, r0
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	bf01      	itttt	eq
 800c1ec:	6819      	ldreq	r1, [r3, #0]
 800c1ee:	685b      	ldreq	r3, [r3, #4]
 800c1f0:	1809      	addeq	r1, r1, r0
 800c1f2:	6021      	streq	r1, [r4, #0]
 800c1f4:	e7ed      	b.n	800c1d2 <_free_r+0x1e>
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	b10b      	cbz	r3, 800c200 <_free_r+0x4c>
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	d9fa      	bls.n	800c1f6 <_free_r+0x42>
 800c200:	6811      	ldr	r1, [r2, #0]
 800c202:	1850      	adds	r0, r2, r1
 800c204:	42a0      	cmp	r0, r4
 800c206:	d10b      	bne.n	800c220 <_free_r+0x6c>
 800c208:	6820      	ldr	r0, [r4, #0]
 800c20a:	4401      	add	r1, r0
 800c20c:	1850      	adds	r0, r2, r1
 800c20e:	4283      	cmp	r3, r0
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	d1e0      	bne.n	800c1d6 <_free_r+0x22>
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4401      	add	r1, r0
 800c21a:	6011      	str	r1, [r2, #0]
 800c21c:	6053      	str	r3, [r2, #4]
 800c21e:	e7da      	b.n	800c1d6 <_free_r+0x22>
 800c220:	d902      	bls.n	800c228 <_free_r+0x74>
 800c222:	230c      	movs	r3, #12
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	e7d6      	b.n	800c1d6 <_free_r+0x22>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	1821      	adds	r1, r4, r0
 800c22c:	428b      	cmp	r3, r1
 800c22e:	bf01      	itttt	eq
 800c230:	6819      	ldreq	r1, [r3, #0]
 800c232:	685b      	ldreq	r3, [r3, #4]
 800c234:	1809      	addeq	r1, r1, r0
 800c236:	6021      	streq	r1, [r4, #0]
 800c238:	6063      	str	r3, [r4, #4]
 800c23a:	6054      	str	r4, [r2, #4]
 800c23c:	e7cb      	b.n	800c1d6 <_free_r+0x22>
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20001e0c 	.word	0x20001e0c

0800c244 <sbrk_aligned>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	4e0e      	ldr	r6, [pc, #56]	; (800c280 <sbrk_aligned+0x3c>)
 800c248:	460c      	mov	r4, r1
 800c24a:	6831      	ldr	r1, [r6, #0]
 800c24c:	4605      	mov	r5, r0
 800c24e:	b911      	cbnz	r1, 800c256 <sbrk_aligned+0x12>
 800c250:	f000 f8bc 	bl	800c3cc <_sbrk_r>
 800c254:	6030      	str	r0, [r6, #0]
 800c256:	4621      	mov	r1, r4
 800c258:	4628      	mov	r0, r5
 800c25a:	f000 f8b7 	bl	800c3cc <_sbrk_r>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d00a      	beq.n	800c278 <sbrk_aligned+0x34>
 800c262:	1cc4      	adds	r4, r0, #3
 800c264:	f024 0403 	bic.w	r4, r4, #3
 800c268:	42a0      	cmp	r0, r4
 800c26a:	d007      	beq.n	800c27c <sbrk_aligned+0x38>
 800c26c:	1a21      	subs	r1, r4, r0
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f8ac 	bl	800c3cc <_sbrk_r>
 800c274:	3001      	adds	r0, #1
 800c276:	d101      	bne.n	800c27c <sbrk_aligned+0x38>
 800c278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c27c:	4620      	mov	r0, r4
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	20001e10 	.word	0x20001e10

0800c284 <_malloc_r>:
 800c284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c288:	1ccd      	adds	r5, r1, #3
 800c28a:	f025 0503 	bic.w	r5, r5, #3
 800c28e:	3508      	adds	r5, #8
 800c290:	2d0c      	cmp	r5, #12
 800c292:	bf38      	it	cc
 800c294:	250c      	movcc	r5, #12
 800c296:	2d00      	cmp	r5, #0
 800c298:	4607      	mov	r7, r0
 800c29a:	db01      	blt.n	800c2a0 <_malloc_r+0x1c>
 800c29c:	42a9      	cmp	r1, r5
 800c29e:	d905      	bls.n	800c2ac <_malloc_r+0x28>
 800c2a0:	230c      	movs	r3, #12
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	603b      	str	r3, [r7, #0]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	4e2e      	ldr	r6, [pc, #184]	; (800c368 <_malloc_r+0xe4>)
 800c2ae:	f000 f89d 	bl	800c3ec <__malloc_lock>
 800c2b2:	6833      	ldr	r3, [r6, #0]
 800c2b4:	461c      	mov	r4, r3
 800c2b6:	bb34      	cbnz	r4, 800c306 <_malloc_r+0x82>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff ffc2 	bl	800c244 <sbrk_aligned>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	d14d      	bne.n	800c362 <_malloc_r+0xde>
 800c2c6:	6834      	ldr	r4, [r6, #0]
 800c2c8:	4626      	mov	r6, r4
 800c2ca:	2e00      	cmp	r6, #0
 800c2cc:	d140      	bne.n	800c350 <_malloc_r+0xcc>
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	eb04 0803 	add.w	r8, r4, r3
 800c2d8:	f000 f878 	bl	800c3cc <_sbrk_r>
 800c2dc:	4580      	cmp	r8, r0
 800c2de:	d13a      	bne.n	800c356 <_malloc_r+0xd2>
 800c2e0:	6821      	ldr	r1, [r4, #0]
 800c2e2:	3503      	adds	r5, #3
 800c2e4:	1a6d      	subs	r5, r5, r1
 800c2e6:	f025 0503 	bic.w	r5, r5, #3
 800c2ea:	3508      	adds	r5, #8
 800c2ec:	2d0c      	cmp	r5, #12
 800c2ee:	bf38      	it	cc
 800c2f0:	250c      	movcc	r5, #12
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7ff ffa5 	bl	800c244 <sbrk_aligned>
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	d02b      	beq.n	800c356 <_malloc_r+0xd2>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	442b      	add	r3, r5
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	e00e      	b.n	800c324 <_malloc_r+0xa0>
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	1b52      	subs	r2, r2, r5
 800c30a:	d41e      	bmi.n	800c34a <_malloc_r+0xc6>
 800c30c:	2a0b      	cmp	r2, #11
 800c30e:	d916      	bls.n	800c33e <_malloc_r+0xba>
 800c310:	1961      	adds	r1, r4, r5
 800c312:	42a3      	cmp	r3, r4
 800c314:	6025      	str	r5, [r4, #0]
 800c316:	bf18      	it	ne
 800c318:	6059      	strne	r1, [r3, #4]
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	bf08      	it	eq
 800c31e:	6031      	streq	r1, [r6, #0]
 800c320:	5162      	str	r2, [r4, r5]
 800c322:	604b      	str	r3, [r1, #4]
 800c324:	4638      	mov	r0, r7
 800c326:	f104 060b 	add.w	r6, r4, #11
 800c32a:	f000 f865 	bl	800c3f8 <__malloc_unlock>
 800c32e:	f026 0607 	bic.w	r6, r6, #7
 800c332:	1d23      	adds	r3, r4, #4
 800c334:	1af2      	subs	r2, r6, r3
 800c336:	d0b6      	beq.n	800c2a6 <_malloc_r+0x22>
 800c338:	1b9b      	subs	r3, r3, r6
 800c33a:	50a3      	str	r3, [r4, r2]
 800c33c:	e7b3      	b.n	800c2a6 <_malloc_r+0x22>
 800c33e:	6862      	ldr	r2, [r4, #4]
 800c340:	42a3      	cmp	r3, r4
 800c342:	bf0c      	ite	eq
 800c344:	6032      	streq	r2, [r6, #0]
 800c346:	605a      	strne	r2, [r3, #4]
 800c348:	e7ec      	b.n	800c324 <_malloc_r+0xa0>
 800c34a:	4623      	mov	r3, r4
 800c34c:	6864      	ldr	r4, [r4, #4]
 800c34e:	e7b2      	b.n	800c2b6 <_malloc_r+0x32>
 800c350:	4634      	mov	r4, r6
 800c352:	6876      	ldr	r6, [r6, #4]
 800c354:	e7b9      	b.n	800c2ca <_malloc_r+0x46>
 800c356:	230c      	movs	r3, #12
 800c358:	4638      	mov	r0, r7
 800c35a:	603b      	str	r3, [r7, #0]
 800c35c:	f000 f84c 	bl	800c3f8 <__malloc_unlock>
 800c360:	e7a1      	b.n	800c2a6 <_malloc_r+0x22>
 800c362:	6025      	str	r5, [r4, #0]
 800c364:	e7de      	b.n	800c324 <_malloc_r+0xa0>
 800c366:	bf00      	nop
 800c368:	20001e0c 	.word	0x20001e0c

0800c36c <_realloc_r>:
 800c36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c370:	4680      	mov	r8, r0
 800c372:	4614      	mov	r4, r2
 800c374:	460e      	mov	r6, r1
 800c376:	b921      	cbnz	r1, 800c382 <_realloc_r+0x16>
 800c378:	4611      	mov	r1, r2
 800c37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	f7ff bf81 	b.w	800c284 <_malloc_r>
 800c382:	b92a      	cbnz	r2, 800c390 <_realloc_r+0x24>
 800c384:	f7ff ff16 	bl	800c1b4 <_free_r>
 800c388:	4625      	mov	r5, r4
 800c38a:	4628      	mov	r0, r5
 800c38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c390:	f000 f838 	bl	800c404 <_malloc_usable_size_r>
 800c394:	4284      	cmp	r4, r0
 800c396:	4607      	mov	r7, r0
 800c398:	d802      	bhi.n	800c3a0 <_realloc_r+0x34>
 800c39a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c39e:	d812      	bhi.n	800c3c6 <_realloc_r+0x5a>
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	f7ff ff6e 	bl	800c284 <_malloc_r>
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d0ed      	beq.n	800c38a <_realloc_r+0x1e>
 800c3ae:	42bc      	cmp	r4, r7
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	bf28      	it	cs
 800c3b6:	463a      	movcs	r2, r7
 800c3b8:	f7ff fb72 	bl	800baa0 <memcpy>
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4640      	mov	r0, r8
 800c3c0:	f7ff fef8 	bl	800c1b4 <_free_r>
 800c3c4:	e7e1      	b.n	800c38a <_realloc_r+0x1e>
 800c3c6:	4635      	mov	r5, r6
 800c3c8:	e7df      	b.n	800c38a <_realloc_r+0x1e>
	...

0800c3cc <_sbrk_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4d05      	ldr	r5, [pc, #20]	; (800c3e8 <_sbrk_r+0x1c>)
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	f7f4 ffa6 	bl	8001328 <_sbrk>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_sbrk_r+0x1a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_sbrk_r+0x1a>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20001e14 	.word	0x20001e14

0800c3ec <__malloc_lock>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	; (800c3f4 <__malloc_lock+0x8>)
 800c3ee:	f000 b811 	b.w	800c414 <__retarget_lock_acquire_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	20001e18 	.word	0x20001e18

0800c3f8 <__malloc_unlock>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__malloc_unlock+0x8>)
 800c3fa:	f000 b80c 	b.w	800c416 <__retarget_lock_release_recursive>
 800c3fe:	bf00      	nop
 800c400:	20001e18 	.word	0x20001e18

0800c404 <_malloc_usable_size_r>:
 800c404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c408:	1f18      	subs	r0, r3, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfbc      	itt	lt
 800c40e:	580b      	ldrlt	r3, [r1, r0]
 800c410:	18c0      	addlt	r0, r0, r3
 800c412:	4770      	bx	lr

0800c414 <__retarget_lock_acquire_recursive>:
 800c414:	4770      	bx	lr

0800c416 <__retarget_lock_release_recursive>:
 800c416:	4770      	bx	lr

0800c418 <_init>:
 800c418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41a:	bf00      	nop
 800c41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41e:	bc08      	pop	{r3}
 800c420:	469e      	mov	lr, r3
 800c422:	4770      	bx	lr

0800c424 <_fini>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	bf00      	nop
 800c428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42a:	bc08      	pop	{r3}
 800c42c:	469e      	mov	lr, r3
 800c42e:	4770      	bx	lr
