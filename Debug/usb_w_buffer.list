
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0800d63c  0800d63c  0001d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e598  0800e598  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800e598  0800e598  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e598  0800e598  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e598  0800e598  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e59c  0800e59c  0001e59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800e5a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000418  0800e9b8  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f18  0800e9b8  00021f18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eab1  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b6b  00000000  00000000  0005eef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002300  00000000  00000000  00064a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002008  00000000  00000000  00066d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfa0  00000000  00000000  00068d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002310d  00000000  00000000  00086d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fba6  00000000  00000000  000a9e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001499bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000964c  00000000  00000000  00149a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d624 	.word	0x0800d624

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800d624 	.word	0x0800d624

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f004 f810 	bl	80041b0 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f004 f80b 	bl	80041b0 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 fb06 	bl	80047b4 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 faff 	bl	80047b4 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fcf2 	bl	8006c14 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 fabb 	bl	80047b4 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000674 	.word	0x20000674
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 f8ce 	bl	80013fc <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fc24 	bl	8000aac <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fdef 	bl	8000e48 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f002 f8af 	bl	80023d4 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 fe63 	bl	8003f42 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 fe6e 	bl	8003f60 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 fe31 	bl	8000eec <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fd07 	bl	8001ca0 <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f003 f8b7 	bl	8003408 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fd33 	bl	8002d08 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f002 fe9e 	bl	8002fe4 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f002 fea8 	bl	8003000 <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 fe30 	bl	8000f14 <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fc14 	bl	8000ae4 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 faa6 	bl	800080c <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e4f4 	.word	0x0800e4f4
 80002d0:	20000434 	.word	0x20000434
 80002d4:	0800d710 	.word	0x0800d710

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <monitor_send_string+0x2c>)
 80002f0:	f00c f8cc 	bl	800c48c <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200004c8 	.word	0x200004c8

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000318:	f006 ff00 	bl	800711c <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 800031c:	f000 f98a 	bl	8000634 <monitor_interrupt>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200005f0 	.word	0x200005f0
 800032c:	20000714 	.word	0x20000714

08000330 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800033a:	2204      	movs	r2, #4
 800033c:	49a0      	ldr	r1, [pc, #640]	; (80005c0 <monitor_check_cmd+0x290>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f00c fcfe 	bl	800cd40 <strncmp>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d108      	bne.n	800035c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800034a:	4a9e      	ldr	r2, [pc, #632]	; (80005c4 <monitor_check_cmd+0x294>)
 800034c:	21c8      	movs	r1, #200	; 0xc8
 800034e:	489e      	ldr	r0, [pc, #632]	; (80005c8 <monitor_check_cmd+0x298>)
 8000350:	f00c fcc2 	bl	800ccd8 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000354:	489c      	ldr	r0, [pc, #624]	; (80005c8 <monitor_check_cmd+0x298>)
 8000356:	f7ff ffbf 	bl	80002d8 <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 800035a:	e12c      	b.n	80005b6 <monitor_check_cmd+0x286>
	else if (cmd[0] == LCD_CMD) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	f040 8128 	bne.w	80005b6 <monitor_check_cmd+0x286>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b31      	cmp	r3, #49	; 0x31
 800036e:	d109      	bne.n	8000384 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000370:	4b96      	ldr	r3, [pc, #600]	; (80005cc <monitor_check_cmd+0x29c>)
 8000372:	4a97      	ldr	r2, [pc, #604]	; (80005d0 <monitor_check_cmd+0x2a0>)
 8000374:	21c8      	movs	r1, #200	; 0xc8
 8000376:	4894      	ldr	r0, [pc, #592]	; (80005c8 <monitor_check_cmd+0x298>)
 8000378:	f00c fcae 	bl	800ccd8 <sniprintf>
			monitor_send_string(ans);
 800037c:	4892      	ldr	r0, [pc, #584]	; (80005c8 <monitor_check_cmd+0x298>)
 800037e:	f7ff ffab 	bl	80002d8 <monitor_send_string>
}
 8000382:	e118      	b.n	80005b6 <monitor_check_cmd+0x286>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b30      	cmp	r3, #48	; 0x30
 800038c:	d109      	bne.n	80003a2 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038e:	4b8f      	ldr	r3, [pc, #572]	; (80005cc <monitor_check_cmd+0x29c>)
 8000390:	4a90      	ldr	r2, [pc, #576]	; (80005d4 <monitor_check_cmd+0x2a4>)
 8000392:	21c8      	movs	r1, #200	; 0xc8
 8000394:	488c      	ldr	r0, [pc, #560]	; (80005c8 <monitor_check_cmd+0x298>)
 8000396:	f00c fc9f 	bl	800ccd8 <sniprintf>
			monitor_send_string(ans);
 800039a:	488b      	ldr	r0, [pc, #556]	; (80005c8 <monitor_check_cmd+0x298>)
 800039c:	f7ff ff9c 	bl	80002d8 <monitor_send_string>
}
 80003a0:	e109      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SOFT_RESET) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b56      	cmp	r3, #86	; 0x56
 80003aa:	d102      	bne.n	80003b2 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003ac:	f000 fd38 	bl	8000e20 <lcd_soft_reset>
}
 80003b0:	e101      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b42      	cmp	r3, #66	; 0x42
 80003ba:	d103      	bne.n	80003c4 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fd43 	bl	8000e48 <enable_backlight>
}
 80003c2:	e0f8      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b46      	cmp	r3, #70	; 0x46
 80003cc:	d103      	bne.n	80003d6 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fd3a 	bl	8000e48 <enable_backlight>
}
 80003d4:	e0ef      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b41      	cmp	r3, #65	; 0x41
 80003de:	d106      	bne.n	80003ee <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3302      	adds	r3, #2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fd58 	bl	8000e9c <set_backlight_brightness>
}
 80003ec:	e0e3      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d103      	bne.n	8000400 <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fb9f 	bl	8000b3c <inverse_text>
}
 80003fe:	e0da      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b67      	cmp	r3, #103	; 0x67
 8000408:	d103      	bne.n	8000412 <monitor_check_cmd+0xe2>
			inverse_text(false);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fb96 	bl	8000b3c <inverse_text>
}
 8000410:	e0d1      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b58      	cmp	r3, #88	; 0x58
 800041a:	d102      	bne.n	8000422 <monitor_check_cmd+0xf2>
			clear_display();
 800041c:	f000 fd06 	bl	8000e2c <clear_display>
}
 8000420:	e0c9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b70      	cmp	r3, #112	; 0x70
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fc6a 	bl	8000d14 <put_pixel>
}
 8000440:	e0b9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b71      	cmp	r3, #113	; 0x71
 800044a:	d10a      	bne.n	8000462 <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3303      	adds	r3, #3
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	4610      	mov	r0, r2
 800045c:	f000 fc78 	bl	8000d50 <erase_pixel>
}
 8000460:	e0a9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_BYTE) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b3e      	cmp	r3, #62	; 0x3e
 800046a:	d10c      	bne.n	8000486 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	7818      	ldrb	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	f000 fc84 	bl	8000d8c <put_byte>
}
 8000484:	e097      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b4e      	cmp	r3, #78	; 0x4e
 800048e:	d103      	bne.n	8000498 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 fb7b 	bl	8000b8c <define_custom_character>
}
 8000496:	e08e      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b43      	cmp	r3, #67	; 0x43
 80004a0:	d103      	bne.n	80004aa <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb0e 	bl	8000ac4 <auto_line_wrap>
}
 80004a8:	e085      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b44      	cmp	r3, #68	; 0x44
 80004b2:	d103      	bne.n	80004bc <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fb05 	bl	8000ac4 <auto_line_wrap>
}
 80004ba:	e07c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b47      	cmp	r3, #71	; 0x47
 80004c4:	d10a      	bne.n	80004dc <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4610      	mov	r0, r2
 80004d6:	f000 fb05 	bl	8000ae4 <text_insertion_point>
}
 80004da:	e06c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b48      	cmp	r3, #72	; 0x48
 80004e4:	d104      	bne.n	80004f0 <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fafb 	bl	8000ae4 <text_insertion_point>
}
 80004ee:	e062      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_READ_GPI) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b65      	cmp	r3, #101	; 0x65
 80004f8:	d114      	bne.n	8000524 <monitor_check_cmd+0x1f4>
			if (cmd[2] == '0') {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b30      	cmp	r3, #48	; 0x30
 8000502:	d158      	bne.n	80005b6 <monitor_check_cmd+0x286>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000504:	4b34      	ldr	r3, [pc, #208]	; (80005d8 <monitor_check_cmd+0x2a8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
						ddp[1]);
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <monitor_check_cmd+0x2a8>)
 800050c:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4613      	mov	r3, r2
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <monitor_check_cmd+0x2ac>)
 8000514:	21c8      	movs	r1, #200	; 0xc8
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <monitor_check_cmd+0x298>)
 8000518:	f00c fbde 	bl	800ccd8 <sniprintf>
				monitor_send_string(ans);
 800051c:	482a      	ldr	r0, [pc, #168]	; (80005c8 <monitor_check_cmd+0x298>)
 800051e:	f7ff fedb 	bl	80002d8 <monitor_send_string>
}
 8000522:	e048      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b69      	cmp	r3, #105	; 0x69
 800052c:	d102      	bne.n	8000534 <monitor_check_cmd+0x204>
			disp_splash();
 800052e:	f000 fcf1 	bl	8000f14 <disp_splash>
}
 8000532:	e040      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b76      	cmp	r3, #118	; 0x76
 800053c:	d102      	bne.n	8000544 <monitor_check_cmd+0x214>
			def_thick_v_bar();
 800053e:	f000 fb0d 	bl	8000b5c <def_thick_v_bar>
}
 8000542:	e038      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b73      	cmp	r3, #115	; 0x73
 800054c:	d102      	bne.n	8000554 <monitor_check_cmd+0x224>
			def_thin_v_bar();
 800054e:	f000 fb11 	bl	8000b74 <def_thin_v_bar>
}
 8000552:	e030      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b3d      	cmp	r3, #61	; 0x3d
 800055c:	d10a      	bne.n	8000574 <monitor_check_cmd+0x244>
			draw_v_bar_graph(cmd[2], cmd[3]);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3302      	adds	r3, #2
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3303      	adds	r3, #3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f000 fb37 	bl	8000be0 <draw_v_bar_graph>
}
 8000572:	e020      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b3d      	cmp	r3, #61	; 0x3d
 800057c:	d10a      	bne.n	8000594 <monitor_check_cmd+0x264>
			erase_v_bar_graph(cmd[2], cmd[3]);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3302      	adds	r3, #2
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3303      	adds	r3, #3
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 fb57 	bl	8000c40 <erase_v_bar_graph>
}
 8000592:	e010      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b7c      	cmp	r3, #124	; 0x7c
 800059c:	d10b      	bne.n	80005b6 <monitor_check_cmd+0x286>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3302      	adds	r3, #2
 80005a2:	7818      	ldrb	r0, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3303      	adds	r3, #3
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3304      	adds	r3, #4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	f000 fb75 	bl	8000ca0 <draw_h_bar_graph>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	0800d63c 	.word	0x0800d63c
 80005c4:	0800d644 	.word	0x0800d644
 80005c8:	20000590 	.word	0x20000590
 80005cc:	0800d67c 	.word	0x0800d67c
 80005d0:	0800d680 	.word	0x0800d680
 80005d4:	0800d698 	.word	0x0800d698
 80005d8:	20000000 	.word	0x20000000
 80005dc:	0800d6ac 	.word	0x0800d6ac

080005e0 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <app_usb_cbk+0x44>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <app_usb_cbk+0x48>)
 80005f0:	4413      	add	r3, r2
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00c fb58 	bl	800ccac <memcpy>
	size += len;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <app_usb_cbk+0x44>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <app_usb_cbk+0x44>)
 8000606:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <app_usb_cbk+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2bc7      	cmp	r3, #199	; 0xc7
 800060e:	d902      	bls.n	8000616 <app_usb_cbk+0x36>
		new_cmd = true;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <app_usb_cbk+0x4c>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <app_usb_cbk+0x50>)
 8000618:	f006 fd2e 	bl	8007078 <HAL_TIM_Base_Start_IT>

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200005ec 	.word	0x200005ec
 8000628:	200004c8 	.word	0x200004c8
 800062c:	200005f0 	.word	0x200005f0
 8000630:	20000714 	.word	0x20000714

08000634 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800063a:	4b70      	ldr	r3, [pc, #448]	; (80007fc <monitor_interrupt+0x1c8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80d7 	beq.w	80007f2 <monitor_interrupt+0x1be>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 8000648:	4b6d      	ldr	r3, [pc, #436]	; (8000800 <monitor_interrupt+0x1cc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 800064e:	2300      	movs	r3, #0
 8000650:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 8000652:	2300      	movs	r3, #0
 8000654:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset < size; offset++) {
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e0ad      	b.n	80007b8 <monitor_interrupt+0x184>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20) {
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a69      	ldr	r2, [pc, #420]	; (8000804 <monitor_interrupt+0x1d0>)
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bfd      	cmp	r3, #253	; 0xfd
 8000666:	d110      	bne.n	800068a <monitor_interrupt+0x56>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	4a65      	ldr	r2, [pc, #404]	; (8000804 <monitor_interrupt+0x1d0>)
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2bfe      	cmp	r3, #254	; 0xfe
 8000674:	d009      	beq.n	800068a <monitor_interrupt+0x56>
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3301      	adds	r3, #1
 800067a:	4a62      	ldr	r2, [pc, #392]	; (8000804 <monitor_interrupt+0x1d0>)
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b14      	cmp	r3, #20
 8000682:	d002      	beq.n	800068a <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <monitor_interrupt+0x76>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a5c      	ldr	r2, [pc, #368]	; (8000804 <monitor_interrupt+0x1d0>)
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2bfe      	cmp	r3, #254	; 0xfe
 800069a:	d106      	bne.n	80006aa <monitor_interrupt+0x76>
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b01      	subs	r3, #1
 80006a0:	4a58      	ldr	r2, [pc, #352]	; (8000804 <monitor_interrupt+0x1d0>)
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2bfd      	cmp	r3, #253	; 0xfd
 80006a8:	d104      	bne.n	80006b4 <monitor_interrupt+0x80>
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4b54      	ldr	r3, [pc, #336]	; (8000800 <monitor_interrupt+0x1cc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d103      	bne.n	80006bc <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	717b      	strb	r3, [r7, #5]
			}
			if(offset+1 == size && bgn_print>end_print  || offset+1 == size &&bgn_print< end_print){
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a4f      	ldr	r2, [pc, #316]	; (8000800 <monitor_interrupt+0x1cc>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d103      	bne.n	80006d0 <monitor_interrupt+0x9c>
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	797b      	ldrb	r3, [r7, #5]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d809      	bhi.n	80006e4 <monitor_interrupt+0xb0>
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <monitor_interrupt+0x1cc>)
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	4293      	cmp	r3, r2
 80006da:	d108      	bne.n	80006ee <monitor_interrupt+0xba>
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d204      	bcs.n	80006ee <monitor_interrupt+0xba>
				printable = true;
 80006e4:	2301      	movs	r3, #1
 80006e6:	70fb      	strb	r3, [r7, #3]
				end_print = offset+1;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3301      	adds	r3, #1
 80006ec:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d029      	beq.n	8000748 <monitor_interrupt+0x114>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <monitor_interrupt+0x1d0>)
 80006f8:	1899      	adds	r1, r3, r2
 80006fa:	797a      	ldrb	r2, [r7, #5]
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4841      	ldr	r0, [pc, #260]	; (8000808 <monitor_interrupt+0x1d4>)
 8000704:	f00c fb30 	bl	800cd68 <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	b29b      	uxth	r3, r3
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	483c      	ldr	r0, [pc, #240]	; (8000808 <monitor_interrupt+0x1d4>)
 8000718:	f00b feb8 	bl	800c48c <CDC_Transmit_FS>
				lcd_print(ans);
 800071c:	483a      	ldr	r0, [pc, #232]	; (8000808 <monitor_interrupt+0x1d4>)
 800071e:	f000 fd4d 	bl	80011bc <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000722:	225a      	movs	r2, #90	; 0x5a
 8000724:	2100      	movs	r1, #0
 8000726:	4838      	ldr	r0, [pc, #224]	; (8000808 <monitor_interrupt+0x1d4>)
 8000728:	f00c face 	bl	800ccc8 <memset>
				printable = !printable;
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <monitor_interrupt+0x1d0>)
 800074c:	4413      	add	r3, r2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2bfe      	cmp	r3, #254	; 0xfe
 8000752:	d117      	bne.n	8000784 <monitor_interrupt+0x150>
				monitor_check_cmd((char*) cmd + offset, size);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <monitor_interrupt+0x1d0>)
 8000758:	4413      	add	r3, r2
 800075a:	4a29      	ldr	r2, [pc, #164]	; (8000800 <monitor_interrupt+0x1cc>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fde5 	bl	8000330 <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000766:	793b      	ldrb	r3, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f083 0301 	eor.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	713b      	strb	r3, [r7, #4]
 800077a:	793b      	ldrb	r3, [r7, #4]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	713b      	strb	r3, [r7, #4]
 8000782:	e013      	b.n	80007ac <monitor_interrupt+0x178>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <monitor_interrupt+0x1d0>)
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2bfd      	cmp	r3, #253	; 0xfd
 800078e:	d10d      	bne.n	80007ac <monitor_interrupt+0x178>
				is_cmd = !is_cmd;
 8000790:	793b      	ldrb	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	713b      	strb	r3, [r7, #4]
 80007a4:	793b      	ldrb	r3, [r7, #4]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	713b      	strb	r3, [r7, #4]
			}
			if(bgn_print>end_print && offset+1 > size){
 80007ac:	79ba      	ldrb	r2, [r7, #6]
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	429a      	cmp	r2, r3
		for (offset = 0; offset < size; offset++) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	3301      	adds	r3, #1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <monitor_interrupt+0x1cc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	f4ff af4c 	bcc.w	800065c <monitor_interrupt+0x28>

			}
		}
		size = 0;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <monitor_interrupt+0x1cc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 80007ca:	22c8      	movs	r2, #200	; 0xc8
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <monitor_interrupt+0x1d0>)
 80007d0:	f00c fa7a 	bl	800ccc8 <memset>
		new_cmd = !new_cmd;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <monitor_interrupt+0x1c8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f083 0301 	eor.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <monitor_interrupt+0x1c8>)
 80007f0:	701a      	strb	r2, [r3, #0]
	}
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200005f0 	.word	0x200005f0
 8000800:	200005ec 	.word	0x200005ec
 8000804:	200004c8 	.word	0x200004c8
 8000808:	20000590 	.word	0x20000590

0800080c <monitor_begin>:

void monitor_begin(void) {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <monitor_begin+0x18>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <monitor_begin+0x1c>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	200005ec 	.word	0x200005ec
 8000828:	200005f0 	.word	0x200005f0

0800082c <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
*
*/
uint16_t exp(uint16_t val,uint16_t pot ){
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
    uint16_t ans = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	81fb      	strh	r3, [r7, #14]
    while(pot){
 8000840:	e007      	b.n	8000852 <exp+0x26>
        ans *=val;
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	fb02 f303 	mul.w	r3, r2, r3
 800084a:	81fb      	strh	r3, [r7, #14]
        pot--;
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	80bb      	strh	r3, [r7, #4]
    while(pot){
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f4      	bne.n	8000842 <exp+0x16>
    }
    return ans;
 8000858:	89fb      	ldrh	r3, [r7, #14]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
*
*/
void decode_convert_expand_encode(uint8_t *hex_char){
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
uint8_t mat[N][N]= {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00c fa27 	bl	800ccc8 <memset>
uint8_t i,j,k, hex, temp;


//decode_expand
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 800087a:	2303      	movs	r3, #3
 800087c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000880:	e02e      	b.n	80008e0 <decode_convert_expand_encode+0x7c>
        hex = *(hex_char+i);
 8000882:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        for(j=7;j>=0 && j<8;j--)
 8000890:	2307      	movs	r3, #7
 8000892:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000896:	e01a      	b.n	80008ce <decode_convert_expand_encode+0x6a>
        {
            mat[i-3][j] =hex%2;
 8000898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800089c:	1eda      	subs	r2, r3, #3
 800089e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008a2:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80008a6:	f001 0101 	and.w	r1, r1, #1
 80008aa:	b2c9      	uxtb	r1, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	3250      	adds	r2, #80	; 0x50
 80008b0:	443a      	add	r2, r7
 80008b2:	4413      	add	r3, r2
 80008b4:	3b48      	subs	r3, #72	; 0x48
 80008b6:	460a      	mov	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
            hex=hex/2;
 80008ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for(j=7;j>=0 && j<8;j--)
 80008c4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008c8:	3b01      	subs	r3, #1
 80008ca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008ce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d9e0      	bls.n	8000898 <decode_convert_expand_encode+0x34>
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 80008d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008da:	3301      	adds	r3, #1
 80008dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2bfd      	cmp	r3, #253	; 0xfd
 80008ec:	d1c9      	bne.n	8000882 <decode_convert_expand_encode+0x1e>
        }
    }
//rotate
        // Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008f4:	e07d      	b.n	80009f2 <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 80008f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008fa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008fe:	e06b      	b.n	80009d8 <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 8000900:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000904:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	3250      	adds	r2, #80	; 0x50
 800090c:	443a      	add	r2, r7
 800090e:	4413      	add	r3, r2
 8000910:	3b48      	subs	r3, #72	; 0x48
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 8000918:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 800091c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000920:	f1c3 0107 	rsb	r1, r3, #7
 8000924:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000928:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800092c:	00c0      	lsls	r0, r0, #3
 800092e:	3050      	adds	r0, #80	; 0x50
 8000930:	4438      	add	r0, r7
 8000932:	4401      	add	r1, r0
 8000934:	3948      	subs	r1, #72	; 0x48
 8000936:	7809      	ldrb	r1, [r1, #0]
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	3250      	adds	r2, #80	; 0x50
 800093c:	443a      	add	r2, r7
 800093e:	4413      	add	r3, r2
 8000940:	3b48      	subs	r3, #72	; 0x48
 8000942:	460a      	mov	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i]
				= mat[N - 1 - i][N - 1 - j];
 8000946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800094a:	f1c3 0007 	rsb	r0, r3, #7
 800094e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000952:	f1c3 0107 	rsb	r1, r3, #7
			mat[j][N - 1 - i]
 8000956:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800095a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800095e:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - i][N - 1 - j];
 8000962:	00c0      	lsls	r0, r0, #3
 8000964:	3050      	adds	r0, #80	; 0x50
 8000966:	4438      	add	r0, r7
 8000968:	4401      	add	r1, r0
 800096a:	3948      	subs	r1, #72	; 0x48
 800096c:	7809      	ldrb	r1, [r1, #0]
 800096e:	00d2      	lsls	r2, r2, #3
 8000970:	3250      	adds	r2, #80	; 0x50
 8000972:	443a      	add	r2, r7
 8000974:	4413      	add	r3, r2
 8000976:	3b48      	subs	r3, #72	; 0x48
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j]
				= mat[N - 1 - j][i];
 800097c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000980:	f1c3 0007 	rsb	r0, r3, #7
 8000984:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
			mat[N - 1 - i][N - 1 - j]
 8000988:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800098c:	f1c3 0207 	rsb	r2, r3, #7
 8000990:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000994:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - j][i];
 8000998:	00c0      	lsls	r0, r0, #3
 800099a:	3050      	adds	r0, #80	; 0x50
 800099c:	4438      	add	r0, r7
 800099e:	4401      	add	r1, r0
 80009a0:	3948      	subs	r1, #72	; 0x48
 80009a2:	7809      	ldrb	r1, [r1, #0]
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	3250      	adds	r2, #80	; 0x50
 80009a8:	443a      	add	r2, r7
 80009aa:	4413      	add	r3, r2
 80009ac:	3b48      	subs	r3, #72	; 0x48
 80009ae:	460a      	mov	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 80009b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009b6:	f1c3 0207 	rsb	r2, r3, #7
 80009ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009be:	00d2      	lsls	r2, r2, #3
 80009c0:	3250      	adds	r2, #80	; 0x50
 80009c2:	443a      	add	r2, r7
 80009c4:	4413      	add	r3, r2
 80009c6:	3b48      	subs	r3, #72	; 0x48
 80009c8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80009cc:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 80009ce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009d2:	3301      	adds	r3, #1
 80009d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80009d8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80009dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009e0:	f1c3 0307 	rsb	r3, r3, #7
 80009e4:	429a      	cmp	r2, r3
 80009e6:	db8b      	blt.n	8000900 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 80009e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ec:	3301      	adds	r3, #1
 80009ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80009f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	f67f af7d 	bls.w	80008f6 <decode_convert_expand_encode+0x92>
		}
	}
//encode
    for(i=0,k=0;i<N;i++){
 80009fc:	2300      	movs	r3, #0
 80009fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a02:	2300      	movs	r3, #0
 8000a04:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a08:	e047      	b.n	8000a9a <decode_convert_expand_encode+0x236>
        temp=0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a16:	e022      	b.n	8000a5e <decode_convert_expand_encode+0x1fa>
            temp += exp(2,N-j) * mat[i][j];
 8000a18:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f1c3 0308 	rsb	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ff00 	bl	800082c <exp>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000a34:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	3250      	adds	r2, #80	; 0x50
 8000a3c:	443a      	add	r2, r7
 8000a3e:	4413      	add	r3, r2
 8000a40:	3b48      	subs	r3, #72	; 0x48
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	fb01 f303 	mul.w	r3, r1, r3
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a4e:	4413      	add	r3, r2
 8000a50:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a54:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a5e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	d9d8      	bls.n	8000a18 <decode_convert_expand_encode+0x1b4>
        }
        //save on the database
        if(i>1 && k<CUSTOM_CHARACTER_SIZE){
 8000a66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d910      	bls.n	8000a90 <decode_convert_expand_encode+0x22c>
 8000a6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	d80c      	bhi.n	8000a90 <decode_convert_expand_encode+0x22c>
        	hex_char[k+3] = temp;
 8000a76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a7a:	3303      	adds	r3, #3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a84:	701a      	strb	r2, [r3, #0]
        	k++;
 8000a86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    for(i=0,k=0;i<N;i++){
 8000a90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d9b3      	bls.n	8000a0a <decode_convert_expand_encode+0x1a6>
        }
    }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3750      	adds	r7, #80	; 0x50
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000ab0:	2270      	movs	r2, #112	; 0x70
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <init_custom_character_db+0x14>)
 8000ab6:	f00c f907 	bl	800ccc8 <memset>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200005f8 	.word	0x200005f8

08000ac4 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <auto_line_wrap+0x1c>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	7013      	strb	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200005f2 	.word	0x200005f2

08000ae4 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <text_insertion_point+0x4c>)
 8000af6:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <text_insertion_point+0x50>)
 8000b06:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <text_insertion_point+0x4c>)
 8000b0a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <text_insertion_point+0x54>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	79ba      	ldrb	r2, [r7, #6]
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <text_insertion_point+0x50>)
 8000b22:	705a      	strb	r2, [r3, #1]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000434 	.word	0x20000434
 8000b34:	200005f4 	.word	0x200005f4
 8000b38:	2000022f 	.word	0x2000022f

08000b3c <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <inverse_text+0x1c>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	7013      	strb	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200005f1 	.word	0x200005f1

08000b5c <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <def_thick_v_bar+0x14>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000022e 	.word	0x2000022e

08000b74 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <def_thin_v_bar+0x14>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000022e 	.word	0x2000022e

08000b8c <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
		decode_convert_expand_encode(cmd);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fe65 	bl	8000864 <decode_convert_expand_encode>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	1a9b      	subs	r3, r3, r2
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <define_custom_character+0x50>)
 8000baa:	1898      	adds	r0, r3, r2
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f00c f87a 	bl	800ccac <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3302      	adds	r3, #2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7898      	ldrb	r0, [r3, #2]
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <define_custom_character+0x50>)
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	4413      	add	r3, r2
 8000bce:	3306      	adds	r3, #6
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	701a      	strb	r2, [r3, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200005f8 	.word	0x200005f8

08000be0 <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <draw_v_bar_graph+0x54>)
 8000bf2:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	79fa      	ldrb	r2, [r7, #7]
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <draw_v_bar_graph+0x58>)
 8000c02:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <draw_v_bar_graph+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <draw_v_bar_graph+0x58>)
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <draw_v_bar_graph+0x5c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b298      	uxth	r0, r3
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <draw_v_bar_graph+0x54>)
 8000c20:	f001 f8fe 	bl	8001e20 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <draw_v_bar_graph+0x54>)
 8000c26:	f001 fa01 	bl	800202c <u8g2_SendBuffer>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000434 	.word	0x20000434
 8000c38:	200005f4 	.word	0x200005f4
 8000c3c:	2000022e 	.word	0x2000022e

08000c40 <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <erase_v_bar_graph+0x54>)
 8000c52:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	79fa      	ldrb	r2, [r7, #7]
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <erase_v_bar_graph+0x58>)
 8000c62:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <erase_v_bar_graph+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <erase_v_bar_graph+0x58>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <erase_v_bar_graph+0x5c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b298      	uxth	r0, r3
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <erase_v_bar_graph+0x54>)
 8000c80:	f001 f8ce 	bl	8001e20 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <erase_v_bar_graph+0x54>)
 8000c86:	f001 f9d1 	bl	800202c <u8g2_SendBuffer>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000434 	.word	0x20000434
 8000c98:	200005f4 	.word	0x200005f4
 8000c9c:	2000022e 	.word	0x2000022e

08000ca0 <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	460b      	mov	r3, r1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <draw_h_bar_graph+0x6c>)
 8000cb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <draw_h_bar_graph+0x70>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <draw_h_bar_graph+0x6c>)
 8000cc8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <draw_h_bar_graph+0x70>)
 8000cd8:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <draw_h_bar_graph+0x70>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <draw_h_bar_graph+0x70>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <draw_h_bar_graph+0x6c>)
 8000cec:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <draw_h_bar_graph+0x6c>)
 8000cf8:	f001 f892 	bl	8001e20 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <draw_h_bar_graph+0x6c>)
 8000cfe:	f001 f995 	bl	800202c <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000434 	.word	0x20000434
 8000d10:	200005f4 	.word	0x200005f4

08000d14 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <put_pixel+0x38>)
 8000d28:	f002 fb6e 	bl	8003408 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	b292      	uxth	r2, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <put_pixel+0x38>)
 8000d38:	f002 fb33 	bl	80033a2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <put_pixel+0x38>)
 8000d3e:	f001 f975 	bl	800202c <u8g2_SendBuffer>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000434 	.word	0x20000434

08000d50 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000d60:	2100      	movs	r1, #0
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <erase_pixel+0x38>)
 8000d64:	f002 fb50 	bl	8003408 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <erase_pixel+0x38>)
 8000d74:	f002 fb15 	bl	80033a2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <erase_pixel+0x38>)
 8000d7a:	f001 f957 	bl	800202c <u8g2_SendBuffer>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000434 	.word	0x20000434

08000d8c <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	460b      	mov	r3, r1
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2208      	movs	r2, #8
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b ff8e 	bl	800ccc8 <memset>
	for(i=0; byte > 0; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	75fb      	strb	r3, [r7, #23]
 8000db0:	e00e      	b.n	8000dd0 <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	797a      	ldrb	r2, [r7, #5]
 8000db6:	f002 0201 	and.w	r2, r2, #1
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	443b      	add	r3, r7
 8000dc0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	75fb      	strb	r3, [r7, #23]
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1ed      	bne.n	8000db2 <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <put_byte+0x8c>)
 8000dd8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <put_byte+0x90>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	79ba      	ldrb	r2, [r7, #6]
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	b299      	uxth	r1, r3
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <put_byte+0x8c>)
 8000e04:	f000 ffc9 	bl	8001d9a <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <put_byte+0x8c>)
 8000e0a:	f001 f90f 	bl	800202c <u8g2_SendBuffer>

}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000434 	.word	0x20000434
 8000e1c:	2000022f 	.word	0x2000022f

08000e20 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000e24:	f003 fb31 	bl	800448a <HAL_NVIC_SystemReset>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe56 	bl	8000ae4 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <clear_display+0x18>)
 8000e3a:	f001 faa5 	bl	8002388 <u8g2_ClearDisplay>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000434 	.word	0x20000434

08000e48 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00e      	beq.n	8000e76 <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <enable_backlight+0x48>)
 8000e5e:	f003 fca9 	bl	80047b4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e62:	2100      	movs	r1, #0
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <enable_backlight+0x4c>)
 8000e66:	f006 f9df 	bl	8007228 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <enable_backlight+0x50>)
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <enable_backlight+0x4c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8000e74:	e008      	b.n	8000e88 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2110      	movs	r1, #16
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <enable_backlight+0x48>)
 8000e7c:	f003 fc9a 	bl	80047b4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e80:	2100      	movs	r1, #0
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <enable_backlight+0x4c>)
 8000e84:	f006 fa72 	bl	800736c <HAL_TIM_PWM_Stop>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010800 	.word	0x40010800
 8000e94:	200006cc 	.word	0x200006cc
 8000e98:	2000022c 	.word	0x2000022c

08000e9c <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d016      	beq.n	8000eda <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0152      	lsls	r2, r2, #5
 8000eba:	1ad2      	subs	r2, r2, r3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	441a      	add	r2, r3
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	0109      	lsls	r1, r1, #4
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	0152      	lsls	r2, r2, #5
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <set_backlight_brightness+0x48>)
 8000ece:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <set_backlight_brightness+0x48>)
 8000ed2:	881a      	ldrh	r2, [r3, #0]
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <set_backlight_brightness+0x4c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	2000022c 	.word	0x2000022c
 8000ee8:	200006cc 	.word	0x200006cc

08000eec <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	00d2      	lsls	r2, r2, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	4803      	ldr	r0, [pc, #12]	; (8000f10 <set_contrast+0x24>)
 8000f04:	f003 f83d 	bl	8003f82 <u8x8_SetContrast>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000434 	.word	0x20000434

08000f14 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <disp_splash+0x28>)
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	2318      	movs	r3, #24
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	23b4      	movs	r3, #180	; 0xb4
 8000f24:	2214      	movs	r2, #20
 8000f26:	2106      	movs	r1, #6
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <disp_splash+0x2c>)
 8000f2a:	f000 ff36 	bl	8001d9a <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <disp_splash+0x2c>)
 8000f30:	f001 f87c 	bl	800202c <u8g2_SendBuffer>

}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	20000434 	.word	0x20000434

08000f44 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000f56:	6838      	ldr	r0, [r7, #0]
 8000f58:	f7ff f8f8 	bl	800014c <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000f60:	7bba      	ldrb	r2, [r7, #14]
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <str_warper+0x12c>)
 8000f64:	fba3 1302 	umull	r1, r3, r3, r2
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	0852      	lsrs	r2, r2, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d071      	beq.n	8001066 <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e068      	b.n	800105a <str_warper+0x116>
			if (aux < N_LINES) {
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d82f      	bhi.n	8000fee <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000faa:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00da      	lsls	r2, r3, #3
 8000fb6:	1ad2      	subs	r2, r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00da      	lsls	r2, r3, #3
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000fce:	2214      	movs	r2, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f00b fec9 	bl	800cd68 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00da      	lsls	r2, r3, #3
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	188b      	adds	r3, r1, r2
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e032      	b.n	8001054 <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8001000:	2b20      	cmp	r3, #32
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800100a:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	00da      	lsls	r2, r3, #3
 8001016:	1ad2      	subs	r2, r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00da      	lsls	r2, r3, #3
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	461a      	mov	r2, r3
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	4413      	add	r3, r2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	461a      	mov	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f882 	bl	800014c <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4629      	mov	r1, r5
 800104e:	4620      	mov	r0, r4
 8001050:	f00b fe8a 	bl	800cd68 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3301      	adds	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	429a      	cmp	r2, r3
 8001064:	d990      	bls.n	8000f88 <str_warper+0x44>
			}
		}
	}
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	86186187 	.word	0x86186187

08001074 <Custom_Character_masker>:
}
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}
bool Custom_Character_masker(uint8_t *txt,uint8_t * mask, uint8_t *v_cursor){
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	uint8_t index;
	bool enable;
	strncpy(mask,txt,MASK_BUFFER);
 8001080:	2269      	movs	r2, #105	; 0x69
 8001082:	68f9      	ldr	r1, [r7, #12]
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f00b fe6f 	bl	800cd68 <strncpy>
	*(mask+MASK_BUFFER-1) = '\0';
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3368      	adds	r3, #104	; 0x68
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

	*(v_cursor+0) = cursor[0];
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <Custom_Character_masker+0x6c>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	701a      	strb	r2, [r3, #0]
	*(v_cursor+1) = cursor[1];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3301      	adds	r3, #1
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <Custom_Character_masker+0x6c>)
 80010a0:	7852      	ldrb	r2, [r2, #1]
 80010a2:	701a      	strb	r2, [r3, #0]

	for(index=0;*(mask+index) != '\0';index++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	e00f      	b.n	80010ca <Custom_Character_masker+0x56>
		if(*(mask+index)>=0 && *(mask+index)<=16){
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d806      	bhi.n	80010c4 <Custom_Character_masker+0x50>
			*(mask+index) =32;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	2220      	movs	r2, #32
 80010be:	701a      	strb	r2, [r3, #0]
			enable = true;
 80010c0:	2301      	movs	r3, #1
 80010c2:	75bb      	strb	r3, [r7, #22]
	for(index=0;*(mask+index) != '\0';index++){
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	3301      	adds	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e9      	bne.n	80010aa <Custom_Character_masker+0x36>
		}
	}
return enable;
 80010d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200005f4 	.word	0x200005f4

080010e4 <clean_it>:
void clean_it(uint8_t *str){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	memset(str, 0, sizeof(str));
 80010ec:	2204      	movs	r2, #4
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f00b fde9 	bl	800ccc8 <memset>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <custom_character_dealer>:
void custom_character_dealer( uint8_t *txt){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
	uint8_t char_w = 8;
 8001108:	2308      	movs	r3, #8
 800110a:	737b      	strb	r3, [r7, #13]
	uint8_t char_h = 6;
 800110c:	2306      	movs	r3, #6
 800110e:	733b      	strb	r3, [r7, #12]
	uint8_t offset,temp_x,temp_y,index;
	temp_x = cursor[0];
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <custom_character_dealer+0xb0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	73bb      	strb	r3, [r7, #14]
	temp_y = cursor[1];
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <custom_character_dealer+0xb0>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	72fb      	strb	r3, [r7, #11]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e03b      	b.n	800119a <custom_character_dealer+0x9a>
		index = *(txt+offset);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	72bb      	strb	r3, [r7, #10]
		if((custom_character_db[index].custo_character_index)){
 800112c:	7aba      	ldrb	r2, [r7, #10]
 800112e:	4921      	ldr	r1, [pc, #132]	; (80011b4 <custom_character_dealer+0xb4>)
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	440b      	add	r3, r1
 8001138:	3306      	adds	r3, #6
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d022      	beq.n	8001186 <custom_character_dealer+0x86>
				u8g2_DrawXBM(&u8g2 , temp_x, temp_y+4, char_w, char_h, custom_character_db[index].custom_caracter);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	b298      	uxth	r0, r3
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	b29b      	uxth	r3, r3
 8001148:	3304      	adds	r3, #4
 800114a:	b29c      	uxth	r4, r3
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	b29d      	uxth	r5, r3
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	b299      	uxth	r1, r3
 8001154:	7aba      	ldrb	r2, [r7, #10]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <custom_character_dealer+0xb4>)
 800115e:	4413      	add	r3, r2
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	9100      	str	r1, [sp, #0]
 8001164:	462b      	mov	r3, r5
 8001166:	4622      	mov	r2, r4
 8001168:	4601      	mov	r1, r0
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <custom_character_dealer+0xb8>)
 800116c:	f000 fe15 	bl	8001d9a <u8g2_DrawXBM>
				u8g2_SendBuffer(&u8g2);
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <custom_character_dealer+0xb8>)
 8001172:	f000 ff5b 	bl	800202c <u8g2_SendBuffer>
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <custom_character_dealer+0xb8>)
 8001178:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800117c:	b2da      	uxtb	r2, r3
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	4413      	add	r3, r2
 8001182:	73bb      	strb	r3, [r7, #14]
 8001184:	e006      	b.n	8001194 <custom_character_dealer+0x94>
				//trocando os caracteres especiais por um espaço em branco pra bater com a conta de espaço em tela
				//é um custom caracter
				//ele foi definido pelo usuario
				//ele deve ser impresso
			}else{
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <custom_character_dealer+0xb8>)
 8001188:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800118c:	b2da      	uxtb	r2, r3
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	4413      	add	r3, r2
 8001192:	73bb      	strb	r3, [r7, #14]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1bd      	bne.n	8001122 <custom_character_dealer+0x22>
			}
	}

}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}
 80011b0:	200005f4 	.word	0x200005f4
 80011b4:	200005f8 	.word	0x200005f8
 80011b8:	20000434 	.word	0x20000434

080011bc <lcd_print>:


void lcd_print(uint8_t *txt) {
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b0bf      	sub	sp, #252	; 0xfc
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t v_cursor[2];
	uint8_t mask[MASK_BUFFER];
	bool enable;


	if (text_invertion) {
 80011ca:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <lcd_print+0x22c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d061      	beq.n	8001296 <lcd_print+0xda>
		if (text_wrap) {
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <lcd_print+0x230>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d03a      	beq.n	8001250 <lcd_print+0x94>
			str_warper(&wrap, txt);
 80011da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff feaf 	bl	8000f44 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80011ec:	e024      	b.n	8001238 <lcd_print+0x7c>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));

				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80011ee:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <lcd_print+0x234>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b298      	uxth	r0, r3
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <lcd_print+0x234>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80011fa:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80011fe:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	2300      	movs	r3, #0
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2300      	movs	r3, #0
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2320      	movs	r3, #32
 800121e:	4622      	mov	r2, r4
 8001220:	4601      	mov	r1, r0
 8001222:	4874      	ldr	r0, [pc, #464]	; (80013f4 <lcd_print+0x238>)
 8001224:	f001 f85c 	bl	80022e0 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8001228:	4872      	ldr	r0, [pc, #456]	; (80013f4 <lcd_print+0x238>)
 800122a:	f000 feff 	bl	800202c <u8g2_SendBuffer>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800122e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001232:	3301      	adds	r3, #1
 8001234:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001238:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800123c:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001240:	429a      	cmp	r2, r3
 8001242:	d9d4      	bls.n	80011ee <lcd_print+0x32>
				 } else {
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
			clean_it(wrap.wrap_str);
 8001244:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff4b 	bl	80010e4 <clean_it>
				custom_character_dealer(txt);
			}
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}
}
 800124e:	e0c6      	b.n	80013de <lcd_print+0x222>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <lcd_print+0x234>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b299      	uxth	r1, r3
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <lcd_print+0x234>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	2300      	movs	r3, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2300      	movs	r3, #0
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2320      	movs	r3, #32
 800126e:	4861      	ldr	r0, [pc, #388]	; (80013f4 <lcd_print+0x238>)
 8001270:	f001 f836 	bl	80022e0 <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8001274:	485f      	ldr	r0, [pc, #380]	; (80013f4 <lcd_print+0x238>)
 8001276:	f000 fed9 	bl	800202c <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	485d      	ldr	r0, [pc, #372]	; (80013f4 <lcd_print+0x238>)
 800127e:	f001 ff3d 	bl	80030fc <u8g2_GetStrWidth>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <lcd_print+0x234>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	b2cb      	uxtb	r3, r1
 800128c:	4413      	add	r3, r2
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <lcd_print+0x234>)
 8001292:	701a      	strb	r2, [r3, #0]
}
 8001294:	e0a3      	b.n	80013de <lcd_print+0x222>
		if (text_wrap) {
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <lcd_print+0x230>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d072      	beq.n	8001384 <lcd_print+0x1c8>
			str_warper(&wrap, txt);
 800129e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe4d 	bl	8000f44 <str_warper>
			if (wrap.wrap_times) {
 80012aa:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d05a      	beq.n	8001368 <lcd_print+0x1ac>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80012b8:	e04a      	b.n	8001350 <lcd_print+0x194>
					clean_it(mask);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff10 	bl	80010e4 <clean_it>
					enable = Custom_Character_masker(wrap.wrap_str[aux],mask,v_cursor);
 80012c4:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80012c8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	188b      	adds	r3, r1, r2
 80012d8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80012dc:	f107 010c 	add.w	r1, r7, #12
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fec7 	bl	8001074 <Custom_Character_masker>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 80012ec:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80012f0:	b299      	uxth	r1, r3
 80012f2:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	483d      	ldr	r0, [pc, #244]	; (80013f4 <lcd_print+0x238>)
 80012fe:	f001 fdc1 	bl	8002e84 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 8001302:	483c      	ldr	r0, [pc, #240]	; (80013f4 <lcd_print+0x238>)
 8001304:	f000 fe92 	bl	800202c <u8g2_SendBuffer>
					if(enable){
 8001308:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <lcd_print+0x16e>
						custom_character_dealer(wrap.wrap_str[aux]);
 8001310:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001314:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00da      	lsls	r2, r3, #3
 8001320:	1ad2      	subs	r2, r2, r3
 8001322:	188b      	adds	r3, r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff feeb 	bl	8001100 <custom_character_dealer>
					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <lcd_print+0x234>)
 800132c:	785a      	ldrb	r2, [r3, #1]
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <lcd_print+0x238>)
 8001330:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001334:	b2d9      	uxtb	r1, r3
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <lcd_print+0x23c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <lcd_print+0x234>)
 8001344:	705a      	strb	r2, [r3, #1]
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001346:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800134a:	3301      	adds	r3, #1
 800134c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001350:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001354:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001358:	429a      	cmp	r2, r3
 800135a:	d9ae      	bls.n	80012ba <lcd_print+0xfe>
				clean_it(wrap.wrap_str);
 800135c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff febf 	bl	80010e4 <clean_it>
}
 8001366:	e03a      	b.n	80013de <lcd_print+0x222>
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <lcd_print+0x234>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b299      	uxth	r1, r3
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <lcd_print+0x234>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <lcd_print+0x238>)
 8001378:	f001 fd84 	bl	8002e84 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 800137c:	481d      	ldr	r0, [pc, #116]	; (80013f4 <lcd_print+0x238>)
 800137e:	f000 fe55 	bl	800202c <u8g2_SendBuffer>
}
 8001382:	e02c      	b.n	80013de <lcd_print+0x222>
			enable = Custom_Character_masker(txt,mask,v_cursor);
 8001384:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fe70 	bl	8001074 <Custom_Character_masker>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 800139a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800139e:	b299      	uxth	r1, r3
 80013a0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <lcd_print+0x238>)
 80013ac:	f001 fd6a 	bl	8002e84 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <lcd_print+0x238>)
 80013b2:	f000 fe3b 	bl	800202c <u8g2_SendBuffer>
			if(enable){
 80013b6:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <lcd_print+0x208>
				custom_character_dealer(txt);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe9e 	bl	8001100 <custom_character_dealer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <lcd_print+0x238>)
 80013c8:	f001 fe98 	bl	80030fc <u8g2_GetStrWidth>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <lcd_print+0x234>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	b2cb      	uxtb	r3, r1
 80013d6:	4413      	add	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <lcd_print+0x234>)
 80013dc:	701a      	strb	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	37ec      	adds	r7, #236	; 0xec
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200005f1 	.word	0x200005f1
 80013ec:	200005f2 	.word	0x200005f2
 80013f0:	200005f4 	.word	0x200005f4
 80013f4:	20000434 	.word	0x20000434
 80013f8:	2000022f 	.word	0x2000022f

080013fc <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001402:	220a      	movs	r2, #10
 8001404:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <Kpd_Irqv_Init+0x54>)
 800140e:	2217      	movs	r2, #23
 8001410:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001414:	2200      	movs	r2, #0
 8001416:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <Kpd_Irqv_Init+0x54>)
 800141a:	2217      	movs	r2, #23
 800141c:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001420:	2200      	movs	r2, #0
 8001422:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001426:	2217      	movs	r2, #23
 8001428:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <Kpd_Irqv_Init+0x54>)
 800142c:	2200      	movs	r2, #0
 800142e:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001432:	2217      	movs	r2, #23
 8001434:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <Kpd_Irqv_Init+0x54>)
 800143e:	2217      	movs	r2, #23
 8001440:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <Kpd_Irqv_Init+0x54>)
 8001444:	2200      	movs	r2, #0
 8001446:	729a      	strb	r2, [r3, #10]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000668 	.word	0x20000668

08001454 <SystickCallback>:

void SystickCallback(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e01b      	b.n	8001498 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <SystickCallback+0x54>)
 8001464:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <SystickCallback+0x54>)
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 ffea 	bl	8004452 <HAL_NVIC_EnableIRQ>
 800147e:	e008      	b.n	8001492 <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <SystickCallback+0x54>)
 8001484:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001488:	3a01      	subs	r2, #1
 800148a:	b2d1      	uxtb	r1, r2
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <SystickCallback+0x54>)
 800148e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	3301      	adds	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d9e0      	bls.n	8001460 <SystickCallback+0xc>
		}
	}
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000668 	.word	0x20000668

080014ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b10      	cmp	r3, #16
 80014ba:	d10d      	bne.n	80014d8 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80014be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ffd3 	bl	800446e <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x34>)
 80014ca:	22f4      	movs	r2, #244	; 0xf4
 80014cc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x38>)
 80014d4:	f003 f986 	bl	80047e4 <HAL_GPIO_TogglePin>
	}
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000668 	.word	0x20000668
 80014e4:	40011000 	.word	0x40011000

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f002 fdfe 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f80e 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 f988 	bl	8001808 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80014f8:	f00a feec 	bl	800c2d4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80014fc:	f000 f862 	bl	80015c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001500:	f000 f936 	bl	8001770 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001504:	f000 f894 	bl	8001630 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8001508:	f7fe fea6 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800150c:	bf30      	wfi
 800150e:	e7fd      	b.n	800150c <main+0x24>

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00b fbd2 	bl	800ccc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154e:	2301      	movs	r3, #1
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f004 fe32 	bl	80061d0 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001572:	f000 f9fd 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f89e 	bl	80066d4 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800159e:	f000 f9e7 	bl	8001970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015a2:	2310      	movs	r3, #16
 80015a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 f9f7 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015b8:	f000 f9da 	bl	8001970 <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3750      	adds	r7, #80	; 0x50
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI1_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <MX_SPI1_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI1_Init+0x64>)
 80015f8:	2208      	movs	r2, #8
 80015fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI1_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_SPI1_Init+0x64>)
 8001616:	f005 fa79 	bl	8006b0c <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001620:	f000 f9a6 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000674 	.word	0x20000674
 800162c:	40013000 	.word	0x40013000

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2220      	movs	r2, #32
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00b fb2d 	bl	800ccc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MX_TIM1_Init+0x138>)
 8001670:	4a3e      	ldr	r2, [pc, #248]	; (800176c <MX_TIM1_Init+0x13c>)
 8001672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <MX_TIM1_Init+0x138>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_TIM1_Init+0x138>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <MX_TIM1_Init+0x138>)
 8001682:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <MX_TIM1_Init+0x138>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <MX_TIM1_Init+0x138>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <MX_TIM1_Init+0x138>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169a:	4833      	ldr	r0, [pc, #204]	; (8001768 <MX_TIM1_Init+0x138>)
 800169c:	f005 fc9c 	bl	8006fd8 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016a6:	f000 f963 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b4:	4619      	mov	r1, r3
 80016b6:	482c      	ldr	r0, [pc, #176]	; (8001768 <MX_TIM1_Init+0x138>)
 80016b8:	f006 f882 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c2:	f000 f955 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <MX_TIM1_Init+0x138>)
 80016c8:	f005 fd56 	bl	8007178 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016d2:	f000 f94d 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	4820      	ldr	r0, [pc, #128]	; (8001768 <MX_TIM1_Init+0x138>)
 80016e6:	f006 fbf7 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016f0:	f000 f93e 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	; 0x60
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_TIM1_Init+0x138>)
 800171a:	f005 ff93 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001724:	f000 f924 	bl	8001970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM1_Init+0x138>)
 800174c:	f006 fc22 	bl	8007f94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001756:	f000 f90b 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM1_Init+0x138>)
 800175c:	f000 f9c6 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3758      	adds	r7, #88	; 0x58
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200006cc 	.word	0x200006cc
 800176c:	40012c00 	.word	0x40012c00

08001770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_TIM2_Init+0x94>)
 800178e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_TIM2_Init+0x94>)
 8001796:	f64e 2260 	movw	r2, #60000	; 0xea60
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_TIM2_Init+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_TIM2_Init+0x94>)
 80017a4:	221d      	movs	r2, #29
 80017a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_TIM2_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_TIM2_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b4:	4813      	ldr	r0, [pc, #76]	; (8001804 <MX_TIM2_Init+0x94>)
 80017b6:	f005 fc0f 	bl	8006fd8 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017c0:	f000 f8d6 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_TIM2_Init+0x94>)
 80017d2:	f005 fff5 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017dc:	f000 f8c8 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_TIM2_Init+0x94>)
 80017ee:	f006 fb73 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017f8:	f000 f8ba 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000714 	.word	0x20000714

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <MX_GPIO_Init+0x154>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <MX_GPIO_Init+0x154>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b4c      	ldr	r3, [pc, #304]	; (800195c <MX_GPIO_Init+0x154>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	4b49      	ldr	r3, [pc, #292]	; (800195c <MX_GPIO_Init+0x154>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <MX_GPIO_Init+0x154>)
 800183a:	f043 0320 	orr.w	r3, r3, #32
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b46      	ldr	r3, [pc, #280]	; (800195c <MX_GPIO_Init+0x154>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <MX_GPIO_Init+0x154>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <MX_GPIO_Init+0x154>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <MX_GPIO_Init+0x154>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <MX_GPIO_Init+0x154>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a3c      	ldr	r2, [pc, #240]	; (800195c <MX_GPIO_Init+0x154>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b3a      	ldr	r3, [pc, #232]	; (800195c <MX_GPIO_Init+0x154>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4837      	ldr	r0, [pc, #220]	; (8001960 <MX_GPIO_Init+0x158>)
 8001884:	f002 ff96 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	2110      	movs	r1, #16
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <MX_GPIO_Init+0x15c>)
 800188e:	f002 ff91 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4833      	ldr	r0, [pc, #204]	; (8001964 <MX_GPIO_Init+0x15c>)
 8001898:	f002 ff8c 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2103      	movs	r1, #3
 80018a0:	4831      	ldr	r0, [pc, #196]	; (8001968 <MX_GPIO_Init+0x160>)
 80018a2:	f002 ff87 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	4828      	ldr	r0, [pc, #160]	; (8001960 <MX_GPIO_Init+0x158>)
 80018c0:	f002 fdf4 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c4:	2310      	movs	r3, #16
 80018c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	4822      	ldr	r0, [pc, #136]	; (8001964 <MX_GPIO_Init+0x15c>)
 80018dc:	f002 fde6 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	481b      	ldr	r0, [pc, #108]	; (8001964 <MX_GPIO_Init+0x15c>)
 80018f8:	f002 fdd8 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018fc:	2303      	movs	r3, #3
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2302      	movs	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	4815      	ldr	r0, [pc, #84]	; (8001968 <MX_GPIO_Init+0x160>)
 8001914:	f002 fdca 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001918:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800191c:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_GPIO_Init+0x164>)
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	480e      	ldr	r0, [pc, #56]	; (8001968 <MX_GPIO_Init+0x160>)
 800192e:	f002 fdbd 	bl	80044ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	200a      	movs	r0, #10
 8001938:	f002 fd6f 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800193c:	200a      	movs	r0, #10
 800193e:	f002 fd88 	bl	8004452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2017      	movs	r0, #23
 8001948:	f002 fd67 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800194c:	2017      	movs	r0, #23
 800194e:	f002 fd80 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40011000 	.word	0x40011000
 8001964:	40010800 	.word	0x40010800
 8001968:	40010c00 	.word	0x40010c00
 800196c:	10210000 	.word	0x10210000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	e7fe      	b.n	8001978 <Error_Handler+0x8>
	...

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_MspInit+0x7c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_MspInit+0x7c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_MspInit+0x7c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_MspInit+0x7c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_MspInit+0x7c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_MspInit+0x7c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2005      	movs	r0, #5
 80019b8:	f002 fd2f 	bl	800441a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019bc:	2005      	movs	r0, #5
 80019be:	f002 fd48 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2005      	movs	r0, #5
 80019c8:	f002 fd27 	bl	800441a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019cc:	2005      	movs	r0, #5
 80019ce:	f002 fd40 	bl	8004452 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_MspInit+0x80>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_MspInit+0x80>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_SPI_MspInit+0x70>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d123      	bne.n	8001a68 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_SPI_MspInit+0x74>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a50:	23a0      	movs	r3, #160	; 0xa0
 8001a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_SPI_MspInit+0x78>)
 8001a64:	f002 fd22 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_TIM_Base_MspInit+0x68>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aa6:	e018      	b.n	8001ada <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201c      	movs	r0, #28
 8001ad0:	f002 fca3 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad4:	201c      	movs	r0, #28
 8001ad6:	f002 fcbc 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_TIM_MspPostInit+0x5c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d118      	bne.n	8001b3e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b3a:	f002 fcb7 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001b9a:	f7ff fc5b 	bl	8001454 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f002 faeb 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001bb6:	2010      	movs	r0, #16
 8001bb8:	f002 fe2e 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001bc6:	f002 ff70 	bl	8004aaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200019fc 	.word	0x200019fc

08001bd4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bda:	f002 ff66 	bl	8004aaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200019fc 	.word	0x200019fc

08001be8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001bec:	2020      	movs	r0, #32
 8001bee:	f002 fe13 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 8001bf2:	2040      	movs	r0, #64	; 0x40
 8001bf4:	f002 fe10 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001bf8:	2080      	movs	r0, #128	; 0x80
 8001bfa:	f002 fe0d 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001bfe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c02:	f002 fe09 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001c06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c0a:	f002 fe05 	bl	8004818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM2_IRQHandler+0x10>)
 8001c1a:	f005 fc0b 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000714 	.word	0x20000714

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f00a fffe 	bl	800cc58 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20005000 	.word	0x20005000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	2000075c 	.word	0x2000075c
 8001c90:	20001f18 	.word	0x20001f18

08001c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b088      	sub	sp, #32
 8001cc2:	af02      	add	r7, sp, #8
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	4608      	mov	r0, r1
 8001cc8:	4611      	mov	r1, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	817b      	strh	r3, [r7, #10]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	813b      	strh	r3, [r7, #8]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001cde:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001ce0:	7dbb      	ldrb	r3, [r7, #22]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001cee:	897a      	ldrh	r2, [r7, #10]
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	4603      	mov	r3, r0
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f001 fbc8 	bl	800349a <u8g2_IsIntersection>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d040      	beq.n	8001d92 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001d14:	e035      	b.n	8001d82 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	7dba      	ldrb	r2, [r7, #22]
 8001d28:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2301      	movs	r3, #1
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f001 fa76 	bl	8003228 <u8g2_DrawHVLine>
 8001d3c:	e010      	b.n	8001d60 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	7d7a      	ldrb	r2, [r7, #21]
 8001d4c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001d50:	893a      	ldrh	r2, [r7, #8]
 8001d52:	8979      	ldrh	r1, [r7, #10]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f001 fa64 	bl	8003228 <u8g2_DrawHVLine>
    }
    x++;
 8001d60:	897b      	ldrh	r3, [r7, #10]
 8001d62:	3301      	adds	r3, #1
 8001d64:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
      b++;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1c6      	bne.n	8001d16 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7dba      	ldrb	r2, [r7, #22]
 8001d8c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001d90:	e000      	b.n	8001d94 <u8g2_DrawHXBM+0xd6>
    return;
 8001d92:	bf00      	nop
}
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b088      	sub	sp, #32
 8001d9e:	af02      	add	r7, sp, #8
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	4608      	mov	r0, r1
 8001da4:	4611      	mov	r1, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	817b      	strh	r3, [r7, #10]
 8001dac:	460b      	mov	r3, r1
 8001dae:	813b      	strh	r3, [r7, #8]
 8001db0:	4613      	mov	r3, r2
 8001db2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001db8:	8afb      	ldrh	r3, [r7, #22]
 8001dba:	3307      	adds	r3, #7
 8001dbc:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001dbe:	8afb      	ldrh	r3, [r7, #22]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001dc4:	897a      	ldrh	r2, [r7, #10]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b298      	uxth	r0, r3
 8001dcc:	893a      	ldrh	r2, [r7, #8]
 8001dce:	8c3b      	ldrh	r3, [r7, #32]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	893a      	ldrh	r2, [r7, #8]
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f001 fb5c 	bl	800349a <u8g2_IsIntersection>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001de8:	e012      	b.n	8001e10 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001dea:	88f8      	ldrh	r0, [r7, #6]
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4603      	mov	r3, r0
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff ff61 	bl	8001cbe <u8g2_DrawHXBM>
    bitmap += blen;
 8001dfc:	8afb      	ldrh	r3, [r7, #22]
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	4413      	add	r3, r2
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001e04:	893b      	ldrh	r3, [r7, #8]
 8001e06:	3301      	adds	r3, #1
 8001e08:	813b      	strh	r3, [r7, #8]
    h--;
 8001e0a:	8c3b      	ldrh	r3, [r7, #32]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001e10:	8c3b      	ldrh	r3, [r7, #32]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e9      	bne.n	8001dea <u8g2_DrawXBM+0x50>
 8001e16:	e000      	b.n	8001e1a <u8g2_DrawXBM+0x80>
    return;
 8001e18:	bf00      	nop
  }
}
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	460b      	mov	r3, r1
 8001e34:	813b      	strh	r3, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001e3a:	897a      	ldrh	r2, [r7, #10]
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b298      	uxth	r0, r3
 8001e42:	893a      	ldrh	r2, [r7, #8]
 8001e44:	8b3b      	ldrh	r3, [r7, #24]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4603      	mov	r3, r0
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f001 fb21 	bl	800349a <u8g2_IsIntersection>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001e5e:	e00d      	b.n	8001e7c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	893a      	ldrh	r2, [r7, #8]
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	2000      	movs	r0, #0
 8001e68:	9000      	str	r0, [sp, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f001 f9dc 	bl	8003228 <u8g2_DrawHVLine>
    y++;    
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	813b      	strh	r3, [r7, #8]
    h--;
 8001e76:	8b3b      	ldrh	r3, [r7, #24]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001e7c:	8b3b      	ldrh	r3, [r7, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ee      	bne.n	8001e60 <u8g2_DrawBox+0x40>
 8001e82:	e000      	b.n	8001e86 <u8g2_DrawBox+0x66>
    return;
 8001e84:	bf00      	nop
  }
}
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	817b      	strh	r3, [r7, #10]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	813b      	strh	r3, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001eaa:	897a      	ldrh	r2, [r7, #10]
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b298      	uxth	r0, r3
 8001eb2:	893a      	ldrh	r2, [r7, #8]
 8001eb4:	8c3b      	ldrh	r3, [r7, #32]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 fae9 	bl	800349a <u8g2_IsIntersection>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d037      	beq.n	8001f3e <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	9000      	str	r0, [sp, #0]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f001 f9a5 	bl	8003228 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001ede:	8c3b      	ldrh	r3, [r7, #32]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d92d      	bls.n	8001f40 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001ee4:	8c3b      	ldrh	r3, [r7, #32]
 8001ee6:	3b02      	subs	r3, #2
 8001ee8:	843b      	strh	r3, [r7, #32]
    y++;
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	3301      	adds	r3, #1
 8001eee:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001ef0:	8c3b      	ldrh	r3, [r7, #32]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01a      	beq.n	8001f2c <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001ef6:	8c3b      	ldrh	r3, [r7, #32]
 8001ef8:	893a      	ldrh	r2, [r7, #8]
 8001efa:	8979      	ldrh	r1, [r7, #10]
 8001efc:	2001      	movs	r0, #1
 8001efe:	9000      	str	r0, [sp, #0]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f001 f991 	bl	8003228 <u8g2_DrawHVLine>
      x+=w;
 8001f06:	897a      	ldrh	r2, [r7, #10]
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	817b      	strh	r3, [r7, #10]
      x--;
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001f14:	8c3b      	ldrh	r3, [r7, #32]
 8001f16:	893a      	ldrh	r2, [r7, #8]
 8001f18:	8979      	ldrh	r1, [r7, #10]
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	9000      	str	r0, [sp, #0]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f001 f982 	bl	8003228 <u8g2_DrawHVLine>
      y+=h;
 8001f24:	893a      	ldrh	r2, [r7, #8]
 8001f26:	8c3b      	ldrh	r3, [r7, #32]
 8001f28:	4413      	add	r3, r2
 8001f2a:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	893a      	ldrh	r2, [r7, #8]
 8001f30:	8af9      	ldrh	r1, [r7, #22]
 8001f32:	2000      	movs	r0, #0
 8001f34:	9000      	str	r0, [sp, #0]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f001 f976 	bl	8003228 <u8g2_DrawHVLine>
 8001f3c:	e000      	b.n	8001f40 <u8g2_DrawFrame+0xb4>
    return;
 8001f3e:	bf00      	nop
  }
}
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	7c1b      	ldrb	r3, [r3, #16]
 8001f54:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a fea7 	bl	800ccc8 <memset>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	7c1b      	ldrb	r3, [r3, #16]
 8001f98:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	89ba      	ldrh	r2, [r7, #12]
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001fb0:	89bb      	ldrh	r3, [r7, #12]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001fbe:	7bf9      	ldrb	r1, [r7, #15]
 8001fc0:	78ba      	ldrb	r2, [r7, #2]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f001 ff88 	bl	8003ee0 <u8x8_DrawTile>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fea:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7c5b      	ldrb	r3, [r3, #17]
 8001ffa:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001ffc:	7bba      	ldrb	r2, [r7, #14]
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffbd 	bl	8001f82 <u8g2_send_tile_row>
    src_row++;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	3301      	adds	r3, #1
 8002012:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	429a      	cmp	r2, r3
 800201a:	d203      	bcs.n	8002024 <u8g2_send_buffer+0x4c>
 800201c:	7bba      	ldrb	r2, [r7, #14]
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3eb      	bcc.n	8001ffc <u8g2_send_buffer+0x24>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffcf 	bl	8001fd8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 ffb2 	bl	8003fa4 <u8x8_RefreshDisplay>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff5b 	bl	8001f46 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002090:	2100      	movs	r1, #0
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffd8 	bl	8002048 <u8g2_SetBufferCurrTileRow>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff95 	bl	8001fd8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020b4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4413      	add	r3, r2
 80020c0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	7c5b      	ldrb	r3, [r3, #17]
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d304      	bcc.n	80020d8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f001 ff68 	bl	8003fa4 <u8x8_RefreshDisplay>
    return 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e00d      	b.n	80020f4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff2f 	bl	8001f46 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffab 	bl	8002048 <u8g2_SetBufferCurrTileRow>
  return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8002116:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002118:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800211a:	2308      	movs	r3, #8
 800211c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800212c:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002134:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800213c:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8002148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800214a:	3301      	adds	r3, #1
 800214c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800214e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002150:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8002152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002154:	3301      	adds	r3, #1
 8002156:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8002158:	897b      	ldrh	r3, [r7, #10]
 800215a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800215c:	8b7a      	ldrh	r2, [r7, #26]
 800215e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8002164:	8b7a      	ldrh	r2, [r7, #26]
 8002166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 800216c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800216e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	8c3b      	ldrh	r3, [r7, #32]
 800217a:	4413      	add	r3, r2
 800217c:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800217e:	893b      	ldrh	r3, [r7, #8]
 8002180:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	4798      	blx	r3
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	8afb      	ldrh	r3, [r7, #22]
 8002190:	4413      	add	r3, r2
 8002192:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8002194:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002198:	b29b      	uxth	r3, r3
 800219a:	8afa      	ldrh	r2, [r7, #22]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80021a0:	8afa      	ldrh	r2, [r7, #22]
 80021a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80021a8:	8afa      	ldrh	r2, [r7, #22]
 80021aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80021b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	b21b      	sxth	r3, r3
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80021c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80021c6:	440b      	add	r3, r1
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 80021d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d067      	beq.n	80022a8 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 80021d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021dc:	429a      	cmp	r2, r3
 80021de:	d109      	bne.n	80021f4 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80021e0:	7f7b      	ldrb	r3, [r7, #29]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f001 f90a 	bl	8003408 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80021f4:	8b38      	ldrh	r0, [r7, #24]
 80021f6:	8afa      	ldrh	r2, [r7, #22]
 80021f8:	8b79      	ldrh	r1, [r7, #26]
 80021fa:	8abb      	ldrh	r3, [r7, #20]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4603      	mov	r3, r0
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fe43 	bl	8001e8c <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8002206:	7f7b      	ldrb	r3, [r7, #29]
 8002208:	4619      	mov	r1, r3
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f001 f8fc 	bl	8003408 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	f003 0318 	and.w	r3, r3, #24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d042      	beq.n	80022a0 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800221a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	429a      	cmp	r2, r3
 8002224:	d13c      	bne.n	80022a0 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	10db      	asrs	r3, r3, #3
 800222a:	b29b      	uxth	r3, r3
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8002232:	8a7b      	ldrh	r3, [r7, #18]
 8002234:	3b01      	subs	r3, #1
 8002236:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8002238:	2300      	movs	r3, #0
 800223a:	847b      	strh	r3, [r7, #34]	; 0x22
 800223c:	e02c      	b.n	8002298 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800223e:	8b7a      	ldrh	r2, [r7, #26]
 8002240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002242:	4413      	add	r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	8a7b      	ldrh	r3, [r7, #18]
 8002248:	4413      	add	r3, r2
 800224a:	b299      	uxth	r1, r3
 800224c:	8afa      	ldrh	r2, [r7, #22]
 800224e:	8abb      	ldrh	r3, [r7, #20]
 8002250:	4413      	add	r3, r2
 8002252:	b29a      	uxth	r2, r3
 8002254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002256:	4413      	add	r3, r2
 8002258:	b29a      	uxth	r2, r3
 800225a:	8a7b      	ldrh	r3, [r7, #18]
 800225c:	4413      	add	r3, r2
 800225e:	b29a      	uxth	r2, r3
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f001 f86b 	bl	800333e <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8002268:	8b7a      	ldrh	r2, [r7, #26]
 800226a:	8b3b      	ldrh	r3, [r7, #24]
 800226c:	4413      	add	r3, r2
 800226e:	b29a      	uxth	r2, r3
 8002270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002272:	4413      	add	r3, r2
 8002274:	b29a      	uxth	r2, r3
 8002276:	8a7b      	ldrh	r3, [r7, #18]
 8002278:	4413      	add	r3, r2
 800227a:	b299      	uxth	r1, r3
 800227c:	8afa      	ldrh	r2, [r7, #22]
 800227e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	8a7b      	ldrh	r3, [r7, #18]
 8002286:	4413      	add	r3, r2
 8002288:	b29a      	uxth	r2, r3
 800228a:	8abb      	ldrh	r3, [r7, #20]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f001 f86f 	bl	8003370 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8002292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002294:	3301      	adds	r3, #1
 8002296:	847b      	strh	r3, [r7, #34]	; 0x22
 8002298:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800229a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800229c:	429a      	cmp	r2, r3
 800229e:	d3ce      	bcc.n	800223e <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80022a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a2:	3b01      	subs	r3, #1
 80022a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80022a6:	e757      	b.n	8002158 <u8g2_DrawButtonFrame+0x5c>
      break;
 80022a8:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d011      	beq.n	80022d8 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80022b4:	2102      	movs	r1, #2
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f001 f8a6 	bl	8003408 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80022bc:	8b38      	ldrh	r0, [r7, #24]
 80022be:	8afa      	ldrh	r2, [r7, #22]
 80022c0:	8b79      	ldrh	r1, [r7, #26]
 80022c2:	8abb      	ldrh	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4603      	mov	r3, r0
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff fda9 	bl	8001e20 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 80022ce:	7f7b      	ldrb	r3, [r7, #29]
 80022d0:	4619      	mov	r1, r3
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f001 f898 	bl	8003408 <u8g2_SetDrawColor>
  }
}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80022fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 ff11 	bl	8003124 <u8g2_GetUTF8Width>
 8002302:	4603      	mov	r3, r0
 8002304:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8002306:	2300      	movs	r3, #0
 8002308:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	3301      	adds	r3, #1
 8002318:	0fda      	lsrs	r2, r3, #31
 800231a:	4413      	add	r3, r2
 800231c:	105b      	asrs	r3, r3, #1
 800231e:	425b      	negs	r3, r3
 8002320:	b29a      	uxth	r2, r3
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	4413      	add	r3, r2
 8002326:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8002328:	8afa      	ldrh	r2, [r7, #22]
 800232a:	8c3b      	ldrh	r3, [r7, #32]
 800232c:	429a      	cmp	r2, r3
 800232e:	d20d      	bcs.n	800234c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800233a:	8c3a      	ldrh	r2, [r7, #32]
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	0fda      	lsrs	r2, r3, #31
 8002342:	4413      	add	r3, r2
 8002344:	105b      	asrs	r3, r3, #1
 8002346:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8002348:	8c3b      	ldrh	r3, [r7, #32]
 800234a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 800234c:	2101      	movs	r1, #1
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fcda 	bl	8002d08 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002354:	893a      	ldrh	r2, [r7, #8]
 8002356:	8979      	ldrh	r1, [r7, #10]
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fd92 	bl	8002e84 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8002360:	897a      	ldrh	r2, [r7, #10]
 8002362:	8abb      	ldrh	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b299      	uxth	r1, r3
 8002368:	88f8      	ldrh	r0, [r7, #6]
 800236a:	893a      	ldrh	r2, [r7, #8]
 800236c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	8afb      	ldrh	r3, [r7, #22]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4603      	mov	r3, r0
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7ff febe 	bl	80020fc <u8g2_DrawButtonFrame>
  
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fe71 	bl	8002078 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fe82 	bl	80020a0 <u8g2_NextPage>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f9      	bne.n	8002396 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80023a2:	2100      	movs	r1, #0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe4f 	bl	8002048 <u8g2_SetBufferCurrTileRow>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2208      	movs	r2, #8
 80023c0:	701a      	strb	r2, [r3, #0]
  return buf;
 80023c2:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000760 	.word	0x20000760

080023d4 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 80023ea:	490c      	ldr	r1, [pc, #48]	; (800241c <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f001 fe39 	bl	8004064 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 80023f2:	f107 0313 	add.w	r3, r7, #19
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ffdc 	bl	80023b4 <u8g2_m_24_8_f>
 80023fc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80023fe:	7cfa      	ldrb	r2, [r7, #19]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8002406:	6979      	ldr	r1, [r7, #20]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f001 f92f 	bl	800366c <u8g2_SetupBuffer>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08003bfd 	.word	0x08003bfd
 800241c:	08003ddd 	.word	0x08003ddd
 8002420:	080034f1 	.word	0x080034f1

08002424 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	781b      	ldrb	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	81fb      	strh	r3, [r7, #14]
	font++;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3301      	adds	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b29a      	uxth	r2, r3
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	4413      	add	r3, r2
 8002476:	81fb      	strh	r3, [r7, #14]
	return pos;
 8002478:	89fb      	ldrh	r3, [r7, #14]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800248e:	2100      	movs	r1, #0
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f7ff ffc7 	bl	8002424 <u8g2_font_get_byte>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800249e:	2101      	movs	r1, #1
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f7ff ffbf 	bl	8002424 <u8g2_font_get_byte>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80024ae:	2102      	movs	r1, #2
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	f7ff ffb7 	bl	8002424 <u8g2_font_get_byte>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80024be:	2103      	movs	r1, #3
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7ff ffaf 	bl	8002424 <u8g2_font_get_byte>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80024ce:	2104      	movs	r1, #4
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f7ff ffa7 	bl	8002424 <u8g2_font_get_byte>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80024de:	2105      	movs	r1, #5
 80024e0:	6838      	ldr	r0, [r7, #0]
 80024e2:	f7ff ff9f 	bl	8002424 <u8g2_font_get_byte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80024ee:	2106      	movs	r1, #6
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f7ff ff97 	bl	8002424 <u8g2_font_get_byte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80024fe:	2107      	movs	r1, #7
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff ff8f 	bl	8002424 <u8g2_font_get_byte>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800250e:	2108      	movs	r1, #8
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f7ff ff87 	bl	8002424 <u8g2_font_get_byte>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800251e:	2109      	movs	r1, #9
 8002520:	6838      	ldr	r0, [r7, #0]
 8002522:	f7ff ff7f 	bl	8002424 <u8g2_font_get_byte>
 8002526:	4603      	mov	r3, r0
 8002528:	b25a      	sxtb	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800252e:	210a      	movs	r1, #10
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f7ff ff77 	bl	8002424 <u8g2_font_get_byte>
 8002536:	4603      	mov	r3, r0
 8002538:	b25a      	sxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 800253e:	210b      	movs	r1, #11
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f7ff ff6f 	bl	8002424 <u8g2_font_get_byte>
 8002546:	4603      	mov	r3, r0
 8002548:	b25a      	sxtb	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 800254e:	210c      	movs	r1, #12
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f7ff ff67 	bl	8002424 <u8g2_font_get_byte>
 8002556:	4603      	mov	r3, r0
 8002558:	b25a      	sxtb	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800255e:	210d      	movs	r1, #13
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f7ff ff5f 	bl	8002424 <u8g2_font_get_byte>
 8002566:	4603      	mov	r3, r0
 8002568:	b25a      	sxtb	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 800256e:	210e      	movs	r1, #14
 8002570:	6838      	ldr	r0, [r7, #0]
 8002572:	f7ff ff57 	bl	8002424 <u8g2_font_get_byte>
 8002576:	4603      	mov	r3, r0
 8002578:	b25a      	sxtb	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800257e:	210f      	movs	r1, #15
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f7ff ff4f 	bl	8002424 <u8g2_font_get_byte>
 8002586:	4603      	mov	r3, r0
 8002588:	b25a      	sxtb	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 800258e:	2110      	movs	r1, #16
 8002590:	6838      	ldr	r0, [r7, #0]
 8002592:	f7ff ff47 	bl	8002424 <u8g2_font_get_byte>
 8002596:	4603      	mov	r3, r0
 8002598:	b25a      	sxtb	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800259e:	2111      	movs	r1, #17
 80025a0:	6838      	ldr	r0, [r7, #0]
 80025a2:	f7ff ff50 	bl	8002446 <u8g2_font_get_word>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 80025ae:	2113      	movs	r1, #19
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f7ff ff48 	bl	8002446 <u8g2_font_get_word>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 80025be:	2115      	movs	r1, #21
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f7ff ff40 	bl	8002446 <u8g2_font_get_word>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	82da      	strh	r2, [r3, #22]
#endif
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	fa42 f303 	asr.w	r3, r2, r3
 80025f8:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 80025fe:	7bba      	ldrb	r2, [r7, #14]
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	4413      	add	r3, r2
 8002604:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	2b07      	cmp	r3, #7
 800260a:	d91a      	bls.n	8002642 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 800260c:	2308      	movs	r3, #8
 800260e:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8002610:	7b3a      	ldrb	r2, [r7, #12]
 8002612:	7b7b      	ldrb	r3, [r7, #13]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4313      	orrs	r3, r2
 8002638:	b25b      	sxtb	r3, r3
 800263a:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	3b08      	subs	r3, #8
 8002640:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	b2da      	uxtb	r2, r3
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	4013      	ands	r3, r2
 8002656:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7bba      	ldrb	r2, [r7, #14]
 800265c:	731a      	strb	r2, [r3, #12]
	return val;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffab 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	3b01      	subs	r3, #1
 800268c:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 800268e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	73bb      	strb	r3, [r7, #14]
	v -= d;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	73fb      	strb	r3, [r7, #15]
	return v;
 80026a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 80026b0:	b490      	push	{r4, r7}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	80fb      	strh	r3, [r7, #6]
 80026c2:	4603      	mov	r3, r0
 80026c4:	717b      	strb	r3, [r7, #5]
 80026c6:	460b      	mov	r3, r1
 80026c8:	713b      	strb	r3, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d014      	beq.n	80026fe <u8g2_add_vector_y+0x4e>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	dc19      	bgt.n	800270c <u8g2_add_vector_y+0x5c>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <u8g2_add_vector_y+0x32>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <u8g2_add_vector_y+0x40>
 80026e0:	e014      	b.n	800270c <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 80026e2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	4413      	add	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
		break;
 80026ee:	e014      	b.n	800271a <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 80026f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4413      	add	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
		break;
 80026fc:	e00d      	b.n	800271a <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 80026fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002702:	b29b      	uxth	r3, r3
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	80fb      	strh	r3, [r7, #6]
		break;
 800270a:	e006      	b.n	800271a <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 800270c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002710:	b29b      	uxth	r3, r3
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	80fb      	strh	r3, [r7, #6]
		break;
 8002718:	bf00      	nop
	}
	return dy;
 800271a:	88fb      	ldrh	r3, [r7, #6]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bc90      	pop	{r4, r7}
 8002724:	4770      	bx	lr

08002726 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8002726:	b490      	push	{r4, r7}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4604      	mov	r4, r0
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4623      	mov	r3, r4
 8002736:	80fb      	strh	r3, [r7, #6]
 8002738:	4603      	mov	r3, r0
 800273a:	717b      	strb	r3, [r7, #5]
 800273c:	460b      	mov	r3, r1
 800273e:	713b      	strb	r3, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d014      	beq.n	8002774 <u8g2_add_vector_x+0x4e>
 800274a:	2b02      	cmp	r3, #2
 800274c:	dc19      	bgt.n	8002782 <u8g2_add_vector_x+0x5c>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <u8g2_add_vector_x+0x32>
 8002752:	2b01      	cmp	r3, #1
 8002754:	d007      	beq.n	8002766 <u8g2_add_vector_x+0x40>
 8002756:	e014      	b.n	8002782 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002758:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800275c:	b29a      	uxth	r2, r3
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4413      	add	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
		break;
 8002764:	e014      	b.n	8002790 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8002766:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800276a:	b29b      	uxth	r3, r3
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	80fb      	strh	r3, [r7, #6]
		break;
 8002772:	e00d      	b.n	8002790 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002774:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002778:	b29b      	uxth	r3, r3
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	80fb      	strh	r3, [r7, #6]
		break;
 8002780:	e006      	b.n	8002790 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8002782:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002786:	b29a      	uxth	r2, r3
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4413      	add	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
		break;
 800278e:	bf00      	nop
	}
	return dx;
 8002790:	88fb      	ldrh	r3, [r7, #6]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bc90      	pop	{r4, r7}
 800279a:	4770      	bx	lr

0800279c <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
 80027a8:	4613      	mov	r3, r2
 80027aa:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3360      	adds	r3, #96	; 0x60
 80027b0:	613b      	str	r3, [r7, #16]

	cnt = len;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80027bc:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80027c4:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027cc:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	7d7b      	ldrb	r3, [r7, #21]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 80027da:	7dfa      	ldrb	r2, [r7, #23]
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d201      	bcs.n	80027e6 <u8g2_font_decode_len+0x4a>
			current = cnt;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	88db      	ldrh	r3, [r3, #6]
 80027f0:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80027f2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80027f6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	7c1b      	ldrb	r3, [r3, #16]
 80027fe:	89b8      	ldrh	r0, [r7, #12]
 8002800:	f7ff ff91 	bl	8002726 <u8g2_add_vector_x>
 8002804:	4603      	mov	r3, r0
 8002806:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002808:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800280c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	7c1b      	ldrb	r3, [r3, #16]
 8002814:	8978      	ldrh	r0, [r7, #10]
 8002816:	f7ff ff4b 	bl	80026b0 <u8g2_add_vector_y>
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 800281e:	78bb      	ldrb	r3, [r7, #2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	7b9a      	ldrb	r2, [r3, #14]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 800282e:	7dbb      	ldrb	r3, [r7, #22]
 8002830:	b298      	uxth	r0, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	7c1b      	ldrb	r3, [r3, #16]
 8002836:	897a      	ldrh	r2, [r7, #10]
 8002838:	89b9      	ldrh	r1, [r7, #12]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4603      	mov	r3, r0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fcf2 	bl	8003228 <u8g2_DrawHVLine>
 8002844:	e013      	b.n	800286e <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	7bda      	ldrb	r2, [r3, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002858:	7dbb      	ldrb	r3, [r7, #22]
 800285a:	b298      	uxth	r0, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	7c1b      	ldrb	r3, [r3, #16]
 8002860:	897a      	ldrh	r2, [r7, #10]
 8002862:	89b9      	ldrh	r1, [r7, #12]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fcdd 	bl	8003228 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 800286e:	7dfa      	ldrb	r2, [r7, #23]
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	429a      	cmp	r2, r3
 8002874:	d309      	bcc.n	800288a <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002876:	7dfa      	ldrb	r2, [r7, #23]
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	757b      	strb	r3, [r7, #21]
		ly++;
 8002882:	7d3b      	ldrb	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002888:	e79d      	b.n	80027c6 <u8g2_font_decode_len+0x2a>
			break;
 800288a:	bf00      	nop
	}
	lx += cnt;
 800288c:	7d7a      	ldrb	r2, [r7, #21]
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	4413      	add	r3, r2
 8002892:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002894:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 800289c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	725a      	strb	r2, [r3, #9]

}
 80028a4:	bf00      	nop
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3360      	adds	r3, #96	; 0x60
 80028ba:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80028ce:	4619      	mov	r1, r3
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff fe80 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80028e4:	4619      	mov	r1, r3
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fe75 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b25a      	sxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	7b9b      	ldrb	r3, [r3, #14]
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	73da      	strb	r2, [r3, #15]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3360      	adds	r3, #96	; 0x60
 800292a:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffbc 	bl	80028ac <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800293a:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002942:	4619      	mov	r1, r3
 8002944:	6978      	ldr	r0, [r7, #20]
 8002946:	f7ff fe90 	bl	800266a <u8g2_font_decode_get_signed_bits>
 800294a:	4603      	mov	r3, r0
 800294c:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002954:	4619      	mov	r1, r3
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff fe87 	bl	800266a <u8g2_font_decode_get_signed_bits>
 800295c:	4603      	mov	r3, r0
 800295e:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002966:	4619      	mov	r1, r3
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f7ff fe7e 	bl	800266a <u8g2_font_decode_get_signed_bits>
 800296e:	4603      	mov	r3, r0
 8002970:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f340 80d7 	ble.w	8002b2c <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	8898      	ldrh	r0, [r3, #4]
 8002982:	7cfa      	ldrb	r2, [r7, #19]
 8002984:	7c7b      	ldrb	r3, [r7, #17]
 8002986:	4413      	add	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	425b      	negs	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	b25a      	sxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	7c1b      	ldrb	r3, [r3, #16]
 8002994:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002998:	f7ff fec5 	bl	8002726 <u8g2_add_vector_x>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	88d8      	ldrh	r0, [r3, #6]
 80029a8:	7cfa      	ldrb	r2, [r7, #19]
 80029aa:	7c7b      	ldrb	r3, [r7, #17]
 80029ac:	4413      	add	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	425b      	negs	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	b25a      	sxtb	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	7c1b      	ldrb	r3, [r3, #16]
 80029ba:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80029be:	f7ff fe77 	bl	80026b0 <u8g2_add_vector_y>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	889b      	ldrh	r3, [r3, #4]
 80029ce:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	88db      	ldrh	r3, [r3, #6]
 80029d4:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 80029d6:	8bfb      	ldrh	r3, [r7, #30]
 80029d8:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 80029da:	8b7b      	ldrh	r3, [r7, #26]
 80029dc:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	7c1b      	ldrb	r3, [r3, #16]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d85a      	bhi.n	8002a9c <u8g2_font_decode_glyph+0x180>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <u8g2_font_decode_glyph+0xd0>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a19 	.word	0x08002a19
 80029f4:	08002a41 	.word	0x08002a41
 80029f8:	08002a75 	.word	0x08002a75
			case 0:
				x1 += decode->glyph_width;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002a0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	8b3b      	ldrh	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	833b      	strh	r3, [r7, #24]
				break;
 8002a16:	e041      	b.n	8002a9c <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002a18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8bfa      	ldrh	r2, [r7, #30]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002a24:	8bfb      	ldrh	r3, [r7, #30]
 8002a26:	3301      	adds	r3, #1
 8002a28:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002a2a:	8bbb      	ldrh	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	8b3b      	ldrh	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	833b      	strh	r3, [r7, #24]
				break;
 8002a3e:	e02d      	b.n	8002a9c <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8bfa      	ldrh	r2, [r7, #30]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002a4e:	8bfb      	ldrh	r3, [r7, #30]
 8002a50:	3301      	adds	r3, #1
 8002a52:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002a54:	8bbb      	ldrh	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8002a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8b7a      	ldrh	r2, [r7, #26]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002a66:	8b7b      	ldrh	r3, [r7, #26]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	837b      	strh	r3, [r7, #26]
				y1++;
 8002a6c:	8b3b      	ldrh	r3, [r7, #24]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	833b      	strh	r3, [r7, #24]
				break;
 8002a72:	e013      	b.n	8002a9c <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002a74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	8bbb      	ldrh	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8b7a      	ldrh	r2, [r7, #26]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	3301      	adds	r3, #1
 8002a92:	837b      	strh	r3, [r7, #26]
				y1++;
 8002a94:	8b3b      	ldrh	r3, [r7, #24]
 8002a96:	3301      	adds	r3, #1
 8002a98:	833b      	strh	r3, [r7, #24]
				break;
 8002a9a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002a9c:	8bb8      	ldrh	r0, [r7, #28]
 8002a9e:	8b7a      	ldrh	r2, [r7, #26]
 8002aa0:	8bf9      	ldrh	r1, [r7, #30]
 8002aa2:	8b3b      	ldrh	r3, [r7, #24]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fcf6 	bl	800349a <u8g2_IsIntersection>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <u8g2_font_decode_glyph+0x19e>
				return d;
 8002ab4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002ab8:	e03a      	b.n	8002b30 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002acc:	4619      	mov	r1, r3
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff fd81 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff fd78 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2200      	movs	r2, #0
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe53 	bl	800279c <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fe4d 	bl	800279c <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002b02:	2101      	movs	r1, #1
 8002b04:	6978      	ldr	r0, [r7, #20]
 8002b06:	f7ff fd66 	bl	80025d6 <u8g2_font_decode_get_unsigned_bits>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ec      	bne.n	8002aea <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002b16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dd00      	ble.n	8002b20 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002b1e:	e7d2      	b.n	8002ac6 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002b20:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	7b9a      	ldrb	r2, [r3, #14]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002b2c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3317      	adds	r3, #23
 8002b4e:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	2bff      	cmp	r3, #255	; 0xff
 8002b54:	d82a      	bhi.n	8002bac <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d907      	bls.n	8002b6c <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002b62:	461a      	mov	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e009      	b.n	8002b80 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d906      	bls.n	8002b80 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002b78:	461a      	mov	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d04e      	beq.n	8002c28 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d102      	bne.n	8002b9c <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	e049      	b.n	8002c30 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002baa:	e7e9      	b.n	8002b80 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	6938      	ldr	r0, [r7, #16]
 8002bc2:	f7ff fc40 	bl	8002446 <u8g2_font_get_word>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	6938      	ldr	r0, [r7, #16]
 8002bd4:	f7ff fc37 	bl	8002446 <u8g2_font_get_word>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	3304      	adds	r3, #4
 8002be0:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002be2:	89fa      	ldrh	r2, [r7, #14]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3e9      	bcc.n	8002bbe <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002c04:	89fb      	ldrh	r3, [r7, #14]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002c0a:	89fa      	ldrh	r2, [r7, #14]
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d102      	bne.n	8002c18 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	3303      	adds	r3, #3
 8002c16:	e00b      	b.n	8002c30 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	4413      	add	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002c26:	e7e0      	b.n	8002bea <u8g2_font_get_glyph_data+0xb2>
				break;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <u8g2_font_get_glyph_data+0xf6>
				break;
 8002c2c:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	897a      	ldrh	r2, [r7, #10]
 8002c5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	893a      	ldrh	r2, [r7, #8]
 8002c62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ff64 	bl	8002b38 <u8g2_font_get_glyph_data>
 8002c70:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff fe4e 	bl	800291c <u8g2_font_decode_glyph>
 8002c80:	4603      	mov	r3, r0
 8002c82:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002c84:	8afb      	ldrh	r3, [r7, #22]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff4a 	bl	8002b38 <u8g2_font_get_glyph_data>
 8002ca4:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e027      	b.n	8002d00 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fdfa 	bl	80028ac <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f7ff fccf 	bl	800266a <u8g2_font_decode_get_signed_bits>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7ff fcc0 	bl	800266a <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7ff fcb6 	bl	800266a <u8g2_font_decode_get_signed_bits>
 8002cfe:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d833      	bhi.n	8002db4 <u8g2_DrawGlyph+0x8c>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <u8g2_DrawGlyph+0x2c>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d79 	.word	0x08002d79
 8002d5c:	08002d8d 	.word	0x08002d8d
 8002d60:	08002da1 	.word	0x08002da1
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	4798      	blx	r3
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	813b      	strh	r3, [r7, #8]
		break;
 8002d76:	e01d      	b.n	8002db4 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	4798      	blx	r3
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	817b      	strh	r3, [r7, #10]
		break;
 8002d8a:	e013      	b.n	8002db4 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	4798      	blx	r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	893b      	ldrh	r3, [r7, #8]
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	813b      	strh	r3, [r7, #8]
		break;
 8002d9e:	e009      	b.n	8002db4 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	4798      	blx	r3
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	4413      	add	r3, r2
 8002db0:	817b      	strh	r3, [r7, #10]
		break;
 8002db2:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	893a      	ldrh	r2, [r7, #8]
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff ff3c 	bl	8002c38 <u8g2_font_draw_glyph>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop

08002dcc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fd86 	bl	80038f0 <u8x8_utf8_init>
	sum = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	4611      	mov	r1, r2
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	4798      	blx	r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002dfa:	8abb      	ldrh	r3, [r7, #20]
 8002dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d038      	beq.n	8002e76 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002e0a:	8abb      	ldrh	r3, [r7, #20]
 8002e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d0e9      	beq.n	8002de8 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002e14:	8abb      	ldrh	r3, [r7, #20]
 8002e16:	893a      	ldrh	r2, [r7, #8]
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ff84 	bl	8002d28 <u8g2_DrawGlyph>
 8002e20:	4603      	mov	r3, r0
 8002e22:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d81e      	bhi.n	8002e6c <u8g2_draw_string+0xa0>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <u8g2_draw_string+0x68>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e4f 	.word	0x08002e4f
 8002e3c:	08002e59 	.word	0x08002e59
 8002e40:	08002e63 	.word	0x08002e63
			case 0:
				x += delta;
 8002e44:	897a      	ldrh	r2, [r7, #10]
 8002e46:	8a7b      	ldrh	r3, [r7, #18]
 8002e48:	4413      	add	r3, r2
 8002e4a:	817b      	strh	r3, [r7, #10]
				break;
 8002e4c:	e00e      	b.n	8002e6c <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	8a7b      	ldrh	r3, [r7, #18]
 8002e52:	4413      	add	r3, r2
 8002e54:	813b      	strh	r3, [r7, #8]
				break;
 8002e56:	e009      	b.n	8002e6c <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8002e58:	897a      	ldrh	r2, [r7, #10]
 8002e5a:	8a7b      	ldrh	r3, [r7, #18]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	817b      	strh	r3, [r7, #10]
				break;
 8002e60:	e004      	b.n	8002e6c <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8002e62:	893a      	ldrh	r2, [r7, #8]
 8002e64:	8a7b      	ldrh	r3, [r7, #18]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	813b      	strh	r3, [r7, #8]
				break;
 8002e6a:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8002e6c:	8afa      	ldrh	r2, [r7, #22]
 8002e6e:	8a7b      	ldrh	r3, [r7, #18]
 8002e70:	4413      	add	r3, r2
 8002e72:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002e74:	e7b8      	b.n	8002de8 <u8g2_draw_string+0x1c>
			break;
 8002e76:	bf00      	nop
		}
	}
	return sum;
 8002e78:	8afb      	ldrh	r3, [r7, #22]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop

08002e84 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	4613      	mov	r3, r2
 8002e94:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <u8g2_DrawUTF8+0x30>)
 8002e9a:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002e9c:	893a      	ldrh	r2, [r7, #8]
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff ff92 	bl	8002dcc <u8g2_draw_string>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	08003937 	.word	0x08003937

08002eb8 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05d      	beq.n	8002f84 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04d      	beq.n	8002f86 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d11c      	bne.n	8002f2e <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002f00:	429a      	cmp	r2, r3
 8002f02:	da05      	bge.n	8002f10 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	dd32      	ble.n	8002f86 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002f2c:	e02b      	b.n	8002f86 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002f34:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002f44:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8002f46:	429a      	cmp	r2, r3
 8002f48:	da0d      	bge.n	8002f66 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002f50:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dd07      	ble.n	8002f86 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002f82:	e000      	b.n	8002f86 <u8g2_UpdateRefHeight+0xce>
		return;
 8002f84:	bf00      	nop
	}
}
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	return 0;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <u8g2_SetFontPosBaseline+0x18>)
 8002fb0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	08002f8f 	.word	0x08002f8f

08002fc0 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002fce:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
	...

08002fe4 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <u8g2_SetFontPosTop+0x18>)
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	08002fc1 	.word	0x08002fc1

08003000 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d00b      	beq.n	800302c <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3374      	adds	r3, #116	; 0x74
 800301e:	6839      	ldr	r1, [r7, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fa2f 	bl	8002484 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff46 	bl	8002eb8 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 800303e:	23c0      	movs	r3, #192	; 0xc0
 8003040:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fc50 	bl	80038f0 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	4611      	mov	r1, r2
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
 8003066:	4603      	mov	r3, r0
 8003068:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 800306a:	893b      	ldrh	r3, [r7, #8]
 800306c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003070:	4293      	cmp	r3, r2
 8003072:	d01c      	beq.n	80030ae <u8g2_string_width+0x7a>
			break;
		str++;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003080:	4293      	cmp	r3, r2
 8003082:	d0e9      	beq.n	8003058 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8003084:	893b      	ldrh	r3, [r7, #8]
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fe00 	bl	8002c8e <u8g2_GetGlyphWidth>
 800308e:	4603      	mov	r3, r0
 8003090:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8003092:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003096:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800309a:	d103      	bne.n	80030a4 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80030a2:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 80030a4:	89fa      	ldrh	r2, [r7, #14]
 80030a6:	89bb      	ldrh	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80030ac:	e7d4      	b.n	8003058 <u8g2_string_width+0x24>
			break;
 80030ae:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01b      	beq.n	80030f2 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 80030ba:	89fa      	ldrh	r2, [r7, #14]
 80030bc:	89bb      	ldrh	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	4413      	add	r3, r2
 80030ce:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	4413      	add	r3, r2
 80030dc:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 80030de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	dd05      	ble.n	80030f2 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 80030e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	4413      	add	r3, r2
 80030f0:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 80030f2:	89fb      	ldrh	r3, [r7, #14]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a05      	ldr	r2, [pc, #20]	; (8003120 <u8g2_GetStrWidth+0x24>)
 800310a:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff90 	bl	8003034 <u8g2_string_width>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	0800390b 	.word	0x0800390b

08003124 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a05      	ldr	r2, [pc, #20]	; (8003148 <u8g2_GetUTF8Width+0x24>)
 8003132:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ff7c 	bl	8003034 <u8g2_string_width>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	08003937 	.word	0x08003937

0800314c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	460b      	mov	r3, r1
 800315c:	80fb      	strh	r3, [r7, #6]
 800315e:	4613      	mov	r3, r2
 8003160:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003168:	8afb      	ldrh	r3, [r7, #22]
 800316a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	8abb      	ldrh	r3, [r7, #20]
 8003172:	4413      	add	r3, r2
 8003174:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003176:	8afa      	ldrh	r2, [r7, #22]
 8003178:	8abb      	ldrh	r3, [r7, #20]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90b      	bls.n	8003196 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800317e:	8afa      	ldrh	r2, [r7, #22]
 8003180:	88bb      	ldrh	r3, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d205      	bcs.n	8003192 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003186:	88bb      	ldrh	r3, [r7, #4]
 8003188:	82bb      	strh	r3, [r7, #20]
      b--;
 800318a:	8abb      	ldrh	r3, [r7, #20]
 800318c:	3b01      	subs	r3, #1
 800318e:	82bb      	strh	r3, [r7, #20]
 8003190:	e001      	b.n	8003196 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003196:	8afa      	ldrh	r2, [r7, #22]
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d301      	bcc.n	80031a2 <u8g2_clip_intersection2+0x56>
    return 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	e01c      	b.n	80031dc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80031a2:	8aba      	ldrh	r2, [r7, #20]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d801      	bhi.n	80031ae <u8g2_clip_intersection2+0x62>
    return 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e016      	b.n	80031dc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80031ae:	8afa      	ldrh	r2, [r7, #22]
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d201      	bcs.n	80031ba <u8g2_clip_intersection2+0x6e>
    a = c;
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80031ba:	8aba      	ldrh	r2, [r7, #20]
 80031bc:	88bb      	ldrh	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d901      	bls.n	80031c6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8afa      	ldrh	r2, [r7, #22]
 80031ca:	801a      	strh	r2, [r3, #0]
  b -= a;
 80031cc:	8aba      	ldrh	r2, [r7, #20]
 80031ce:	8afb      	ldrh	r3, [r7, #22]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	8aba      	ldrh	r2, [r7, #20]
 80031d8:	801a      	strh	r2, [r3, #0]
  return 1;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80031e6:	b590      	push	{r4, r7, lr}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	4608      	mov	r0, r1
 80031f0:	4611      	mov	r1, r2
 80031f2:	461a      	mov	r2, r3
 80031f4:	4603      	mov	r3, r0
 80031f6:	817b      	strh	r3, [r7, #10]
 80031f8:	460b      	mov	r3, r1
 80031fa:	813b      	strh	r3, [r7, #8]
 80031fc:	4613      	mov	r3, r2
 80031fe:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003204:	893a      	ldrh	r2, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800320e:	88f8      	ldrh	r0, [r7, #6]
 8003210:	893a      	ldrh	r2, [r7, #8]
 8003212:	8979      	ldrh	r1, [r7, #10]
 8003214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4603      	mov	r3, r0
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	47a0      	blx	r4
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}

08003228 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b087      	sub	sp, #28
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d075      	beq.n	8003338 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d072      	beq.n	8003338 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d91a      	bls.n	800328e <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d109      	bne.n	8003274 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003260:	897a      	ldrh	r2, [r7, #10]
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	817b      	strh	r3, [r7, #10]
	  x++;
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	3301      	adds	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	817b      	strh	r3, [r7, #10]
 8003272:	e00c      	b.n	800328e <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d108      	bne.n	800328e <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800327c:	893a      	ldrh	r2, [r7, #8]
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	b29b      	uxth	r3, r3
 8003284:	813b      	strh	r3, [r7, #8]
	  y++;
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	3301      	adds	r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800328e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800329a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11a      	bne.n	80032d8 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d83b      	bhi.n	8003326 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d937      	bls.n	800332a <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80032c6:	1db9      	adds	r1, r7, #6
 80032c8:	f107 000a 	add.w	r0, r7, #10
 80032cc:	f7ff ff3e 	bl	800314c <u8g2_clip_intersection2>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11a      	bne.n	800330c <u8g2_DrawHVLine+0xe4>
	  return;
 80032d6:	e02f      	b.n	8003338 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d824      	bhi.n	800332e <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d920      	bls.n	8003332 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80032fc:	1db9      	adds	r1, r7, #6
 80032fe:	f107 0008 	add.w	r0, r7, #8
 8003302:	f7ff ff23 	bl	800314c <u8g2_clip_intersection2>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d014      	beq.n	8003336 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	689c      	ldr	r4, [r3, #8]
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	893a      	ldrh	r2, [r7, #8]
 8003316:	88f8      	ldrh	r0, [r7, #6]
 8003318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4603      	mov	r3, r0
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	47a0      	blx	r4
 8003324:	e008      	b.n	8003338 <u8g2_DrawHVLine+0x110>
	  return;
 8003326:	bf00      	nop
 8003328:	e006      	b.n	8003338 <u8g2_DrawHVLine+0x110>
	  return;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <u8g2_DrawHVLine+0x110>
	  return;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <u8g2_DrawHVLine+0x110>
	  return;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <u8g2_DrawHVLine+0x110>
	  return;
 8003336:	bf00      	nop
    }
}
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af02      	add	r7, sp, #8
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	461a      	mov	r2, r3
 800334c:	4603      	mov	r3, r0
 800334e:	817b      	strh	r3, [r7, #10]
 8003350:	460b      	mov	r3, r1
 8003352:	813b      	strh	r3, [r7, #8]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	893a      	ldrh	r2, [r7, #8]
 800335c:	8979      	ldrh	r1, [r7, #10]
 800335e:	2000      	movs	r0, #0
 8003360:	9000      	str	r0, [sp, #0]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff ff60 	bl	8003228 <u8g2_DrawHVLine>
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4603      	mov	r3, r0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	460b      	mov	r3, r1
 8003384:	813b      	strh	r3, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	893a      	ldrh	r2, [r7, #8]
 800338e:	8979      	ldrh	r1, [r7, #10]
 8003390:	2001      	movs	r0, #1
 8003392:	9000      	str	r0, [sp, #0]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7ff ff47 	bl	8003228 <u8g2_DrawHVLine>
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80033b8:	883a      	ldrh	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d31a      	bcc.n	80033f4 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80033c4:	883a      	ldrh	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d216      	bcs.n	80033f8 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d312      	bcc.n	80033fc <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d20e      	bcs.n	8003400 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80033e2:	883a      	ldrh	r2, [r7, #0]
 80033e4:	8879      	ldrh	r1, [r7, #2]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2301      	movs	r3, #1
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff1b 	bl	8003228 <u8g2_DrawHVLine>
 80033f2:	e006      	b.n	8003402 <u8g2_DrawPixel+0x60>
    return;
 80033f4:	bf00      	nop
 80033f6:	e004      	b.n	8003402 <u8g2_DrawPixel+0x60>
    return;
 80033f8:	bf00      	nop
 80033fa:	e002      	b.n	8003402 <u8g2_DrawPixel+0x60>
    return;
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <u8g2_DrawPixel+0x60>
    return;
 8003400:	bf00      	nop
}
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d903      	bls.n	800342a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003434:	b490      	push	{r4, r7}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4604      	mov	r4, r0
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4623      	mov	r3, r4
 8003444:	80fb      	strh	r3, [r7, #6]
 8003446:	4603      	mov	r3, r0
 8003448:	80bb      	strh	r3, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	807b      	strh	r3, [r7, #2]
 800344e:	4613      	mov	r3, r2
 8003450:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	88bb      	ldrh	r3, [r7, #4]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20d      	bcs.n	8003476 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800345a:	883a      	ldrh	r2, [r7, #0]
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	429a      	cmp	r2, r3
 8003460:	d901      	bls.n	8003466 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003462:	2301      	movs	r3, #1
 8003464:	e014      	b.n	8003490 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	883b      	ldrh	r3, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d901      	bls.n	8003472 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800346e:	2301      	movs	r3, #1
 8003470:	e00e      	b.n	8003490 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003472:	2300      	movs	r3, #0
 8003474:	e00c      	b.n	8003490 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003476:	883a      	ldrh	r2, [r7, #0]
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	429a      	cmp	r2, r3
 800347c:	d907      	bls.n	800348e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	883b      	ldrh	r3, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d901      	bls.n	800348a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003486:	2301      	movs	r3, #1
 8003488:	e002      	b.n	8003490 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800348e:	2300      	movs	r3, #0
    }
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr

0800349a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	461a      	mov	r2, r3
 80034a8:	4603      	mov	r3, r0
 80034aa:	817b      	strh	r3, [r7, #10]
 80034ac:	460b      	mov	r3, r1
 80034ae:	813b      	strh	r3, [r7, #8]
 80034b0:	4613      	mov	r3, r2
 80034b2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80034c0:	8b3b      	ldrh	r3, [r7, #24]
 80034c2:	893a      	ldrh	r2, [r7, #8]
 80034c4:	f7ff ffb6 	bl	8003434 <u8g2_is_intersection_decision_tree>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <u8g2_IsIntersection+0x38>
    return 0; 
 80034ce:	2300      	movs	r3, #0
 80034d0:	e00a      	b.n	80034e8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	897a      	ldrh	r2, [r7, #10]
 80034e2:	f7ff ffa7 	bl	8003434 <u8g2_is_intersection_decision_tree>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	817b      	strh	r3, [r7, #10]
 8003502:	460b      	mov	r3, r1
 8003504:	813b      	strh	r3, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800350e:	7efb      	ldrb	r3, [r7, #27]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800351a:	7e3a      	ldrb	r2, [r7, #24]
 800351c:	7efb      	ldrb	r3, [r7, #27]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003532:	2b01      	cmp	r3, #1
 8003534:	d801      	bhi.n	800353a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003536:	7e3b      	ldrb	r3, [r7, #24]
 8003538:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003540:	2b01      	cmp	r3, #1
 8003542:	d001      	beq.n	8003548 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003544:	7e3b      	ldrb	r3, [r7, #24]
 8003546:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800354c:	8afb      	ldrh	r3, [r7, #22]
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	7c1b      	ldrb	r3, [r3, #16]
 800355a:	b29b      	uxth	r3, r3
 800355c:	8afa      	ldrh	r2, [r7, #22]
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800356a:	8afb      	ldrh	r3, [r7, #22]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800357a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d117      	bne.n	80035b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	7ebb      	ldrb	r3, [r7, #26]
 8003588:	4313      	orrs	r3, r2
 800358a:	b2da      	uxtb	r2, r3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	7e7b      	ldrb	r3, [r7, #25]
 8003596:	4053      	eors	r3, r2
 8003598:	b2da      	uxtb	r2, r3
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3301      	adds	r3, #1
 80035a2:	61fb      	str	r3, [r7, #28]
	len--;
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e8      	bne.n	8003582 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80035b0:	e038      	b.n	8003624 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	7ebb      	ldrb	r3, [r7, #26]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	7e7b      	ldrb	r3, [r7, #25]
 80035c6:	4053      	eors	r3, r2
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	3301      	adds	r3, #1
 80035d2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80035d4:	7efb      	ldrb	r3, [r7, #27]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	76fb      	strb	r3, [r7, #27]
      len--;
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	3b01      	subs	r3, #1
 80035e0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80035e2:	7efb      	ldrb	r3, [r7, #27]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035ec:	461a      	mov	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d801      	bhi.n	8003602 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003608:	2b01      	cmp	r3, #1
 800360a:	d008      	beq.n	800361e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800360c:	2301      	movs	r3, #1
 800360e:	767b      	strb	r3, [r7, #25]
 8003610:	e005      	b.n	800361e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003612:	7ebb      	ldrb	r3, [r7, #26]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003618:	7e7b      	ldrb	r3, [r7, #25]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1c6      	bne.n	80035b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003624:	bf00      	nop
 8003626:	3724      	adds	r7, #36	; 0x24
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003656:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	79fa      	ldrb	r2, [r7, #7]
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff ffad 	bl	800362e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fc65 	bl	8002fa4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036fe:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	89fa      	ldrh	r2, [r7, #14]
 800370a:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	7c1b      	ldrb	r3, [r3, #16]
 8003710:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	89fa      	ldrh	r2, [r7, #14]
 800371c:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003724:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	89fa      	ldrh	r2, [r7, #14]
 8003730:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003738:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003742:	4413      	add	r3, r2
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	7c52      	ldrb	r2, [r2, #17]
 8003748:	4293      	cmp	r3, r2
 800374a:	dd08      	ble.n	800375e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	7c5b      	ldrb	r3, [r3, #17]
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003758:	b29b      	uxth	r3, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800375e:	89fb      	ldrh	r3, [r7, #14]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	4413      	add	r3, r2
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	8a9a      	ldrh	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	8ada      	ldrh	r2, [r3, #22]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4603      	mov	r3, r0
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe63 	bl	800349a <u8g2_IsIntersection>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80037e2:	e03b      	b.n	800385c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d205      	bcs.n	8003808 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003814:	429a      	cmp	r2, r3
 8003816:	d905      	bls.n	8003824 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003830:	429a      	cmp	r2, r3
 8003832:	d205      	bcs.n	8003840 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800384c:	429a      	cmp	r2, r3
 800384e:	d905      	bls.n	800385c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff3c 	bl	80036ea <u8g2_update_dimension_common>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff7b 	bl	80037aa <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80038d6:	88f8      	ldrh	r0, [r7, #6]
 80038d8:	893a      	ldrh	r2, [r7, #8]
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	7e3b      	ldrb	r3, [r7, #24]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4603      	mov	r3, r0
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fc7f 	bl	80031e6 <u8g2_draw_hv_line_2dir>
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <u8x8_ascii_next+0x18>
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	2b0a      	cmp	r3, #10
 8003920:	d102      	bne.n	8003928 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003926:	e001      	b.n	800392c <u8x8_ascii_next+0x22>
  return b;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	b29b      	uxth	r3, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <u8x8_utf8_next+0x18>
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2b0a      	cmp	r3, #10
 800394c:	d102      	bne.n	8003954 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800394e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003952:	e06e      	b.n	8003a32 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800395a:	2b00      	cmp	r3, #0
 800395c:	d145      	bne.n	80039ea <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	2bfb      	cmp	r3, #251	; 0xfb
 8003962:	d908      	bls.n	8003976 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2205      	movs	r2, #5
 8003968:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	70fb      	strb	r3, [r7, #3]
 8003974:	e032      	b.n	80039dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	2bf7      	cmp	r3, #247	; 0xf7
 800397a:	d908      	bls.n	800398e <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	70fb      	strb	r3, [r7, #3]
 800398c:	e026      	b.n	80039dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	2bef      	cmp	r3, #239	; 0xef
 8003992:	d908      	bls.n	80039a6 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2203      	movs	r2, #3
 8003998:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	70fb      	strb	r3, [r7, #3]
 80039a4:	e01a      	b.n	80039dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	2bdf      	cmp	r3, #223	; 0xdf
 80039aa:	d908      	bls.n	80039be <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	70fb      	strb	r3, [r7, #3]
 80039bc:	e00e      	b.n	80039dc <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	2bbf      	cmp	r3, #191	; 0xbf
 80039c2:	d908      	bls.n	80039d6 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	70fb      	strb	r3, [r7, #3]
 80039d4:	e002      	b.n	80039dc <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	e02a      	b.n	8003a32 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80039e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80039e8:	e023      	b.n	8003a32 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8c1b      	ldrh	r3, [r3, #32]
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8c1a      	ldrh	r2, [r3, #32]
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003a28:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003a2c:	e001      	b.n	8003a32 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8c1b      	ldrh	r3, [r3, #32]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691c      	ldr	r4, [r3, #16]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2120      	movs	r1, #32
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	47a0      	blx	r4
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}

08003a60 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691c      	ldr	r4, [r3, #16]
 8003a72:	7afa      	ldrb	r2, [r7, #11]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2117      	movs	r1, #23
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	47a0      	blx	r4
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}

08003a86 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003a92:	1cfb      	adds	r3, r7, #3
 8003a94:	461a      	mov	r2, r3
 8003a96:	2101      	movs	r1, #1
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffe1 	bl	8003a60 <u8x8_byte_SendBytes>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68dc      	ldr	r4, [r3, #12]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2115      	movs	r1, #21
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	47a0      	blx	r4
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68dc      	ldr	r4, [r3, #12]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2116      	movs	r1, #22
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	47a0      	blx	r4
 8003ae6:	4603      	mov	r3, r0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}

08003af0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	460b      	mov	r3, r1
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68dc      	ldr	r4, [r3, #12]
 8003b02:	7afa      	ldrb	r2, [r7, #11]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2117      	movs	r1, #23
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	47a0      	blx	r4
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003b16:	b590      	push	{r4, r7, lr}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68dc      	ldr	r4, [r3, #12]
 8003b22:	2300      	movs	r3, #0
 8003b24:	2200      	movs	r2, #0
 8003b26:	2118      	movs	r1, #24
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	47a0      	blx	r4
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}

08003b36 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003b36:	b590      	push	{r4, r7, lr}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68dc      	ldr	r4, [r3, #12]
 8003b42:	2300      	movs	r3, #0
 8003b44:	2200      	movs	r2, #0
 8003b46:	2119      	movs	r1, #25
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	47a0      	blx	r4
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}

08003b56 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003b56:	b590      	push	{r4, r7, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	73fb      	strb	r3, [r7, #15]
    data++;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2bfe      	cmp	r3, #254	; 0xfe
 8003b70:	d031      	beq.n	8003bd6 <u8x8_cad_SendSequence+0x80>
 8003b72:	2bfe      	cmp	r3, #254	; 0xfe
 8003b74:	dc3d      	bgt.n	8003bf2 <u8x8_cad_SendSequence+0x9c>
 8003b76:	2b19      	cmp	r3, #25
 8003b78:	dc3b      	bgt.n	8003bf2 <u8x8_cad_SendSequence+0x9c>
 8003b7a:	2b18      	cmp	r3, #24
 8003b7c:	da23      	bge.n	8003bc6 <u8x8_cad_SendSequence+0x70>
 8003b7e:	2b16      	cmp	r3, #22
 8003b80:	dc02      	bgt.n	8003b88 <u8x8_cad_SendSequence+0x32>
 8003b82:	2b15      	cmp	r3, #21
 8003b84:	da03      	bge.n	8003b8e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003b86:	e034      	b.n	8003bf2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003b88:	2b17      	cmp	r3, #23
 8003b8a:	d00e      	beq.n	8003baa <u8x8_cad_SendSequence+0x54>
	return;
 8003b8c:	e031      	b.n	8003bf2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68dc      	ldr	r4, [r3, #12]
 8003b98:	7bba      	ldrb	r2, [r7, #14]
 8003b9a:	7bf9      	ldrb	r1, [r7, #15]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	47a0      	blx	r4
	  data++;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	603b      	str	r3, [r7, #0]
	  break;
 8003ba8:	e022      	b.n	8003bf0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003bb0:	f107 030e 	add.w	r3, r7, #14
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff99 	bl	8003af0 <u8x8_cad_SendData>
	  data++;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	603b      	str	r3, [r7, #0]
	  break;
 8003bc4:	e014      	b.n	8003bf0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68dc      	ldr	r4, [r3, #12]
 8003bca:	7bf9      	ldrb	r1, [r7, #15]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2200      	movs	r2, #0
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	47a0      	blx	r4
	  break;
 8003bd4:	e00c      	b.n	8003bf0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003bdc:	7bbb      	ldrb	r3, [r7, #14]
 8003bde:	461a      	mov	r2, r3
 8003be0:	2129      	movs	r1, #41	; 0x29
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9ed 	bl	8003fc2 <u8x8_gpio_call>
	  data++;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	603b      	str	r3, [r7, #0]
	  break;
 8003bee:	bf00      	nop
    cmd = *data;
 8003bf0:	e7b6      	b.n	8003b60 <u8x8_cad_SendSequence+0xa>
	return;
 8003bf2:	bf00      	nop
    }
  }
}
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
	...

08003bfc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	72fb      	strb	r3, [r7, #11]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	3b14      	subs	r3, #20
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d82f      	bhi.n	8003c76 <u8x8_cad_001+0x7a>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <u8x8_cad_001+0x20>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c35 	.word	0x08003c35
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c65 	.word	0x08003c65
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003c34:	2100      	movs	r1, #0
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff ff00 	bl	8003a3c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003c3c:	7abb      	ldrb	r3, [r7, #10]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff ff20 	bl	8003a86 <u8x8_byte_SendByte>
      break;
 8003c46:	e018      	b.n	8003c7a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003c48:	2100      	movs	r1, #0
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fef6 	bl	8003a3c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003c50:	7abb      	ldrb	r3, [r7, #10]
 8003c52:	4619      	mov	r1, r3
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff16 	bl	8003a86 <u8x8_byte_SendByte>
      break;
 8003c5a:	e00e      	b.n	8003c7a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff feec 	bl	8003a3c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	691c      	ldr	r4, [r3, #16]
 8003c68:	7aba      	ldrb	r2, [r7, #10]
 8003c6a:	7af9      	ldrb	r1, [r7, #11]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	47a0      	blx	r4
 8003c72:	4603      	mov	r3, r0
 8003c74:	e002      	b.n	8003c7c <u8x8_cad_001+0x80>
    default:
      return 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <u8x8_cad_001+0x80>
  }
  return 1;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	72fb      	strb	r3, [r7, #11]
 8003c92:	4613      	mov	r3, r2
 8003c94:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	3b0b      	subs	r3, #11
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	f200 808e 	bhi.w	8003dbc <u8x8_d_uc1604_common+0x138>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <u8x8_d_uc1604_common+0x24>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003d51 	.word	0x08003d51
 8003cac:	08003dbd 	.word	0x08003dbd
 8003cb0:	08003d6b 	.word	0x08003d6b
 8003cb4:	08003d9d 	.word	0x08003d9d
 8003cb8:	08003cbd 	.word	0x08003cbd
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff2a 	bl	8003b16 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	795b      	ldrb	r3, [r3, #5]
 8003cc6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fee5 	bl	8003aa8 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	4619      	mov	r1, r3
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff fedb 	bl	8003aa8 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	799b      	ldrb	r3, [r3, #6]
 8003cf6:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003cfe:	7dbb      	ldrb	r3, [r7, #22]
 8003d00:	4413      	add	r3, r2
 8003d02:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003d04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fec5 	bl	8003aa8 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003d24:	7d7b      	ldrb	r3, [r7, #21]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003d30:	7d7b      	ldrb	r3, [r7, #21]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4619      	mov	r1, r3
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff feda 	bl	8003af0 <u8x8_cad_SendData>
	arg_int--;
 8003d3c:	7abb      	ldrb	r3, [r7, #10]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003d42:	7abb      	ldrb	r3, [r7, #10]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f3      	bne.n	8003d30 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fef4 	bl	8003b36 <u8x8_cad_EndTransfer>
      break;
 8003d4e:	e037      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003d50:	7abb      	ldrb	r3, [r7, #10]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003d56:	491d      	ldr	r1, [pc, #116]	; (8003dcc <u8x8_d_uc1604_common+0x148>)
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fefc 	bl	8003b56 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003d5e:	e02f      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003d60:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <u8x8_d_uc1604_common+0x14c>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff fef7 	bl	8003b56 <u8x8_cad_SendSequence>
      break;
 8003d68:	e02a      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003d6a:	7abb      	ldrb	r3, [r7, #10]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003d70:	4918      	ldr	r1, [pc, #96]	; (8003dd4 <u8x8_d_uc1604_common+0x150>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff feef 	bl	8003b56 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	7c9a      	ldrb	r2, [r3, #18]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003d84:	e01c      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003d86:	4914      	ldr	r1, [pc, #80]	; (8003dd8 <u8x8_d_uc1604_common+0x154>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fee4 	bl	8003b56 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	7cda      	ldrb	r2, [r3, #19]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003d9a:	e011      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff feba 	bl	8003b16 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003da2:	2181      	movs	r1, #129	; 0x81
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fe7f 	bl	8003aa8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003daa:	7abb      	ldrb	r3, [r7, #10]
 8003dac:	4619      	mov	r1, r3
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fe8c 	bl	8003acc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff febe 	bl	8003b36 <u8x8_cad_EndTransfer>
      break;
 8003dba:	e001      	b.n	8003dc0 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	0800e500 	.word	0x0800e500
 8003dd0:	0800e510 	.word	0x0800e510
 8003dd4:	0800e518 	.word	0x0800e518
 8003dd8:	0800e520 	.word	0x0800e520

08003ddc <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	72fb      	strb	r3, [r7, #11]
 8003dea:	4613      	mov	r3, r2
 8003dec:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003dee:	7aba      	ldrb	r2, [r7, #10]
 8003df0:	7af9      	ldrb	r1, [r7, #11]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff ff45 	bl	8003c84 <u8x8_d_uc1604_common>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d114      	bne.n	8003e2a <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003e00:	7afb      	ldrb	r3, [r7, #11]
 8003e02:	2b09      	cmp	r3, #9
 8003e04:	d002      	beq.n	8003e0c <u8x8_d_uc1604_jlx19264+0x30>
 8003e06:	2b0a      	cmp	r3, #10
 8003e08:	d005      	beq.n	8003e16 <u8x8_d_uc1604_jlx19264+0x3a>
 8003e0a:	e00c      	b.n	8003e26 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003e0c:	490a      	ldr	r1, [pc, #40]	; (8003e38 <u8x8_d_uc1604_jlx19264+0x5c>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f816 	bl	8003e40 <u8x8_d_helper_display_setup_memory>
	break;
 8003e14:	e00a      	b.n	8003e2c <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f825 	bl	8003e66 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <u8x8_d_uc1604_jlx19264+0x60>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff fe99 	bl	8003b56 <u8x8_cad_SendSequence>
	break;
 8003e24:	e002      	b.n	8003e2c <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003e26:	2300      	movs	r3, #0
 8003e28:	e001      	b.n	8003e2e <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003e2a:	bf00      	nop
  return 1;
 8003e2c:	2301      	movs	r3, #1
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0800e528 	.word	0x0800e528
 8003e3c:	0800e540 	.word	0x0800e540

08003e40 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	7c9a      	ldrb	r2, [r3, #18]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003e66:	b590      	push	{r4, r7, lr}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695c      	ldr	r4, [r3, #20]
 8003e72:	2300      	movs	r3, #0
 8003e74:	2200      	movs	r2, #0
 8003e76:	2128      	movs	r1, #40	; 0x28
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68dc      	ldr	r4, [r3, #12]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2200      	movs	r2, #0
 8003e84:	2114      	movs	r1, #20
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	214b      	movs	r1, #75	; 0x4b
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f897 	bl	8003fc2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	791b      	ldrb	r3, [r3, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2129      	movs	r1, #41	; 0x29
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f88f 	bl	8003fc2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	214b      	movs	r1, #75	; 0x4b
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f88a 	bl	8003fc2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2129      	movs	r1, #41	; 0x29
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f882 	bl	8003fc2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	214b      	movs	r1, #75	; 0x4b
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f87d 	bl	8003fc2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	795b      	ldrb	r3, [r3, #5]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2129      	movs	r1, #41	; 0x29
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f875 	bl	8003fc2 <u8x8_gpio_call>
}    
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	70fb      	strb	r3, [r7, #3]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70bb      	strb	r3, [r7, #2]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003efe:	78bb      	ldrb	r3, [r7, #2]
 8003f00:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003f02:	787b      	ldrb	r3, [r7, #1]
 8003f04:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689c      	ldr	r4, [r3, #8]
 8003f0e:	f107 0308 	add.w	r3, r7, #8
 8003f12:	2201      	movs	r2, #1
 8003f14:	210f      	movs	r1, #15
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	47a0      	blx	r4
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689c      	ldr	r4, [r3, #8]
 8003f30:	2300      	movs	r3, #0
 8003f32:	2200      	movs	r2, #0
 8003f34:	2109      	movs	r1, #9
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	47a0      	blx	r4
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd90      	pop	{r4, r7, pc}

08003f42 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003f42:	b590      	push	{r4, r7, lr}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689c      	ldr	r4, [r3, #8]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	2200      	movs	r2, #0
 8003f52:	210a      	movs	r1, #10
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	47a0      	blx	r4
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689c      	ldr	r4, [r3, #8]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	2300      	movs	r3, #0
 8003f74:	210b      	movs	r1, #11
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	47a0      	blx	r4
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}

08003f82 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003f82:	b590      	push	{r4, r7, lr}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689c      	ldr	r4, [r3, #8]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	2300      	movs	r3, #0
 8003f96:	210e      	movs	r1, #14
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	47a0      	blx	r4
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}

08003fa4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689c      	ldr	r4, [r3, #8]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2110      	movs	r1, #16
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	47a0      	blx	r4
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}

08003fc2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003fc2:	b590      	push	{r4, r7, lr}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695c      	ldr	r4, [r3, #20]
 8003fd6:	78ba      	ldrb	r2, [r7, #2]
 8003fd8:	78f9      	ldrb	r1, [r7, #3]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	47a0      	blx	r4
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	72fb      	strb	r3, [r7, #11]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
	...

08004008 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <u8x8_SetupDefaults+0x58>)
 800401a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <u8x8_SetupDefaults+0x58>)
 8004020:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <u8x8_SetupDefaults+0x58>)
 8004026:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <u8x8_SetupDefaults+0x58>)
 800402c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	22ff      	movs	r2, #255	; 0xff
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	08003fe9 	.word	0x08003fe9

08004064 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ffc8 	bl	8004008 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff47 	bl	8003f24 <u8x8_SetupMemory>
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040c6:	f7fd fde5 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ca:	f008 fdcb 	bl	800cc64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040ce:	f7fd fa0b 	bl	80014e8 <main>
  bx lr
 80040d2:	4770      	bx	lr
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 80040dc:	0800e5a0 	.word	0x0800e5a0
  ldr r2, =_sbss
 80040e0:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80040e4:	20001f18 	.word	0x20001f18

080040e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC1_2_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_Init+0x28>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_Init+0x28>)
 80040f6:	f043 0310 	orr.w	r3, r3, #16
 80040fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fc:	2003      	movs	r0, #3
 80040fe:	f000 f981 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004102:	200f      	movs	r0, #15
 8004104:	f000 f808 	bl	8004118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004108:	f7fd fc38 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_InitTick+0x54>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_InitTick+0x58>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f9ab 	bl	8004492 <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004154:	f000 f961 	bl	800441a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x5c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000230 	.word	0x20000230
 8004170:	20000238 	.word	0x20000238
 8004174:	20000234 	.word	0x20000234

08004178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_IncTick+0x1c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_IncTick+0x20>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <HAL_IncTick+0x20>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	20000238 	.word	0x20000238
 8004198:	20000d60 	.word	0x20000d60

0800419c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return uwTick;
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <HAL_GetTick+0x10>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000d60 	.word	0x20000d60

080041b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff fff0 	bl	800419c <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c8:	d005      	beq.n	80041d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_Delay+0x44>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041d6:	bf00      	nop
 80041d8:	f7ff ffe0 	bl	800419c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8f7      	bhi.n	80041d8 <HAL_Delay+0x28>
  {
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000238 	.word	0x20000238

080041f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <__NVIC_SetPriorityGrouping+0x44>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422a:	4a04      	ldr	r2, [pc, #16]	; (800423c <__NVIC_SetPriorityGrouping+0x44>)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60d3      	str	r3, [r2, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <__NVIC_GetPriorityGrouping+0x18>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 0307 	and.w	r3, r3, #7
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	db0b      	blt.n	8004286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	4906      	ldr	r1, [pc, #24]	; (8004290 <__NVIC_EnableIRQ+0x34>)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2001      	movs	r0, #1
 800427e:	fa00 f202 	lsl.w	r2, r0, r2
 8004282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100

08004294 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db12      	blt.n	80042cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	490a      	ldr	r1, [pc, #40]	; (80042d8 <__NVIC_DisableIRQ+0x44>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	3320      	adds	r3, #32
 80042bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042c0:	f3bf 8f4f 	dsb	sy
}
 80042c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042c6:	f3bf 8f6f 	isb	sy
}
 80042ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db0a      	blt.n	8004306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	490c      	ldr	r1, [pc, #48]	; (8004328 <__NVIC_SetPriority+0x4c>)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	440b      	add	r3, r1
 8004300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004304:	e00a      	b.n	800431c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <__NVIC_SetPriority+0x50>)
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	3b04      	subs	r3, #4
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	440b      	add	r3, r1
 800431a:	761a      	strb	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf28      	it	cs
 800434e:	2304      	movcs	r3, #4
 8004350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3304      	adds	r3, #4
 8004356:	2b06      	cmp	r3, #6
 8004358:	d902      	bls.n	8004360 <NVIC_EncodePriority+0x30>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3b03      	subs	r3, #3
 800435e:	e000      	b.n	8004362 <NVIC_EncodePriority+0x32>
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	401a      	ands	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43d9      	mvns	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	4313      	orrs	r3, r2
         );
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004398:	f3bf 8f4f 	dsb	sy
}
 800439c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <__NVIC_SystemReset+0x24>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80043a6:	4904      	ldr	r1, [pc, #16]	; (80043b8 <__NVIC_SystemReset+0x24>)
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <__NVIC_SystemReset+0x28>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80043ae:	f3bf 8f4f 	dsb	sy
}
 80043b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <__NVIC_SystemReset+0x20>
 80043b8:	e000ed00 	.word	0xe000ed00
 80043bc:	05fa0004 	.word	0x05fa0004

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043e4:	f7ff ff7a 	bl	80042dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fef3 	bl	80041f8 <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff08 	bl	8004240 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff7a 	bl	8004330 <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff49 	bl	80042dc <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fefb 	bl	800425c <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff09 	bl	8004294 <__NVIC_DisableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800448e:	f7ff ff81 	bl	8004394 <__NVIC_SystemReset>

08004492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff ff90 	bl	80043c0 <SysTick_Config>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b08b      	sub	sp, #44	; 0x2c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	e169      	b.n	8004794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044c0:	2201      	movs	r2, #1
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8158 	bne.w	800478e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a9a      	ldr	r2, [pc, #616]	; (800474c <HAL_GPIO_Init+0x2a0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d05e      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 80044e8:	4a98      	ldr	r2, [pc, #608]	; (800474c <HAL_GPIO_Init+0x2a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d875      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 80044ee:	4a98      	ldr	r2, [pc, #608]	; (8004750 <HAL_GPIO_Init+0x2a4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d058      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 80044f4:	4a96      	ldr	r2, [pc, #600]	; (8004750 <HAL_GPIO_Init+0x2a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d86f      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 80044fa:	4a96      	ldr	r2, [pc, #600]	; (8004754 <HAL_GPIO_Init+0x2a8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d052      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 8004500:	4a94      	ldr	r2, [pc, #592]	; (8004754 <HAL_GPIO_Init+0x2a8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d869      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004506:	4a94      	ldr	r2, [pc, #592]	; (8004758 <HAL_GPIO_Init+0x2ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04c      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 800450c:	4a92      	ldr	r2, [pc, #584]	; (8004758 <HAL_GPIO_Init+0x2ac>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d863      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004512:	4a92      	ldr	r2, [pc, #584]	; (800475c <HAL_GPIO_Init+0x2b0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d046      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 8004518:	4a90      	ldr	r2, [pc, #576]	; (800475c <HAL_GPIO_Init+0x2b0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d85d      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 800451e:	2b12      	cmp	r3, #18
 8004520:	d82a      	bhi.n	8004578 <HAL_GPIO_Init+0xcc>
 8004522:	2b12      	cmp	r3, #18
 8004524:	d859      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_GPIO_Init+0x80>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	080045a7 	.word	0x080045a7
 8004530:	08004581 	.word	0x08004581
 8004534:	08004593 	.word	0x08004593
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045db 	.word	0x080045db
 8004540:	080045db 	.word	0x080045db
 8004544:	080045db 	.word	0x080045db
 8004548:	080045db 	.word	0x080045db
 800454c:	080045db 	.word	0x080045db
 8004550:	080045db 	.word	0x080045db
 8004554:	080045db 	.word	0x080045db
 8004558:	080045db 	.word	0x080045db
 800455c:	080045db 	.word	0x080045db
 8004560:	080045db 	.word	0x080045db
 8004564:	080045db 	.word	0x080045db
 8004568:	080045db 	.word	0x080045db
 800456c:	080045db 	.word	0x080045db
 8004570:	08004589 	.word	0x08004589
 8004574:	0800459d 	.word	0x0800459d
 8004578:	4a79      	ldr	r2, [pc, #484]	; (8004760 <HAL_GPIO_Init+0x2b4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800457e:	e02c      	b.n	80045da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	623b      	str	r3, [r7, #32]
          break;
 8004586:	e029      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	623b      	str	r3, [r7, #32]
          break;
 8004590:	e024      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	3308      	adds	r3, #8
 8004598:	623b      	str	r3, [r7, #32]
          break;
 800459a:	e01f      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	330c      	adds	r3, #12
 80045a2:	623b      	str	r3, [r7, #32]
          break;
 80045a4:	e01a      	b.n	80045dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045ae:	2304      	movs	r3, #4
 80045b0:	623b      	str	r3, [r7, #32]
          break;
 80045b2:	e013      	b.n	80045dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045bc:	2308      	movs	r3, #8
 80045be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	611a      	str	r2, [r3, #16]
          break;
 80045c6:	e009      	b.n	80045dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045c8:	2308      	movs	r3, #8
 80045ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	615a      	str	r2, [r3, #20]
          break;
 80045d2:	e003      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
          break;
 80045d8:	e000      	b.n	80045dc <HAL_GPIO_Init+0x130>
          break;
 80045da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2bff      	cmp	r3, #255	; 0xff
 80045e0:	d801      	bhi.n	80045e6 <HAL_GPIO_Init+0x13a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	e001      	b.n	80045ea <HAL_GPIO_Init+0x13e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2bff      	cmp	r3, #255	; 0xff
 80045f0:	d802      	bhi.n	80045f8 <HAL_GPIO_Init+0x14c>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	e002      	b.n	80045fe <HAL_GPIO_Init+0x152>
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	3b08      	subs	r3, #8
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	210f      	movs	r1, #15
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80b1 	beq.w	800478e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800462c:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4a4c      	ldr	r2, [pc, #304]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6193      	str	r3, [r2, #24]
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004644:	4a48      	ldr	r2, [pc, #288]	; (8004768 <HAL_GPIO_Init+0x2bc>)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	220f      	movs	r2, #15
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a40      	ldr	r2, [pc, #256]	; (800476c <HAL_GPIO_Init+0x2c0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_GPIO_Init+0x1ec>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <HAL_GPIO_Init+0x2c4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00d      	beq.n	8004694 <HAL_GPIO_Init+0x1e8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3e      	ldr	r2, [pc, #248]	; (8004774 <HAL_GPIO_Init+0x2c8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <HAL_GPIO_Init+0x1e4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <HAL_GPIO_Init+0x2cc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_GPIO_Init+0x1e0>
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 800468c:	2304      	movs	r3, #4
 800468e:	e004      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004690:	2302      	movs	r3, #2
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004698:	2300      	movs	r3, #0
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	f002 0203 	and.w	r2, r2, #3
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4093      	lsls	r3, r2
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046aa:	492f      	ldr	r1, [pc, #188]	; (8004768 <HAL_GPIO_Init+0x2bc>)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	492c      	ldr	r1, [pc, #176]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
 80046d0:	e006      	b.n	80046e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	43db      	mvns	r3, r3
 80046da:	4928      	ldr	r1, [pc, #160]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046dc:	4013      	ands	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4922      	ldr	r1, [pc, #136]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	43db      	mvns	r3, r3
 8004702:	491e      	ldr	r1, [pc, #120]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004704:	4013      	ands	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	4918      	ldr	r1, [pc, #96]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	608b      	str	r3, [r1, #8]
 8004720:	e006      	b.n	8004730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	43db      	mvns	r3, r3
 800472a:	4914      	ldr	r1, [pc, #80]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800472c:	4013      	ands	r3, r2
 800472e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d021      	beq.n	8004780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	60cb      	str	r3, [r1, #12]
 8004748:	e021      	b.n	800478e <HAL_GPIO_Init+0x2e2>
 800474a:	bf00      	nop
 800474c:	10320000 	.word	0x10320000
 8004750:	10310000 	.word	0x10310000
 8004754:	10220000 	.word	0x10220000
 8004758:	10210000 	.word	0x10210000
 800475c:	10120000 	.word	0x10120000
 8004760:	10110000 	.word	0x10110000
 8004764:	40021000 	.word	0x40021000
 8004768:	40010000 	.word	0x40010000
 800476c:	40010800 	.word	0x40010800
 8004770:	40010c00 	.word	0x40010c00
 8004774:	40011000 	.word	0x40011000
 8004778:	40011400 	.word	0x40011400
 800477c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	43db      	mvns	r3, r3
 8004788:	4909      	ldr	r1, [pc, #36]	; (80047b0 <HAL_GPIO_Init+0x304>)
 800478a:	4013      	ands	r3, r2
 800478c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f47f ae8e 	bne.w	80044c0 <HAL_GPIO_Init+0x14>
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	372c      	adds	r7, #44	; 0x2c
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
 80047c0:	4613      	mov	r3, r2
 80047c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047c4:	787b      	ldrb	r3, [r7, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047d0:	e003      	b.n	80047da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047d2:	887b      	ldrh	r3, [r7, #2]
 80047d4:	041a      	lsls	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	611a      	str	r2, [r3, #16]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047f6:	887a      	ldrh	r2, [r7, #2]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	041a      	lsls	r2, r3, #16
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	43d9      	mvns	r1, r3
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	400b      	ands	r3, r1
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	611a      	str	r2, [r3, #16]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
	...

08004818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800482e:	4a05      	ldr	r2, [pc, #20]	; (8004844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fc fe38 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40010400 	.word	0x40010400

08004848 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484a:	b08b      	sub	sp, #44	; 0x2c
 800484c:	af06      	add	r7, sp, #24
 800484e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0fd      	b.n	8004a56 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f007 ff40 	bl	800c6f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2203      	movs	r2, #3
 8004878:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f003 fc10 	bl	80080a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	687e      	ldr	r6, [r7, #4]
 800488e:	466d      	mov	r5, sp
 8004890:	f106 0410 	add.w	r4, r6, #16
 8004894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	1d33      	adds	r3, r6, #4
 800489e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	f003 fbda 	bl	800805a <USB_CoreInit>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0ce      	b.n	8004a56 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 fc0b 	bl	80080da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e04c      	b.n	8004964 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	3301      	adds	r3, #1
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	b298      	uxth	r0, r3
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3336      	adds	r3, #54	; 0x36
 8004908:	4602      	mov	r2, r0
 800490a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	3303      	adds	r3, #3
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	3338      	adds	r3, #56	; 0x38
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	440b      	add	r3, r1
 8004944:	333c      	adds	r3, #60	; 0x3c
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	3340      	adds	r3, #64	; 0x40
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	3301      	adds	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3ad      	bcc.n	80048ca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e044      	b.n	80049fe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004974:	7bfa      	ldrb	r2, [r7, #15]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	440b      	add	r3, r1
 8004982:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	440b      	add	r3, r1
 80049da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	3301      	adds	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3b5      	bcc.n	8004974 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	687e      	ldr	r6, [r7, #4]
 8004a10:	466d      	mov	r5, sp
 8004a12:	f106 0410 	add.w	r4, r6, #16
 8004a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	1d33      	adds	r3, r6, #4
 8004a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a22:	6838      	ldr	r0, [r7, #0]
 8004a24:	f003 fb65 	bl	80080f2 <USB_DevInit>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00d      	b.n	8004a56 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f006 f818 	bl	800aa84 <USB_DevDisconnect>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_PCD_Start+0x16>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e016      	b.n	8004aa2 <HAL_PCD_Start+0x44>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f003 fafa 	bl	800807a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a86:	2101      	movs	r1, #1
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f008 f8ae 	bl	800cbea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f005 ffec 	bl	800aa70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f005 ffee 	bl	800aa98 <USB_ReadInterrupts>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac6:	d102      	bne.n	8004ace <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fb5f 	bl	800518c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f005 ffe0 	bl	800aa98 <USB_ReadInterrupts>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae2:	d112      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	b292      	uxth	r2, r2
 8004af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f007 fe7c 	bl	800c7fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b02:	2100      	movs	r1, #0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f923 	bl	8004d50 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 ffc2 	bl	800aa98 <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1e:	d10b      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b32:	b292      	uxth	r2, r2
 8004b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 ffab 	bl	800aa98 <USB_ReadInterrupts>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d10b      	bne.n	8004b66 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b60:	b292      	uxth	r2, r2
 8004b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 ff94 	bl	800aa98 <USB_ReadInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d126      	bne.n	8004bca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	b292      	uxth	r2, r2
 8004b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0208 	bic.w	r2, r2, #8
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f007 fe5d 	bl	800c86c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f005 ff62 	bl	800aa98 <USB_ReadInterrupts>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	f040 8082 	bne.w	8004ce6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e010      	b.n	8004c0a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	7ffb      	ldrb	r3, [r7, #31]
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	3320      	adds	r3, #32
 8004bfe:	443b      	add	r3, r7
 8004c00:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	3301      	adds	r3, #1
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d9eb      	bls.n	8004be8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	b292      	uxth	r2, r2
 8004c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004c40:	bf00      	nop
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f6      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c66:	b292      	uxth	r2, r2
 8004c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e00f      	b.n	8004c92 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	7ffa      	ldrb	r2, [r7, #31]
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	440a      	add	r2, r1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	3320      	adds	r3, #32
 8004c84:	443b      	add	r3, r7
 8004c86:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c8a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c8c:	7ffb      	ldrb	r3, [r7, #31]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b07      	cmp	r3, #7
 8004c96:	d9ec      	bls.n	8004c72 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	b292      	uxth	r2, r2
 8004cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0204 	orr.w	r2, r2, #4
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f007 fda9 	bl	800c838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f005 fed4 	bl	800aa98 <USB_ReadInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfa:	d10e      	bne.n	8004d1a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f007 fd62 	bl	800c7de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f005 feba 	bl	800aa98 <USB_ReadInterrupts>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d10b      	bne.n	8004d48 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d42:	b292      	uxth	r2, r2
 8004d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_SetAddress+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e013      	b.n	8004d92 <HAL_PCD_SetAddress+0x42>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f005 fe61 	bl	800aa4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	460b      	mov	r3, r1
 8004dae:	803b      	strh	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0e      	bge.n	8004dde <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	705a      	strb	r2, [r3, #1]
 8004ddc:	e00e      	b.n	8004dfc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0207 	and.w	r2, r3, #7
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e08:	883a      	ldrh	r2, [r7, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	78ba      	ldrb	r2, [r7, #2]
 8004e12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e26:	78bb      	ldrb	r3, [r7, #2]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d102      	bne.n	8004e32 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_PCD_EP_Open+0xa6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e00e      	b.n	8004e5e <HAL_PCD_EP_Open+0xc4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 f970 	bl	8008134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da0e      	bge.n	8004e98 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	705a      	strb	r2, [r3, #1]
 8004e96:	e00e      	b.n	8004eb6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	f003 0207 	and.w	r2, r3, #7
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_PCD_EP_Close+0x6a>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e00e      	b.n	8004eee <HAL_PCD_EP_Close+0x88>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 fc92 	bl	8008808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	7afb      	ldrb	r3, [r7, #11]
 8004f08:	f003 0207 	and.w	r2, r3, #7
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f42:	7afb      	ldrb	r3, [r7, #11]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6979      	ldr	r1, [r7, #20]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f003 fe44 	bl	8008be0 <USB_EPStartXfer>
 8004f58:	e005      	b.n	8004f66 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f003 fe3d 	bl	8008be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	460b      	mov	r3, r1
 8004fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fae:	7afb      	ldrb	r3, [r7, #11]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ff6:	7afb      	ldrb	r3, [r7, #11]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	4618      	mov	r0, r3
 8005008:	f003 fdea 	bl	8008be0 <USB_EPStartXfer>
 800500c:	e005      	b.n	800501a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	4618      	mov	r0, r3
 8005016:	f003 fde3 	bl	8008be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 0207 	and.w	r2, r3, #7
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	429a      	cmp	r2, r3
 800503c:	d901      	bls.n	8005042 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04c      	b.n	80050dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da0e      	bge.n	8005068 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
 8005066:	e00c      	b.n	8005082 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_PCD_EP_SetStall+0x7e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e01c      	b.n	80050dc <HAL_PCD_EP_SetStall+0xb8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f005 fbcd 	bl	800a850 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f005 fcf2 	bl	800aab6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 020f 	and.w	r2, r3, #15
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d901      	bls.n	8005102 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e040      	b.n	8005184 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0e      	bge.n	8005128 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	705a      	strb	r2, [r3, #1]
 8005126:	e00e      	b.n	8005146 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_PCD_EP_ClrStall+0x82>
 8005162:	2302      	movs	r3, #2
 8005164:	e00e      	b.n	8005184 <HAL_PCD_EP_ClrStall+0xa0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	4618      	mov	r0, r3
 8005176:	f005 fbbb 	bl	800a8f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005194:	e2ec      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800519e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80051ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f040 8161 	bne.w	8005478 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d152      	bne.n	8005266 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	81fb      	strh	r3, [r7, #14]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	89fb      	ldrh	r3, [r7, #14]
 80051d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3328      	adds	r3, #40	; 0x28
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	3302      	adds	r3, #2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	441a      	add	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005224:	2100      	movs	r1, #0
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f007 fabf 	bl	800c7aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 829b 	beq.w	8005770 <PCD_EP_ISR_Handler+0x5e4>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8296 	bne.w	8005770 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005250:	b2da      	uxtb	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	b292      	uxth	r2, r2
 8005258:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005264:	e284      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005276:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	2b00      	cmp	r3, #0
 800527e:	d034      	beq.n	80052ea <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	3306      	adds	r3, #6
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f005 fc49 	bl	800ab56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052d0:	4013      	ands	r3, r2
 80052d2:	823b      	strh	r3, [r7, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	8a3a      	ldrh	r2, [r7, #16]
 80052da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052de:	b292      	uxth	r2, r2
 80052e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f007 fa34 	bl	800c750 <HAL_PCD_SetupStageCallback>
 80052e8:	e242      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f280 823e 	bge.w	8005770 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005300:	4013      	ands	r3, r2
 8005302:	83bb      	strh	r3, [r7, #28]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	8bba      	ldrh	r2, [r7, #28]
 800530a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800530e:	b292      	uxth	r2, r2
 8005310:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	3306      	adds	r3, #6
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <PCD_EP_ISR_Handler+0x1ee>
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	6959      	ldr	r1, [r3, #20]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800535e:	b29b      	uxth	r3, r3
 8005360:	f005 fbf9 	bl	800ab56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	441a      	add	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005372:	2100      	movs	r1, #0
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f007 f9fd 	bl	800c774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 81f2 	bne.w	8005770 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4413      	add	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d112      	bne.n	80053da <PCD_EP_ISR_Handler+0x24e>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053be:	b29a      	uxth	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e02f      	b.n	800543a <PCD_EP_ISR_Handler+0x2ae>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b3e      	cmp	r3, #62	; 0x3e
 80053e0:	d813      	bhi.n	800540a <PCD_EP_ISR_Handler+0x27e>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <PCD_EP_ISR_Handler+0x270>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	3301      	adds	r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29a      	uxth	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e017      	b.n	800543a <PCD_EP_ISR_Handler+0x2ae>
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <PCD_EP_ISR_Handler+0x298>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3b01      	subs	r3, #1
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	b29b      	uxth	r3, r3
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	b29b      	uxth	r3, r3
 800542c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005434:	b29a      	uxth	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	827b      	strh	r3, [r7, #18]
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005452:	827b      	strh	r3, [r7, #18]
 8005454:	8a7b      	ldrh	r3, [r7, #18]
 8005456:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800545a:	827b      	strh	r3, [r7, #18]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	8a7b      	ldrh	r3, [r7, #18]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]
 8005476:	e17b      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800548a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800548e:	2b00      	cmp	r3, #0
 8005490:	f280 80ea 	bge.w	8005668 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054aa:	4013      	ands	r3, r2
 80054ac:	853b      	strh	r3, [r7, #40]	; 0x28
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054c2:	b292      	uxth	r2, r2
 80054c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	7b1b      	ldrb	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d122      	bne.n	800552a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	3306      	adds	r3, #6
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800550c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800550e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8087 	beq.w	8005624 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	6959      	ldr	r1, [r3, #20]
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	88da      	ldrh	r2, [r3, #6]
 8005522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005524:	f005 fb17 	bl	800ab56 <USB_ReadPMA>
 8005528:	e07c      	b.n	8005624 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d108      	bne.n	8005544 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005534:	461a      	mov	r2, r3
 8005536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f927 	bl	800578c <HAL_PCD_EP_DB_Receive>
 800553e:	4603      	mov	r3, r0
 8005540:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005542:	e06f      	b.n	8005624 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d021      	beq.n	80055e2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	3302      	adds	r3, #2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02a      	beq.n	8005624 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	891a      	ldrh	r2, [r3, #8]
 80055da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055dc:	f005 fabb 	bl	800ab56 <USB_ReadPMA>
 80055e0:	e020      	b.n	8005624 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	3306      	adds	r3, #6
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800560c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	895a      	ldrh	r2, [r3, #10]
 800561e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005620:	f005 fa99 	bl	800ab56 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800562a:	441a      	add	r2, r3
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005636:	441a      	add	r2, r3
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <PCD_EP_ISR_Handler+0x4c2>
 8005644:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d206      	bcs.n	800565c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f007 f88d 	bl	800c774 <HAL_PCD_DataOutStageCallback>
 800565a:	e005      	b.n	8005668 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005662:	4618      	mov	r0, r3
 8005664:	f003 fabc 	bl	8008be0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d07e      	beq.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4413      	add	r3, r2
 8005684:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	843b      	strh	r3, [r7, #32]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	8c3b      	ldrh	r3, [r7, #32]
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d00c      	beq.n	80056e0 <PCD_EP_ISR_Handler+0x554>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d146      	bne.n	8005764 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d141      	bne.n	8005764 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4413      	add	r3, r2
 80056f4:	3302      	adds	r3, #2
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005708:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	8bfb      	ldrh	r3, [r7, #30]
 8005710:	429a      	cmp	r2, r3
 8005712:	d906      	bls.n	8005722 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	8bfb      	ldrh	r3, [r7, #30]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	619a      	str	r2, [r3, #24]
 8005720:	e002      	b.n	8005728 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f007 f837 	bl	800c7aa <HAL_PCD_DataInStageCallback>
 800573c:	e018      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	8bfb      	ldrh	r3, [r7, #30]
 8005744:	441a      	add	r2, r3
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	8bfb      	ldrh	r3, [r7, #30]
 8005750:	441a      	add	r2, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575c:	4618      	mov	r0, r3
 800575e:	f003 fa3f 	bl	8008be0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005762:	e005      	b.n	8005770 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005764:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005766:	461a      	mov	r2, r3
 8005768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f91b 	bl	80059a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005778:	b29b      	uxth	r3, r3
 800577a:	b21b      	sxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	f6ff ad0a 	blt.w	8005196 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3738      	adds	r7, #56	; 0x38
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d07e      	beq.n	80058a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	3302      	adds	r3, #2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	8b7b      	ldrh	r3, [r7, #26]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d306      	bcc.n	80057e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	8b7b      	ldrh	r3, [r7, #26]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	619a      	str	r2, [r3, #24]
 80057e4:	e002      	b.n	80057ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d123      	bne.n	800583c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	833b      	strh	r3, [r7, #24]
 8005810:	8b3b      	ldrh	r3, [r7, #24]
 8005812:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005816:	833b      	strh	r3, [r7, #24]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	8b3b      	ldrh	r3, [r7, #24]
 8005828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005838:	b29b      	uxth	r3, r3
 800583a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01f      	beq.n	8005886 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005860:	82fb      	strh	r3, [r7, #22]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	8afb      	ldrh	r3, [r7, #22]
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005886:	8b7b      	ldrh	r3, [r7, #26]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8087 	beq.w	800599c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6959      	ldr	r1, [r3, #20]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	891a      	ldrh	r2, [r3, #8]
 800589a:	8b7b      	ldrh	r3, [r7, #26]
 800589c:	f005 f95b 	bl	800ab56 <USB_ReadPMA>
 80058a0:	e07c      	b.n	800599c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	3306      	adds	r3, #6
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	8b7b      	ldrh	r3, [r7, #26]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d306      	bcc.n	80058e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	8b7b      	ldrh	r3, [r7, #26]
 80058dc:	1ad2      	subs	r2, r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	619a      	str	r2, [r3, #24]
 80058e2:	e002      	b.n	80058ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d123      	bne.n	800593a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	83fb      	strh	r3, [r7, #30]
 800590e:	8bfb      	ldrh	r3, [r7, #30]
 8005910:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005914:	83fb      	strh	r3, [r7, #30]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	8bfb      	ldrh	r3, [r7, #30]
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11f      	bne.n	8005984 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	83bb      	strh	r3, [r7, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	8bbb      	ldrh	r3, [r7, #28]
 8005970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005980:	b29b      	uxth	r3, r3
 8005982:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005984:	8b7b      	ldrh	r3, [r7, #26]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6959      	ldr	r1, [r3, #20]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	895a      	ldrh	r2, [r3, #10]
 8005996:	8b7b      	ldrh	r3, [r7, #26]
 8005998:	f005 f8dd 	bl	800ab56 <USB_ReadPMA>
    }
  }

  return count;
 800599c:	8b7b      	ldrh	r3, [r7, #26]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b0a2      	sub	sp, #136	; 0x88
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 81c7 	beq.w	8005d4e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4413      	add	r3, r2
 80059d4:	3302      	adds	r3, #2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d907      	bls.n	8005a08 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a00:	1ad2      	subs	r2, r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	619a      	str	r2, [r3, #24]
 8005a06:	e002      	b.n	8005a0e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 80b9 	bne.w	8005b8a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d126      	bne.n	8005a6e <HAL_PCD_EP_DB_Transmit+0xc8>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	4413      	add	r3, r2
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e01a      	b.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d116      	bne.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	4413      	add	r3, r2
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d126      	bne.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	011a      	lsls	r2, r3, #4
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e017      	b.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d113      	bne.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	4413      	add	r3, r2
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	011a      	lsls	r2, r3, #4
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f006 fe37 	bl	800c7aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 82d4 	beq.w	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	827b      	strh	r3, [r7, #18]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	8a7b      	ldrh	r3, [r7, #18]
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
 8005b88:	e2b2      	b.n	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d021      	beq.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	f040 8286 	bne.w	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bec:	441a      	add	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d309      	bcc.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	621a      	str	r2, [r3, #32]
 8005c1e:	e015      	b.n	8005c4c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005c28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c36:	e009      	b.n	8005c4c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d155      	bne.n	8005d00 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	4413      	add	r3, r2
 8005c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d112      	bne.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x302>
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e047      	b.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	2b3e      	cmp	r3, #62	; 0x3e
 8005cac:	d811      	bhi.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	e032      	b.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x342>
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e01b      	b.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d117      	bne.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	4413      	add	r3, r2
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	011a      	lsls	r2, r3, #4
 8005d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6959      	ldr	r1, [r3, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	891a      	ldrh	r2, [r3, #8]
 8005d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f004 fec0 	bl	800aacc <USB_WritePMA>
 8005d4c:	e1d0      	b.n	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4413      	add	r3, r2
 8005d62:	3306      	adds	r3, #6
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d307      	bcc.n	8005d96 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	619a      	str	r2, [r3, #24]
 8005d94:	e002      	b.n	8005d9c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 80c4 	bne.w	8005f2e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d126      	bne.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x456>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	4413      	add	r3, r2
 8005dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	011a      	lsls	r2, r3, #4
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e01a      	b.n	8005e32 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d116      	bne.n	8005e32 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	677b      	str	r3, [r7, #116]	; 0x74
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e18:	4413      	add	r3, r2
 8005e1a:	677b      	str	r3, [r7, #116]	; 0x74
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	011a      	lsls	r2, r3, #4
 8005e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e2e:	2200      	movs	r2, #0
 8005e30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d12f      	bne.n	8005ea0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e58:	4413      	add	r3, r2
 8005e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	011a      	lsls	r2, r3, #4
 8005e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e017      	b.n	8005ed0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d113      	bne.n	8005ed0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	4413      	add	r3, r2
 8005eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	011a      	lsls	r2, r3, #4
 8005ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ecc:	2200      	movs	r2, #0
 8005ece:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f006 fc67 	bl	800c7aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 8104 	bne.w	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
 8005f2c:	e0e0      	b.n	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d121      	bne.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	f040 80b4 	bne.w	80060f0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f90:	441a      	add	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d309      	bcc.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	1ad2      	subs	r2, r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	621a      	str	r2, [r3, #32]
 8005fc2:	e015      	b.n	8005ff0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d107      	bne.n	8005fdc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fda:	e009      	b.n	8005ff0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d155      	bne.n	80060aa <HAL_PCD_EP_DB_Transmit+0x704>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600c:	b29b      	uxth	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006012:	4413      	add	r3, r2
 8006014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	011a      	lsls	r2, r3, #4
 800601c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601e:	4413      	add	r3, r2
 8006020:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006024:	65bb      	str	r3, [r7, #88]	; 0x58
 8006026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006028:	2b00      	cmp	r3, #0
 800602a:	d112      	bne.n	8006052 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800602c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006036:	b29a      	uxth	r2, r3
 8006038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e044      	b.n	80060dc <HAL_PCD_EP_DB_Transmit+0x736>
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	2b3e      	cmp	r3, #62	; 0x3e
 8006056:	d811      	bhi.n	800607c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	657b      	str	r3, [r7, #84]	; 0x54
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606a:	3301      	adds	r3, #1
 800606c:	657b      	str	r3, [r7, #84]	; 0x54
 800606e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e02f      	b.n	80060dc <HAL_PCD_EP_DB_Transmit+0x736>
 800607c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	657b      	str	r3, [r7, #84]	; 0x54
 8006082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608e:	3b01      	subs	r3, #1
 8006090:	657b      	str	r3, [r7, #84]	; 0x54
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e018      	b.n	80060dc <HAL_PCD_EP_DB_Transmit+0x736>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d114      	bne.n	80060dc <HAL_PCD_EP_DB_Transmit+0x736>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c0:	4413      	add	r3, r2
 80060c2:	667b      	str	r3, [r7, #100]	; 0x64
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	011a      	lsls	r2, r3, #4
 80060ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d2:	663b      	str	r3, [r7, #96]	; 0x60
 80060d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6959      	ldr	r1, [r3, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	895a      	ldrh	r2, [r3, #10]
 80060e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f004 fcee 	bl	800aacc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610a:	823b      	strh	r3, [r7, #16]
 800610c:	8a3b      	ldrh	r3, [r7, #16]
 800610e:	f083 0310 	eor.w	r3, r3, #16
 8006112:	823b      	strh	r3, [r7, #16]
 8006114:	8a3b      	ldrh	r3, [r7, #16]
 8006116:	f083 0320 	eor.w	r3, r3, #32
 800611a:	823b      	strh	r3, [r7, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	8a3b      	ldrh	r3, [r7, #16]
 800612c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613c:	b29b      	uxth	r3, r3
 800613e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3788      	adds	r7, #136	; 0x88
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	817b      	strh	r3, [r7, #10]
 8006158:	4613      	mov	r3, r2
 800615a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800615c:	897b      	ldrh	r3, [r7, #10]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e009      	b.n	8006194 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006180:	897a      	ldrh	r2, [r7, #10]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2200      	movs	r2, #0
 800619e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	80da      	strh	r2, [r3, #6]
 80061a8:	e00b      	b.n	80061c2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2201      	movs	r2, #1
 80061ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	b29a      	uxth	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e272      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8087 	beq.w	80062fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061f0:	4b92      	ldr	r3, [pc, #584]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 030c 	and.w	r3, r3, #12
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d00c      	beq.n	8006216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061fc:	4b8f      	ldr	r3, [pc, #572]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 030c 	and.w	r3, r3, #12
 8006204:	2b08      	cmp	r3, #8
 8006206:	d112      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
 8006208:	4b8c      	ldr	r3, [pc, #560]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d10b      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006216:	4b89      	ldr	r3, [pc, #548]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d06c      	beq.n	80062fc <HAL_RCC_OscConfig+0x12c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d168      	bne.n	80062fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e24c      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x76>
 8006238:	4b80      	ldr	r3, [pc, #512]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7f      	ldr	r2, [pc, #508]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800623e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	e02e      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x98>
 800624e:	4b7b      	ldr	r3, [pc, #492]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7a      	ldr	r2, [pc, #488]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b78      	ldr	r3, [pc, #480]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a77      	ldr	r2, [pc, #476]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0xbc>
 8006272:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a71      	ldr	r2, [pc, #452]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b6f      	ldr	r3, [pc, #444]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6e      	ldr	r2, [pc, #440]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 800628c:	4b6b      	ldr	r3, [pc, #428]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6a      	ldr	r2, [pc, #424]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a67      	ldr	r2, [pc, #412]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7fd ff76 	bl	800419c <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fd ff72 	bl	800419c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e200      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b5d      	ldr	r3, [pc, #372]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xe4>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fd ff62 	bl	800419c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fd ff5e 	bl	800419c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1ec      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x10c>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800630a:	4b4c      	ldr	r3, [pc, #304]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006316:	4b49      	ldr	r3, [pc, #292]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11c      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
 8006322:	4b46      	ldr	r3, [pc, #280]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	4b43      	ldr	r3, [pc, #268]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e1c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006346:	4b3d      	ldr	r3, [pc, #244]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4939      	ldr	r1, [pc, #228]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635a:	e03a      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006364:	4b36      	ldr	r3, [pc, #216]	; (8006440 <HAL_RCC_OscConfig+0x270>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fd ff17 	bl	800419c <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006372:	f7fd ff13 	bl	800419c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1a1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4927      	ldr	r1, [pc, #156]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]
 80063a4:	e015      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a6:	4b26      	ldr	r3, [pc, #152]	; (8006440 <HAL_RCC_OscConfig+0x270>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd fef6 	bl	800419c <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b4:	f7fd fef2 	bl	800419c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e180      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d03a      	beq.n	8006454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b17      	ldr	r3, [pc, #92]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7fd fed6 	bl	800419c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fd fed2 	bl	800419c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e160      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <HAL_RCC_OscConfig+0x26c>)
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006412:	2001      	movs	r0, #1
 8006414:	f000 faa6 	bl	8006964 <RCC_Delay>
 8006418:	e01c      	b.n	8006454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006420:	f7fd febc 	bl	800419c <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006426:	e00f      	b.n	8006448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006428:	f7fd feb8 	bl	800419c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d908      	bls.n	8006448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e146      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	42420000 	.word	0x42420000
 8006444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	4b92      	ldr	r3, [pc, #584]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e9      	bne.n	8006428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a6 	beq.w	80065ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006466:	4b8b      	ldr	r3, [pc, #556]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4a87      	ldr	r2, [pc, #540]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647c:	61d3      	str	r3, [r2, #28]
 800647e:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	4b82      	ldr	r3, [pc, #520]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d118      	bne.n	80064cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649a:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7e      	ldr	r2, [pc, #504]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a6:	f7fd fe79 	bl	800419c <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7fd fe75 	bl	800419c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b64      	cmp	r3, #100	; 0x64
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e103      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	4b75      	ldr	r3, [pc, #468]	; (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x312>
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a6e      	ldr	r2, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	e02d      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x334>
 80064ea:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4a69      	ldr	r2, [pc, #420]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	6213      	str	r3, [r2, #32]
 80064f6:	4b67      	ldr	r3, [pc, #412]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4a66      	ldr	r2, [pc, #408]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	6213      	str	r3, [r2, #32]
 8006502:	e01c      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d10c      	bne.n	8006526 <HAL_RCC_OscConfig+0x356>
 800650c:	4b61      	ldr	r3, [pc, #388]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4a60      	ldr	r2, [pc, #384]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006512:	f043 0304 	orr.w	r3, r3, #4
 8006516:	6213      	str	r3, [r2, #32]
 8006518:	4b5e      	ldr	r3, [pc, #376]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	4a5d      	ldr	r2, [pc, #372]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6213      	str	r3, [r2, #32]
 8006524:	e00b      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006526:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	4a5a      	ldr	r2, [pc, #360]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6213      	str	r3, [r2, #32]
 8006532:	4b58      	ldr	r3, [pc, #352]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4a57      	ldr	r2, [pc, #348]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006546:	f7fd fe29 	bl	800419c <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654c:	e00a      	b.n	8006564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fd fe25 	bl	800419c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	; 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0b1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ee      	beq.n	800654e <HAL_RCC_OscConfig+0x37e>
 8006570:	e014      	b.n	800659c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006572:	f7fd fe13 	bl	800419c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fd fe0f 	bl	800419c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	; 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e09b      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006590:	4b40      	ldr	r3, [pc, #256]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ee      	bne.n	800657a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	4b3c      	ldr	r3, [pc, #240]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8087 	beq.w	80066c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b8:	4b36      	ldr	r3, [pc, #216]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d061      	beq.n	8006688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d146      	bne.n	800665a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b33      	ldr	r3, [pc, #204]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fd fde3 	bl	800419c <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fd fddf 	bl	800419c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e06d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ec:	4b29      	ldr	r3, [pc, #164]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d108      	bne.n	8006614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4921      	ldr	r1, [pc, #132]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a19      	ldr	r1, [r3, #32]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	430b      	orrs	r3, r1
 8006626:	491b      	ldr	r1, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006632:	f7fd fdb3 	bl	800419c <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663a:	f7fd fdaf 	bl	800419c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e03d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x46a>
 8006658:	e035      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_RCC_OscConfig+0x4cc>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fd fd9c 	bl	800419c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006668:	f7fd fd98 	bl	800419c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e026      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x498>
 8006686:	e01e      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e019      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 8006694:	40021000 	.word	0x40021000
 8006698:	40007000 	.word	0x40007000
 800669c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <HAL_RCC_OscConfig+0x500>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0d0      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e8:	4b6a      	ldr	r3, [pc, #424]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d910      	bls.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b67      	ldr	r3, [pc, #412]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 0207 	bic.w	r2, r3, #7
 80066fe:	4965      	ldr	r1, [pc, #404]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b63      	ldr	r3, [pc, #396]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0b8      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006730:	4b59      	ldr	r3, [pc, #356]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800673a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006748:	4b53      	ldr	r3, [pc, #332]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a52      	ldr	r2, [pc, #328]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006754:	4b50      	ldr	r3, [pc, #320]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	494d      	ldr	r1, [pc, #308]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d040      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d115      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e07f      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d107      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b41      	ldr	r3, [pc, #260]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e073      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a2:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e06b      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b2:	4b39      	ldr	r3, [pc, #228]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f023 0203 	bic.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4936      	ldr	r1, [pc, #216]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c4:	f7fd fcea 	bl	800419c <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fd fce6 	bl	800419c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e053      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 020c 	and.w	r2, r3, #12
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1eb      	bne.n	80067cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d210      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 0207 	bic.w	r2, r3, #7
 800680a:	4922      	ldr	r1, [pc, #136]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e032      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4916      	ldr	r1, [pc, #88]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	490e      	ldr	r1, [pc, #56]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006862:	f000 f821 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006866:	4602      	mov	r2, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	490a      	ldr	r1, [pc, #40]	; (800689c <HAL_RCC_ClockConfig+0x1c8>)
 8006874:	5ccb      	ldrb	r3, [r1, r3]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <HAL_RCC_ClockConfig+0x1cc>)
 800687c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd fc48 	bl	8004118 <HAL_InitTick>

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40022000 	.word	0x40022000
 8006898:	40021000 	.word	0x40021000
 800689c:	0800d700 	.word	0x0800d700
 80068a0:	20000230 	.word	0x20000230
 80068a4:	20000234 	.word	0x20000234

080068a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b490      	push	{r4, r7}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_RCC_GetSysClockFreq+0xac>)
 80068b0:	1d3c      	adds	r4, r7, #4
 80068b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068b8:	f240 2301 	movw	r3, #513	; 0x201
 80068bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	2300      	movs	r3, #0
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068d2:	4b21      	ldr	r3, [pc, #132]	; (8006958 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f003 030c 	and.w	r3, r3, #12
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d002      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x40>
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d003      	beq.n	80068ee <HAL_RCC_GetSysClockFreq+0x46>
 80068e6:	e02b      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068e8:	4b1c      	ldr	r3, [pc, #112]	; (800695c <HAL_RCC_GetSysClockFreq+0xb4>)
 80068ea:	623b      	str	r3, [r7, #32]
      break;
 80068ec:	e02b      	b.n	8006946 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	0c9b      	lsrs	r3, r3, #18
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	3328      	adds	r3, #40	; 0x28
 80068f8:	443b      	add	r3, r7
 80068fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d012      	beq.n	8006930 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <HAL_RCC_GetSysClockFreq+0xb0>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0c5b      	lsrs	r3, r3, #17
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	3328      	adds	r3, #40	; 0x28
 8006916:	443b      	add	r3, r7
 8006918:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800691c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4a0e      	ldr	r2, [pc, #56]	; (800695c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006922:	fb03 f202 	mul.w	r2, r3, r2
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
 800692e:	e004      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006934:	fb02 f303 	mul.w	r3, r2, r3
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	623b      	str	r3, [r7, #32]
      break;
 800693e:	e002      	b.n	8006946 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006942:	623b      	str	r3, [r7, #32]
      break;
 8006944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006946:	6a3b      	ldr	r3, [r7, #32]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3728      	adds	r7, #40	; 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	bc90      	pop	{r4, r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	0800d6b8 	.word	0x0800d6b8
 8006958:	40021000 	.word	0x40021000
 800695c:	007a1200 	.word	0x007a1200
 8006960:	003d0900 	.word	0x003d0900

08006964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <RCC_Delay+0x34>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <RCC_Delay+0x38>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0a5b      	lsrs	r3, r3, #9
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006980:	bf00      	nop
  }
  while (Delay --);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1e5a      	subs	r2, r3, #1
 8006986:	60fa      	str	r2, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f9      	bne.n	8006980 <RCC_Delay+0x1c>
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr
 8006998:	20000230 	.word	0x20000230
 800699c:	10624dd3 	.word	0x10624dd3

080069a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d07d      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069c0:	4b4f      	ldr	r3, [pc, #316]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069cc:	4b4c      	ldr	r3, [pc, #304]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4a4b      	ldr	r2, [pc, #300]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d6:	61d3      	str	r3, [r2, #28]
 80069d8:	4b49      	ldr	r3, [pc, #292]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e8:	4b46      	ldr	r3, [pc, #280]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d118      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069f4:	4b43      	ldr	r3, [pc, #268]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a42      	ldr	r2, [pc, #264]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a00:	f7fd fbcc 	bl	800419c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a06:	e008      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a08:	f7fd fbc8 	bl	800419c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b64      	cmp	r3, #100	; 0x64
 8006a14:	d901      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e06d      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1a:	4b3a      	ldr	r3, [pc, #232]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a26:	4b36      	ldr	r3, [pc, #216]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d02e      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d027      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a44:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d014      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6a:	f7fd fb97 	bl	800419c <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a70:	e00a      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a72:	f7fd fb93 	bl	800419c <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e036      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ee      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4917      	ldr	r1, [pc, #92]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d105      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aac:	4b14      	ldr	r3, [pc, #80]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	490b      	ldr	r1, [pc, #44]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	4904      	ldr	r1, [pc, #16]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	40007000 	.word	0x40007000
 8006b08:	42420440 	.word	0x42420440

08006b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e076      	b.n	8006c0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2e:	d009      	beq.n	8006b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	61da      	str	r2, [r3, #28]
 8006b36:	e005      	b.n	8006b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa ff4e 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	ea42 0103 	orr.w	r1, r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	0c1a      	lsrs	r2, r3, #16
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f002 0204 	and.w	r2, r2, #4
 8006bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_Transmit+0x22>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e126      	b.n	8006e84 <HAL_SPI_Transmit+0x270>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c3e:	f7fd faad 	bl	800419c <HAL_GetTick>
 8006c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d002      	beq.n	8006c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
 8006c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c58:	e10b      	b.n	8006e72 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_SPI_Transmit+0x52>
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c6a:	e102      	b.n	8006e72 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d007      	beq.n	8006cf2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfa:	d14b      	bne.n	8006d94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Transmit+0xf6>
 8006d04:	8afb      	ldrh	r3, [r7, #22]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d13e      	bne.n	8006d88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	1c9a      	adds	r2, r3, #2
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d2e:	e02b      	b.n	8006d88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d112      	bne.n	8006d64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d62:	e011      	b.n	8006d88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d64:	f7fd fa1a 	bl	800419c <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_Transmit+0x168>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Transmit+0x16e>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d86:	e074      	b.n	8006e72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1ce      	bne.n	8006d30 <HAL_SPI_Transmit+0x11c>
 8006d92:	e04c      	b.n	8006e2e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_Transmit+0x18e>
 8006d9c:	8afb      	ldrh	r3, [r7, #22]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d140      	bne.n	8006e24 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	330c      	adds	r3, #12
 8006dac:	7812      	ldrb	r2, [r2, #0]
 8006dae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dc8:	e02c      	b.n	8006e24 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d113      	bne.n	8006e00 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	7812      	ldrb	r2, [r2, #0]
 8006de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dfe:	e011      	b.n	8006e24 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e00:	f7fd f9cc 	bl	800419c <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d803      	bhi.n	8006e18 <HAL_SPI_Transmit+0x204>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e16:	d102      	bne.n	8006e1e <HAL_SPI_Transmit+0x20a>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e22:	e026      	b.n	8006e72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1cd      	bne.n	8006dca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f8b2 	bl	8006f9c <SPI_EndRxTxTransaction>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e000      	b.n	8006e72 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e9c:	f7fd f97e 	bl	800419c <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eac:	f7fd f976 	bl	800419c <HAL_GetTick>
 8006eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eb2:	4b39      	ldr	r3, [pc, #228]	; (8006f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	015b      	lsls	r3, r3, #5
 8006eb8:	0d1b      	lsrs	r3, r3, #20
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec2:	e054      	b.n	8006f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eca:	d050      	beq.n	8006f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ecc:	f7fd f966 	bl	800419c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d902      	bls.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d13d      	bne.n	8006f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efa:	d111      	bne.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	d004      	beq.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d107      	bne.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f28:	d10f      	bne.n	8006f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e017      	b.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4013      	ands	r3, r2
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	bf0c      	ite	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	2300      	movne	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d19b      	bne.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3720      	adds	r7, #32
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000230 	.word	0x20000230

08006f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2180      	movs	r1, #128	; 0x80
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff ff6a 	bl	8006e8c <SPI_WaitFlagStateUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e000      	b.n	8006fd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e041      	b.n	800706e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa fd3c 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f000 fcba 	bl	8007990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e03a      	b.n	8007106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <HAL_TIM_Base_Start_IT+0x98>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d009      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIM_Base_Start_IT+0x9c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_TIM_Base_Start_IT+0x58>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_TIM_Base_Start_IT+0xa0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d111      	bne.n	80070f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d010      	beq.n	8007104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	e007      	b.n	8007104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800

0800711c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f241 1311 	movw	r3, #4369	; 0x1111
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <HAL_TIM_Base_Stop_IT+0x48>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f240 4344 	movw	r3, #1092	; 0x444
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_TIM_Base_Stop_IT+0x48>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e041      	b.n	800720e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f839 	bl	8007216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f000 fbea 	bl	8007990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_TIM_PWM_Start+0x24>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e022      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d109      	bne.n	8007266 <HAL_TIM_PWM_Start+0x3e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e015      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d109      	bne.n	8007280 <HAL_TIM_PWM_Start+0x58>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e008      	b.n	8007292 <HAL_TIM_PWM_Start+0x6a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e05e      	b.n	8007358 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_PWM_Start+0x82>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	e013      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_PWM_Start+0x92>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_PWM_Start+0xa2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	e003      	b.n	80072d2 <HAL_TIM_PWM_Start+0xaa>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2201      	movs	r2, #1
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fdd8 	bl	8007e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <HAL_TIM_PWM_Start+0x138>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d107      	bne.n	80072fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a18      	ldr	r2, [pc, #96]	; (8007360 <HAL_TIM_PWM_Start+0x138>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_TIM_PWM_Start+0xfa>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730c:	d009      	beq.n	8007322 <HAL_TIM_PWM_Start+0xfa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a14      	ldr	r2, [pc, #80]	; (8007364 <HAL_TIM_PWM_Start+0x13c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_TIM_PWM_Start+0xfa>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a12      	ldr	r2, [pc, #72]	; (8007368 <HAL_TIM_PWM_Start+0x140>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d111      	bne.n	8007346 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b06      	cmp	r3, #6
 8007332:	d010      	beq.n	8007356 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007344:	e007      	b.n	8007356 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800

0800736c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fd86 	bl	8007e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a29      	ldr	r2, [pc, #164]	; (8007430 <HAL_TIM_PWM_Stop+0xc4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d117      	bne.n	80073be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	f241 1311 	movw	r3, #4369	; 0x1111
 8007398:	4013      	ands	r3, r2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10f      	bne.n	80073be <HAL_TIM_PWM_Stop+0x52>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	f240 4344 	movw	r3, #1092	; 0x444
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d107      	bne.n	80073be <HAL_TIM_PWM_Stop+0x52>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <HAL_TIM_PWM_Stop+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a1a      	ldr	r2, [r3, #32]
 80073d4:	f240 4344 	movw	r3, #1092	; 0x444
 80073d8:	4013      	ands	r3, r2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d107      	bne.n	80073ee <HAL_TIM_PWM_Stop+0x82>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <HAL_TIM_PWM_Stop+0x92>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073fc:	e013      	b.n	8007426 <HAL_TIM_PWM_Stop+0xba>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b04      	cmp	r3, #4
 8007402:	d104      	bne.n	800740e <HAL_TIM_PWM_Stop+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800740c:	e00b      	b.n	8007426 <HAL_TIM_PWM_Stop+0xba>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d104      	bne.n	800741e <HAL_TIM_PWM_Stop+0xb2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800741c:	e003      	b.n	8007426 <HAL_TIM_PWM_Stop+0xba>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40012c00 	.word	0x40012c00

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa6f 	bl	800795a <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa62 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa71 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa45 	bl	800795a <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa38 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa47 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d122      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa1b 	bl	800795a <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa0e 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa1d 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d122      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b10      	cmp	r3, #16
 8007552:	d11b      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9f1 	bl	800795a <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9e4 	bl	8007948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9f3 	bl	800796c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0201 	mvn.w	r2, #1
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7f8 fea8 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fd32 	bl	8008048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9b7 	bl	800797e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d10e      	bne.n	800763c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b20      	cmp	r3, #32
 800762a:	d107      	bne.n	800763c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0220 	mvn.w	r2, #32
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fcfd 	bl	8008036 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800765a:	2302      	movs	r3, #2
 800765c:	e0ac      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	f200 809f 	bhi.w	80077ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800766e:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	080076a9 	.word	0x080076a9
 8007678:	080077ad 	.word	0x080077ad
 800767c:	080077ad 	.word	0x080077ad
 8007680:	080077ad 	.word	0x080077ad
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080077ad 	.word	0x080077ad
 800768c:	080077ad 	.word	0x080077ad
 8007690:	080077ad 	.word	0x080077ad
 8007694:	0800772b 	.word	0x0800772b
 8007698:	080077ad 	.word	0x080077ad
 800769c:	080077ad 	.word	0x080077ad
 80076a0:	080077ad 	.word	0x080077ad
 80076a4:	0800776b 	.word	0x0800776b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f9d0 	bl	8007a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0208 	orr.w	r2, r2, #8
 80076c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0204 	bic.w	r2, r2, #4
 80076d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6999      	ldr	r1, [r3, #24]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	619a      	str	r2, [r3, #24]
      break;
 80076e6:	e062      	b.n	80077ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fa16 	bl	8007b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6999      	ldr	r1, [r3, #24]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	021a      	lsls	r2, r3, #8
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	619a      	str	r2, [r3, #24]
      break;
 8007728:	e041      	b.n	80077ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fa5f 	bl	8007bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0208 	orr.w	r2, r2, #8
 8007744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0204 	bic.w	r2, r2, #4
 8007754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69d9      	ldr	r1, [r3, #28]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	61da      	str	r2, [r3, #28]
      break;
 8007768:	e021      	b.n	80077ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 faa9 	bl	8007cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69d9      	ldr	r1, [r3, #28]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	021a      	lsls	r2, r3, #8
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	61da      	str	r2, [r3, #28]
      break;
 80077aa:	e000      	b.n	80077ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80077ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIM_ConfigClockSource+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e0b3      	b.n	8007940 <HAL_TIM_ConfigClockSource+0x180>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	d03e      	beq.n	8007890 <HAL_TIM_ConfigClockSource+0xd0>
 8007812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007816:	f200 8087 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x168>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	f000 8085 	beq.w	800792c <HAL_TIM_ConfigClockSource+0x16c>
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d87f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007828:	2b70      	cmp	r3, #112	; 0x70
 800782a:	d01a      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0xa2>
 800782c:	2b70      	cmp	r3, #112	; 0x70
 800782e:	d87b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007830:	2b60      	cmp	r3, #96	; 0x60
 8007832:	d050      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x116>
 8007834:	2b60      	cmp	r3, #96	; 0x60
 8007836:	d877      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007838:	2b50      	cmp	r3, #80	; 0x50
 800783a:	d03c      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0xf6>
 800783c:	2b50      	cmp	r3, #80	; 0x50
 800783e:	d873      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d058      	beq.n	80078f6 <HAL_TIM_ConfigClockSource+0x136>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d86f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d064      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x156>
 800784c:	2b30      	cmp	r3, #48	; 0x30
 800784e:	d86b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007850:	2b20      	cmp	r3, #32
 8007852:	d060      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x156>
 8007854:	2b20      	cmp	r3, #32
 8007856:	d867      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x156>
 800785c:	2b10      	cmp	r3, #16
 800785e:	d05a      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007860:	e062      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6899      	ldr	r1, [r3, #8]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f000 faee 	bl	8007e52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007884:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	609a      	str	r2, [r3, #8]
      break;
 800788e:	e04e      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6899      	ldr	r1, [r3, #8]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f000 fad7 	bl	8007e52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b2:	609a      	str	r2, [r3, #8]
      break;
 80078b4:	e03b      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6859      	ldr	r1, [r3, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f000 fa4e 	bl	8007d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2150      	movs	r1, #80	; 0x50
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 faa5 	bl	8007e1e <TIM_ITRx_SetConfig>
      break;
 80078d4:	e02b      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6859      	ldr	r1, [r3, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f000 fa6c 	bl	8007dc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2160      	movs	r1, #96	; 0x60
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fa95 	bl	8007e1e <TIM_ITRx_SetConfig>
      break;
 80078f4:	e01b      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6859      	ldr	r1, [r3, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	461a      	mov	r2, r3
 8007904:	f000 fa2e 	bl	8007d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2140      	movs	r1, #64	; 0x40
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fa85 	bl	8007e1e <TIM_ITRx_SetConfig>
      break;
 8007914:	e00b      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f000 fa7c 	bl	8007e1e <TIM_ITRx_SetConfig>
        break;
 8007926:	e002      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800792c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <TIM_Base_SetConfig+0xb8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_Base_SetConfig+0x30>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ae:	d007      	beq.n	80079c0 <TIM_Base_SetConfig+0x30>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a26      	ldr	r2, [pc, #152]	; (8007a4c <TIM_Base_SetConfig+0xbc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_Base_SetConfig+0x30>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <TIM_Base_SetConfig+0xc0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d108      	bne.n	80079d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <TIM_Base_SetConfig+0xb8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <TIM_Base_SetConfig+0x62>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e0:	d007      	beq.n	80079f2 <TIM_Base_SetConfig+0x62>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <TIM_Base_SetConfig+0xbc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d003      	beq.n	80079f2 <TIM_Base_SetConfig+0x62>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <TIM_Base_SetConfig+0xc0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d108      	bne.n	8007a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a07      	ldr	r2, [pc, #28]	; (8007a48 <TIM_Base_SetConfig+0xb8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d103      	bne.n	8007a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	615a      	str	r2, [r3, #20]
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800

08007a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f023 0201 	bic.w	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0302 	bic.w	r3, r3, #2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <TIM_OC1_SetConfig+0xc8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10c      	bne.n	8007aca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f023 0308 	bic.w	r3, r3, #8
 8007ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 0304 	bic.w	r3, r3, #4
 8007ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <TIM_OC1_SetConfig+0xc8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d111      	bne.n	8007af6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	621a      	str	r2, [r3, #32]
}
 8007b10:	bf00      	nop
 8007b12:	371c      	adds	r7, #28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40012c00 	.word	0x40012c00

08007b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0210 	bic.w	r2, r3, #16
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0320 	bic.w	r3, r3, #32
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1d      	ldr	r2, [pc, #116]	; (8007bf0 <TIM_OC2_SetConfig+0xd0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10d      	bne.n	8007b9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <TIM_OC2_SetConfig+0xd0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d113      	bne.n	8007bcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr
 8007bf0:	40012c00 	.word	0x40012c00

08007bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	021b      	lsls	r3, r3, #8
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	; (8007cc4 <TIM_OC3_SetConfig+0xd0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10d      	bne.n	8007c6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a14      	ldr	r2, [pc, #80]	; (8007cc4 <TIM_OC3_SetConfig+0xd0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40012c00 	.word	0x40012c00

08007cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	031b      	lsls	r3, r3, #12
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <TIM_OC4_SetConfig+0x98>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d109      	bne.n	8007d3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr
 8007d60:	40012c00 	.word	0x40012c00

08007d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f023 030a 	bic.w	r3, r3, #10
 8007da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	621a      	str	r2, [r3, #32]
}
 8007db6:	bf00      	nop
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f023 0210 	bic.w	r2, r3, #16
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	031b      	lsls	r3, r3, #12
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	621a      	str	r2, [r3, #32]
}
 8007e14:	bf00      	nop
 8007e16:	371c      	adds	r7, #28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f043 0307 	orr.w	r3, r3, #7
 8007e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	609a      	str	r2, [r3, #8]
}
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr

08007e52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	021a      	lsls	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	609a      	str	r2, [r3, #8]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1a      	ldr	r2, [r3, #32]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e046      	b.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3c:	d009      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a12      	ldr	r2, [pc, #72]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10c      	bne.n	8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800

08007f94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e03d      	b.n	800802c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800805a:	b084      	sub	sp, #16
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	f107 0014 	add.w	r0, r7, #20
 8008068:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	b004      	add	sp, #16
 8008078:	4770      	bx	lr

0800807a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800808a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800808e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080ae:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80080b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	43db      	mvns	r3, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4013      	ands	r3, r2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080f2:	b084      	sub	sp, #16
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	f107 0014 	add.w	r0, r7, #20
 8008100:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	b004      	add	sp, #16
 8008130:	4770      	bx	lr
	...

08008134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008134:	b480      	push	{r7}
 8008136:	b09b      	sub	sp, #108	; 0x6c
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	78db      	ldrb	r3, [r3, #3]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d81f      	bhi.n	80081a6 <USB_ActivateEndpoint+0x72>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USB_ActivateEndpoint+0x38>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	0800817d 	.word	0x0800817d
 8008170:	08008199 	.word	0x08008199
 8008174:	080081af 	.word	0x080081af
 8008178:	0800818b 	.word	0x0800818b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800817c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008188:	e012      	b.n	80081b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800818a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800818e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008192:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008196:	e00b      	b.n	80081b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800819c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80081a4:	e004      	b.n	80081b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80081ac:	e000      	b.n	80081b0 <USB_ActivateEndpoint+0x7c>
      break;
 80081ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008214:	b29b      	uxth	r3, r3
 8008216:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	7b1b      	ldrb	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8149 	bne.w	80084b4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8084 	beq.w	8008334 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008236:	b29b      	uxth	r3, r3
 8008238:	461a      	mov	r2, r3
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	4413      	add	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	011a      	lsls	r2, r3, #4
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	085b      	lsrs	r3, r3, #1
 8008256:	b29b      	uxth	r3, r3
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	81fb      	strh	r3, [r7, #14]
 800826e:	89fb      	ldrh	r3, [r7, #14]
 8008270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01b      	beq.n	80082b0 <USB_ActivateEndpoint+0x17c>
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828e:	81bb      	strh	r3, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	89bb      	ldrh	r3, [r7, #12]
 800829c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d020      	beq.n	80082fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ce:	813b      	strh	r3, [r7, #8]
 80082d0:	893b      	ldrh	r3, [r7, #8]
 80082d2:	f083 0320 	eor.w	r3, r3, #32
 80082d6:	813b      	strh	r3, [r7, #8]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
 80082f8:	e27f      	b.n	80087fa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800830c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008310:	817b      	strh	r3, [r7, #10]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	441a      	add	r2, r3
 800831c:	897b      	ldrh	r3, [r7, #10]
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]
 8008332:	e262      	b.n	80087fa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833e:	b29b      	uxth	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	4413      	add	r3, r2
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	011a      	lsls	r2, r3, #4
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	4413      	add	r3, r2
 8008352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	88db      	ldrh	r3, [r3, #6]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	b29b      	uxth	r3, r3
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	4413      	add	r3, r2
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	011a      	lsls	r2, r3, #4
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	4413      	add	r3, r2
 8008386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800838a:	623b      	str	r3, [r7, #32]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d112      	bne.n	80083ba <USB_ActivateEndpoint+0x286>
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800839e:	b29a      	uxth	r2, r3
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	801a      	strh	r2, [r3, #0]
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	e02f      	b.n	800841a <USB_ActivateEndpoint+0x2e6>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b3e      	cmp	r3, #62	; 0x3e
 80083c0:	d813      	bhi.n	80083ea <USB_ActivateEndpoint+0x2b6>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	085b      	lsrs	r3, r3, #1
 80083c8:	663b      	str	r3, [r7, #96]	; 0x60
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <USB_ActivateEndpoint+0x2a8>
 80083d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d8:	3301      	adds	r3, #1
 80083da:	663b      	str	r3, [r7, #96]	; 0x60
 80083dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e017      	b.n	800841a <USB_ActivateEndpoint+0x2e6>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	663b      	str	r3, [r7, #96]	; 0x60
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <USB_ActivateEndpoint+0x2d0>
 80083fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008400:	3b01      	subs	r3, #1
 8008402:	663b      	str	r3, [r7, #96]	; 0x60
 8008404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008406:	b29b      	uxth	r3, r3
 8008408:	029b      	lsls	r3, r3, #10
 800840a:	b29b      	uxth	r3, r3
 800840c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008414:	b29a      	uxth	r2, r3
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	83fb      	strh	r3, [r7, #30]
 8008428:	8bfb      	ldrh	r3, [r7, #30]
 800842a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01b      	beq.n	800846a <USB_ActivateEndpoint+0x336>
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008448:	83bb      	strh	r3, [r7, #28]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	441a      	add	r2, r3
 8008454:	8bbb      	ldrh	r3, [r7, #28]
 8008456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800845e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008466:	b29b      	uxth	r3, r3
 8008468:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	837b      	strh	r3, [r7, #26]
 8008482:	8b7b      	ldrh	r3, [r7, #26]
 8008484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008488:	837b      	strh	r3, [r7, #26]
 800848a:	8b7b      	ldrh	r3, [r7, #26]
 800848c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008490:	837b      	strh	r3, [r7, #26]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	441a      	add	r2, r3
 800849c:	8b7b      	ldrh	r3, [r7, #26]
 800849e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	8013      	strh	r3, [r2, #0]
 80084b2:	e1a2      	b.n	80087fa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80084dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	461a      	mov	r2, r3
 80084fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008500:	4413      	add	r3, r2
 8008502:	65bb      	str	r3, [r7, #88]	; 0x58
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	011a      	lsls	r2, r3, #4
 800850a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800850c:	4413      	add	r3, r2
 800850e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008512:	657b      	str	r3, [r7, #84]	; 0x54
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	891b      	ldrh	r3, [r3, #8]
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	b29b      	uxth	r3, r3
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008534:	4413      	add	r3, r2
 8008536:	653b      	str	r3, [r7, #80]	; 0x50
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	011a      	lsls	r2, r3, #4
 800853e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008540:	4413      	add	r3, r2
 8008542:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	895b      	ldrh	r3, [r3, #10]
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	b29b      	uxth	r3, r3
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 8091 	bne.w	8008684 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008570:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01b      	beq.n	80085b2 <USB_ActivateEndpoint+0x47e>
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800858c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008590:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	441a      	add	r2, r3
 800859c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	873b      	strh	r3, [r7, #56]	; 0x38
 80085c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d01b      	beq.n	8008602 <USB_ActivateEndpoint+0x4ce>
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	441a      	add	r2, r3
 80085ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	86bb      	strh	r3, [r7, #52]	; 0x34
 800861a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800861c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008620:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008622:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008628:	86bb      	strh	r3, [r7, #52]	; 0x34
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800863e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008646:	b29b      	uxth	r3, r3
 8008648:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008660:	867b      	strh	r3, [r7, #50]	; 0x32
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	441a      	add	r2, r3
 800866c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800866e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867e:	b29b      	uxth	r3, r3
 8008680:	8013      	strh	r3, [r2, #0]
 8008682:	e0ba      	b.n	80087fa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01d      	beq.n	80086dc <USB_ActivateEndpoint+0x5a8>
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80086c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80086ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01d      	beq.n	8008734 <USB_ActivateEndpoint+0x600>
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008730:	b29b      	uxth	r3, r3
 8008732:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	78db      	ldrb	r3, [r3, #3]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d024      	beq.n	8008786 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008756:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800875a:	f083 0320 	eor.w	r3, r3, #32
 800875e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]
 8008784:	e01d      	b.n	80087c2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b29b      	uxth	r3, r3
 8008794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800879c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	441a      	add	r2, r3
 80087e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80087fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80087fe:	4618      	mov	r0, r3
 8008800:	376c      	adds	r7, #108	; 0x6c
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008808:	b480      	push	{r7}
 800880a:	b08d      	sub	sp, #52	; 0x34
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	7b1b      	ldrb	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 808e 	bne.w	8008938 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d044      	beq.n	80088ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	81bb      	strh	r3, [r7, #12]
 8008832:	89bb      	ldrh	r3, [r7, #12]
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <USB_DeactivateEndpoint+0x6c>
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	817b      	strh	r3, [r7, #10]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	441a      	add	r2, r3
 800885e:	897b      	ldrh	r3, [r7, #10]
 8008860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800886c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008870:	b29b      	uxth	r3, r3
 8008872:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888a:	813b      	strh	r3, [r7, #8]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	441a      	add	r2, r3
 8008896:	893b      	ldrh	r3, [r7, #8]
 8008898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800889c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	8013      	strh	r3, [r2, #0]
 80088ac:	e192      	b.n	8008bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	827b      	strh	r3, [r7, #18]
 80088bc:	8a7b      	ldrh	r3, [r7, #18]
 80088be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <USB_DeactivateEndpoint+0xf6>
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088dc:	823b      	strh	r3, [r7, #16]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	441a      	add	r2, r3
 80088e8:	8a3b      	ldrh	r3, [r7, #16]
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	81fb      	strh	r3, [r7, #14]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	441a      	add	r2, r3
 8008920:	89fb      	ldrh	r3, [r7, #14]
 8008922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800892e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008932:	b29b      	uxth	r3, r3
 8008934:	8013      	strh	r3, [r2, #0]
 8008936:	e14d      	b.n	8008bd4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 80a5 	bne.w	8008a8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	843b      	strh	r3, [r7, #32]
 8008950:	8c3b      	ldrh	r3, [r7, #32]
 8008952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d01b      	beq.n	8008992 <USB_DeactivateEndpoint+0x18a>
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008970:	83fb      	strh	r3, [r7, #30]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	441a      	add	r2, r3
 800897c:	8bfb      	ldrh	r3, [r7, #30]
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	83bb      	strh	r3, [r7, #28]
 80089a0:	8bbb      	ldrh	r3, [r7, #28]
 80089a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01b      	beq.n	80089e2 <USB_DeactivateEndpoint+0x1da>
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	837b      	strh	r3, [r7, #26]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	441a      	add	r2, r3
 80089cc:	8b7b      	ldrh	r3, [r7, #26]
 80089ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089de:	b29b      	uxth	r3, r3
 80089e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f8:	833b      	strh	r3, [r7, #24]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	441a      	add	r2, r3
 8008a04:	8b3b      	ldrh	r3, [r7, #24]
 8008a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a30:	82fb      	strh	r3, [r7, #22]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	441a      	add	r2, r3
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a68:	82bb      	strh	r3, [r7, #20]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	441a      	add	r2, r3
 8008a74:	8abb      	ldrh	r3, [r7, #20]
 8008a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	8013      	strh	r3, [r2, #0]
 8008a8a:	e0a3      	b.n	8008bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01b      	beq.n	8008adc <USB_DeactivateEndpoint+0x2d4>
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	441a      	add	r2, r3
 8008ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01b      	beq.n	8008b2c <USB_DeactivateEndpoint+0x324>
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	441a      	add	r2, r3
 8008b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	441a      	add	r2, r3
 8008b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	441a      	add	r2, r3
 8008bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3734      	adds	r7, #52	; 0x34
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr

08008be0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b0cc      	sub	sp, #304	; 0x130
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bee:	6018      	str	r0, [r3, #0]
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	f041 817d 	bne.w	8009f06 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d908      	bls.n	8008c3a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008c38:	e007      	b.n	8008c4a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	7b1b      	ldrb	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d152      	bne.n	8008d00 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6959      	ldr	r1, [r3, #20]
 8008c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	88da      	ldrh	r2, [r3, #6]
 8008c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c80:	6800      	ldr	r0, [r0, #0]
 8008c82:	f001 ff23 	bl	800aacc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008c8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cb8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	011a      	lsls	r2, r3, #4
 8008cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	f001 b8b5 	b.w	8009e6a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	78db      	ldrb	r3, [r3, #3]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	f040 84c6 	bne.w	800969e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6a1a      	ldr	r2, [r3, #32]
 8008d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	f240 8443 	bls.w	80095b6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	441a      	add	r2, r3
 8008d74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 823e 	beq.w	800924e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dde:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008de2:	6812      	ldr	r2, [r2, #0]
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f040 809a 	bne.w	8008f2c <USB_EPStartXfer+0x34c>
 8008df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e04:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e08:	6812      	ldr	r2, [r2, #0]
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e2a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	440a      	add	r2, r1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	011a      	lsls	r2, r3, #4
 8008e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d122      	bne.n	8008eaa <USB_EPStartXfer+0x2ca>
 8008e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	e079      	b.n	8008f9e <USB_EPStartXfer+0x3be>
 8008eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eae:	2b3e      	cmp	r3, #62	; 0x3e
 8008eb0:	d81b      	bhi.n	8008eea <USB_EPStartXfer+0x30a>
 8008eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <USB_EPStartXfer+0x2f2>
 8008ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	029b      	lsls	r3, r3, #10
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e059      	b.n	8008f9e <USB_EPStartXfer+0x3be>
 8008eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <USB_EPStartXfer+0x32a>
 8008f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f04:	3b01      	subs	r3, #1
 8008f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	029b      	lsls	r3, r3, #10
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	801a      	strh	r2, [r3, #0]
 8008f2a:	e038      	b.n	8008f9e <USB_EPStartXfer+0x3be>
 8008f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d130      	bne.n	8008f9e <USB_EPStartXfer+0x3be>
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008f56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f5a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	440a      	add	r2, r1
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	011a      	lsls	r2, r3, #4
 8008f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f76:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	895b      	ldrh	r3, [r3, #10]
 8008faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6959      	ldr	r1, [r3, #20]
 8008fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008fc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008fc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f001 fd7d 	bl	800aacc <USB_WritePMA>
            ep->xfer_buff += len;
 8008fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe2:	441a      	add	r2, r3
 8008fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	429a      	cmp	r2, r3
 800900a:	d90f      	bls.n	800902c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800900c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a1a      	ldr	r2, [r3, #32]
 8009018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901c:	1ad2      	subs	r2, r2, r3
 800901e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	621a      	str	r2, [r3, #32]
 800902a:	e00e      	b.n	800904a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800902c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800903c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2200      	movs	r2, #0
 8009048:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800904a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f040 809a 	bne.w	8009190 <USB_EPStartXfer+0x5b0>
 800905c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009060:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009068:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907e:	b29b      	uxth	r3, r3
 8009080:	4619      	mov	r1, r3
 8009082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009086:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800908a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800908e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	440a      	add	r2, r1
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	011a      	lsls	r2, r3, #4
 80090a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80090b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d122      	bne.n	800910e <USB_EPStartXfer+0x52e>
 80090c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	801a      	strh	r2, [r3, #0]
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fe:	b29a      	uxth	r2, r3
 8009100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e083      	b.n	8009216 <USB_EPStartXfer+0x636>
 800910e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009112:	2b3e      	cmp	r3, #62	; 0x3e
 8009114:	d81b      	bhi.n	800914e <USB_EPStartXfer+0x56e>
 8009116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USB_EPStartXfer+0x556>
 800912c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009130:	3301      	adds	r3, #1
 8009132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800913a:	b29b      	uxth	r3, r3
 800913c:	029b      	lsls	r3, r3, #10
 800913e:	b29a      	uxth	r2, r3
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	e063      	b.n	8009216 <USB_EPStartXfer+0x636>
 800914e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <USB_EPStartXfer+0x58e>
 8009164:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009168:	3b01      	subs	r3, #1
 800916a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800916e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009172:	b29b      	uxth	r3, r3
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009180:	b29a      	uxth	r2, r3
 8009182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009186:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	e042      	b.n	8009216 <USB_EPStartXfer+0x636>
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d13a      	bne.n	8009216 <USB_EPStartXfer+0x636>
 80091a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80091a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4619      	mov	r1, r3
 80091c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80091ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091d2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80091d6:	6812      	ldr	r2, [r2, #0]
 80091d8:	440a      	add	r2, r1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	011a      	lsls	r2, r3, #4
 80091ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80091fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009208:	b29a      	uxth	r2, r3
 800920a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	891b      	ldrh	r3, [r3, #8]
 8009222:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6959      	ldr	r1, [r3, #20]
 8009232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009236:	b29b      	uxth	r3, r3
 8009238:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800923c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009240:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009244:	6800      	ldr	r0, [r0, #0]
 8009246:	f001 fc41 	bl	800aacc <USB_WritePMA>
 800924a:	f000 be0e 	b.w	8009e6a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800924e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d16d      	bne.n	800933a <USB_EPStartXfer+0x75a>
 800925e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	64bb      	str	r3, [r7, #72]	; 0x48
 800926a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009278:	b29b      	uxth	r3, r3
 800927a:	461a      	mov	r2, r3
 800927c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927e:	4413      	add	r3, r2
 8009280:	64bb      	str	r3, [r7, #72]	; 0x48
 8009282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	011a      	lsls	r2, r3, #4
 8009290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009292:	4413      	add	r3, r2
 8009294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009298:	647b      	str	r3, [r7, #68]	; 0x44
 800929a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d112      	bne.n	80092c8 <USB_EPStartXfer+0x6e8>
 80092a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e063      	b.n	8009390 <USB_EPStartXfer+0x7b0>
 80092c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092cc:	2b3e      	cmp	r3, #62	; 0x3e
 80092ce:	d817      	bhi.n	8009300 <USB_EPStartXfer+0x720>
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	085b      	lsrs	r3, r3, #1
 80092d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80092da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d004      	beq.n	80092f0 <USB_EPStartXfer+0x710>
 80092e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092ea:	3301      	adds	r3, #1
 80092ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80092f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	029b      	lsls	r3, r3, #10
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	e047      	b.n	8009390 <USB_EPStartXfer+0x7b0>
 8009300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009304:	095b      	lsrs	r3, r3, #5
 8009306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800930a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <USB_EPStartXfer+0x740>
 8009316:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800931a:	3b01      	subs	r3, #1
 800931c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009320:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009324:	b29b      	uxth	r3, r3
 8009326:	029b      	lsls	r3, r3, #10
 8009328:	b29b      	uxth	r3, r3
 800932a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009332:	b29a      	uxth	r2, r3
 8009334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009336:	801a      	strh	r2, [r3, #0]
 8009338:	e02a      	b.n	8009390 <USB_EPStartXfer+0x7b0>
 800933a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d122      	bne.n	8009390 <USB_EPStartXfer+0x7b0>
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	653b      	str	r3, [r7, #80]	; 0x50
 8009356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936a:	4413      	add	r3, r2
 800936c:	653b      	str	r3, [r7, #80]	; 0x50
 800936e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	011a      	lsls	r2, r3, #4
 800937c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800937e:	4413      	add	r3, r2
 8009380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938a:	b29a      	uxth	r2, r3
 800938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6959      	ldr	r1, [r3, #20]
 80093ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80093ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	f001 fb84 	bl	800aacc <USB_WritePMA>
            ep->xfer_buff += len;
 80093c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d4:	441a      	add	r2, r3
 80093d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6a1a      	ldr	r2, [r3, #32]
 80093ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d90f      	bls.n	800941e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80093fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6a1a      	ldr	r2, [r3, #32]
 800940a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	621a      	str	r2, [r3, #32]
 800941c:	e00e      	b.n	800943c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2200      	movs	r2, #0
 800943a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800943c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	643b      	str	r3, [r7, #64]	; 0x40
 8009448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d16d      	bne.n	8009534 <USB_EPStartXfer+0x954>
 8009458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	63bb      	str	r3, [r7, #56]	; 0x38
 8009464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009472:	b29b      	uxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	4413      	add	r3, r2
 800947a:	63bb      	str	r3, [r7, #56]	; 0x38
 800947c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	011a      	lsls	r2, r3, #4
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	4413      	add	r3, r2
 800948e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009492:	637b      	str	r3, [r7, #52]	; 0x34
 8009494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d112      	bne.n	80094c2 <USB_EPStartXfer+0x8e2>
 800949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	e05d      	b.n	800957e <USB_EPStartXfer+0x99e>
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c6:	2b3e      	cmp	r3, #62	; 0x3e
 80094c8:	d817      	bhi.n	80094fa <USB_EPStartXfer+0x91a>
 80094ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <USB_EPStartXfer+0x90a>
 80094e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094e4:	3301      	adds	r3, #1
 80094e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80094ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	029b      	lsls	r3, r3, #10
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	e041      	b.n	800957e <USB_EPStartXfer+0x99e>
 80094fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fe:	095b      	lsrs	r3, r3, #5
 8009500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009508:	f003 031f 	and.w	r3, r3, #31
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <USB_EPStartXfer+0x93a>
 8009510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009514:	3b01      	subs	r3, #1
 8009516:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800951a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800951e:	b29b      	uxth	r3, r3
 8009520:	029b      	lsls	r3, r3, #10
 8009522:	b29b      	uxth	r3, r3
 8009524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952c:	b29a      	uxth	r2, r3
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	e024      	b.n	800957e <USB_EPStartXfer+0x99e>
 8009534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d11c      	bne.n	800957e <USB_EPStartXfer+0x99e>
 8009544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009552:	b29b      	uxth	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009558:	4413      	add	r3, r2
 800955a:	643b      	str	r3, [r7, #64]	; 0x40
 800955c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	011a      	lsls	r2, r3, #4
 800956a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800956c:	4413      	add	r3, r2
 800956e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009578:	b29a      	uxth	r2, r3
 800957a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800957e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6959      	ldr	r1, [r3, #20]
 800959a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800959e:	b29b      	uxth	r3, r3
 80095a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80095a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80095a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80095ac:	6800      	ldr	r0, [r0, #0]
 80095ae:	f001 fa8d 	bl	800aacc <USB_WritePMA>
 80095b2:	f000 bc5a 	b.w	8009e6a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80095c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80095e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80095f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	441a      	add	r2, r3
 800960a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800960e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800961a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961e:	b29b      	uxth	r3, r3
 8009620:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800962e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800963c:	b29b      	uxth	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009642:	4413      	add	r3, r2
 8009644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	011a      	lsls	r2, r3, #4
 8009654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009656:	4413      	add	r3, r2
 8009658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800965c:	65bb      	str	r3, [r7, #88]	; 0x58
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009662:	b29a      	uxth	r2, r3
 8009664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	891b      	ldrh	r3, [r3, #8]
 8009674:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6959      	ldr	r1, [r3, #20]
 8009684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009688:	b29b      	uxth	r3, r3
 800968a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800968e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009692:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	f001 fa18 	bl	800aacc <USB_WritePMA>
 800969c:	e3e5      	b.n	8009e6a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800969e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80096c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	441a      	add	r2, r3
 80096e2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80096e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80096f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a1a      	ldr	r2, [r3, #32]
 8009706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800970a:	1ad2      	subs	r2, r2, r3
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 81bc 	beq.w	8009ab8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800974e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d16d      	bne.n	800983a <USB_EPStartXfer+0xc5a>
 800975e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	67bb      	str	r3, [r7, #120]	; 0x78
 800976a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009778:	b29b      	uxth	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977e:	4413      	add	r3, r2
 8009780:	67bb      	str	r3, [r7, #120]	; 0x78
 8009782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	011a      	lsls	r2, r3, #4
 8009790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009792:	4413      	add	r3, r2
 8009794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009798:	677b      	str	r3, [r7, #116]	; 0x74
 800979a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d112      	bne.n	80097c8 <USB_EPStartXfer+0xbe8>
 80097a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c4:	801a      	strh	r2, [r3, #0]
 80097c6:	e060      	b.n	800988a <USB_EPStartXfer+0xcaa>
 80097c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097cc:	2b3e      	cmp	r3, #62	; 0x3e
 80097ce:	d817      	bhi.n	8009800 <USB_EPStartXfer+0xc20>
 80097d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d4:	085b      	lsrs	r3, r3, #1
 80097d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <USB_EPStartXfer+0xc10>
 80097e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097ea:	3301      	adds	r3, #1
 80097ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	029b      	lsls	r3, r3, #10
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	e044      	b.n	800988a <USB_EPStartXfer+0xcaa>
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009804:	095b      	lsrs	r3, r3, #5
 8009806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800980a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980e:	f003 031f 	and.w	r3, r3, #31
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <USB_EPStartXfer+0xc40>
 8009816:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800981a:	3b01      	subs	r3, #1
 800981c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009824:	b29b      	uxth	r3, r3
 8009826:	029b      	lsls	r3, r3, #10
 8009828:	b29b      	uxth	r3, r3
 800982a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009832:	b29a      	uxth	r2, r3
 8009834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e027      	b.n	800988a <USB_EPStartXfer+0xcaa>
 800983a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d11f      	bne.n	800988a <USB_EPStartXfer+0xcaa>
 800984a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009858:	b29b      	uxth	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009860:	4413      	add	r3, r2
 8009862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	011a      	lsls	r2, r3, #4
 8009874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009878:	4413      	add	r3, r2
 800987a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800987e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009884:	b29a      	uxth	r2, r3
 8009886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009888:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800988a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	895b      	ldrh	r3, [r3, #10]
 8009896:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800989a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6959      	ldr	r1, [r3, #20]
 80098a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80098b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80098b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80098b8:	6800      	ldr	r0, [r0, #0]
 80098ba:	f001 f907 	bl	800aacc <USB_WritePMA>
          ep->xfer_buff += len;
 80098be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ce:	441a      	add	r2, r3
 80098d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80098dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6a1a      	ldr	r2, [r3, #32]
 80098e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d90f      	bls.n	8009918 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80098f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6a1a      	ldr	r2, [r3, #32]
 8009904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009908:	1ad2      	subs	r2, r2, r3
 800990a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	621a      	str	r2, [r3, #32]
 8009916:	e00e      	b.n	8009936 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800992c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2200      	movs	r2, #0
 8009934:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8295 	beq.w	8009e6a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d16d      	bne.n	8009a2c <USB_EPStartXfer+0xe4c>
 8009950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	66bb      	str	r3, [r7, #104]	; 0x68
 800995c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996a:	b29b      	uxth	r3, r3
 800996c:	461a      	mov	r2, r3
 800996e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009970:	4413      	add	r3, r2
 8009972:	66bb      	str	r3, [r7, #104]	; 0x68
 8009974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	011a      	lsls	r2, r3, #4
 8009982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009984:	4413      	add	r3, r2
 8009986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800998a:	667b      	str	r3, [r7, #100]	; 0x64
 800998c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d112      	bne.n	80099ba <USB_EPStartXfer+0xdda>
 8009994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800999e:	b29a      	uxth	r2, r3
 80099a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	e063      	b.n	8009a82 <USB_EPStartXfer+0xea2>
 80099ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099be:	2b3e      	cmp	r3, #62	; 0x3e
 80099c0:	d817      	bhi.n	80099f2 <USB_EPStartXfer+0xe12>
 80099c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80099cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d004      	beq.n	80099e2 <USB_EPStartXfer+0xe02>
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099dc:	3301      	adds	r3, #1
 80099de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	029b      	lsls	r3, r3, #10
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	e047      	b.n	8009a82 <USB_EPStartXfer+0xea2>
 80099f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80099fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a00:	f003 031f 	and.w	r3, r3, #31
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <USB_EPStartXfer+0xe32>
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	029b      	lsls	r3, r3, #10
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	e02a      	b.n	8009a82 <USB_EPStartXfer+0xea2>
 8009a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	785b      	ldrb	r3, [r3, #1]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d122      	bne.n	8009a82 <USB_EPStartXfer+0xea2>
 8009a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	673b      	str	r3, [r7, #112]	; 0x70
 8009a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a5c:	4413      	add	r3, r2
 8009a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8009a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	011a      	lsls	r2, r3, #4
 8009a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	891b      	ldrh	r3, [r3, #8]
 8009a8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6959      	ldr	r1, [r3, #20]
 8009a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009aa8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009aac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009ab0:	6800      	ldr	r0, [r0, #0]
 8009ab2:	f001 f80b 	bl	800aacc <USB_WritePMA>
 8009ab6:	e1d8      	b.n	8009e6a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d178      	bne.n	8009bba <USB_EPStartXfer+0xfda>
 8009ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aec:	4413      	add	r3, r2
 8009aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	011a      	lsls	r2, r3, #4
 8009b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b04:	4413      	add	r3, r2
 8009b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d116      	bne.n	8009b44 <USB_EPStartXfer+0xf64>
 8009b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b28:	801a      	strh	r2, [r3, #0]
 8009b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	e06b      	b.n	8009c1c <USB_EPStartXfer+0x103c>
 8009b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b48:	2b3e      	cmp	r3, #62	; 0x3e
 8009b4a:	d818      	bhi.n	8009b7e <USB_EPStartXfer+0xf9e>
 8009b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <USB_EPStartXfer+0xf8c>
 8009b62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b66:	3301      	adds	r3, #1
 8009b68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009b6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	029b      	lsls	r3, r3, #10
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	e04e      	b.n	8009c1c <USB_EPStartXfer+0x103c>
 8009b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <USB_EPStartXfer+0xfbe>
 8009b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009b9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	029b      	lsls	r3, r3, #10
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bb6:	801a      	strh	r2, [r3, #0]
 8009bb8:	e030      	b.n	8009c1c <USB_EPStartXfer+0x103c>
 8009bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d128      	bne.n	8009c1c <USB_EPStartXfer+0x103c>
 8009bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bee:	4413      	add	r3, r2
 8009bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	011a      	lsls	r2, r3, #4
 8009c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c06:	4413      	add	r3, r2
 8009c08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	891b      	ldrh	r3, [r3, #8]
 8009c28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6959      	ldr	r1, [r3, #20]
 8009c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009c46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	f000 ff3e 	bl	800aacc <USB_WritePMA>
          ep->xfer_buff += len;
 8009c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	695a      	ldr	r2, [r3, #20]
 8009c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c60:	441a      	add	r2, r3
 8009c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6a1a      	ldr	r2, [r3, #32]
 8009c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d90f      	bls.n	8009caa <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6a1a      	ldr	r2, [r3, #32]
 8009c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9a:	1ad2      	subs	r2, r2, r3
 8009c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	621a      	str	r2, [r3, #32]
 8009ca8:	e00e      	b.n	8009cc8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 80cc 	beq.w	8009e6a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d178      	bne.n	8009de2 <USB_EPStartXfer+0x1202>
 8009cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d14:	4413      	add	r3, r2
 8009d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	011a      	lsls	r2, r3, #4
 8009d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d116      	bne.n	8009d6c <USB_EPStartXfer+0x118c>
 8009d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d50:	801a      	strh	r2, [r3, #0]
 8009d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d68:	801a      	strh	r2, [r3, #0]
 8009d6a:	e064      	b.n	8009e36 <USB_EPStartXfer+0x1256>
 8009d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d70:	2b3e      	cmp	r3, #62	; 0x3e
 8009d72:	d818      	bhi.n	8009da6 <USB_EPStartXfer+0x11c6>
 8009d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <USB_EPStartXfer+0x11b4>
 8009d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d8e:	3301      	adds	r3, #1
 8009d90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	029b      	lsls	r3, r3, #10
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009da2:	801a      	strh	r2, [r3, #0]
 8009da4:	e047      	b.n	8009e36 <USB_EPStartXfer+0x1256>
 8009da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db4:	f003 031f 	and.w	r3, r3, #31
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <USB_EPStartXfer+0x11e6>
 8009dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	029b      	lsls	r3, r3, #10
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dde:	801a      	strh	r2, [r3, #0]
 8009de0:	e029      	b.n	8009e36 <USB_EPStartXfer+0x1256>
 8009de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d121      	bne.n	8009e36 <USB_EPStartXfer+0x1256>
 8009df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	461a      	mov	r2, r3
 8009e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e08:	4413      	add	r3, r2
 8009e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	011a      	lsls	r2, r3, #4
 8009e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e20:	4413      	add	r3, r2
 8009e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	895b      	ldrh	r3, [r3, #10]
 8009e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6959      	ldr	r1, [r3, #20]
 8009e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009e64:	6800      	ldr	r0, [r0, #0]
 8009e66:	f000 fe31 	bl	800aacc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e8c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e98:	8013      	strh	r3, [r2, #0]
 8009e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ea6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009eaa:	8812      	ldrh	r2, [r2, #0]
 8009eac:	f082 0210 	eor.w	r2, r2, #16
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009eba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ebe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009ec2:	8812      	ldrh	r2, [r2, #0]
 8009ec4:	f082 0220 	eor.w	r2, r2, #32
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	441a      	add	r2, r3
 8009ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	8013      	strh	r3, [r2, #0]
 8009f02:	f000 bc9f 	b.w	800a844 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	7b1b      	ldrb	r3, [r3, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f040 80ae 	bne.w	800a074 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d917      	bls.n	8009f64 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	699a      	ldr	r2, [r3, #24]
 8009f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f54:	1ad2      	subs	r2, r2, r3
 8009f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	619a      	str	r2, [r3, #24]
 8009f62:	e00e      	b.n	8009f82 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	011a      	lsls	r2, r3, #4
 8009fba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d116      	bne.n	8009ffe <USB_EPStartXfer+0x141e>
 8009fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fe2:	801a      	strh	r2, [r3, #0]
 8009fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ffa:	801a      	strh	r2, [r3, #0]
 8009ffc:	e3e8      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 8009ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a002:	2b3e      	cmp	r3, #62	; 0x3e
 800a004:	d818      	bhi.n	800a038 <USB_EPStartXfer+0x1458>
 800a006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <USB_EPStartXfer+0x1446>
 800a01c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a020:	3301      	adds	r3, #1
 800a022:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	029b      	lsls	r3, r3, #10
 800a02e:	b29a      	uxth	r2, r3
 800a030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	e3cb      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 800a038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a03c:	095b      	lsrs	r3, r3, #5
 800a03e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a046:	f003 031f 	and.w	r3, r3, #31
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <USB_EPStartXfer+0x1478>
 800a04e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a052:	3b01      	subs	r3, #1
 800a054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	029b      	lsls	r3, r3, #10
 800a060:	b29b      	uxth	r3, r3
 800a062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a070:	801a      	strh	r2, [r3, #0]
 800a072:	e3ad      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	78db      	ldrb	r3, [r3, #3]
 800a080:	2b02      	cmp	r3, #2
 800a082:	f040 8200 	bne.w	800a486 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	785b      	ldrb	r3, [r3, #1]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f040 8091 	bne.w	800a1ba <USB_EPStartXfer+0x15da>
 800a098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a09c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a0bc:	4413      	add	r3, r2
 800a0be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	011a      	lsls	r2, r3, #4
 800a0d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d116      	bne.n	800a11c <USB_EPStartXfer+0x153c>
 800a0ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a100:	801a      	strh	r2, [r3, #0]
 800a102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a112:	b29a      	uxth	r2, r3
 800a114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e083      	b.n	800a224 <USB_EPStartXfer+0x1644>
 800a11c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b3e      	cmp	r3, #62	; 0x3e
 800a12a:	d820      	bhi.n	800a16e <USB_EPStartXfer+0x158e>
 800a12c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	085b      	lsrs	r3, r3, #1
 800a13a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a13e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <USB_EPStartXfer+0x157c>
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a156:	3301      	adds	r3, #1
 800a158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	b29b      	uxth	r3, r3
 800a162:	029b      	lsls	r3, r3, #10
 800a164:	b29a      	uxth	r2, r3
 800a166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	e05a      	b.n	800a224 <USB_EPStartXfer+0x1644>
 800a16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	095b      	lsrs	r3, r3, #5
 800a17c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f003 031f 	and.w	r3, r3, #31
 800a190:	2b00      	cmp	r3, #0
 800a192:	d104      	bne.n	800a19e <USB_EPStartXfer+0x15be>
 800a194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a198:	3b01      	subs	r3, #1
 800a19a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	029b      	lsls	r3, r3, #10
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1b6:	801a      	strh	r2, [r3, #0]
 800a1b8:	e034      	b.n	800a224 <USB_EPStartXfer+0x1644>
 800a1ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d12c      	bne.n	800a224 <USB_EPStartXfer+0x1644>
 800a1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	011a      	lsls	r2, r3, #4
 800a202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a206:	4413      	add	r3, r2
 800a208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a20c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a222:	801a      	strh	r2, [r3, #0]
 800a224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f040 8091 	bne.w	800a366 <USB_EPStartXfer+0x1786>
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a260:	b29b      	uxth	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a268:	4413      	add	r3, r2
 800a26a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	011a      	lsls	r2, r3, #4
 800a27c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a280:	4413      	add	r3, r2
 800a282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a28a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d116      	bne.n	800a2c8 <USB_EPStartXfer+0x16e8>
 800a29a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	e07c      	b.n	800a3c2 <USB_EPStartXfer+0x17e2>
 800a2c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b3e      	cmp	r3, #62	; 0x3e
 800a2d6:	d820      	bhi.n	800a31a <USB_EPStartXfer+0x173a>
 800a2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USB_EPStartXfer+0x1728>
 800a2fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a302:	3301      	adds	r3, #1
 800a304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	029b      	lsls	r3, r3, #10
 800a310:	b29a      	uxth	r2, r3
 800a312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	e053      	b.n	800a3c2 <USB_EPStartXfer+0x17e2>
 800a31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a31e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	095b      	lsrs	r3, r3, #5
 800a328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f003 031f 	and.w	r3, r3, #31
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d104      	bne.n	800a34a <USB_EPStartXfer+0x176a>
 800a340:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a344:	3b01      	subs	r3, #1
 800a346:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a34a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a34e:	b29b      	uxth	r3, r3
 800a350:	029b      	lsls	r3, r3, #10
 800a352:	b29b      	uxth	r3, r3
 800a354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a362:	801a      	strh	r2, [r3, #0]
 800a364:	e02d      	b.n	800a3c2 <USB_EPStartXfer+0x17e2>
 800a366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d125      	bne.n	800a3c2 <USB_EPStartXfer+0x17e2>
 800a376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a384:	b29b      	uxth	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a38c:	4413      	add	r3, r2
 800a38e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	011a      	lsls	r2, r3, #4
 800a3a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3c0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a3c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 81fe 	beq.w	800a7d0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a3d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a3f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a3f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <USB_EPStartXfer+0x182c>
 800a400:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10d      	bne.n	800a428 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a40c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 81db 	bne.w	800a7d0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a41a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 81d4 	bne.w	800a7d0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a42c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	441a      	add	r2, r3
 800a46c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a47c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a480:	b29b      	uxth	r3, r3
 800a482:	8013      	strh	r3, [r2, #0]
 800a484:	e1a4      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a48a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	78db      	ldrb	r3, [r3, #3]
 800a492:	2b01      	cmp	r3, #1
 800a494:	f040 819a 	bne.w	800a7cc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d917      	bls.n	800a4e4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a4c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699a      	ldr	r2, [r3, #24]
 800a4d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	619a      	str	r2, [r3, #24]
 800a4e2:	e00e      	b.n	800a502 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a4e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a4f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d178      	bne.n	800a604 <USB_EPStartXfer+0x1a24>
 800a512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a52e:	b29b      	uxth	r3, r3
 800a530:	461a      	mov	r2, r3
 800a532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a536:	4413      	add	r3, r2
 800a538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a53c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	011a      	lsls	r2, r3, #4
 800a54a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a54e:	4413      	add	r3, r2
 800a550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a554:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d116      	bne.n	800a58e <USB_EPStartXfer+0x19ae>
 800a560:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a584:	b29a      	uxth	r2, r3
 800a586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a58a:	801a      	strh	r2, [r3, #0]
 800a58c:	e06b      	b.n	800a666 <USB_EPStartXfer+0x1a86>
 800a58e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a592:	2b3e      	cmp	r3, #62	; 0x3e
 800a594:	d818      	bhi.n	800a5c8 <USB_EPStartXfer+0x19e8>
 800a596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a59a:	085b      	lsrs	r3, r3, #1
 800a59c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <USB_EPStartXfer+0x19d6>
 800a5ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5c4:	801a      	strh	r2, [r3, #0]
 800a5c6:	e04e      	b.n	800a666 <USB_EPStartXfer+0x1a86>
 800a5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5cc:	095b      	lsrs	r3, r3, #5
 800a5ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5d6:	f003 031f 	and.w	r3, r3, #31
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d104      	bne.n	800a5e8 <USB_EPStartXfer+0x1a08>
 800a5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	029b      	lsls	r3, r3, #10
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a600:	801a      	strh	r2, [r3, #0]
 800a602:	e030      	b.n	800a666 <USB_EPStartXfer+0x1a86>
 800a604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d128      	bne.n	800a666 <USB_EPStartXfer+0x1a86>
 800a614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a630:	b29b      	uxth	r3, r3
 800a632:	461a      	mov	r2, r3
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a638:	4413      	add	r3, r2
 800a63a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a63e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	011a      	lsls	r2, r3, #4
 800a64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a650:	4413      	add	r3, r2
 800a652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a65a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a65e:	b29a      	uxth	r2, r3
 800a660:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a664:	801a      	strh	r2, [r3, #0]
 800a666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d178      	bne.n	800a776 <USB_EPStartXfer+0x1b96>
 800a684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	011a      	lsls	r2, r3, #4
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d116      	bne.n	800a700 <USB_EPStartXfer+0x1b20>
 800a6d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6fc:	801a      	strh	r2, [r3, #0]
 800a6fe:	e067      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 800a700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a704:	2b3e      	cmp	r3, #62	; 0x3e
 800a706:	d818      	bhi.n	800a73a <USB_EPStartXfer+0x1b5a>
 800a708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a70c:	085b      	lsrs	r3, r3, #1
 800a70e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d004      	beq.n	800a728 <USB_EPStartXfer+0x1b48>
 800a71e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a722:	3301      	adds	r3, #1
 800a724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	029b      	lsls	r3, r3, #10
 800a730:	b29a      	uxth	r2, r3
 800a732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a736:	801a      	strh	r2, [r3, #0]
 800a738:	e04a      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 800a73a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a73e:	095b      	lsrs	r3, r3, #5
 800a740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a748:	f003 031f 	and.w	r3, r3, #31
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <USB_EPStartXfer+0x1b7a>
 800a750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a754:	3b01      	subs	r3, #1
 800a756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a75a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a75e:	b29b      	uxth	r3, r3
 800a760:	029b      	lsls	r3, r3, #10
 800a762:	b29b      	uxth	r3, r3
 800a764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	e02c      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 800a776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a77a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d124      	bne.n	800a7d0 <USB_EPStartXfer+0x1bf0>
 800a786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a78a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a794:	b29b      	uxth	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a79c:	4413      	add	r3, r2
 800a79e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	011a      	lsls	r2, r3, #4
 800a7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a7be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e001      	b.n	800a7d0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e03a      	b.n	800a846 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a7fa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a7fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a802:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a806:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a80a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a80e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	441a      	add	r2, r3
 800a82c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a840:	b29b      	uxth	r3, r3
 800a842:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d020      	beq.n	800a8a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a878:	81bb      	strh	r3, [r7, #12]
 800a87a:	89bb      	ldrh	r3, [r7, #12]
 800a87c:	f083 0310 	eor.w	r3, r3, #16
 800a880:	81bb      	strh	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	441a      	add	r2, r3
 800a88c:	89bb      	ldrh	r3, [r7, #12]
 800a88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	8013      	strh	r3, [r2, #0]
 800a8a2:	e01f      	b.n	800a8e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ba:	81fb      	strh	r3, [r7, #14]
 800a8bc:	89fb      	ldrh	r3, [r7, #14]
 800a8be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8c2:	81fb      	strh	r3, [r7, #14]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	89fb      	ldrh	r3, [r7, #14]
 800a8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	7b1b      	ldrb	r3, [r3, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f040 809d 	bne.w	800aa3e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d04c      	beq.n	800a9a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	823b      	strh	r3, [r7, #16]
 800a91a:	8a3b      	ldrh	r3, [r7, #16]
 800a91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01b      	beq.n	800a95c <USB_EPClearStall+0x6c>
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93a:	81fb      	strh	r3, [r7, #14]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	441a      	add	r2, r3
 800a946:	89fb      	ldrh	r3, [r7, #14]
 800a948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a94c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a958:	b29b      	uxth	r3, r3
 800a95a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	78db      	ldrb	r3, [r3, #3]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d06c      	beq.n	800aa3e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29b      	uxth	r3, r3
 800a972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97a:	81bb      	strh	r3, [r7, #12]
 800a97c:	89bb      	ldrh	r3, [r7, #12]
 800a97e:	f083 0320 	eor.w	r3, r3, #32
 800a982:	81bb      	strh	r3, [r7, #12]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	89bb      	ldrh	r3, [r7, #12]
 800a990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	8013      	strh	r3, [r2, #0]
 800a9a4:	e04b      	b.n	800aa3e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	82fb      	strh	r3, [r7, #22]
 800a9b4:	8afb      	ldrh	r3, [r7, #22]
 800a9b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01b      	beq.n	800a9f6 <USB_EPClearStall+0x106>
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d4:	82bb      	strh	r3, [r7, #20]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	441a      	add	r2, r3
 800a9e0:	8abb      	ldrh	r3, [r7, #20]
 800a9e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa0c:	827b      	strh	r3, [r7, #18]
 800aa0e:	8a7b      	ldrh	r3, [r7, #18]
 800aa10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa14:	827b      	strh	r3, [r7, #18]
 800aa16:	8a7b      	ldrh	r3, [r7, #18]
 800aa18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa1c:	827b      	strh	r3, [r7, #18]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	441a      	add	r2, r3
 800aa28:	8a7b      	ldrh	r3, [r7, #18]
 800aa2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr

0800aa4a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2280      	movs	r2, #128	; 0x80
 800aa60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr

0800aa70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bc80      	pop	{r7}
 800aa82:	4770      	bx	lr

0800aa84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr

0800aa98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr

0800aab6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bc80      	pop	{r7}
 800aaca:	4770      	bx	lr

0800aacc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aacc:	b480      	push	{r7}
 800aace:	b08d      	sub	sp, #52	; 0x34
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4611      	mov	r1, r2
 800aad8:	461a      	mov	r2, r3
 800aada:	460b      	mov	r3, r1
 800aadc:	80fb      	strh	r3, [r7, #6]
 800aade:	4613      	mov	r3, r2
 800aae0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aae2:	88bb      	ldrh	r3, [r7, #4]
 800aae4:	3301      	adds	r3, #1
 800aae6:	085b      	lsrs	r3, r3, #1
 800aae8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aaf2:	88fb      	ldrh	r3, [r7, #6]
 800aaf4:	005a      	lsls	r2, r3, #1
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aafe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab04:	e01e      	b.n	800ab44 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	3301      	adds	r3, #1
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	3302      	adds	r3, #2
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	3302      	adds	r3, #2
 800ab36:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	3b01      	subs	r3, #1
 800ab42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1dd      	bne.n	800ab06 <USB_WritePMA+0x3a>
  }
}
 800ab4a:	bf00      	nop
 800ab4c:	bf00      	nop
 800ab4e:	3734      	adds	r7, #52	; 0x34
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr

0800ab56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b08b      	sub	sp, #44	; 0x2c
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	4611      	mov	r1, r2
 800ab62:	461a      	mov	r2, r3
 800ab64:	460b      	mov	r3, r1
 800ab66:	80fb      	strh	r3, [r7, #6]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ab6c:	88bb      	ldrh	r3, [r7, #4]
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	005a      	lsls	r2, r3, #1
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab88:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8e:	e01b      	b.n	800abc8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	3301      	adds	r3, #1
 800abaa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	0a1b      	lsrs	r3, r3, #8
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	3301      	adds	r3, #1
 800abba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	3302      	adds	r3, #2
 800abc0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	3b01      	subs	r3, #1
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e0      	bne.n	800ab90 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800abce:	88bb      	ldrh	r3, [r7, #4]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	701a      	strb	r2, [r3, #0]
  }
}
 800abea:	bf00      	nop
 800abec:	372c      	adds	r7, #44	; 0x2c
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr

0800abf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7c1b      	ldrb	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d115      	bne.n	800ac38 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac10:	2202      	movs	r2, #2
 800ac12:	2181      	movs	r1, #129	; 0x81
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f001 feac 	bl	800c972 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac24:	2202      	movs	r2, #2
 800ac26:	2101      	movs	r1, #1
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 fea2 	bl	800c972 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ac36:	e012      	b.n	800ac5e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac38:	2340      	movs	r3, #64	; 0x40
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	2181      	movs	r1, #129	; 0x81
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 fe97 	bl	800c972 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac4a:	2340      	movs	r3, #64	; 0x40
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	2101      	movs	r1, #1
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 fe8e 	bl	800c972 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac5e:	2308      	movs	r3, #8
 800ac60:	2203      	movs	r2, #3
 800ac62:	2182      	movs	r1, #130	; 0x82
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fe84 	bl	800c972 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac74:	f001 ffa4 	bl	800cbc0 <USBD_static_malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d102      	bne.n	800ac90 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	73fb      	strb	r3, [r7, #15]
 800ac8e:	e026      	b.n	800acde <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2200      	movs	r2, #0
 800acae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7c1b      	ldrb	r3, [r3, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d109      	bne.n	800acce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acc4:	2101      	movs	r1, #1
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 ff44 	bl	800cb54 <USBD_LL_PrepareReceive>
 800accc:	e007      	b.n	800acde <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acd4:	2340      	movs	r3, #64	; 0x40
 800acd6:	2101      	movs	r1, #1
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f001 ff3b 	bl	800cb54 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800acf8:	2181      	movs	r1, #129	; 0x81
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 fe5f 	bl	800c9be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad06:	2101      	movs	r1, #1
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fe58 	bl	800c9be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad16:	2182      	movs	r1, #130	; 0x82
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f001 fe50 	bl	800c9be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f001 ff4a 	bl	800cbd8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b086      	sub	sp, #24
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad66:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d039      	beq.n	800adf4 <USBD_CDC_Setup+0x9e>
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	d17f      	bne.n	800ae84 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	88db      	ldrh	r3, [r3, #6]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d029      	beq.n	800ade0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	b25b      	sxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	da11      	bge.n	800adba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ada2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	88d2      	ldrh	r2, [r2, #6]
 800ada8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	88db      	ldrh	r3, [r3, #6]
 800adb0:	461a      	mov	r2, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fa09 	bl	800c1ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800adb8:	e06b      	b.n	800ae92 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	785a      	ldrb	r2, [r3, #1]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	88db      	ldrh	r3, [r3, #6]
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800add0:	6939      	ldr	r1, [r7, #16]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	88db      	ldrh	r3, [r3, #6]
 800add6:	461a      	mov	r2, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 fa24 	bl	800c226 <USBD_CtlPrepareRx>
      break;
 800adde:	e058      	b.n	800ae92 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	7850      	ldrb	r0, [r2, #1]
 800adec:	2200      	movs	r2, #0
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	4798      	blx	r3
      break;
 800adf2:	e04e      	b.n	800ae92 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	2b0b      	cmp	r3, #11
 800adfa:	d02e      	beq.n	800ae5a <USBD_CDC_Setup+0x104>
 800adfc:	2b0b      	cmp	r3, #11
 800adfe:	dc38      	bgt.n	800ae72 <USBD_CDC_Setup+0x11c>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <USBD_CDC_Setup+0xb4>
 800ae04:	2b0a      	cmp	r3, #10
 800ae06:	d014      	beq.n	800ae32 <USBD_CDC_Setup+0xdc>
 800ae08:	e033      	b.n	800ae72 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d107      	bne.n	800ae24 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae14:	f107 030c 	add.w	r3, r7, #12
 800ae18:	2202      	movs	r2, #2
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 f9d4 	bl	800c1ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae22:	e02e      	b.n	800ae82 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 f965 	bl	800c0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	75fb      	strb	r3, [r7, #23]
          break;
 800ae30:	e027      	b.n	800ae82 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d107      	bne.n	800ae4c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae3c:	f107 030f 	add.w	r3, r7, #15
 800ae40:	2201      	movs	r2, #1
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 f9c0 	bl	800c1ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae4a:	e01a      	b.n	800ae82 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 f951 	bl	800c0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae54:	2302      	movs	r3, #2
 800ae56:	75fb      	strb	r3, [r7, #23]
          break;
 800ae58:	e013      	b.n	800ae82 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae60:	2b03      	cmp	r3, #3
 800ae62:	d00d      	beq.n	800ae80 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 f945 	bl	800c0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae70:	e006      	b.n	800ae80 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f001 f93e 	bl	800c0f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae7e:	e000      	b.n	800ae82 <USBD_CDC_Setup+0x12c>
          break;
 800ae80:	bf00      	nop
      }
      break;
 800ae82:	e006      	b.n	800ae92 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 f935 	bl	800c0f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae90:	bf00      	nop
  }

  return ret;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeb6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d03a      	beq.n	800af38 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	331c      	adds	r3, #28
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d029      	beq.n	800af2c <USBD_CDC_DataIn+0x90>
 800aed8:	78fa      	ldrb	r2, [r7, #3]
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	331c      	adds	r3, #28
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	78f9      	ldrb	r1, [r7, #3]
 800aeec:	68b8      	ldr	r0, [r7, #8]
 800aeee:	460b      	mov	r3, r1
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	440b      	add	r3, r1
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4403      	add	r3, r0
 800aef8:	3338      	adds	r3, #56	; 0x38
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	fbb2 f1f3 	udiv	r1, r2, r3
 800af00:	fb01 f303 	mul.w	r3, r1, r3
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d110      	bne.n	800af2c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800af0a:	78fa      	ldrb	r2, [r7, #3]
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	331c      	adds	r3, #28
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af1e:	78f9      	ldrb	r1, [r7, #3]
 800af20:	2300      	movs	r3, #0
 800af22:	2200      	movs	r2, #0
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 fdf2 	bl	800cb0e <USBD_LL_Transmit>
 800af2a:	e003      	b.n	800af34 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	e000      	b.n	800af3a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800af38:	2302      	movs	r3, #2
  }
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 fe1d 	bl	800cb9a <USBD_LL_GetRxDataSize>
 800af60:	4602      	mov	r2, r0
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00d      	beq.n	800af8e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800af86:	4611      	mov	r1, r2
 800af88:	4798      	blx	r3

    return USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	e000      	b.n	800af90 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800af8e:	2302      	movs	r3, #2
  }
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d015      	beq.n	800afde <USBD_CDC_EP0_RxReady+0x46>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800afb8:	2bff      	cmp	r3, #255	; 0xff
 800afba:	d010      	beq.n	800afde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800afca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800afd2:	b292      	uxth	r2, r2
 800afd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	22ff      	movs	r2, #255	; 0xff
 800afda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2243      	movs	r2, #67	; 0x43
 800aff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800aff6:	4b03      	ldr	r3, [pc, #12]	; (800b004 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	200002c4 	.word	0x200002c4

0800b008 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2243      	movs	r2, #67	; 0x43
 800b014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b016:	4b03      	ldr	r3, [pc, #12]	; (800b024 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bc80      	pop	{r7}
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000280 	.word	0x20000280

0800b028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2243      	movs	r2, #67	; 0x43
 800b034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b036:	4b03      	ldr	r3, [pc, #12]	; (800b044 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bc80      	pop	{r7}
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20000308 	.word	0x20000308

0800b048 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	220a      	movs	r2, #10
 800b054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b056:	4b03      	ldr	r3, [pc, #12]	; (800b064 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	2000023c 	.word	0x2000023c

0800b068 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b072:	2302      	movs	r3, #2
 800b074:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	bc80      	pop	{r7}
 800b092:	4770      	bx	lr

0800b094 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bc80      	pop	{r7}
 800b0c4:	4770      	bx	lr

0800b0c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01c      	beq.n	800b140 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d115      	bne.n	800b13c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2181      	movs	r1, #129	; 0x81
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 fceb 	bl	800cb0e <USBD_LL_Transmit>

      return USBD_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	e002      	b.n	800b142 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e000      	b.n	800b142 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b140:	2302      	movs	r3, #2
  }
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b158:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b160:	2b00      	cmp	r3, #0
 800b162:	d017      	beq.n	800b194 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	7c1b      	ldrb	r3, [r3, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d109      	bne.n	800b180 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b172:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b176:	2101      	movs	r1, #1
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 fceb 	bl	800cb54 <USBD_LL_PrepareReceive>
 800b17e:	e007      	b.n	800b190 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b186:	2340      	movs	r3, #64	; 0x40
 800b188:	2101      	movs	r1, #1
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 fce2 	bl	800cb54 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	e000      	b.n	800b196 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b194:	2302      	movs	r3, #2
  }
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1b2:	2302      	movs	r3, #2
 800b1b4:	e01a      	b.n	800b1ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	79fa      	ldrb	r2, [r7, #7]
 800b1e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f001 fb4f 	bl	800c888 <USBD_LL_Init>

  return USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
 800b214:	e001      	b.n	800b21a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b216:	2302      	movs	r3, #2
 800b218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 fb84 	bl	800c93c <USBD_LL_Start>

  return USBD_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bc80      	pop	{r7}
 800b250:	4770      	bx	lr

0800b252 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b25e:	2302      	movs	r3, #2
 800b260:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00c      	beq.n	800b286 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	78fa      	ldrb	r2, [r7, #3]
 800b276:	4611      	mov	r1, r2
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b286:	7bfb      	ldrb	r3, [r7, #15]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	78fa      	ldrb	r2, [r7, #3]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3

  return USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fed8 	bl	800c07e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2dc:	461a      	mov	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d016      	beq.n	800b320 <USBD_LL_SetupStage+0x6a>
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d81c      	bhi.n	800b330 <USBD_LL_SetupStage+0x7a>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <USBD_LL_SetupStage+0x4a>
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d008      	beq.n	800b310 <USBD_LL_SetupStage+0x5a>
 800b2fe:	e017      	b.n	800b330 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f9cb 	bl	800b6a4 <USBD_StdDevReq>
      break;
 800b30e:	e01a      	b.n	800b346 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fa2d 	bl	800b778 <USBD_StdItfReq>
      break;
 800b31e:	e012      	b.n	800b346 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fa6d 	bl	800b808 <USBD_StdEPReq>
      break;
 800b32e:	e00a      	b.n	800b346 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f001 fb5c 	bl	800c9fc <USBD_LL_StallEP>
      break;
 800b344:	bf00      	nop
  }

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	460b      	mov	r3, r1
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b35e:	7afb      	ldrb	r3, [r7, #11]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d14b      	bne.n	800b3fc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b36a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b372:	2b03      	cmp	r3, #3
 800b374:	d134      	bne.n	800b3e0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d919      	bls.n	800b3b6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	68da      	ldr	r2, [r3, #12]
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b398:	429a      	cmp	r2, r3
 800b39a:	d203      	bcs.n	800b3a4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	e002      	b.n	800b3aa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 ff57 	bl	800c262 <USBD_CtlContinueRx>
 800b3b4:	e038      	b.n	800b428 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d105      	bne.n	800b3d8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 ff54 	bl	800c286 <USBD_CtlSendStatus>
 800b3de:	e023      	b.n	800b428 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d11e      	bne.n	800b428 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f001 fb01 	bl	800c9fc <USBD_LL_StallEP>
 800b3fa:	e015      	b.n	800b428 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00d      	beq.n	800b424 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d108      	bne.n	800b424 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	7afa      	ldrb	r2, [r7, #11]
 800b41c:	4611      	mov	r1, r2
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	4798      	blx	r3
 800b422:	e001      	b.n	800b428 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b424:	2302      	movs	r3, #2
 800b426:	e000      	b.n	800b42a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	460b      	mov	r3, r1
 800b43c:	607a      	str	r2, [r7, #4]
 800b43e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d17f      	bne.n	800b546 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3314      	adds	r3, #20
 800b44a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b452:	2b02      	cmp	r3, #2
 800b454:	d15c      	bne.n	800b510 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	68da      	ldr	r2, [r3, #12]
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d915      	bls.n	800b48e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	b29b      	uxth	r3, r3
 800b476:	461a      	mov	r2, r3
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fec1 	bl	800c202 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b480:	2300      	movs	r3, #0
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f001 fb64 	bl	800cb54 <USBD_LL_PrepareReceive>
 800b48c:	e04e      	b.n	800b52c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	6912      	ldr	r2, [r2, #16]
 800b496:	fbb3 f1f2 	udiv	r1, r3, r2
 800b49a:	fb01 f202 	mul.w	r2, r1, r2
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11c      	bne.n	800b4de <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d316      	bcc.n	800b4de <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d20f      	bcs.n	800b4de <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fe9d 	bl	800c202 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 fb3c 	bl	800cb54 <USBD_LL_PrepareReceive>
 800b4dc:	e026      	b.n	800b52c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d105      	bne.n	800b500 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b500:	2180      	movs	r1, #128	; 0x80
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f001 fa7a 	bl	800c9fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fecf 	bl	800c2ac <USBD_CtlReceiveStatus>
 800b50e:	e00d      	b.n	800b52c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b516:	2b04      	cmp	r3, #4
 800b518:	d004      	beq.n	800b524 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b524:	2180      	movs	r1, #128	; 0x80
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f001 fa68 	bl	800c9fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b532:	2b01      	cmp	r3, #1
 800b534:	d11d      	bne.n	800b572 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff fe81 	bl	800b23e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b544:	e015      	b.n	800b572 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d108      	bne.n	800b56e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	7afa      	ldrb	r2, [r7, #11]
 800b566:	4611      	mov	r1, r2
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	4798      	blx	r3
 800b56c:	e001      	b.n	800b572 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b56e:	2302      	movs	r3, #2
 800b570:	e000      	b.n	800b574 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 f9f1 	bl	800c972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2240      	movs	r2, #64	; 0x40
 800b59c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5a0:	2340      	movs	r3, #64	; 0x40
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2180      	movs	r1, #128	; 0x80
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 f9e3 	bl	800c972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2240      	movs	r2, #64	; 0x40
 800b5b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	6852      	ldr	r2, [r2, #4]
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	4798      	blx	r3
  }

  return USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	bc80      	pop	{r7}
 800b61a:	4770      	bx	lr

0800b61c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2204      	movs	r2, #4
 800b634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	bc80      	pop	{r7}
 800b642:	4770      	bx	lr

0800b644 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b652:	2b04      	cmp	r3, #4
 800b654:	d105      	bne.n	800b662 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	bc80      	pop	{r7}
 800b66c:	4770      	bx	lr

0800b66e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d10b      	bne.n	800b698 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d005      	beq.n	800b698 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6ba:	2b40      	cmp	r3, #64	; 0x40
 800b6bc:	d005      	beq.n	800b6ca <USBD_StdDevReq+0x26>
 800b6be:	2b40      	cmp	r3, #64	; 0x40
 800b6c0:	d84f      	bhi.n	800b762 <USBD_StdDevReq+0xbe>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d009      	beq.n	800b6da <USBD_StdDevReq+0x36>
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	d14b      	bne.n	800b762 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
      break;
 800b6d8:	e048      	b.n	800b76c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b09      	cmp	r3, #9
 800b6e0:	d839      	bhi.n	800b756 <USBD_StdDevReq+0xb2>
 800b6e2:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <USBD_StdDevReq+0x44>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b739 	.word	0x0800b739
 800b6ec:	0800b74d 	.word	0x0800b74d
 800b6f0:	0800b757 	.word	0x0800b757
 800b6f4:	0800b743 	.word	0x0800b743
 800b6f8:	0800b757 	.word	0x0800b757
 800b6fc:	0800b71b 	.word	0x0800b71b
 800b700:	0800b711 	.word	0x0800b711
 800b704:	0800b757 	.word	0x0800b757
 800b708:	0800b72f 	.word	0x0800b72f
 800b70c:	0800b725 	.word	0x0800b725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9dc 	bl	800bad0 <USBD_GetDescriptor>
          break;
 800b718:	e022      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fb3f 	bl	800bda0 <USBD_SetAddress>
          break;
 800b722:	e01d      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fb7e 	bl	800be28 <USBD_SetConfig>
          break;
 800b72c:	e018      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fc07 	bl	800bf44 <USBD_GetConfig>
          break;
 800b736:	e013      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fc37 	bl	800bfae <USBD_GetStatus>
          break;
 800b740:	e00e      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fc65 	bl	800c014 <USBD_SetFeature>
          break;
 800b74a:	e009      	b.n	800b760 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fc74 	bl	800c03c <USBD_ClrFeature>
          break;
 800b754:	e004      	b.n	800b760 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fccc 	bl	800c0f6 <USBD_CtlError>
          break;
 800b75e:	bf00      	nop
      }
      break;
 800b760:	e004      	b.n	800b76c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fcc6 	bl	800c0f6 <USBD_CtlError>
      break;
 800b76a:	bf00      	nop
  }

  return ret;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop

0800b778 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b78e:	2b40      	cmp	r3, #64	; 0x40
 800b790:	d005      	beq.n	800b79e <USBD_StdItfReq+0x26>
 800b792:	2b40      	cmp	r3, #64	; 0x40
 800b794:	d82e      	bhi.n	800b7f4 <USBD_StdItfReq+0x7c>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <USBD_StdItfReq+0x26>
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	d12a      	bne.n	800b7f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d81d      	bhi.n	800b7e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	889b      	ldrh	r3, [r3, #4]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d813      	bhi.n	800b7dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	88db      	ldrh	r3, [r3, #6]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d110      	bne.n	800b7f0 <USBD_StdItfReq+0x78>
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10d      	bne.n	800b7f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fd56 	bl	800c286 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7da:	e009      	b.n	800b7f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fc89 	bl	800c0f6 <USBD_CtlError>
          break;
 800b7e4:	e004      	b.n	800b7f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fc84 	bl	800c0f6 <USBD_CtlError>
          break;
 800b7ee:	e000      	b.n	800b7f2 <USBD_StdItfReq+0x7a>
          break;
 800b7f0:	bf00      	nop
      }
      break;
 800b7f2:	e004      	b.n	800b7fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fc7d 	bl	800c0f6 <USBD_CtlError>
      break;
 800b7fc:	bf00      	nop
  }

  return USBD_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	889b      	ldrh	r3, [r3, #4]
 800b81a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b824:	2b40      	cmp	r3, #64	; 0x40
 800b826:	d007      	beq.n	800b838 <USBD_StdEPReq+0x30>
 800b828:	2b40      	cmp	r3, #64	; 0x40
 800b82a:	f200 8146 	bhi.w	800baba <USBD_StdEPReq+0x2b2>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <USBD_StdEPReq+0x40>
 800b832:	2b20      	cmp	r3, #32
 800b834:	f040 8141 	bne.w	800baba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
      break;
 800b846:	e13d      	b.n	800bac4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b850:	2b20      	cmp	r3, #32
 800b852:	d10a      	bne.n	800b86a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	4798      	blx	r3
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	e12d      	b.n	800bac6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d007      	beq.n	800b882 <USBD_StdEPReq+0x7a>
 800b872:	2b03      	cmp	r3, #3
 800b874:	f300 811b 	bgt.w	800baae <USBD_StdEPReq+0x2a6>
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d072      	beq.n	800b962 <USBD_StdEPReq+0x15a>
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d03a      	beq.n	800b8f6 <USBD_StdEPReq+0xee>
 800b880:	e115      	b.n	800baae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d002      	beq.n	800b892 <USBD_StdEPReq+0x8a>
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d015      	beq.n	800b8bc <USBD_StdEPReq+0xb4>
 800b890:	e02b      	b.n	800b8ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b892:	7bbb      	ldrb	r3, [r7, #14]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00c      	beq.n	800b8b2 <USBD_StdEPReq+0xaa>
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2b80      	cmp	r3, #128	; 0x80
 800b89c:	d009      	beq.n	800b8b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 f8aa 	bl	800c9fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8a8:	2180      	movs	r1, #128	; 0x80
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 f8a6 	bl	800c9fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8b0:	e020      	b.n	800b8f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fc1e 	bl	800c0f6 <USBD_CtlError>
              break;
 800b8ba:	e01b      	b.n	800b8f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	885b      	ldrh	r3, [r3, #2]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10e      	bne.n	800b8e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00b      	beq.n	800b8e2 <USBD_StdEPReq+0xda>
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	2b80      	cmp	r3, #128	; 0x80
 800b8ce:	d008      	beq.n	800b8e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	88db      	ldrh	r3, [r3, #6]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f001 f88d 	bl	800c9fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fccf 	bl	800c286 <USBD_CtlSendStatus>

              break;
 800b8e8:	e004      	b.n	800b8f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fc02 	bl	800c0f6 <USBD_CtlError>
              break;
 800b8f2:	bf00      	nop
          }
          break;
 800b8f4:	e0e0      	b.n	800bab8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d002      	beq.n	800b906 <USBD_StdEPReq+0xfe>
 800b900:	2b03      	cmp	r3, #3
 800b902:	d015      	beq.n	800b930 <USBD_StdEPReq+0x128>
 800b904:	e026      	b.n	800b954 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00c      	beq.n	800b926 <USBD_StdEPReq+0x11e>
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
 800b90e:	2b80      	cmp	r3, #128	; 0x80
 800b910:	d009      	beq.n	800b926 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 f870 	bl	800c9fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b91c:	2180      	movs	r1, #128	; 0x80
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 f86c 	bl	800c9fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b924:	e01c      	b.n	800b960 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fbe4 	bl	800c0f6 <USBD_CtlError>
              break;
 800b92e:	e017      	b.n	800b960 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	885b      	ldrh	r3, [r3, #2]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d112      	bne.n	800b95e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 f877 	bl	800ca3a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc9a 	bl	800c286 <USBD_CtlSendStatus>
              }
              break;
 800b952:	e004      	b.n	800b95e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fbcd 	bl	800c0f6 <USBD_CtlError>
              break;
 800b95c:	e000      	b.n	800b960 <USBD_StdEPReq+0x158>
              break;
 800b95e:	bf00      	nop
          }
          break;
 800b960:	e0aa      	b.n	800bab8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d002      	beq.n	800b972 <USBD_StdEPReq+0x16a>
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d032      	beq.n	800b9d6 <USBD_StdEPReq+0x1ce>
 800b970:	e097      	b.n	800baa2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d007      	beq.n	800b988 <USBD_StdEPReq+0x180>
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	2b80      	cmp	r3, #128	; 0x80
 800b97c:	d004      	beq.n	800b988 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fbb8 	bl	800c0f6 <USBD_CtlError>
                break;
 800b986:	e091      	b.n	800baac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	da0b      	bge.n	800b9a8 <USBD_StdEPReq+0x1a0>
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	3310      	adds	r3, #16
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	e00b      	b.n	800b9c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	3304      	adds	r3, #4
 800b9c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fbfb 	bl	800c1ca <USBD_CtlSendData>
              break;
 800b9d4:	e06a      	b.n	800baac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da11      	bge.n	800ba02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	f003 020f 	and.w	r2, r3, #15
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	3318      	adds	r3, #24
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d117      	bne.n	800ba28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fb7b 	bl	800c0f6 <USBD_CtlError>
                  break;
 800ba00:	e054      	b.n	800baac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
 800ba04:	f003 020f 	and.w	r2, r3, #15
 800ba08:	6879      	ldr	r1, [r7, #4]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	440b      	add	r3, r1
 800ba14:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d104      	bne.n	800ba28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fb68 	bl	800c0f6 <USBD_CtlError>
                  break;
 800ba26:	e041      	b.n	800baac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	da0b      	bge.n	800ba48 <USBD_StdEPReq+0x240>
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	3310      	adds	r3, #16
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	4413      	add	r3, r2
 800ba44:	3304      	adds	r3, #4
 800ba46:	e00b      	b.n	800ba60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	3304      	adds	r3, #4
 800ba60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <USBD_StdEPReq+0x266>
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	2b80      	cmp	r3, #128	; 0x80
 800ba6c:	d103      	bne.n	800ba76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	e00e      	b.n	800ba94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fffc 	bl	800ca78 <USBD_LL_IsStallEP>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e002      	b.n	800ba94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2202      	movs	r2, #2
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fb95 	bl	800c1ca <USBD_CtlSendData>
              break;
 800baa0:	e004      	b.n	800baac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fb26 	bl	800c0f6 <USBD_CtlError>
              break;
 800baaa:	bf00      	nop
          }
          break;
 800baac:	e004      	b.n	800bab8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fb20 	bl	800c0f6 <USBD_CtlError>
          break;
 800bab6:	bf00      	nop
      }
      break;
 800bab8:	e004      	b.n	800bac4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fb1a 	bl	800c0f6 <USBD_CtlError>
      break;
 800bac2:	bf00      	nop
  }

  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bada:	2300      	movs	r3, #0
 800badc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	885b      	ldrh	r3, [r3, #2]
 800baea:	0a1b      	lsrs	r3, r3, #8
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	2b06      	cmp	r3, #6
 800baf2:	f200 8128 	bhi.w	800bd46 <USBD_GetDescriptor+0x276>
 800baf6:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <USBD_GetDescriptor+0x2c>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	0800bb31 	.word	0x0800bb31
 800bb04:	0800bb71 	.word	0x0800bb71
 800bb08:	0800bd47 	.word	0x0800bd47
 800bb0c:	0800bd47 	.word	0x0800bd47
 800bb10:	0800bce7 	.word	0x0800bce7
 800bb14:	0800bd13 	.word	0x0800bd13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	7c12      	ldrb	r2, [r2, #16]
 800bb24:	f107 0108 	add.w	r1, r7, #8
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
 800bb2c:	60f8      	str	r0, [r7, #12]
      break;
 800bb2e:	e112      	b.n	800bd56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	7c1b      	ldrb	r3, [r3, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10d      	bne.n	800bb54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f107 0208 	add.w	r2, r7, #8
 800bb44:	4610      	mov	r0, r2
 800bb46:	4798      	blx	r3
 800bb48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	2202      	movs	r2, #2
 800bb50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb52:	e100      	b.n	800bd56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	f107 0208 	add.w	r2, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	701a      	strb	r2, [r3, #0]
      break;
 800bb6e:	e0f2      	b.n	800bd56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b05      	cmp	r3, #5
 800bb78:	f200 80ac 	bhi.w	800bcd4 <USBD_GetDescriptor+0x204>
 800bb7c:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <USBD_GetDescriptor+0xb4>)
 800bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb82:	bf00      	nop
 800bb84:	0800bb9d 	.word	0x0800bb9d
 800bb88:	0800bbd1 	.word	0x0800bbd1
 800bb8c:	0800bc05 	.word	0x0800bc05
 800bb90:	0800bc39 	.word	0x0800bc39
 800bb94:	0800bc6d 	.word	0x0800bc6d
 800bb98:	0800bca1 	.word	0x0800bca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7c12      	ldrb	r2, [r2, #16]
 800bbb4:	f107 0108 	add.w	r1, r7, #8
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbbe:	e091      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa97 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbce:	e089      	b.n	800bce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00b      	beq.n	800bbf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	7c12      	ldrb	r2, [r2, #16]
 800bbe8:	f107 0108 	add.w	r1, r7, #8
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
 800bbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf2:	e077      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fa7d 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	72fb      	strb	r3, [r7, #11]
          break;
 800bc02:	e06f      	b.n	800bce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	7c12      	ldrb	r2, [r2, #16]
 800bc1c:	f107 0108 	add.w	r1, r7, #8
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
 800bc24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc26:	e05d      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa63 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bc30:	7afb      	ldrb	r3, [r7, #11]
 800bc32:	3301      	adds	r3, #1
 800bc34:	72fb      	strb	r3, [r7, #11]
          break;
 800bc36:	e055      	b.n	800bce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	7c12      	ldrb	r2, [r2, #16]
 800bc50:	f107 0108 	add.w	r1, r7, #8
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5a:	e043      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa49 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bc64:	7afb      	ldrb	r3, [r7, #11]
 800bc66:	3301      	adds	r3, #1
 800bc68:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6a:	e03b      	b.n	800bce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00b      	beq.n	800bc90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	7c12      	ldrb	r2, [r2, #16]
 800bc84:	f107 0108 	add.w	r1, r7, #8
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4798      	blx	r3
 800bc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc8e:	e029      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa2f 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc9e:	e021      	b.n	800bce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7c12      	ldrb	r2, [r2, #16]
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc2:	e00f      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa15 	bl	800c0f6 <USBD_CtlError>
            err++;
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd2:	e007      	b.n	800bce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fa0d 	bl	800c0f6 <USBD_CtlError>
          err++;
 800bcdc:	7afb      	ldrb	r3, [r7, #11]
 800bcde:	3301      	adds	r3, #1
 800bce0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bce2:	e038      	b.n	800bd56 <USBD_GetDescriptor+0x286>
 800bce4:	e037      	b.n	800bd56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7c1b      	ldrb	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf6:	f107 0208 	add.w	r2, r7, #8
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4798      	blx	r3
 800bcfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd00:	e029      	b.n	800bd56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f9f6 	bl	800c0f6 <USBD_CtlError>
        err++;
 800bd0a:	7afb      	ldrb	r3, [r7, #11]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd10:	e021      	b.n	800bd56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	7c1b      	ldrb	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10d      	bne.n	800bd36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd22:	f107 0208 	add.w	r2, r7, #8
 800bd26:	4610      	mov	r0, r2
 800bd28:	4798      	blx	r3
 800bd2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	2207      	movs	r2, #7
 800bd32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd34:	e00f      	b.n	800bd56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f9dc 	bl	800c0f6 <USBD_CtlError>
        err++;
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	3301      	adds	r3, #1
 800bd42:	72fb      	strb	r3, [r7, #11]
      break;
 800bd44:	e007      	b.n	800bd56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f9d4 	bl	800c0f6 <USBD_CtlError>
      err++;
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	3301      	adds	r3, #1
 800bd52:	72fb      	strb	r3, [r7, #11]
      break;
 800bd54:	bf00      	nop
  }

  if (err != 0U)
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d11c      	bne.n	800bd96 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bd5c:	893b      	ldrh	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d011      	beq.n	800bd86 <USBD_GetDescriptor+0x2b6>
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88db      	ldrh	r3, [r3, #6]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00d      	beq.n	800bd86 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	88da      	ldrh	r2, [r3, #6]
 800bd6e:	893b      	ldrh	r3, [r7, #8]
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bf28      	it	cs
 800bd74:	4613      	movcs	r3, r2
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd7a:	893b      	ldrh	r3, [r7, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa22 	bl	800c1ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	88db      	ldrh	r3, [r3, #6]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d104      	bne.n	800bd98 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa79 	bl	800c286 <USBD_CtlSendStatus>
 800bd94:	e000      	b.n	800bd98 <USBD_GetDescriptor+0x2c8>
    return;
 800bd96:	bf00      	nop
    }
  }
}
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop

0800bda0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	889b      	ldrh	r3, [r3, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d130      	bne.n	800be14 <USBD_SetAddress+0x74>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	88db      	ldrh	r3, [r3, #6]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d12c      	bne.n	800be14 <USBD_SetAddress+0x74>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	885b      	ldrh	r3, [r3, #2]
 800bdbe:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc0:	d828      	bhi.n	800be14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d104      	bne.n	800bde2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f98b 	bl	800c0f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde0:	e01d      	b.n	800be1e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	7bfa      	ldrb	r2, [r7, #15]
 800bde6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fe6e 	bl	800cad0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa46 	bl	800c286 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be08:	e009      	b.n	800be1e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be12:	e004      	b.n	800be1e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f96d 	bl	800c0f6 <USBD_CtlError>
  }
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	885b      	ldrh	r3, [r3, #2]
 800be36:	b2da      	uxtb	r2, r3
 800be38:	4b41      	ldr	r3, [pc, #260]	; (800bf40 <USBD_SetConfig+0x118>)
 800be3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be3c:	4b40      	ldr	r3, [pc, #256]	; (800bf40 <USBD_SetConfig+0x118>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d904      	bls.n	800be4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f955 	bl	800c0f6 <USBD_CtlError>
 800be4c:	e075      	b.n	800bf3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be54:	2b02      	cmp	r3, #2
 800be56:	d002      	beq.n	800be5e <USBD_SetConfig+0x36>
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d023      	beq.n	800bea4 <USBD_SetConfig+0x7c>
 800be5c:	e062      	b.n	800bf24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800be5e:	4b38      	ldr	r3, [pc, #224]	; (800bf40 <USBD_SetConfig+0x118>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d01a      	beq.n	800be9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <USBD_SetConfig+0x118>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2203      	movs	r2, #3
 800be74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be78:	4b31      	ldr	r3, [pc, #196]	; (800bf40 <USBD_SetConfig+0x118>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff f9e7 	bl	800b252 <USBD_SetClassConfig>
 800be84:	4603      	mov	r3, r0
 800be86:	2b02      	cmp	r3, #2
 800be88:	d104      	bne.n	800be94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f932 	bl	800c0f6 <USBD_CtlError>
            return;
 800be92:	e052      	b.n	800bf3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f9f6 	bl	800c286 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be9a:	e04e      	b.n	800bf3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f9f2 	bl	800c286 <USBD_CtlSendStatus>
        break;
 800bea2:	e04a      	b.n	800bf3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bea4:	4b26      	ldr	r3, [pc, #152]	; (800bf40 <USBD_SetConfig+0x118>)
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d112      	bne.n	800bed2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800beb4:	4b22      	ldr	r3, [pc, #136]	; (800bf40 <USBD_SetConfig+0x118>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	461a      	mov	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bebe:	4b20      	ldr	r3, [pc, #128]	; (800bf40 <USBD_SetConfig+0x118>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff f9e3 	bl	800b290 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f9db 	bl	800c286 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bed0:	e033      	b.n	800bf3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bed2:	4b1b      	ldr	r3, [pc, #108]	; (800bf40 <USBD_SetConfig+0x118>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d01d      	beq.n	800bf1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff f9d1 	bl	800b290 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <USBD_SetConfig+0x118>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bef8:	4b11      	ldr	r3, [pc, #68]	; (800bf40 <USBD_SetConfig+0x118>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff f9a7 	bl	800b252 <USBD_SetClassConfig>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d104      	bne.n	800bf14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f8f2 	bl	800c0f6 <USBD_CtlError>
            return;
 800bf12:	e012      	b.n	800bf3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f9b6 	bl	800c286 <USBD_CtlSendStatus>
        break;
 800bf1a:	e00e      	b.n	800bf3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f9b2 	bl	800c286 <USBD_CtlSendStatus>
        break;
 800bf22:	e00a      	b.n	800bf3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f8e5 	bl	800c0f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf2c:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <USBD_SetConfig+0x118>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff f9ac 	bl	800b290 <USBD_ClrClassConfig>
        break;
 800bf38:	bf00      	nop
    }
  }
}
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	20000d64 	.word	0x20000d64

0800bf44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	88db      	ldrh	r3, [r3, #6]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d004      	beq.n	800bf60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f8cc 	bl	800c0f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf5e:	e022      	b.n	800bfa6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	dc02      	bgt.n	800bf70 <USBD_GetConfig+0x2c>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	dc03      	bgt.n	800bf76 <USBD_GetConfig+0x32>
 800bf6e:	e015      	b.n	800bf9c <USBD_GetConfig+0x58>
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d00b      	beq.n	800bf8c <USBD_GetConfig+0x48>
 800bf74:	e012      	b.n	800bf9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	2201      	movs	r2, #1
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f920 	bl	800c1ca <USBD_CtlSendData>
        break;
 800bf8a:	e00c      	b.n	800bfa6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	2201      	movs	r2, #1
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f918 	bl	800c1ca <USBD_CtlSendData>
        break;
 800bf9a:	e004      	b.n	800bfa6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f8a9 	bl	800c0f6 <USBD_CtlError>
        break;
 800bfa4:	bf00      	nop
}
 800bfa6:	bf00      	nop
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d81e      	bhi.n	800c002 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	88db      	ldrh	r3, [r3, #6]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d004      	beq.n	800bfd6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f891 	bl	800c0f6 <USBD_CtlError>
        break;
 800bfd4:	e01a      	b.n	800c00c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d005      	beq.n	800bff2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f043 0202 	orr.w	r2, r3, #2
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	330c      	adds	r3, #12
 800bff6:	2202      	movs	r2, #2
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f8e5 	bl	800c1ca <USBD_CtlSendData>
      break;
 800c000:	e004      	b.n	800c00c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f876 	bl	800c0f6 <USBD_CtlError>
      break;
 800c00a:	bf00      	nop
  }
}
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	885b      	ldrh	r3, [r3, #2]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d106      	bne.n	800c034 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f929 	bl	800c286 <USBD_CtlSendStatus>
  }
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04c:	3b01      	subs	r3, #1
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d80b      	bhi.n	800c06a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d10c      	bne.n	800c074 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f90f 	bl	800c286 <USBD_CtlSendStatus>
      }
      break;
 800c068:	e004      	b.n	800c074 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f842 	bl	800c0f6 <USBD_CtlError>
      break;
 800c072:	e000      	b.n	800c076 <USBD_ClrFeature+0x3a>
      break;
 800c074:	bf00      	nop
  }
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c07e:	b480      	push	{r7}
 800c080:	b083      	sub	sp, #12
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	785a      	ldrb	r2, [r3, #1]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3302      	adds	r3, #2
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	3303      	adds	r3, #3
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	3305      	adds	r3, #5
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	3306      	adds	r3, #6
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	3307      	adds	r3, #7
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4413      	add	r3, r2
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	80da      	strh	r2, [r3, #6]

}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr

0800c0f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c100:	2180      	movs	r1, #128	; 0x80
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fc7a 	bl	800c9fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fc76 	bl	800c9fc <USBD_LL_StallEP>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c124:	2300      	movs	r3, #0
 800c126:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d032      	beq.n	800c194 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f834 	bl	800c19c <USBD_GetLen>
 800c134:	4603      	mov	r3, r0
 800c136:	3301      	adds	r3, #1
 800c138:	b29b      	uxth	r3, r3
 800c13a:	005b      	lsls	r3, r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	75fa      	strb	r2, [r7, #23]
 800c148:	461a      	mov	r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	4413      	add	r3, r2
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	75fa      	strb	r2, [r7, #23]
 800c15a:	461a      	mov	r2, r3
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	4413      	add	r3, r2
 800c160:	2203      	movs	r2, #3
 800c162:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c164:	e012      	b.n	800c18c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	60fa      	str	r2, [r7, #12]
 800c16c:	7dfa      	ldrb	r2, [r7, #23]
 800c16e:	1c51      	adds	r1, r2, #1
 800c170:	75f9      	strb	r1, [r7, #23]
 800c172:	4611      	mov	r1, r2
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	440a      	add	r2, r1
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	75fa      	strb	r2, [r7, #23]
 800c182:	461a      	mov	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	4413      	add	r3, r2
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e8      	bne.n	800c166 <USBD_GetString+0x4e>
    }
  }
}
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c1a8:	e005      	b.n	800c1b6 <USBD_GetLen+0x1a>
  {
    len++;
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1f5      	bne.n	800c1aa <USBD_GetLen+0xe>
  }

  return len;
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bc80      	pop	{r7}
 800c1c8:	4770      	bx	lr

0800c1ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	60b9      	str	r1, [r7, #8]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2202      	movs	r2, #2
 800c1dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c1e0:	88fa      	ldrh	r2, [r7, #6]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c1e6:	88fa      	ldrh	r2, [r7, #6]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1ec:	88fb      	ldrh	r3, [r7, #6]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f000 fc8b 	bl	800cb0e <USBD_LL_Transmit>

  return USBD_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	60b9      	str	r1, [r7, #8]
 800c20c:	4613      	mov	r3, r2
 800c20e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c210:	88fb      	ldrh	r3, [r7, #6]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	2100      	movs	r1, #0
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fc79 	bl	800cb0e <USBD_LL_Transmit>

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	4613      	mov	r3, r2
 800c232:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2203      	movs	r2, #3
 800c238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c23c:	88fa      	ldrh	r2, [r7, #6]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c244:	88fa      	ldrh	r2, [r7, #6]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	2100      	movs	r1, #0
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fc7e 	bl	800cb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	4613      	mov	r3, r2
 800c26e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	2100      	movs	r1, #0
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f000 fc6c 	bl	800cb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2204      	movs	r2, #4
 800c292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c296:	2300      	movs	r3, #0
 800c298:	2200      	movs	r2, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fc36 	bl	800cb0e <USBD_LL_Transmit>

  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2bc:	2300      	movs	r3, #0
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fc46 	bl	800cb54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	4912      	ldr	r1, [pc, #72]	; (800c324 <MX_USB_DEVICE_Init+0x50>)
 800c2dc:	4812      	ldr	r0, [pc, #72]	; (800c328 <MX_USB_DEVICE_Init+0x54>)
 800c2de:	f7fe ff5e 	bl	800b19e <USBD_Init>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2e8:	f7f5 fb42 	bl	8001970 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c2ec:	490f      	ldr	r1, [pc, #60]	; (800c32c <MX_USB_DEVICE_Init+0x58>)
 800c2ee:	480e      	ldr	r0, [pc, #56]	; (800c328 <MX_USB_DEVICE_Init+0x54>)
 800c2f0:	f7fe ff80 	bl	800b1f4 <USBD_RegisterClass>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2fa:	f7f5 fb39 	bl	8001970 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c2fe:	490c      	ldr	r1, [pc, #48]	; (800c330 <MX_USB_DEVICE_Init+0x5c>)
 800c300:	4809      	ldr	r0, [pc, #36]	; (800c328 <MX_USB_DEVICE_Init+0x54>)
 800c302:	f7fe feb1 	bl	800b068 <USBD_CDC_RegisterInterface>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c30c:	f7f5 fb30 	bl	8001970 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c310:	4805      	ldr	r0, [pc, #20]	; (800c328 <MX_USB_DEVICE_Init+0x54>)
 800c312:	f7fe ff88 	bl	800b226 <USBD_Start>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c31c:	f7f5 fb28 	bl	8001970 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c320:	bf00      	nop
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20000364 	.word	0x20000364
 800c328:	20000d68 	.word	0x20000d68
 800c32c:	20000248 	.word	0x20000248
 800c330:	20000354 	.word	0x20000354

0800c334 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c338:	2200      	movs	r2, #0
 800c33a:	4905      	ldr	r1, [pc, #20]	; (800c350 <CDC_Init_FS+0x1c>)
 800c33c:	4805      	ldr	r0, [pc, #20]	; (800c354 <CDC_Init_FS+0x20>)
 800c33e:	f7fe fea9 	bl	800b094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c342:	4905      	ldr	r1, [pc, #20]	; (800c358 <CDC_Init_FS+0x24>)
 800c344:	4803      	ldr	r0, [pc, #12]	; (800c354 <CDC_Init_FS+0x20>)
 800c346:	f7fe febe 	bl	800b0c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c34a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20001414 	.word	0x20001414
 800c354:	20000d68 	.word	0x20000d68
 800c358:	2000102c 	.word	0x2000102c

0800c35c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c360:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c362:	4618      	mov	r0, r3
 800c364:	46bd      	mov	sp, r7
 800c366:	bc80      	pop	{r7}
 800c368:	4770      	bx	lr
	...

0800c36c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
 800c378:	4613      	mov	r3, r2
 800c37a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	2b23      	cmp	r3, #35	; 0x23
 800c380:	d85c      	bhi.n	800c43c <CDC_Control_FS+0xd0>
 800c382:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <CDC_Control_FS+0x1c>)
 800c384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c388:	0800c43d 	.word	0x0800c43d
 800c38c:	0800c43d 	.word	0x0800c43d
 800c390:	0800c43d 	.word	0x0800c43d
 800c394:	0800c43d 	.word	0x0800c43d
 800c398:	0800c43d 	.word	0x0800c43d
 800c39c:	0800c43d 	.word	0x0800c43d
 800c3a0:	0800c43d 	.word	0x0800c43d
 800c3a4:	0800c43d 	.word	0x0800c43d
 800c3a8:	0800c43d 	.word	0x0800c43d
 800c3ac:	0800c43d 	.word	0x0800c43d
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c43d 	.word	0x0800c43d
 800c3b8:	0800c43d 	.word	0x0800c43d
 800c3bc:	0800c43d 	.word	0x0800c43d
 800c3c0:	0800c43d 	.word	0x0800c43d
 800c3c4:	0800c43d 	.word	0x0800c43d
 800c3c8:	0800c43d 	.word	0x0800c43d
 800c3cc:	0800c43d 	.word	0x0800c43d
 800c3d0:	0800c43d 	.word	0x0800c43d
 800c3d4:	0800c43d 	.word	0x0800c43d
 800c3d8:	0800c43d 	.word	0x0800c43d
 800c3dc:	0800c43d 	.word	0x0800c43d
 800c3e0:	0800c43d 	.word	0x0800c43d
 800c3e4:	0800c43d 	.word	0x0800c43d
 800c3e8:	0800c43d 	.word	0x0800c43d
 800c3ec:	0800c43d 	.word	0x0800c43d
 800c3f0:	0800c43d 	.word	0x0800c43d
 800c3f4:	0800c43d 	.word	0x0800c43d
 800c3f8:	0800c43d 	.word	0x0800c43d
 800c3fc:	0800c43d 	.word	0x0800c43d
 800c400:	0800c43d 	.word	0x0800c43d
 800c404:	0800c43d 	.word	0x0800c43d
 800c408:	0800c419 	.word	0x0800c419
 800c40c:	0800c42b 	.word	0x0800c42b
 800c410:	0800c43d 	.word	0x0800c43d
 800c414:	0800c43d 	.word	0x0800c43d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c418:	4b0c      	ldr	r3, [pc, #48]	; (800c44c <CDC_Control_FS+0xe0>)
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	6810      	ldr	r0, [r2, #0]
 800c41e:	6018      	str	r0, [r3, #0]
 800c420:	8891      	ldrh	r1, [r2, #4]
 800c422:	7992      	ldrb	r2, [r2, #6]
 800c424:	8099      	strh	r1, [r3, #4]
 800c426:	719a      	strb	r2, [r3, #6]
    break;
 800c428:	e009      	b.n	800c43e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	4a07      	ldr	r2, [pc, #28]	; (800c44c <CDC_Control_FS+0xe0>)
 800c42e:	6810      	ldr	r0, [r2, #0]
 800c430:	6018      	str	r0, [r3, #0]
 800c432:	8891      	ldrh	r1, [r2, #4]
 800c434:	7992      	ldrb	r2, [r2, #6]
 800c436:	8099      	strh	r1, [r3, #4]
 800c438:	719a      	strb	r2, [r3, #6]
    break;
 800c43a:	e000      	b.n	800c43e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c43c:	bf00      	nop
  }

  return (USBD_OK);
 800c43e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	2000034c 	.word	0x2000034c

0800c450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7f4 f8b9 	bl	80005e0 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	4805      	ldr	r0, [pc, #20]	; (800c488 <CDC_Receive_FS+0x38>)
 800c472:	f7fe fe28 	bl	800b0c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c476:	4804      	ldr	r0, [pc, #16]	; (800c488 <CDC_Receive_FS+0x38>)
 800c478:	f7fe fe67 	bl	800b14a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c47c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000d68 	.word	0x20000d68

0800c48c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <CDC_Transmit_FS+0x48>)
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e00b      	b.n	800c4ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4b2:	887b      	ldrh	r3, [r7, #2]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	6879      	ldr	r1, [r7, #4]
 800c4b8:	4806      	ldr	r0, [pc, #24]	; (800c4d4 <CDC_Transmit_FS+0x48>)
 800c4ba:	f7fe fdeb 	bl	800b094 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <CDC_Transmit_FS+0x48>)
 800c4c0:	f7fe fe14 	bl	800b0ec <USBD_CDC_TransmitPacket>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000d68 	.word	0x20000d68

0800c4d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2212      	movs	r2, #18
 800c4e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4ea:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bc80      	pop	{r7}
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000380 	.word	0x20000380

0800c4fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2204      	movs	r2, #4
 800c50c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c50e:	4b03      	ldr	r3, [pc, #12]	; (800c51c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	bc80      	pop	{r7}
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20000394 	.word	0x20000394

0800c520 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	4907      	ldr	r1, [pc, #28]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
 800c536:	4808      	ldr	r0, [pc, #32]	; (800c558 <USBD_FS_ProductStrDescriptor+0x38>)
 800c538:	f7ff fdee 	bl	800c118 <USBD_GetString>
 800c53c:	e004      	b.n	800c548 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <USBD_FS_ProductStrDescriptor+0x38>)
 800c544:	f7ff fde8 	bl	800c118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	200017fc 	.word	0x200017fc
 800c558:	0800d6c8 	.word	0x0800d6c8

0800c55c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	4904      	ldr	r1, [pc, #16]	; (800c57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c56c:	4804      	ldr	r0, [pc, #16]	; (800c580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c56e:	f7ff fdd3 	bl	800c118 <USBD_GetString>
  return USBD_StrDesc;
 800c572:	4b02      	ldr	r3, [pc, #8]	; (800c57c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	200017fc 	.word	0x200017fc
 800c580:	0800d6dc 	.word	0x0800d6dc

0800c584 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	6039      	str	r1, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	221a      	movs	r2, #26
 800c594:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c596:	f000 f843 	bl	800c620 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c59a:	4b02      	ldr	r3, [pc, #8]	; (800c5a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20000398 	.word	0x20000398

0800c5a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	6039      	str	r1, [r7, #0]
 800c5b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4907      	ldr	r1, [pc, #28]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5be:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c0:	f7ff fdaa 	bl	800c118 <USBD_GetString>
 800c5c4:	e004      	b.n	800c5d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	4904      	ldr	r1, [pc, #16]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5ca:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5cc:	f7ff fda4 	bl	800c118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	200017fc 	.word	0x200017fc
 800c5e0:	0800d6e4 	.word	0x0800d6e4

0800c5e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d105      	bne.n	800c602 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4907      	ldr	r1, [pc, #28]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5fa:	4808      	ldr	r0, [pc, #32]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5fc:	f7ff fd8c 	bl	800c118 <USBD_GetString>
 800c600:	e004      	b.n	800c60c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c606:	4805      	ldr	r0, [pc, #20]	; (800c61c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c608:	f7ff fd86 	bl	800c118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c60c:	4b02      	ldr	r3, [pc, #8]	; (800c618 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	200017fc 	.word	0x200017fc
 800c61c:	0800d6f0 	.word	0x0800d6f0

0800c620 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <Get_SerialNum+0x44>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c62c:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <Get_SerialNum+0x48>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c632:	4b0e      	ldr	r3, [pc, #56]	; (800c66c <Get_SerialNum+0x4c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d009      	beq.n	800c65a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c646:	2208      	movs	r2, #8
 800c648:	4909      	ldr	r1, [pc, #36]	; (800c670 <Get_SerialNum+0x50>)
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 f814 	bl	800c678 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c650:	2204      	movs	r2, #4
 800c652:	4908      	ldr	r1, [pc, #32]	; (800c674 <Get_SerialNum+0x54>)
 800c654:	68b8      	ldr	r0, [r7, #8]
 800c656:	f000 f80f 	bl	800c678 <IntToUnicode>
  }
}
 800c65a:	bf00      	nop
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	1ffff7e8 	.word	0x1ffff7e8
 800c668:	1ffff7ec 	.word	0x1ffff7ec
 800c66c:	1ffff7f0 	.word	0x1ffff7f0
 800c670:	2000039a 	.word	0x2000039a
 800c674:	200003aa 	.word	0x200003aa

0800c678 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	4613      	mov	r3, r2
 800c684:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
 800c68e:	e027      	b.n	800c6e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	0f1b      	lsrs	r3, r3, #28
 800c694:	2b09      	cmp	r3, #9
 800c696:	d80b      	bhi.n	800c6b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	0f1b      	lsrs	r3, r3, #28
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3230      	adds	r2, #48	; 0x30
 800c6aa:	b2d2      	uxtb	r2, r2
 800c6ac:	701a      	strb	r2, [r3, #0]
 800c6ae:	e00a      	b.n	800c6c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	0f1b      	lsrs	r3, r3, #28
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	440b      	add	r3, r1
 800c6c0:	3237      	adds	r2, #55	; 0x37
 800c6c2:	b2d2      	uxtb	r2, r2
 800c6c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	011b      	lsls	r3, r3, #4
 800c6ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	75fb      	strb	r3, [r7, #23]
 800c6e0:	7dfa      	ldrb	r2, [r7, #23]
 800c6e2:	79fb      	ldrb	r3, [r7, #7]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d3d3      	bcc.n	800c690 <IntToUnicode+0x18>
  }
}
 800c6e8:	bf00      	nop
 800c6ea:	bf00      	nop
 800c6ec:	371c      	adds	r7, #28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bc80      	pop	{r7}
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a11      	ldr	r2, [pc, #68]	; (800c748 <HAL_PCD_MspInit+0x54>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d11b      	bne.n	800c73e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c706:	4b11      	ldr	r3, [pc, #68]	; (800c74c <HAL_PCD_MspInit+0x58>)
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	4a10      	ldr	r2, [pc, #64]	; (800c74c <HAL_PCD_MspInit+0x58>)
 800c70c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c710:	61d3      	str	r3, [r2, #28]
 800c712:	4b0e      	ldr	r3, [pc, #56]	; (800c74c <HAL_PCD_MspInit+0x58>)
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	2013      	movs	r0, #19
 800c724:	f7f7 fe79 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800c728:	2013      	movs	r0, #19
 800c72a:	f7f7 fe92 	bl	8004452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c72e:	2200      	movs	r2, #0
 800c730:	2100      	movs	r1, #0
 800c732:	2014      	movs	r0, #20
 800c734:	f7f7 fe71 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c738:	2014      	movs	r0, #20
 800c73a:	f7f7 fe8a 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	40005c00 	.word	0x40005c00
 800c74c:	40021000 	.word	0x40021000

0800c750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7fe fda5 	bl	800b2b6 <USBD_LL_SetupStage>
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	4619      	mov	r1, r3
 800c79e:	f7fe fdd7 	bl	800b350 <USBD_LL_DataOutStage>
}
 800c7a2:	bf00      	nop
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c7bc:	78fa      	ldrb	r2, [r7, #3]
 800c7be:	6879      	ldr	r1, [r7, #4]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	440b      	add	r3, r1
 800c7ca:	333c      	adds	r3, #60	; 0x3c
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	78fb      	ldrb	r3, [r7, #3]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	f7fe fe2e 	bl	800b432 <USBD_LL_DataInStage>
}
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe ff3e 	bl	800b66e <USBD_LL_SOF>
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c802:	2301      	movs	r3, #1
 800c804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d001      	beq.n	800c812 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c80e:	f7f5 f8af 	bl	8001970 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c818:	7bfa      	ldrb	r2, [r7, #15]
 800c81a:	4611      	mov	r1, r2
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe feee 	bl	800b5fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe fea7 	bl	800b57c <USBD_LL_Reset>
}
 800c82e:	bf00      	nop
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fee8 	bl	800b61c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <HAL_PCD_SuspendCallback+0x30>)
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	4a03      	ldr	r2, [pc, #12]	; (800c868 <HAL_PCD_SuspendCallback+0x30>)
 800c85a:	f043 0306 	orr.w	r3, r3, #6
 800c85e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	e000ed00 	.word	0xe000ed00

0800c86c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe fee2 	bl	800b644 <USBD_LL_Resume>
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c890:	4a28      	ldr	r2, [pc, #160]	; (800c934 <USBD_LL_Init+0xac>)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a26      	ldr	r2, [pc, #152]	; (800c934 <USBD_LL_Init+0xac>)
 800c89c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c8a0:	4b24      	ldr	r3, [pc, #144]	; (800c934 <USBD_LL_Init+0xac>)
 800c8a2:	4a25      	ldr	r2, [pc, #148]	; (800c938 <USBD_LL_Init+0xb0>)
 800c8a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c8a6:	4b23      	ldr	r3, [pc, #140]	; (800c934 <USBD_LL_Init+0xac>)
 800c8a8:	2208      	movs	r2, #8
 800c8aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c8ac:	4b21      	ldr	r3, [pc, #132]	; (800c934 <USBD_LL_Init+0xac>)
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c8b2:	4b20      	ldr	r3, [pc, #128]	; (800c934 <USBD_LL_Init+0xac>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c8b8:	4b1e      	ldr	r3, [pc, #120]	; (800c934 <USBD_LL_Init+0xac>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c8be:	4b1d      	ldr	r3, [pc, #116]	; (800c934 <USBD_LL_Init+0xac>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c8c4:	481b      	ldr	r0, [pc, #108]	; (800c934 <USBD_LL_Init+0xac>)
 800c8c6:	f7f7 ffbf 	bl	8004848 <HAL_PCD_Init>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c8d0:	f7f5 f84e 	bl	8001970 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8da:	2318      	movs	r3, #24
 800c8dc:	2200      	movs	r2, #0
 800c8de:	2100      	movs	r1, #0
 800c8e0:	f7f9 fc33 	bl	800614a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8ea:	2358      	movs	r3, #88	; 0x58
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2180      	movs	r1, #128	; 0x80
 800c8f0:	f7f9 fc2b 	bl	800614a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8fa:	23c0      	movs	r3, #192	; 0xc0
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2181      	movs	r1, #129	; 0x81
 800c900:	f7f9 fc23 	bl	800614a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c90a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c90e:	2200      	movs	r2, #0
 800c910:	2101      	movs	r1, #1
 800c912:	f7f9 fc1a 	bl	800614a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c91c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c920:	2200      	movs	r2, #0
 800c922:	2182      	movs	r1, #130	; 0x82
 800c924:	f7f9 fc11 	bl	800614a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	200019fc 	.word	0x200019fc
 800c938:	40005c00 	.word	0x40005c00

0800c93c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c952:	4618      	mov	r0, r3
 800c954:	f7f8 f883 	bl	8004a5e <HAL_PCD_Start>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 f94e 	bl	800cc00 <USBD_Get_USB_Status>
 800c964:	4603      	mov	r3, r0
 800c966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c968:	7bbb      	ldrb	r3, [r7, #14]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	4608      	mov	r0, r1
 800c97c:	4611      	mov	r1, r2
 800c97e:	461a      	mov	r2, r3
 800c980:	4603      	mov	r3, r0
 800c982:	70fb      	strb	r3, [r7, #3]
 800c984:	460b      	mov	r3, r1
 800c986:	70bb      	strb	r3, [r7, #2]
 800c988:	4613      	mov	r3, r2
 800c98a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c99a:	78bb      	ldrb	r3, [r7, #2]
 800c99c:	883a      	ldrh	r2, [r7, #0]
 800c99e:	78f9      	ldrb	r1, [r7, #3]
 800c9a0:	f7f8 f9fb 	bl	8004d9a <HAL_PCD_EP_Open>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f928 	bl	800cc00 <USBD_Get_USB_Status>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b084      	sub	sp, #16
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9d8:	78fa      	ldrb	r2, [r7, #3]
 800c9da:	4611      	mov	r1, r2
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7f8 fa42 	bl	8004e66 <HAL_PCD_EP_Close>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 f909 	bl	800cc00 <USBD_Get_USB_Status>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca16:	78fa      	ldrb	r2, [r7, #3]
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f8 fb02 	bl	8005024 <HAL_PCD_EP_SetStall>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f8ea 	bl	800cc00 <USBD_Get_USB_Status>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	460b      	mov	r3, r1
 800ca44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca54:	78fa      	ldrb	r2, [r7, #3]
 800ca56:	4611      	mov	r1, r2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7f8 fb43 	bl	80050e4 <HAL_PCD_EP_ClrStall>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 f8cb 	bl	800cc00 <USBD_Get_USB_Status>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	da0c      	bge.n	800caae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9a:	68f9      	ldr	r1, [r7, #12]
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	440b      	add	r3, r1
 800caa8:	3302      	adds	r3, #2
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	e00b      	b.n	800cac6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800caae:	78fb      	ldrb	r3, [r7, #3]
 800cab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cab4:	68f9      	ldr	r1, [r7, #12]
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	00db      	lsls	r3, r3, #3
 800cabe:	440b      	add	r3, r1
 800cac0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cac4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	bc80      	pop	{r7}
 800cace:	4770      	bx	lr

0800cad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caea:	78fa      	ldrb	r2, [r7, #3]
 800caec:	4611      	mov	r1, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f8 f92e 	bl	8004d50 <HAL_PCD_SetAddress>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 f880 	bl	800cc00 <USBD_Get_USB_Status>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b086      	sub	sp, #24
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	72fb      	strb	r3, [r7, #11]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb30:	893b      	ldrh	r3, [r7, #8]
 800cb32:	7af9      	ldrb	r1, [r7, #11]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	f7f8 fa32 	bl	8004f9e <HAL_PCD_EP_Transmit>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 f85d 	bl	800cc00 <USBD_Get_USB_Status>
 800cb46:	4603      	mov	r3, r0
 800cb48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	607a      	str	r2, [r7, #4]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	460b      	mov	r3, r1
 800cb62:	72fb      	strb	r3, [r7, #11]
 800cb64:	4613      	mov	r3, r2
 800cb66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb76:	893b      	ldrh	r3, [r7, #8]
 800cb78:	7af9      	ldrb	r1, [r7, #11]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	f7f8 f9bb 	bl	8004ef6 <HAL_PCD_EP_Receive>
 800cb80:	4603      	mov	r3, r0
 800cb82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 f83a 	bl	800cc00 <USBD_Get_USB_Status>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb90:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	460b      	mov	r3, r1
 800cba4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbac:	78fa      	ldrb	r2, [r7, #3]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7f8 f9dd 	bl	8004f70 <HAL_PCD_EP_GetRxCount>
 800cbb6:	4603      	mov	r3, r0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbc8:	4b02      	ldr	r3, [pc, #8]	; (800cbd4 <USBD_static_malloc+0x14>)
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bc80      	pop	{r7}
 800cbd2:	4770      	bx	lr
 800cbd4:	20001ce8 	.word	0x20001ce8

0800cbd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]

}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bc80      	pop	{r7}
 800cbe8:	4770      	bx	lr

0800cbea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cbf6:	bf00      	nop
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bc80      	pop	{r7}
 800cbfe:	4770      	bx	lr

0800cc00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d817      	bhi.n	800cc44 <USBD_Get_USB_Status+0x44>
 800cc14:	a201      	add	r2, pc, #4	; (adr r2, 800cc1c <USBD_Get_USB_Status+0x1c>)
 800cc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1a:	bf00      	nop
 800cc1c:	0800cc2d 	.word	0x0800cc2d
 800cc20:	0800cc33 	.word	0x0800cc33
 800cc24:	0800cc39 	.word	0x0800cc39
 800cc28:	0800cc3f 	.word	0x0800cc3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	e00b      	b.n	800cc4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc32:	2302      	movs	r3, #2
 800cc34:	73fb      	strb	r3, [r7, #15]
    break;
 800cc36:	e008      	b.n	800cc4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3c:	e005      	b.n	800cc4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	73fb      	strb	r3, [r7, #15]
    break;
 800cc42:	e002      	b.n	800cc4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc44:	2302      	movs	r3, #2
 800cc46:	73fb      	strb	r3, [r7, #15]
    break;
 800cc48:	bf00      	nop
  }
  return usb_status;
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bc80      	pop	{r7}
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop

0800cc58 <__errno>:
 800cc58:	4b01      	ldr	r3, [pc, #4]	; (800cc60 <__errno+0x8>)
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	200003b4 	.word	0x200003b4

0800cc64 <__libc_init_array>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	2600      	movs	r6, #0
 800cc68:	4d0c      	ldr	r5, [pc, #48]	; (800cc9c <__libc_init_array+0x38>)
 800cc6a:	4c0d      	ldr	r4, [pc, #52]	; (800cca0 <__libc_init_array+0x3c>)
 800cc6c:	1b64      	subs	r4, r4, r5
 800cc6e:	10a4      	asrs	r4, r4, #2
 800cc70:	42a6      	cmp	r6, r4
 800cc72:	d109      	bne.n	800cc88 <__libc_init_array+0x24>
 800cc74:	f000 fcd6 	bl	800d624 <_init>
 800cc78:	2600      	movs	r6, #0
 800cc7a:	4d0a      	ldr	r5, [pc, #40]	; (800cca4 <__libc_init_array+0x40>)
 800cc7c:	4c0a      	ldr	r4, [pc, #40]	; (800cca8 <__libc_init_array+0x44>)
 800cc7e:	1b64      	subs	r4, r4, r5
 800cc80:	10a4      	asrs	r4, r4, #2
 800cc82:	42a6      	cmp	r6, r4
 800cc84:	d105      	bne.n	800cc92 <__libc_init_array+0x2e>
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc8c:	4798      	blx	r3
 800cc8e:	3601      	adds	r6, #1
 800cc90:	e7ee      	b.n	800cc70 <__libc_init_array+0xc>
 800cc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc96:	4798      	blx	r3
 800cc98:	3601      	adds	r6, #1
 800cc9a:	e7f2      	b.n	800cc82 <__libc_init_array+0x1e>
 800cc9c:	0800e598 	.word	0x0800e598
 800cca0:	0800e598 	.word	0x0800e598
 800cca4:	0800e598 	.word	0x0800e598
 800cca8:	0800e59c 	.word	0x0800e59c

0800ccac <memcpy>:
 800ccac:	440a      	add	r2, r1
 800ccae:	4291      	cmp	r1, r2
 800ccb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ccb4:	d100      	bne.n	800ccb8 <memcpy+0xc>
 800ccb6:	4770      	bx	lr
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccbe:	4291      	cmp	r1, r2
 800ccc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccc4:	d1f9      	bne.n	800ccba <memcpy+0xe>
 800ccc6:	bd10      	pop	{r4, pc}

0800ccc8 <memset>:
 800ccc8:	4603      	mov	r3, r0
 800ccca:	4402      	add	r2, r0
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d100      	bne.n	800ccd2 <memset+0xa>
 800ccd0:	4770      	bx	lr
 800ccd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccd6:	e7f9      	b.n	800cccc <memset+0x4>

0800ccd8 <sniprintf>:
 800ccd8:	b40c      	push	{r2, r3}
 800ccda:	b530      	push	{r4, r5, lr}
 800ccdc:	4b17      	ldr	r3, [pc, #92]	; (800cd3c <sniprintf+0x64>)
 800ccde:	1e0c      	subs	r4, r1, #0
 800cce0:	681d      	ldr	r5, [r3, #0]
 800cce2:	b09d      	sub	sp, #116	; 0x74
 800cce4:	da08      	bge.n	800ccf8 <sniprintf+0x20>
 800cce6:	238b      	movs	r3, #139	; 0x8b
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccec:	602b      	str	r3, [r5, #0]
 800ccee:	b01d      	add	sp, #116	; 0x74
 800ccf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf4:	b002      	add	sp, #8
 800ccf6:	4770      	bx	lr
 800ccf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ccfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd00:	bf0c      	ite	eq
 800cd02:	4623      	moveq	r3, r4
 800cd04:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	9307      	str	r3, [sp, #28]
 800cd0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd10:	9002      	str	r0, [sp, #8]
 800cd12:	9006      	str	r0, [sp, #24]
 800cd14:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd18:	4628      	mov	r0, r5
 800cd1a:	ab21      	add	r3, sp, #132	; 0x84
 800cd1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd1e:	a902      	add	r1, sp, #8
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f000 f88f 	bl	800ce44 <_svfiprintf_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	bfbc      	itt	lt
 800cd2a:	238b      	movlt	r3, #139	; 0x8b
 800cd2c:	602b      	strlt	r3, [r5, #0]
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	d0dd      	beq.n	800ccee <sniprintf+0x16>
 800cd32:	2200      	movs	r2, #0
 800cd34:	9b02      	ldr	r3, [sp, #8]
 800cd36:	701a      	strb	r2, [r3, #0]
 800cd38:	e7d9      	b.n	800ccee <sniprintf+0x16>
 800cd3a:	bf00      	nop
 800cd3c:	200003b4 	.word	0x200003b4

0800cd40 <strncmp>:
 800cd40:	4603      	mov	r3, r0
 800cd42:	b510      	push	{r4, lr}
 800cd44:	b172      	cbz	r2, 800cd64 <strncmp+0x24>
 800cd46:	3901      	subs	r1, #1
 800cd48:	1884      	adds	r4, r0, r2
 800cd4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd52:	4290      	cmp	r0, r2
 800cd54:	d101      	bne.n	800cd5a <strncmp+0x1a>
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	d101      	bne.n	800cd5e <strncmp+0x1e>
 800cd5a:	1a80      	subs	r0, r0, r2
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d1f3      	bne.n	800cd4a <strncmp+0xa>
 800cd62:	e7fa      	b.n	800cd5a <strncmp+0x1a>
 800cd64:	4610      	mov	r0, r2
 800cd66:	e7f9      	b.n	800cd5c <strncmp+0x1c>

0800cd68 <strncpy>:
 800cd68:	4603      	mov	r3, r0
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	3901      	subs	r1, #1
 800cd6e:	b132      	cbz	r2, 800cd7e <strncpy+0x16>
 800cd70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd74:	3a01      	subs	r2, #1
 800cd76:	f803 4b01 	strb.w	r4, [r3], #1
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	d1f7      	bne.n	800cd6e <strncpy+0x6>
 800cd7e:	2100      	movs	r1, #0
 800cd80:	441a      	add	r2, r3
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d100      	bne.n	800cd88 <strncpy+0x20>
 800cd86:	bd10      	pop	{r4, pc}
 800cd88:	f803 1b01 	strb.w	r1, [r3], #1
 800cd8c:	e7f9      	b.n	800cd82 <strncpy+0x1a>

0800cd8e <__ssputs_r>:
 800cd8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd92:	688e      	ldr	r6, [r1, #8]
 800cd94:	4682      	mov	sl, r0
 800cd96:	429e      	cmp	r6, r3
 800cd98:	460c      	mov	r4, r1
 800cd9a:	4690      	mov	r8, r2
 800cd9c:	461f      	mov	r7, r3
 800cd9e:	d838      	bhi.n	800ce12 <__ssputs_r+0x84>
 800cda0:	898a      	ldrh	r2, [r1, #12]
 800cda2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cda6:	d032      	beq.n	800ce0e <__ssputs_r+0x80>
 800cda8:	6825      	ldr	r5, [r4, #0]
 800cdaa:	6909      	ldr	r1, [r1, #16]
 800cdac:	3301      	adds	r3, #1
 800cdae:	eba5 0901 	sub.w	r9, r5, r1
 800cdb2:	6965      	ldr	r5, [r4, #20]
 800cdb4:	444b      	add	r3, r9
 800cdb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdbe:	106d      	asrs	r5, r5, #1
 800cdc0:	429d      	cmp	r5, r3
 800cdc2:	bf38      	it	cc
 800cdc4:	461d      	movcc	r5, r3
 800cdc6:	0553      	lsls	r3, r2, #21
 800cdc8:	d531      	bpl.n	800ce2e <__ssputs_r+0xa0>
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f000 fb60 	bl	800d490 <_malloc_r>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	b950      	cbnz	r0, 800cdea <__ssputs_r+0x5c>
 800cdd4:	230c      	movs	r3, #12
 800cdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdda:	f8ca 3000 	str.w	r3, [sl]
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde4:	81a3      	strh	r3, [r4, #12]
 800cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdea:	464a      	mov	r2, r9
 800cdec:	6921      	ldr	r1, [r4, #16]
 800cdee:	f7ff ff5d 	bl	800ccac <memcpy>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	6126      	str	r6, [r4, #16]
 800ce00:	444e      	add	r6, r9
 800ce02:	6026      	str	r6, [r4, #0]
 800ce04:	463e      	mov	r6, r7
 800ce06:	6165      	str	r5, [r4, #20]
 800ce08:	eba5 0509 	sub.w	r5, r5, r9
 800ce0c:	60a5      	str	r5, [r4, #8]
 800ce0e:	42be      	cmp	r6, r7
 800ce10:	d900      	bls.n	800ce14 <__ssputs_r+0x86>
 800ce12:	463e      	mov	r6, r7
 800ce14:	4632      	mov	r2, r6
 800ce16:	4641      	mov	r1, r8
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	f000 fab7 	bl	800d38c <memmove>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	2000      	movs	r0, #0
 800ce22:	1b9b      	subs	r3, r3, r6
 800ce24:	60a3      	str	r3, [r4, #8]
 800ce26:	6823      	ldr	r3, [r4, #0]
 800ce28:	4433      	add	r3, r6
 800ce2a:	6023      	str	r3, [r4, #0]
 800ce2c:	e7db      	b.n	800cde6 <__ssputs_r+0x58>
 800ce2e:	462a      	mov	r2, r5
 800ce30:	f000 fba2 	bl	800d578 <_realloc_r>
 800ce34:	4606      	mov	r6, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d1e1      	bne.n	800cdfe <__ssputs_r+0x70>
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	6921      	ldr	r1, [r4, #16]
 800ce3e:	f000 fabf 	bl	800d3c0 <_free_r>
 800ce42:	e7c7      	b.n	800cdd4 <__ssputs_r+0x46>

0800ce44 <_svfiprintf_r>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	4698      	mov	r8, r3
 800ce4a:	898b      	ldrh	r3, [r1, #12]
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	061b      	lsls	r3, r3, #24
 800ce50:	460d      	mov	r5, r1
 800ce52:	4614      	mov	r4, r2
 800ce54:	b09d      	sub	sp, #116	; 0x74
 800ce56:	d50e      	bpl.n	800ce76 <_svfiprintf_r+0x32>
 800ce58:	690b      	ldr	r3, [r1, #16]
 800ce5a:	b963      	cbnz	r3, 800ce76 <_svfiprintf_r+0x32>
 800ce5c:	2140      	movs	r1, #64	; 0x40
 800ce5e:	f000 fb17 	bl	800d490 <_malloc_r>
 800ce62:	6028      	str	r0, [r5, #0]
 800ce64:	6128      	str	r0, [r5, #16]
 800ce66:	b920      	cbnz	r0, 800ce72 <_svfiprintf_r+0x2e>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce70:	e0d1      	b.n	800d016 <_svfiprintf_r+0x1d2>
 800ce72:	2340      	movs	r3, #64	; 0x40
 800ce74:	616b      	str	r3, [r5, #20]
 800ce76:	2300      	movs	r3, #0
 800ce78:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7a:	2320      	movs	r3, #32
 800ce7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce80:	2330      	movs	r3, #48	; 0x30
 800ce82:	f04f 0901 	mov.w	r9, #1
 800ce86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d030 <_svfiprintf_r+0x1ec>
 800ce8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce92:	4623      	mov	r3, r4
 800ce94:	469a      	mov	sl, r3
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	b10a      	cbz	r2, 800cea0 <_svfiprintf_r+0x5c>
 800ce9c:	2a25      	cmp	r2, #37	; 0x25
 800ce9e:	d1f9      	bne.n	800ce94 <_svfiprintf_r+0x50>
 800cea0:	ebba 0b04 	subs.w	fp, sl, r4
 800cea4:	d00b      	beq.n	800cebe <_svfiprintf_r+0x7a>
 800cea6:	465b      	mov	r3, fp
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff ff6e 	bl	800cd8e <__ssputs_r>
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f000 80aa 	beq.w	800d00c <_svfiprintf_r+0x1c8>
 800ceb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceba:	445a      	add	r2, fp
 800cebc:	9209      	str	r2, [sp, #36]	; 0x24
 800cebe:	f89a 3000 	ldrb.w	r3, [sl]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 80a2 	beq.w	800d00c <_svfiprintf_r+0x1c8>
 800cec8:	2300      	movs	r3, #0
 800ceca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced2:	f10a 0a01 	add.w	sl, sl, #1
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cede:	931a      	str	r3, [sp, #104]	; 0x68
 800cee0:	4654      	mov	r4, sl
 800cee2:	2205      	movs	r2, #5
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	4851      	ldr	r0, [pc, #324]	; (800d030 <_svfiprintf_r+0x1ec>)
 800ceea:	f000 fa41 	bl	800d370 <memchr>
 800ceee:	9a04      	ldr	r2, [sp, #16]
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_svfiprintf_r+0xe6>
 800cef2:	06d0      	lsls	r0, r2, #27
 800cef4:	bf44      	itt	mi
 800cef6:	2320      	movmi	r3, #32
 800cef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cefc:	0711      	lsls	r1, r2, #28
 800cefe:	bf44      	itt	mi
 800cf00:	232b      	movmi	r3, #43	; 0x2b
 800cf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf06:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0c:	d015      	beq.n	800cf3a <_svfiprintf_r+0xf6>
 800cf0e:	4654      	mov	r4, sl
 800cf10:	2000      	movs	r0, #0
 800cf12:	f04f 0c0a 	mov.w	ip, #10
 800cf16:	9a07      	ldr	r2, [sp, #28]
 800cf18:	4621      	mov	r1, r4
 800cf1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1e:	3b30      	subs	r3, #48	; 0x30
 800cf20:	2b09      	cmp	r3, #9
 800cf22:	d94e      	bls.n	800cfc2 <_svfiprintf_r+0x17e>
 800cf24:	b1b0      	cbz	r0, 800cf54 <_svfiprintf_r+0x110>
 800cf26:	9207      	str	r2, [sp, #28]
 800cf28:	e014      	b.n	800cf54 <_svfiprintf_r+0x110>
 800cf2a:	eba0 0308 	sub.w	r3, r0, r8
 800cf2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	46a2      	mov	sl, r4
 800cf36:	9304      	str	r3, [sp, #16]
 800cf38:	e7d2      	b.n	800cee0 <_svfiprintf_r+0x9c>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	1d19      	adds	r1, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9103      	str	r1, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfbb      	ittet	lt
 800cf46:	425b      	neglt	r3, r3
 800cf48:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4c:	9307      	strge	r3, [sp, #28]
 800cf4e:	9307      	strlt	r3, [sp, #28]
 800cf50:	bfb8      	it	lt
 800cf52:	9204      	strlt	r2, [sp, #16]
 800cf54:	7823      	ldrb	r3, [r4, #0]
 800cf56:	2b2e      	cmp	r3, #46	; 0x2e
 800cf58:	d10c      	bne.n	800cf74 <_svfiprintf_r+0x130>
 800cf5a:	7863      	ldrb	r3, [r4, #1]
 800cf5c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf5e:	d135      	bne.n	800cfcc <_svfiprintf_r+0x188>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	3402      	adds	r4, #2
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	9203      	str	r2, [sp, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bfb8      	it	lt
 800cf6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d034 <_svfiprintf_r+0x1f0>
 800cf78:	2203      	movs	r2, #3
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	7821      	ldrb	r1, [r4, #0]
 800cf7e:	f000 f9f7 	bl	800d370 <memchr>
 800cf82:	b140      	cbz	r0, 800cf96 <_svfiprintf_r+0x152>
 800cf84:	2340      	movs	r3, #64	; 0x40
 800cf86:	eba0 000a 	sub.w	r0, r0, sl
 800cf8a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	3401      	adds	r4, #1
 800cf92:	4303      	orrs	r3, r0
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	4826      	ldr	r0, [pc, #152]	; (800d038 <_svfiprintf_r+0x1f4>)
 800cf9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa2:	f000 f9e5 	bl	800d370 <memchr>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d038      	beq.n	800d01c <_svfiprintf_r+0x1d8>
 800cfaa:	4b24      	ldr	r3, [pc, #144]	; (800d03c <_svfiprintf_r+0x1f8>)
 800cfac:	bb1b      	cbnz	r3, 800cff6 <_svfiprintf_r+0x1b2>
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	3307      	adds	r3, #7
 800cfb2:	f023 0307 	bic.w	r3, r3, #7
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	9303      	str	r3, [sp, #12]
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	4433      	add	r3, r6
 800cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc0:	e767      	b.n	800ce92 <_svfiprintf_r+0x4e>
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfca:	e7a5      	b.n	800cf18 <_svfiprintf_r+0xd4>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f04f 0c0a 	mov.w	ip, #10
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	3401      	adds	r4, #1
 800cfd6:	9305      	str	r3, [sp, #20]
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfde:	3a30      	subs	r2, #48	; 0x30
 800cfe0:	2a09      	cmp	r2, #9
 800cfe2:	d903      	bls.n	800cfec <_svfiprintf_r+0x1a8>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0c5      	beq.n	800cf74 <_svfiprintf_r+0x130>
 800cfe8:	9105      	str	r1, [sp, #20]
 800cfea:	e7c3      	b.n	800cf74 <_svfiprintf_r+0x130>
 800cfec:	4604      	mov	r4, r0
 800cfee:	2301      	movs	r3, #1
 800cff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff4:	e7f0      	b.n	800cfd8 <_svfiprintf_r+0x194>
 800cff6:	ab03      	add	r3, sp, #12
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	462a      	mov	r2, r5
 800cffc:	4638      	mov	r0, r7
 800cffe:	4b10      	ldr	r3, [pc, #64]	; (800d040 <_svfiprintf_r+0x1fc>)
 800d000:	a904      	add	r1, sp, #16
 800d002:	f3af 8000 	nop.w
 800d006:	1c42      	adds	r2, r0, #1
 800d008:	4606      	mov	r6, r0
 800d00a:	d1d6      	bne.n	800cfba <_svfiprintf_r+0x176>
 800d00c:	89ab      	ldrh	r3, [r5, #12]
 800d00e:	065b      	lsls	r3, r3, #25
 800d010:	f53f af2c 	bmi.w	800ce6c <_svfiprintf_r+0x28>
 800d014:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d016:	b01d      	add	sp, #116	; 0x74
 800d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01c:	ab03      	add	r3, sp, #12
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	462a      	mov	r2, r5
 800d022:	4638      	mov	r0, r7
 800d024:	4b06      	ldr	r3, [pc, #24]	; (800d040 <_svfiprintf_r+0x1fc>)
 800d026:	a904      	add	r1, sp, #16
 800d028:	f000 f87c 	bl	800d124 <_printf_i>
 800d02c:	e7eb      	b.n	800d006 <_svfiprintf_r+0x1c2>
 800d02e:	bf00      	nop
 800d030:	0800e563 	.word	0x0800e563
 800d034:	0800e569 	.word	0x0800e569
 800d038:	0800e56d 	.word	0x0800e56d
 800d03c:	00000000 	.word	0x00000000
 800d040:	0800cd8f 	.word	0x0800cd8f

0800d044 <_printf_common>:
 800d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d048:	4616      	mov	r6, r2
 800d04a:	4699      	mov	r9, r3
 800d04c:	688a      	ldr	r2, [r1, #8]
 800d04e:	690b      	ldr	r3, [r1, #16]
 800d050:	4607      	mov	r7, r0
 800d052:	4293      	cmp	r3, r2
 800d054:	bfb8      	it	lt
 800d056:	4613      	movlt	r3, r2
 800d058:	6033      	str	r3, [r6, #0]
 800d05a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d05e:	460c      	mov	r4, r1
 800d060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d064:	b10a      	cbz	r2, 800d06a <_printf_common+0x26>
 800d066:	3301      	adds	r3, #1
 800d068:	6033      	str	r3, [r6, #0]
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	0699      	lsls	r1, r3, #26
 800d06e:	bf42      	ittt	mi
 800d070:	6833      	ldrmi	r3, [r6, #0]
 800d072:	3302      	addmi	r3, #2
 800d074:	6033      	strmi	r3, [r6, #0]
 800d076:	6825      	ldr	r5, [r4, #0]
 800d078:	f015 0506 	ands.w	r5, r5, #6
 800d07c:	d106      	bne.n	800d08c <_printf_common+0x48>
 800d07e:	f104 0a19 	add.w	sl, r4, #25
 800d082:	68e3      	ldr	r3, [r4, #12]
 800d084:	6832      	ldr	r2, [r6, #0]
 800d086:	1a9b      	subs	r3, r3, r2
 800d088:	42ab      	cmp	r3, r5
 800d08a:	dc28      	bgt.n	800d0de <_printf_common+0x9a>
 800d08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d090:	1e13      	subs	r3, r2, #0
 800d092:	6822      	ldr	r2, [r4, #0]
 800d094:	bf18      	it	ne
 800d096:	2301      	movne	r3, #1
 800d098:	0692      	lsls	r2, r2, #26
 800d09a:	d42d      	bmi.n	800d0f8 <_printf_common+0xb4>
 800d09c:	4649      	mov	r1, r9
 800d09e:	4638      	mov	r0, r7
 800d0a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a4:	47c0      	blx	r8
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	d020      	beq.n	800d0ec <_printf_common+0xa8>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	68e5      	ldr	r5, [r4, #12]
 800d0ae:	f003 0306 	and.w	r3, r3, #6
 800d0b2:	2b04      	cmp	r3, #4
 800d0b4:	bf18      	it	ne
 800d0b6:	2500      	movne	r5, #0
 800d0b8:	6832      	ldr	r2, [r6, #0]
 800d0ba:	f04f 0600 	mov.w	r6, #0
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	bf08      	it	eq
 800d0c2:	1aad      	subeq	r5, r5, r2
 800d0c4:	6922      	ldr	r2, [r4, #16]
 800d0c6:	bf08      	it	eq
 800d0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	bfc4      	itt	gt
 800d0d0:	1a9b      	subgt	r3, r3, r2
 800d0d2:	18ed      	addgt	r5, r5, r3
 800d0d4:	341a      	adds	r4, #26
 800d0d6:	42b5      	cmp	r5, r6
 800d0d8:	d11a      	bne.n	800d110 <_printf_common+0xcc>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e008      	b.n	800d0f0 <_printf_common+0xac>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	47c0      	blx	r8
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d103      	bne.n	800d0f4 <_printf_common+0xb0>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	e7c4      	b.n	800d082 <_printf_common+0x3e>
 800d0f8:	2030      	movs	r0, #48	; 0x30
 800d0fa:	18e1      	adds	r1, r4, r3
 800d0fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d106:	4422      	add	r2, r4
 800d108:	3302      	adds	r3, #2
 800d10a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d10e:	e7c5      	b.n	800d09c <_printf_common+0x58>
 800d110:	2301      	movs	r3, #1
 800d112:	4622      	mov	r2, r4
 800d114:	4649      	mov	r1, r9
 800d116:	4638      	mov	r0, r7
 800d118:	47c0      	blx	r8
 800d11a:	3001      	adds	r0, #1
 800d11c:	d0e6      	beq.n	800d0ec <_printf_common+0xa8>
 800d11e:	3601      	adds	r6, #1
 800d120:	e7d9      	b.n	800d0d6 <_printf_common+0x92>
	...

0800d124 <_printf_i>:
 800d124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d128:	7e0f      	ldrb	r7, [r1, #24]
 800d12a:	4691      	mov	r9, r2
 800d12c:	2f78      	cmp	r7, #120	; 0x78
 800d12e:	4680      	mov	r8, r0
 800d130:	460c      	mov	r4, r1
 800d132:	469a      	mov	sl, r3
 800d134:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d13a:	d807      	bhi.n	800d14c <_printf_i+0x28>
 800d13c:	2f62      	cmp	r7, #98	; 0x62
 800d13e:	d80a      	bhi.n	800d156 <_printf_i+0x32>
 800d140:	2f00      	cmp	r7, #0
 800d142:	f000 80d9 	beq.w	800d2f8 <_printf_i+0x1d4>
 800d146:	2f58      	cmp	r7, #88	; 0x58
 800d148:	f000 80a4 	beq.w	800d294 <_printf_i+0x170>
 800d14c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d154:	e03a      	b.n	800d1cc <_printf_i+0xa8>
 800d156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d15a:	2b15      	cmp	r3, #21
 800d15c:	d8f6      	bhi.n	800d14c <_printf_i+0x28>
 800d15e:	a101      	add	r1, pc, #4	; (adr r1, 800d164 <_printf_i+0x40>)
 800d160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d164:	0800d1bd 	.word	0x0800d1bd
 800d168:	0800d1d1 	.word	0x0800d1d1
 800d16c:	0800d14d 	.word	0x0800d14d
 800d170:	0800d14d 	.word	0x0800d14d
 800d174:	0800d14d 	.word	0x0800d14d
 800d178:	0800d14d 	.word	0x0800d14d
 800d17c:	0800d1d1 	.word	0x0800d1d1
 800d180:	0800d14d 	.word	0x0800d14d
 800d184:	0800d14d 	.word	0x0800d14d
 800d188:	0800d14d 	.word	0x0800d14d
 800d18c:	0800d14d 	.word	0x0800d14d
 800d190:	0800d2df 	.word	0x0800d2df
 800d194:	0800d201 	.word	0x0800d201
 800d198:	0800d2c1 	.word	0x0800d2c1
 800d19c:	0800d14d 	.word	0x0800d14d
 800d1a0:	0800d14d 	.word	0x0800d14d
 800d1a4:	0800d301 	.word	0x0800d301
 800d1a8:	0800d14d 	.word	0x0800d14d
 800d1ac:	0800d201 	.word	0x0800d201
 800d1b0:	0800d14d 	.word	0x0800d14d
 800d1b4:	0800d14d 	.word	0x0800d14d
 800d1b8:	0800d2c9 	.word	0x0800d2c9
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	1d1a      	adds	r2, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	602a      	str	r2, [r5, #0]
 800d1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0a4      	b.n	800d31a <_printf_i+0x1f6>
 800d1d0:	6820      	ldr	r0, [r4, #0]
 800d1d2:	6829      	ldr	r1, [r5, #0]
 800d1d4:	0606      	lsls	r6, r0, #24
 800d1d6:	f101 0304 	add.w	r3, r1, #4
 800d1da:	d50a      	bpl.n	800d1f2 <_printf_i+0xce>
 800d1dc:	680e      	ldr	r6, [r1, #0]
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	da03      	bge.n	800d1ec <_printf_i+0xc8>
 800d1e4:	232d      	movs	r3, #45	; 0x2d
 800d1e6:	4276      	negs	r6, r6
 800d1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ec:	230a      	movs	r3, #10
 800d1ee:	485e      	ldr	r0, [pc, #376]	; (800d368 <_printf_i+0x244>)
 800d1f0:	e019      	b.n	800d226 <_printf_i+0x102>
 800d1f2:	680e      	ldr	r6, [r1, #0]
 800d1f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	bf18      	it	ne
 800d1fc:	b236      	sxthne	r6, r6
 800d1fe:	e7ef      	b.n	800d1e0 <_printf_i+0xbc>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	6820      	ldr	r0, [r4, #0]
 800d204:	1d19      	adds	r1, r3, #4
 800d206:	6029      	str	r1, [r5, #0]
 800d208:	0601      	lsls	r1, r0, #24
 800d20a:	d501      	bpl.n	800d210 <_printf_i+0xec>
 800d20c:	681e      	ldr	r6, [r3, #0]
 800d20e:	e002      	b.n	800d216 <_printf_i+0xf2>
 800d210:	0646      	lsls	r6, r0, #25
 800d212:	d5fb      	bpl.n	800d20c <_printf_i+0xe8>
 800d214:	881e      	ldrh	r6, [r3, #0]
 800d216:	2f6f      	cmp	r7, #111	; 0x6f
 800d218:	bf0c      	ite	eq
 800d21a:	2308      	moveq	r3, #8
 800d21c:	230a      	movne	r3, #10
 800d21e:	4852      	ldr	r0, [pc, #328]	; (800d368 <_printf_i+0x244>)
 800d220:	2100      	movs	r1, #0
 800d222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d226:	6865      	ldr	r5, [r4, #4]
 800d228:	2d00      	cmp	r5, #0
 800d22a:	bfa8      	it	ge
 800d22c:	6821      	ldrge	r1, [r4, #0]
 800d22e:	60a5      	str	r5, [r4, #8]
 800d230:	bfa4      	itt	ge
 800d232:	f021 0104 	bicge.w	r1, r1, #4
 800d236:	6021      	strge	r1, [r4, #0]
 800d238:	b90e      	cbnz	r6, 800d23e <_printf_i+0x11a>
 800d23a:	2d00      	cmp	r5, #0
 800d23c:	d04d      	beq.n	800d2da <_printf_i+0x1b6>
 800d23e:	4615      	mov	r5, r2
 800d240:	fbb6 f1f3 	udiv	r1, r6, r3
 800d244:	fb03 6711 	mls	r7, r3, r1, r6
 800d248:	5dc7      	ldrb	r7, [r0, r7]
 800d24a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d24e:	4637      	mov	r7, r6
 800d250:	42bb      	cmp	r3, r7
 800d252:	460e      	mov	r6, r1
 800d254:	d9f4      	bls.n	800d240 <_printf_i+0x11c>
 800d256:	2b08      	cmp	r3, #8
 800d258:	d10b      	bne.n	800d272 <_printf_i+0x14e>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	07de      	lsls	r6, r3, #31
 800d25e:	d508      	bpl.n	800d272 <_printf_i+0x14e>
 800d260:	6923      	ldr	r3, [r4, #16]
 800d262:	6861      	ldr	r1, [r4, #4]
 800d264:	4299      	cmp	r1, r3
 800d266:	bfde      	ittt	le
 800d268:	2330      	movle	r3, #48	; 0x30
 800d26a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d26e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d272:	1b52      	subs	r2, r2, r5
 800d274:	6122      	str	r2, [r4, #16]
 800d276:	464b      	mov	r3, r9
 800d278:	4621      	mov	r1, r4
 800d27a:	4640      	mov	r0, r8
 800d27c:	f8cd a000 	str.w	sl, [sp]
 800d280:	aa03      	add	r2, sp, #12
 800d282:	f7ff fedf 	bl	800d044 <_printf_common>
 800d286:	3001      	adds	r0, #1
 800d288:	d14c      	bne.n	800d324 <_printf_i+0x200>
 800d28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d28e:	b004      	add	sp, #16
 800d290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d294:	4834      	ldr	r0, [pc, #208]	; (800d368 <_printf_i+0x244>)
 800d296:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d29a:	6829      	ldr	r1, [r5, #0]
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2a2:	6029      	str	r1, [r5, #0]
 800d2a4:	061d      	lsls	r5, r3, #24
 800d2a6:	d514      	bpl.n	800d2d2 <_printf_i+0x1ae>
 800d2a8:	07df      	lsls	r7, r3, #31
 800d2aa:	bf44      	itt	mi
 800d2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800d2b0:	6023      	strmi	r3, [r4, #0]
 800d2b2:	b91e      	cbnz	r6, 800d2bc <_printf_i+0x198>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	f023 0320 	bic.w	r3, r3, #32
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	2310      	movs	r3, #16
 800d2be:	e7af      	b.n	800d220 <_printf_i+0xfc>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	f043 0320 	orr.w	r3, r3, #32
 800d2c6:	6023      	str	r3, [r4, #0]
 800d2c8:	2378      	movs	r3, #120	; 0x78
 800d2ca:	4828      	ldr	r0, [pc, #160]	; (800d36c <_printf_i+0x248>)
 800d2cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2d0:	e7e3      	b.n	800d29a <_printf_i+0x176>
 800d2d2:	0659      	lsls	r1, r3, #25
 800d2d4:	bf48      	it	mi
 800d2d6:	b2b6      	uxthmi	r6, r6
 800d2d8:	e7e6      	b.n	800d2a8 <_printf_i+0x184>
 800d2da:	4615      	mov	r5, r2
 800d2dc:	e7bb      	b.n	800d256 <_printf_i+0x132>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	6826      	ldr	r6, [r4, #0]
 800d2e2:	1d18      	adds	r0, r3, #4
 800d2e4:	6961      	ldr	r1, [r4, #20]
 800d2e6:	6028      	str	r0, [r5, #0]
 800d2e8:	0635      	lsls	r5, r6, #24
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	d501      	bpl.n	800d2f2 <_printf_i+0x1ce>
 800d2ee:	6019      	str	r1, [r3, #0]
 800d2f0:	e002      	b.n	800d2f8 <_printf_i+0x1d4>
 800d2f2:	0670      	lsls	r0, r6, #25
 800d2f4:	d5fb      	bpl.n	800d2ee <_printf_i+0x1ca>
 800d2f6:	8019      	strh	r1, [r3, #0]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4615      	mov	r5, r2
 800d2fc:	6123      	str	r3, [r4, #16]
 800d2fe:	e7ba      	b.n	800d276 <_printf_i+0x152>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	2100      	movs	r1, #0
 800d304:	1d1a      	adds	r2, r3, #4
 800d306:	602a      	str	r2, [r5, #0]
 800d308:	681d      	ldr	r5, [r3, #0]
 800d30a:	6862      	ldr	r2, [r4, #4]
 800d30c:	4628      	mov	r0, r5
 800d30e:	f000 f82f 	bl	800d370 <memchr>
 800d312:	b108      	cbz	r0, 800d318 <_printf_i+0x1f4>
 800d314:	1b40      	subs	r0, r0, r5
 800d316:	6060      	str	r0, [r4, #4]
 800d318:	6863      	ldr	r3, [r4, #4]
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	2300      	movs	r3, #0
 800d31e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d322:	e7a8      	b.n	800d276 <_printf_i+0x152>
 800d324:	462a      	mov	r2, r5
 800d326:	4649      	mov	r1, r9
 800d328:	4640      	mov	r0, r8
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	47d0      	blx	sl
 800d32e:	3001      	adds	r0, #1
 800d330:	d0ab      	beq.n	800d28a <_printf_i+0x166>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	079b      	lsls	r3, r3, #30
 800d336:	d413      	bmi.n	800d360 <_printf_i+0x23c>
 800d338:	68e0      	ldr	r0, [r4, #12]
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	4298      	cmp	r0, r3
 800d33e:	bfb8      	it	lt
 800d340:	4618      	movlt	r0, r3
 800d342:	e7a4      	b.n	800d28e <_printf_i+0x16a>
 800d344:	2301      	movs	r3, #1
 800d346:	4632      	mov	r2, r6
 800d348:	4649      	mov	r1, r9
 800d34a:	4640      	mov	r0, r8
 800d34c:	47d0      	blx	sl
 800d34e:	3001      	adds	r0, #1
 800d350:	d09b      	beq.n	800d28a <_printf_i+0x166>
 800d352:	3501      	adds	r5, #1
 800d354:	68e3      	ldr	r3, [r4, #12]
 800d356:	9903      	ldr	r1, [sp, #12]
 800d358:	1a5b      	subs	r3, r3, r1
 800d35a:	42ab      	cmp	r3, r5
 800d35c:	dcf2      	bgt.n	800d344 <_printf_i+0x220>
 800d35e:	e7eb      	b.n	800d338 <_printf_i+0x214>
 800d360:	2500      	movs	r5, #0
 800d362:	f104 0619 	add.w	r6, r4, #25
 800d366:	e7f5      	b.n	800d354 <_printf_i+0x230>
 800d368:	0800e574 	.word	0x0800e574
 800d36c:	0800e585 	.word	0x0800e585

0800d370 <memchr>:
 800d370:	4603      	mov	r3, r0
 800d372:	b510      	push	{r4, lr}
 800d374:	b2c9      	uxtb	r1, r1
 800d376:	4402      	add	r2, r0
 800d378:	4293      	cmp	r3, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	d101      	bne.n	800d382 <memchr+0x12>
 800d37e:	2000      	movs	r0, #0
 800d380:	e003      	b.n	800d38a <memchr+0x1a>
 800d382:	7804      	ldrb	r4, [r0, #0]
 800d384:	3301      	adds	r3, #1
 800d386:	428c      	cmp	r4, r1
 800d388:	d1f6      	bne.n	800d378 <memchr+0x8>
 800d38a:	bd10      	pop	{r4, pc}

0800d38c <memmove>:
 800d38c:	4288      	cmp	r0, r1
 800d38e:	b510      	push	{r4, lr}
 800d390:	eb01 0402 	add.w	r4, r1, r2
 800d394:	d902      	bls.n	800d39c <memmove+0x10>
 800d396:	4284      	cmp	r4, r0
 800d398:	4623      	mov	r3, r4
 800d39a:	d807      	bhi.n	800d3ac <memmove+0x20>
 800d39c:	1e43      	subs	r3, r0, #1
 800d39e:	42a1      	cmp	r1, r4
 800d3a0:	d008      	beq.n	800d3b4 <memmove+0x28>
 800d3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3aa:	e7f8      	b.n	800d39e <memmove+0x12>
 800d3ac:	4601      	mov	r1, r0
 800d3ae:	4402      	add	r2, r0
 800d3b0:	428a      	cmp	r2, r1
 800d3b2:	d100      	bne.n	800d3b6 <memmove+0x2a>
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3be:	e7f7      	b.n	800d3b0 <memmove+0x24>

0800d3c0 <_free_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	d040      	beq.n	800d44a <_free_r+0x8a>
 800d3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3cc:	1f0c      	subs	r4, r1, #4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bfb8      	it	lt
 800d3d2:	18e4      	addlt	r4, r4, r3
 800d3d4:	f000 f910 	bl	800d5f8 <__malloc_lock>
 800d3d8:	4a1c      	ldr	r2, [pc, #112]	; (800d44c <_free_r+0x8c>)
 800d3da:	6813      	ldr	r3, [r2, #0]
 800d3dc:	b933      	cbnz	r3, 800d3ec <_free_r+0x2c>
 800d3de:	6063      	str	r3, [r4, #4]
 800d3e0:	6014      	str	r4, [r2, #0]
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e8:	f000 b90c 	b.w	800d604 <__malloc_unlock>
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	d908      	bls.n	800d402 <_free_r+0x42>
 800d3f0:	6820      	ldr	r0, [r4, #0]
 800d3f2:	1821      	adds	r1, r4, r0
 800d3f4:	428b      	cmp	r3, r1
 800d3f6:	bf01      	itttt	eq
 800d3f8:	6819      	ldreq	r1, [r3, #0]
 800d3fa:	685b      	ldreq	r3, [r3, #4]
 800d3fc:	1809      	addeq	r1, r1, r0
 800d3fe:	6021      	streq	r1, [r4, #0]
 800d400:	e7ed      	b.n	800d3de <_free_r+0x1e>
 800d402:	461a      	mov	r2, r3
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	b10b      	cbz	r3, 800d40c <_free_r+0x4c>
 800d408:	42a3      	cmp	r3, r4
 800d40a:	d9fa      	bls.n	800d402 <_free_r+0x42>
 800d40c:	6811      	ldr	r1, [r2, #0]
 800d40e:	1850      	adds	r0, r2, r1
 800d410:	42a0      	cmp	r0, r4
 800d412:	d10b      	bne.n	800d42c <_free_r+0x6c>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	4401      	add	r1, r0
 800d418:	1850      	adds	r0, r2, r1
 800d41a:	4283      	cmp	r3, r0
 800d41c:	6011      	str	r1, [r2, #0]
 800d41e:	d1e0      	bne.n	800d3e2 <_free_r+0x22>
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4401      	add	r1, r0
 800d426:	6011      	str	r1, [r2, #0]
 800d428:	6053      	str	r3, [r2, #4]
 800d42a:	e7da      	b.n	800d3e2 <_free_r+0x22>
 800d42c:	d902      	bls.n	800d434 <_free_r+0x74>
 800d42e:	230c      	movs	r3, #12
 800d430:	602b      	str	r3, [r5, #0]
 800d432:	e7d6      	b.n	800d3e2 <_free_r+0x22>
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	1821      	adds	r1, r4, r0
 800d438:	428b      	cmp	r3, r1
 800d43a:	bf01      	itttt	eq
 800d43c:	6819      	ldreq	r1, [r3, #0]
 800d43e:	685b      	ldreq	r3, [r3, #4]
 800d440:	1809      	addeq	r1, r1, r0
 800d442:	6021      	streq	r1, [r4, #0]
 800d444:	6063      	str	r3, [r4, #4]
 800d446:	6054      	str	r4, [r2, #4]
 800d448:	e7cb      	b.n	800d3e2 <_free_r+0x22>
 800d44a:	bd38      	pop	{r3, r4, r5, pc}
 800d44c:	20001f08 	.word	0x20001f08

0800d450 <sbrk_aligned>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4e0e      	ldr	r6, [pc, #56]	; (800d48c <sbrk_aligned+0x3c>)
 800d454:	460c      	mov	r4, r1
 800d456:	6831      	ldr	r1, [r6, #0]
 800d458:	4605      	mov	r5, r0
 800d45a:	b911      	cbnz	r1, 800d462 <sbrk_aligned+0x12>
 800d45c:	f000 f8bc 	bl	800d5d8 <_sbrk_r>
 800d460:	6030      	str	r0, [r6, #0]
 800d462:	4621      	mov	r1, r4
 800d464:	4628      	mov	r0, r5
 800d466:	f000 f8b7 	bl	800d5d8 <_sbrk_r>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	d00a      	beq.n	800d484 <sbrk_aligned+0x34>
 800d46e:	1cc4      	adds	r4, r0, #3
 800d470:	f024 0403 	bic.w	r4, r4, #3
 800d474:	42a0      	cmp	r0, r4
 800d476:	d007      	beq.n	800d488 <sbrk_aligned+0x38>
 800d478:	1a21      	subs	r1, r4, r0
 800d47a:	4628      	mov	r0, r5
 800d47c:	f000 f8ac 	bl	800d5d8 <_sbrk_r>
 800d480:	3001      	adds	r0, #1
 800d482:	d101      	bne.n	800d488 <sbrk_aligned+0x38>
 800d484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d488:	4620      	mov	r0, r4
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	20001f0c 	.word	0x20001f0c

0800d490 <_malloc_r>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	1ccd      	adds	r5, r1, #3
 800d496:	f025 0503 	bic.w	r5, r5, #3
 800d49a:	3508      	adds	r5, #8
 800d49c:	2d0c      	cmp	r5, #12
 800d49e:	bf38      	it	cc
 800d4a0:	250c      	movcc	r5, #12
 800d4a2:	2d00      	cmp	r5, #0
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	db01      	blt.n	800d4ac <_malloc_r+0x1c>
 800d4a8:	42a9      	cmp	r1, r5
 800d4aa:	d905      	bls.n	800d4b8 <_malloc_r+0x28>
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	603b      	str	r3, [r7, #0]
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b8:	4e2e      	ldr	r6, [pc, #184]	; (800d574 <_malloc_r+0xe4>)
 800d4ba:	f000 f89d 	bl	800d5f8 <__malloc_lock>
 800d4be:	6833      	ldr	r3, [r6, #0]
 800d4c0:	461c      	mov	r4, r3
 800d4c2:	bb34      	cbnz	r4, 800d512 <_malloc_r+0x82>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	f7ff ffc2 	bl	800d450 <sbrk_aligned>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	d14d      	bne.n	800d56e <_malloc_r+0xde>
 800d4d2:	6834      	ldr	r4, [r6, #0]
 800d4d4:	4626      	mov	r6, r4
 800d4d6:	2e00      	cmp	r6, #0
 800d4d8:	d140      	bne.n	800d55c <_malloc_r+0xcc>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	4631      	mov	r1, r6
 800d4de:	4638      	mov	r0, r7
 800d4e0:	eb04 0803 	add.w	r8, r4, r3
 800d4e4:	f000 f878 	bl	800d5d8 <_sbrk_r>
 800d4e8:	4580      	cmp	r8, r0
 800d4ea:	d13a      	bne.n	800d562 <_malloc_r+0xd2>
 800d4ec:	6821      	ldr	r1, [r4, #0]
 800d4ee:	3503      	adds	r5, #3
 800d4f0:	1a6d      	subs	r5, r5, r1
 800d4f2:	f025 0503 	bic.w	r5, r5, #3
 800d4f6:	3508      	adds	r5, #8
 800d4f8:	2d0c      	cmp	r5, #12
 800d4fa:	bf38      	it	cc
 800d4fc:	250c      	movcc	r5, #12
 800d4fe:	4638      	mov	r0, r7
 800d500:	4629      	mov	r1, r5
 800d502:	f7ff ffa5 	bl	800d450 <sbrk_aligned>
 800d506:	3001      	adds	r0, #1
 800d508:	d02b      	beq.n	800d562 <_malloc_r+0xd2>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	442b      	add	r3, r5
 800d50e:	6023      	str	r3, [r4, #0]
 800d510:	e00e      	b.n	800d530 <_malloc_r+0xa0>
 800d512:	6822      	ldr	r2, [r4, #0]
 800d514:	1b52      	subs	r2, r2, r5
 800d516:	d41e      	bmi.n	800d556 <_malloc_r+0xc6>
 800d518:	2a0b      	cmp	r2, #11
 800d51a:	d916      	bls.n	800d54a <_malloc_r+0xba>
 800d51c:	1961      	adds	r1, r4, r5
 800d51e:	42a3      	cmp	r3, r4
 800d520:	6025      	str	r5, [r4, #0]
 800d522:	bf18      	it	ne
 800d524:	6059      	strne	r1, [r3, #4]
 800d526:	6863      	ldr	r3, [r4, #4]
 800d528:	bf08      	it	eq
 800d52a:	6031      	streq	r1, [r6, #0]
 800d52c:	5162      	str	r2, [r4, r5]
 800d52e:	604b      	str	r3, [r1, #4]
 800d530:	4638      	mov	r0, r7
 800d532:	f104 060b 	add.w	r6, r4, #11
 800d536:	f000 f865 	bl	800d604 <__malloc_unlock>
 800d53a:	f026 0607 	bic.w	r6, r6, #7
 800d53e:	1d23      	adds	r3, r4, #4
 800d540:	1af2      	subs	r2, r6, r3
 800d542:	d0b6      	beq.n	800d4b2 <_malloc_r+0x22>
 800d544:	1b9b      	subs	r3, r3, r6
 800d546:	50a3      	str	r3, [r4, r2]
 800d548:	e7b3      	b.n	800d4b2 <_malloc_r+0x22>
 800d54a:	6862      	ldr	r2, [r4, #4]
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	bf0c      	ite	eq
 800d550:	6032      	streq	r2, [r6, #0]
 800d552:	605a      	strne	r2, [r3, #4]
 800d554:	e7ec      	b.n	800d530 <_malloc_r+0xa0>
 800d556:	4623      	mov	r3, r4
 800d558:	6864      	ldr	r4, [r4, #4]
 800d55a:	e7b2      	b.n	800d4c2 <_malloc_r+0x32>
 800d55c:	4634      	mov	r4, r6
 800d55e:	6876      	ldr	r6, [r6, #4]
 800d560:	e7b9      	b.n	800d4d6 <_malloc_r+0x46>
 800d562:	230c      	movs	r3, #12
 800d564:	4638      	mov	r0, r7
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	f000 f84c 	bl	800d604 <__malloc_unlock>
 800d56c:	e7a1      	b.n	800d4b2 <_malloc_r+0x22>
 800d56e:	6025      	str	r5, [r4, #0]
 800d570:	e7de      	b.n	800d530 <_malloc_r+0xa0>
 800d572:	bf00      	nop
 800d574:	20001f08 	.word	0x20001f08

0800d578 <_realloc_r>:
 800d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57c:	4680      	mov	r8, r0
 800d57e:	4614      	mov	r4, r2
 800d580:	460e      	mov	r6, r1
 800d582:	b921      	cbnz	r1, 800d58e <_realloc_r+0x16>
 800d584:	4611      	mov	r1, r2
 800d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58a:	f7ff bf81 	b.w	800d490 <_malloc_r>
 800d58e:	b92a      	cbnz	r2, 800d59c <_realloc_r+0x24>
 800d590:	f7ff ff16 	bl	800d3c0 <_free_r>
 800d594:	4625      	mov	r5, r4
 800d596:	4628      	mov	r0, r5
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	f000 f838 	bl	800d610 <_malloc_usable_size_r>
 800d5a0:	4284      	cmp	r4, r0
 800d5a2:	4607      	mov	r7, r0
 800d5a4:	d802      	bhi.n	800d5ac <_realloc_r+0x34>
 800d5a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5aa:	d812      	bhi.n	800d5d2 <_realloc_r+0x5a>
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	f7ff ff6e 	bl	800d490 <_malloc_r>
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d0ed      	beq.n	800d596 <_realloc_r+0x1e>
 800d5ba:	42bc      	cmp	r4, r7
 800d5bc:	4622      	mov	r2, r4
 800d5be:	4631      	mov	r1, r6
 800d5c0:	bf28      	it	cs
 800d5c2:	463a      	movcs	r2, r7
 800d5c4:	f7ff fb72 	bl	800ccac <memcpy>
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	4640      	mov	r0, r8
 800d5cc:	f7ff fef8 	bl	800d3c0 <_free_r>
 800d5d0:	e7e1      	b.n	800d596 <_realloc_r+0x1e>
 800d5d2:	4635      	mov	r5, r6
 800d5d4:	e7df      	b.n	800d596 <_realloc_r+0x1e>
	...

0800d5d8 <_sbrk_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4d05      	ldr	r5, [pc, #20]	; (800d5f4 <_sbrk_r+0x1c>)
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	f7f4 fb20 	bl	8001c28 <_sbrk>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_sbrk_r+0x1a>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_sbrk_r+0x1a>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	20001f10 	.word	0x20001f10

0800d5f8 <__malloc_lock>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	; (800d600 <__malloc_lock+0x8>)
 800d5fa:	f000 b811 	b.w	800d620 <__retarget_lock_acquire_recursive>
 800d5fe:	bf00      	nop
 800d600:	20001f14 	.word	0x20001f14

0800d604 <__malloc_unlock>:
 800d604:	4801      	ldr	r0, [pc, #4]	; (800d60c <__malloc_unlock+0x8>)
 800d606:	f000 b80c 	b.w	800d622 <__retarget_lock_release_recursive>
 800d60a:	bf00      	nop
 800d60c:	20001f14 	.word	0x20001f14

0800d610 <_malloc_usable_size_r>:
 800d610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d614:	1f18      	subs	r0, r3, #4
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfbc      	itt	lt
 800d61a:	580b      	ldrlt	r3, [r1, r0]
 800d61c:	18c0      	addlt	r0, r0, r3
 800d61e:	4770      	bx	lr

0800d620 <__retarget_lock_acquire_recursive>:
 800d620:	4770      	bx	lr

0800d622 <__retarget_lock_release_recursive>:
 800d622:	4770      	bx	lr

0800d624 <_init>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	bf00      	nop
 800d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62a:	bc08      	pop	{r3}
 800d62c:	469e      	mov	lr, r3
 800d62e:	4770      	bx	lr

0800d630 <_fini>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	bf00      	nop
 800d634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d636:	bc08      	pop	{r3}
 800d638:	469e      	mov	lr, r3
 800d63a:	4770      	bx	lr
