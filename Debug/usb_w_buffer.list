
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c594  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d86c  0800d86c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800d86c  0800d86c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d86c  0800d86c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d870  0800d870  0001d870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800d874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  20000418  0800dc8c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e28  0800dc8c  00021e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003de4c  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005abd  00000000  00000000  0005e28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a8  00000000  00000000  00063d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb0  00000000  00000000  00065ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df82  00000000  00000000  00067fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c4c  00000000  00000000  00085f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9f4  00000000  00000000  000a8b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014856a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094b4  00000000  00000000  001485bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c688 	.word	0x0800c688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800c688 	.word	0x0800c688

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fc5c 	bl	8003a48 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fc57 	bl	8003a48 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 ff52 	bl	800404c <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 ff4b 	bl	800404c <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 f93e 	bl	80064ac <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 ff07 	bl	800404c <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200005cc 	.word	0x200005cc
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f000 fe06 	bl	8000e6c <Kpd_Irqv_Init>

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <Start_APP+0x64>)
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000264:	4917      	ldr	r1, [pc, #92]	; (80002c4 <Start_APP+0x6c>)
 8000266:	4818      	ldr	r0, [pc, #96]	; (80002c8 <Start_APP+0x70>)
 8000268:	f001 fd00 	bl	8001c6c <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	f003 fab4 	bl	80037da <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 8000272:	2100      	movs	r1, #0
 8000274:	4814      	ldr	r0, [pc, #80]	; (80002c8 <Start_APP+0x70>)
 8000276:	f003 fabf 	bl	80037f8 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 800027a:	2004      	movs	r0, #4
 800027c:	f000 fc0a 	bl	8000a94 <set_contrast>

		u8g2_SetDrawColor(&u8g2, 2);
 8000280:	2102      	movs	r1, #2
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <Start_APP+0x70>)
 8000284:	f002 fd0c 	bl	8002ca0 <u8g2_SetDrawColor>
		u8g2_SetBitmapMode(&u8g2, 1);
 8000288:	2101      	movs	r1, #1
 800028a:	480f      	ldr	r0, [pc, #60]	; (80002c8 <Start_APP+0x70>)
 800028c:	f001 f954 	bl	8001538 <u8g2_SetBitmapMode>
		u8g2_SetFontMode(&u8g2, 1);
 8000290:	2101      	movs	r1, #1
 8000292:	480d      	ldr	r0, [pc, #52]	; (80002c8 <Start_APP+0x70>)
 8000294:	f002 f984 	bl	80025a0 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029a:	f002 faef 	bl	800287c <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox3c_mf);
 800029e:	490b      	ldr	r1, [pc, #44]	; (80002cc <Start_APP+0x74>)
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <Start_APP+0x70>)
 80002a2:	f002 faf9 	bl	8002898 <u8g2_SetFont>
		disp_splash();
 80002a6:	f000 fc09 	bl	8000abc <disp_splash>
		text_insertion_point(0 , 0);
 80002aa:	2100      	movs	r1, #0
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 faa1 	bl	80007f4 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002b2:	f000 fa63 	bl	800077c <monitor_begin>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	0800015d 	.word	0x0800015d
 80002c0:	080001cd 	.word	0x080001cd
 80002c4:	0800d7c8 	.word	0x0800d7c8
 80002c8:	20000434 	.word	0x20000434
 80002cc:	0800c784 	.word	0x0800c784

080002d0 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002d8:	bf00      	nop
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ff36 	bl	800014c <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <monitor_send_string+0x2c>)
 80002e8:	f00b f902 	bl	800b4f0 <CDC_Transmit_FS>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f3      	beq.n	80002da <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200004c8 	.word	0x200004c8

08000300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000310:	f006 fb50 	bl	80069b4 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000314:	f000 f962 	bl	80005dc <monitor_interrupt>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200005b8 	.word	0x200005b8
 8000324:	20000624 	.word	0x20000624

08000328 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af02      	add	r7, sp, #8
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000332:	2204      	movs	r2, #4
 8000334:	498c      	ldr	r1, [pc, #560]	; (8000568 <monitor_check_cmd+0x240>)
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f00b fd34 	bl	800bda4 <strncmp>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d108      	bne.n	8000354 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000342:	4a8a      	ldr	r2, [pc, #552]	; (800056c <monitor_check_cmd+0x244>)
 8000344:	2190      	movs	r1, #144	; 0x90
 8000346:	488a      	ldr	r0, [pc, #552]	; (8000570 <monitor_check_cmd+0x248>)
 8000348:	f00b fcf8 	bl	800bd3c <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 800034c:	4888      	ldr	r0, [pc, #544]	; (8000570 <monitor_check_cmd+0x248>)
 800034e:	f7ff ffbf 	bl	80002d0 <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 8000352:	e105      	b.n	8000560 <monitor_check_cmd+0x238>
	else if (cmd[0] == LCD_CMD) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2bfe      	cmp	r3, #254	; 0xfe
 800035a:	f040 8101 	bne.w	8000560 <monitor_check_cmd+0x238>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b31      	cmp	r3, #49	; 0x31
 8000366:	d109      	bne.n	800037c <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000368:	4b82      	ldr	r3, [pc, #520]	; (8000574 <monitor_check_cmd+0x24c>)
 800036a:	4a83      	ldr	r2, [pc, #524]	; (8000578 <monitor_check_cmd+0x250>)
 800036c:	2190      	movs	r1, #144	; 0x90
 800036e:	4880      	ldr	r0, [pc, #512]	; (8000570 <monitor_check_cmd+0x248>)
 8000370:	f00b fce4 	bl	800bd3c <sniprintf>
			monitor_send_string(ans);
 8000374:	487e      	ldr	r0, [pc, #504]	; (8000570 <monitor_check_cmd+0x248>)
 8000376:	f7ff ffab 	bl	80002d0 <monitor_send_string>
}
 800037a:	e0f1      	b.n	8000560 <monitor_check_cmd+0x238>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b30      	cmp	r3, #48	; 0x30
 8000384:	d109      	bne.n	800039a <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 8000386:	4b7b      	ldr	r3, [pc, #492]	; (8000574 <monitor_check_cmd+0x24c>)
 8000388:	4a7c      	ldr	r2, [pc, #496]	; (800057c <monitor_check_cmd+0x254>)
 800038a:	2190      	movs	r1, #144	; 0x90
 800038c:	4878      	ldr	r0, [pc, #480]	; (8000570 <monitor_check_cmd+0x248>)
 800038e:	f00b fcd5 	bl	800bd3c <sniprintf>
			monitor_send_string(ans);
 8000392:	4877      	ldr	r0, [pc, #476]	; (8000570 <monitor_check_cmd+0x248>)
 8000394:	f7ff ff9c 	bl	80002d0 <monitor_send_string>
}
 8000398:	e0e2      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SOFT_RESET) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b56      	cmp	r3, #86	; 0x56
 80003a2:	d102      	bne.n	80003aa <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003a4:	f000 fb50 	bl	8000a48 <lcd_soft_reset>
}
 80003a8:	e0da      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3301      	adds	r3, #1
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b42      	cmp	r3, #66	; 0x42
 80003b2:	d103      	bne.n	80003bc <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f000 fb5b 	bl	8000a70 <enable_backlight>
}
 80003ba:	e0d1      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b46      	cmp	r3, #70	; 0x46
 80003c4:	d103      	bne.n	80003ce <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fb52 	bl	8000a70 <enable_backlight>
}
 80003cc:	e0c8      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b66      	cmp	r3, #102	; 0x66
 80003d6:	d103      	bne.n	80003e0 <monitor_check_cmd+0xb8>
			inverse_text(true);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fa37 	bl	800084c <inverse_text>
}
 80003de:	e0bf      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b67      	cmp	r3, #103	; 0x67
 80003e8:	d103      	bne.n	80003f2 <monitor_check_cmd+0xca>
			inverse_text(false);
 80003ea:	2000      	movs	r0, #0
 80003ec:	f000 fa2e 	bl	800084c <inverse_text>
}
 80003f0:	e0b6      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b58      	cmp	r3, #88	; 0x58
 80003fa:	d102      	bne.n	8000402 <monitor_check_cmd+0xda>
			clear_display();
 80003fc:	f000 fb2a 	bl	8000a54 <clear_display>
}
 8000400:	e0ae      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b70      	cmp	r3, #112	; 0x70
 800040a:	d10a      	bne.n	8000422 <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3303      	adds	r3, #3
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3302      	adds	r3, #2
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f000 fad8 	bl	80009d0 <put_pixel>
}
 8000420:	e09e      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b71      	cmp	r3, #113	; 0x71
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fae6 	bl	8000a0c <erase_pixel>
}
 8000440:	e08e      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b43      	cmp	r3, #67	; 0x43
 800044a:	d103      	bne.n	8000454 <monitor_check_cmd+0x12c>
			auto_line_wrap(true);
 800044c:	2001      	movs	r0, #1
 800044e:	f000 f9c1 	bl	80007d4 <auto_line_wrap>
}
 8000452:	e085      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b44      	cmp	r3, #68	; 0x44
 800045c:	d103      	bne.n	8000466 <monitor_check_cmd+0x13e>
			auto_line_wrap(false);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f9b8 	bl	80007d4 <auto_line_wrap>
}
 8000464:	e07c      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SET_INSERT) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3301      	adds	r3, #1
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b47      	cmp	r3, #71	; 0x47
 800046e:	d10a      	bne.n	8000486 <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3302      	adds	r3, #2
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3303      	adds	r3, #3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	4610      	mov	r0, r2
 8000480:	f000 f9b8 	bl	80007f4 <text_insertion_point>
}
 8000484:	e06c      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_HOME_INSERT) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b48      	cmp	r3, #72	; 0x48
 800048e:	d104      	bne.n	800049a <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000490:	2100      	movs	r1, #0
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f9ae 	bl	80007f4 <text_insertion_point>
}
 8000498:	e062      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_READ_GPI) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b65      	cmp	r3, #101	; 0x65
 80004a2:	d114      	bne.n	80004ce <monitor_check_cmd+0x1a6>
			if (cmd[2] == '0') {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3302      	adds	r3, #2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b30      	cmp	r3, #48	; 0x30
 80004ac:	d158      	bne.n	8000560 <monitor_check_cmd+0x238>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <monitor_check_cmd+0x258>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
						ddp[1]);
 80004b4:	4b32      	ldr	r3, [pc, #200]	; (8000580 <monitor_check_cmd+0x258>)
 80004b6:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	4613      	mov	r3, r2
 80004bc:	4a31      	ldr	r2, [pc, #196]	; (8000584 <monitor_check_cmd+0x25c>)
 80004be:	2190      	movs	r1, #144	; 0x90
 80004c0:	482b      	ldr	r0, [pc, #172]	; (8000570 <monitor_check_cmd+0x248>)
 80004c2:	f00b fc3b 	bl	800bd3c <sniprintf>
				monitor_send_string(ans);
 80004c6:	482a      	ldr	r0, [pc, #168]	; (8000570 <monitor_check_cmd+0x248>)
 80004c8:	f7ff ff02 	bl	80002d0 <monitor_send_string>
}
 80004cc:	e048      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b69      	cmp	r3, #105	; 0x69
 80004d6:	d102      	bne.n	80004de <monitor_check_cmd+0x1b6>
			disp_splash();
 80004d8:	f000 faf0 	bl	8000abc <disp_splash>
}
 80004dc:	e040      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b76      	cmp	r3, #118	; 0x76
 80004e6:	d102      	bne.n	80004ee <monitor_check_cmd+0x1c6>
			def_thick_v_bar();
 80004e8:	f000 f9c0 	bl	800086c <def_thick_v_bar>
}
 80004ec:	e038      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3301      	adds	r3, #1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b73      	cmp	r3, #115	; 0x73
 80004f6:	d102      	bne.n	80004fe <monitor_check_cmd+0x1d6>
			def_thin_v_bar();
 80004f8:	f000 f9c4 	bl	8000884 <def_thin_v_bar>
}
 80004fc:	e030      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3301      	adds	r3, #1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b3d      	cmp	r3, #61	; 0x3d
 8000506:	d10a      	bne.n	800051e <monitor_check_cmd+0x1f6>
			draw_v_bar_graph(cmd[2], cmd[3]);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3302      	adds	r3, #2
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3303      	adds	r3, #3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f000 f9c0 	bl	800089c <draw_v_bar_graph>
}
 800051c:	e020      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3301      	adds	r3, #1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b3d      	cmp	r3, #61	; 0x3d
 8000526:	d10a      	bne.n	800053e <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3302      	adds	r3, #2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3303      	adds	r3, #3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	4610      	mov	r0, r2
 8000538:	f000 f9e0 	bl	80008fc <erase_v_bar_graph>
}
 800053c:	e010      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b7c      	cmp	r3, #124	; 0x7c
 8000546:	d10b      	bne.n	8000560 <monitor_check_cmd+0x238>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3302      	adds	r3, #2
 800054c:	7818      	ldrb	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3303      	adds	r3, #3
 8000552:	7819      	ldrb	r1, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	f000 f9fe 	bl	800095c <draw_h_bar_graph>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	0800c6a0 	.word	0x0800c6a0
 800056c:	0800c6a8 	.word	0x0800c6a8
 8000570:	20000558 	.word	0x20000558
 8000574:	0800c6e0 	.word	0x0800c6e0
 8000578:	0800c6e4 	.word	0x0800c6e4
 800057c:	0800c6fc 	.word	0x0800c6fc
 8000580:	20000000 	.word	0x20000000
 8000584:	0800c710 	.word	0x0800c710

08000588 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <app_usb_cbk+0x44>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <app_usb_cbk+0x48>)
 8000598:	4413      	add	r3, r2
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	f00b fbb6 	bl	800bd10 <memcpy>
	size += len;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <app_usb_cbk+0x44>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <app_usb_cbk+0x44>)
 80005ae:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <app_usb_cbk+0x44>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b8f      	cmp	r3, #143	; 0x8f
 80005b6:	d902      	bls.n	80005be <app_usb_cbk+0x36>
		new_cmd = true;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <app_usb_cbk+0x4c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <app_usb_cbk+0x50>)
 80005c0:	f006 f9a6 	bl	8006910 <HAL_TIM_Base_Start_IT>

}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200005b4 	.word	0x200005b4
 80005d0:	200004c8 	.word	0x200004c8
 80005d4:	200005b8 	.word	0x200005b8
 80005d8:	20000624 	.word	0x20000624

080005dc <monitor_interrupt>:

void monitor_interrupt(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <monitor_interrupt+0x190>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 80bb 	beq.w	8000762 <monitor_interrupt+0x186>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80005f0:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <monitor_interrupt+0x194>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80005f6:	2300      	movs	r3, #0
 80005f8:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80005fa:	2300      	movs	r3, #0
 80005fc:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset <= size; offset++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e091      	b.n	8000728 <monitor_interrupt+0x14c>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a5b      	ldr	r2, [pc, #364]	; (8000774 <monitor_interrupt+0x198>)
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2bfd      	cmp	r3, #253	; 0xfd
 800060e:	d110      	bne.n	8000632 <monitor_interrupt+0x56>
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3301      	adds	r3, #1
 8000614:	4a57      	ldr	r2, [pc, #348]	; (8000774 <monitor_interrupt+0x198>)
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2bfe      	cmp	r3, #254	; 0xfe
 800061c:	d009      	beq.n	8000632 <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	3301      	adds	r3, #1
 8000622:	4a54      	ldr	r2, [pc, #336]	; (8000774 <monitor_interrupt+0x198>)
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b14      	cmp	r3, #20
 800062a:	d002      	beq.n	8000632 <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3301      	adds	r3, #1
 8000630:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00c      	beq.n	8000652 <monitor_interrupt+0x76>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <monitor_interrupt+0x198>)
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2bfe      	cmp	r3, #254	; 0xfe
 8000642:	d106      	bne.n	8000652 <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a4a      	ldr	r2, [pc, #296]	; (8000774 <monitor_interrupt+0x198>)
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2bfd      	cmp	r3, #253	; 0xfd
 8000650:	d104      	bne.n	800065c <monitor_interrupt+0x80>
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <monitor_interrupt+0x194>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	429a      	cmp	r2, r3
 800065a:	d103      	bne.n	8000664 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o começo de outro e
				printable = true;
 800065c:	2301      	movs	r3, #1
 800065e:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d029      	beq.n	80006be <monitor_interrupt+0xe2>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <monitor_interrupt+0x198>)
 800066e:	1899      	adds	r1, r3, r2
 8000670:	797a      	ldrb	r2, [r7, #5]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	461a      	mov	r2, r3
 8000678:	483f      	ldr	r0, [pc, #252]	; (8000778 <monitor_interrupt+0x19c>)
 800067a:	f00b fba7 	bl	800bdcc <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	b29a      	uxth	r2, r3
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	483a      	ldr	r0, [pc, #232]	; (8000778 <monitor_interrupt+0x19c>)
 800068e:	f00a ff2f 	bl	800b4f0 <CDC_Transmit_FS>
				lcd_print(ans);
 8000692:	4839      	ldr	r0, [pc, #228]	; (8000778 <monitor_interrupt+0x19c>)
 8000694:	f000 fabc 	bl	8000c10 <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000698:	225a      	movs	r2, #90	; 0x5a
 800069a:	2100      	movs	r1, #0
 800069c:	4836      	ldr	r0, [pc, #216]	; (8000778 <monitor_interrupt+0x19c>)
 800069e:	f00b fb45 	bl	800bd2c <memset>
				printable = !printable;
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f083 0301 	eor.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	70fb      	strb	r3, [r7, #3]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <monitor_interrupt+0x198>)
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2bfe      	cmp	r3, #254	; 0xfe
 80006c8:	d117      	bne.n	80006fa <monitor_interrupt+0x11e>
				monitor_check_cmd((char*) cmd + offset, size);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <monitor_interrupt+0x198>)
 80006ce:	4413      	add	r3, r2
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <monitor_interrupt+0x194>)
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe26 	bl	8000328 <monitor_check_cmd>
				is_cmd = !is_cmd;
 80006dc:	793b      	ldrb	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	713b      	strb	r3, [r7, #4]
 80006f0:	793b      	ldrb	r3, [r7, #4]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	713b      	strb	r3, [r7, #4]
 80006f8:	e013      	b.n	8000722 <monitor_interrupt+0x146>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <monitor_interrupt+0x198>)
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2bfd      	cmp	r3, #253	; 0xfd
 8000704:	d10d      	bne.n	8000722 <monitor_interrupt+0x146>
				is_cmd = !is_cmd;
 8000706:	793b      	ldrb	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	713b      	strb	r3, [r7, #4]
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	713b      	strb	r3, [r7, #4]
		for (offset = 0; offset <= size; offset++) {
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3301      	adds	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <monitor_interrupt+0x194>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	f67f af68 	bls.w	8000604 <monitor_interrupt+0x28>
			}
		}
		size = 0;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <monitor_interrupt+0x194>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 800073a:	2290      	movs	r2, #144	; 0x90
 800073c:	2100      	movs	r1, #0
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <monitor_interrupt+0x198>)
 8000740:	f00b faf4 	bl	800bd2c <memset>
		new_cmd = !new_cmd;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <monitor_interrupt+0x190>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f083 0301 	eor.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <monitor_interrupt+0x190>)
 8000760:	701a      	strb	r2, [r3, #0]
	}
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200005b8 	.word	0x200005b8
 8000770:	200005b4 	.word	0x200005b4
 8000774:	200004c8 	.word	0x200004c8
 8000778:	20000558 	.word	0x20000558

0800077c <monitor_begin>:

void monitor_begin(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <monitor_begin+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <monitor_begin+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <monitor_begin+0x50>)
 8000790:	2190      	movs	r1, #144	; 0x90
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <monitor_begin+0x54>)
 8000794:	f00b fad2 	bl	800bd3c <sniprintf>
	monitor_send_string(ans);
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <monitor_begin+0x54>)
 800079a:	f7ff fd99 	bl	80002d0 <monitor_send_string>
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e006      	b.n	80007b2 <monitor_begin+0x36>
		ans[i] = '\0';
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <monitor_begin+0x54>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b0e      	cmp	r3, #14
 80007b6:	d9f5      	bls.n	80007a4 <monitor_begin+0x28>
	}
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200005b4 	.word	0x200005b4
 80007c8:	200005b8 	.word	0x200005b8
 80007cc:	0800c71c 	.word	0x0800c71c
 80007d0:	20000558 	.word	0x20000558

080007d4 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <auto_line_wrap+0x1c>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	7013      	strb	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200005ba 	.word	0x200005ba

080007f4 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <text_insertion_point+0x4c>)
 8000806:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800080a:	b2db      	uxtb	r3, r3
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <text_insertion_point+0x50>)
 8000816:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <text_insertion_point+0x4c>)
 800081a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800081e:	461a      	mov	r2, r3
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <text_insertion_point+0x54>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000826:	b2db      	uxtb	r3, r3
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <text_insertion_point+0x50>)
 8000832:	705a      	strb	r2, [r3, #1]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000434 	.word	0x20000434
 8000844:	200005bc 	.word	0x200005bc
 8000848:	2000022d 	.word	0x2000022d

0800084c <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <inverse_text+0x1c>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	7013      	strb	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200005b9 	.word	0x200005b9

0800086c <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <def_thick_v_bar+0x14>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000022c 	.word	0x2000022c

08000884 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <def_thin_v_bar+0x14>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000022c 	.word	0x2000022c

0800089c <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008ae:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008be:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b299      	uxth	r1, r3
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <draw_v_bar_graph+0x5c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b298      	uxth	r0, r3
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4603      	mov	r3, r0
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008dc:	f000 feec 	bl	80016b8 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008e2:	f000 ffef 	bl	80018c4 <u8g2_SendBuffer>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000434 	.word	0x20000434
 80008f4:	200005bc 	.word	0x200005bc
 80008f8:	2000022c 	.word	0x2000022c

080008fc <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <erase_v_bar_graph+0x54>)
 800090e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000912:	b2db      	uxtb	r3, r3
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <erase_v_bar_graph+0x58>)
 800091e:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <erase_v_bar_graph+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b299      	uxth	r1, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <erase_v_bar_graph+0x58>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <erase_v_bar_graph+0x5c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b298      	uxth	r0, r3
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	b29b      	uxth	r3, r3
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <erase_v_bar_graph+0x54>)
 800093c:	f000 febc 	bl	80016b8 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <erase_v_bar_graph+0x54>)
 8000942:	f000 ffbf 	bl	80018c4 <u8g2_SendBuffer>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000434 	.word	0x20000434
 8000954:	200005bc 	.word	0x200005bc
 8000958:	2000022c 	.word	0x2000022c

0800095c <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <draw_h_bar_graph+0x6c>)
 8000970:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000974:	b2db      	uxtb	r3, r3
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <draw_h_bar_graph+0x70>)
 8000980:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <draw_h_bar_graph+0x6c>)
 8000984:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000988:	b2db      	uxtb	r3, r3
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <draw_h_bar_graph+0x70>)
 8000994:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <draw_h_bar_graph+0x70>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b299      	uxth	r1, r3
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <draw_h_bar_graph+0x70>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009a8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4603      	mov	r3, r0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009b4:	f000 fe80 	bl	80016b8 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009ba:	f000 ff83 	bl	80018c4 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000434 	.word	0x20000434
 80009cc:	200005bc 	.word	0x200005bc

080009d0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 80009e0:	2101      	movs	r1, #1
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <put_pixel+0x38>)
 80009e4:	f002 f95c 	bl	8002ca0 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	79ba      	ldrb	r2, [r7, #6]
 80009ee:	b292      	uxth	r2, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <put_pixel+0x38>)
 80009f4:	f002 f921 	bl	8002c3a <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <put_pixel+0x38>)
 80009fa:	f000 ff63 	bl	80018c4 <u8g2_SendBuffer>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000434 	.word	0x20000434

08000a0c <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <erase_pixel+0x38>)
 8000a20:	f002 f93e 	bl	8002ca0 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <erase_pixel+0x38>)
 8000a30:	f002 f903 	bl	8002c3a <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <erase_pixel+0x38>)
 8000a36:	f000 ff45 	bl	80018c4 <u8g2_SendBuffer>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000434 	.word	0x20000434

08000a48 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000a4c:	f003 f969 	bl	8003d22 <HAL_NVIC_SystemReset>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff feca 	bl	80007f4 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <clear_display+0x18>)
 8000a62:	f001 f8dd 	bl	8001c20 <u8g2_ClearDisplay>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000434 	.word	0x20000434

08000a70 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <enable_backlight+0x20>)
 8000a82:	f003 fae3 	bl	800404c <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010800 	.word	0x40010800

08000a94 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <set_contrast+0x24>)
 8000aac:	f002 feb5 	bl	800381a <u8x8_SetContrast>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000434 	.word	0x20000434

08000abc <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <disp_splash+0x28>)
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	23b4      	movs	r3, #180	; 0xb4
 8000acc:	2214      	movs	r2, #20
 8000ace:	2106      	movs	r1, #6
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <disp_splash+0x2c>)
 8000ad2:	f000 fdae 	bl	8001632 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <disp_splash+0x2c>)
 8000ad8:	f000 fef4 	bl	80018c4 <u8g2_SendBuffer>

}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000434 	.word	0x20000434

08000aec <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f7ff fb24 	bl	800014c <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	4a40      	ldr	r2, [pc, #256]	; (8000c0c <str_warper+0x120>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	if (wrap->wrap_times) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d06f      	beq.n	8000c04 <str_warper+0x118>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e066      	b.n	8000bf8 <str_warper+0x10c>
			if (aux < N_LINES) {
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d82d      	bhi.n	8000b8c <str_warper+0xa0>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	4613      	mov	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	bf0c      	ite	eq
 8000b48:	2301      	moveq	r3, #1
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b4e:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	18d0      	adds	r0, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000b6e:	2213      	movs	r2, #19
 8000b70:	4619      	mov	r1, r3
 8000b72:	f00b f92b 	bl	800bdcc <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	440b      	add	r3, r1
 8000b84:	3313      	adds	r3, #19
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e032      	b.n	8000bf2 <str_warper+0x106>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8000ba0:	2b20      	cmp	r3, #32
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000baa:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	18d4      	adds	r4, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	4413      	add	r3, r2
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fab3 	bl	800014c <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4629      	mov	r1, r5
 8000bec:	4620      	mov	r0, r4
 8000bee:	f00b f8ed 	bl	800bdcc <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d992      	bls.n	8000b2a <str_warper+0x3e>
			}
		}
	}
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0c:	cccccccd 	.word	0xcccccccd

08000c10 <lcd_print>:
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b0a1      	sub	sp, #132	; 0x84
 8000c14:	af04      	add	r7, sp, #16
 8000c16:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool clean_it = false;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	if (text_invertion) {
 8000c24:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <lcd_print+0x248>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d06d      	beq.n	8000d08 <lcd_print+0xf8>
		if (text_wrap) {
 8000c2c:	4b8b      	ldr	r3, [pc, #556]	; (8000e5c <lcd_print+0x24c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d046      	beq.n	8000cc2 <lcd_print+0xb2>
			str_warper(&wrap, txt);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff56 	bl	8000aec <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000c46:	e035      	b.n	8000cb4 <lcd_print+0xa4>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c48:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <lcd_print+0x250>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <lcd_print+0x250>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 8000c54:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000c58:	f107 0108 	add.w	r1, r7, #8
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c66:	9303      	str	r3, [sp, #12]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2320      	movs	r3, #32
 8000c76:	4622      	mov	r2, r4
 8000c78:	4601      	mov	r1, r0
 8000c7a:	487a      	ldr	r0, [pc, #488]	; (8000e64 <lcd_print+0x254>)
 8000c7c:	f000 ff7c 	bl	8001b78 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000c80:	4878      	ldr	r0, [pc, #480]	; (8000e64 <lcd_print+0x254>)
 8000c82:	f000 fe1f 	bl	80018c4 <u8g2_SendBuffer>
				clean_it = !clean_it;
 8000c86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000c9e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000caa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000cb4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000cb8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d9c3      	bls.n	8000c48 <lcd_print+0x38>
 8000cc0:	e0a9      	b.n	8000e16 <lcd_print+0x206>
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
		} else {
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000cc2:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <lcd_print+0x250>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b299      	uxth	r1, r3
 8000cc8:	4b65      	ldr	r3, [pc, #404]	; (8000e60 <lcd_print+0x250>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	9303      	str	r3, [sp, #12]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9302      	str	r3, [sp, #8]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2320      	movs	r3, #32
 8000ce0:	4860      	ldr	r0, [pc, #384]	; (8000e64 <lcd_print+0x254>)
 8000ce2:	f000 ff49 	bl	8001b78 <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8000ce6:	485f      	ldr	r0, [pc, #380]	; (8000e64 <lcd_print+0x254>)
 8000ce8:	f000 fdec 	bl	80018c4 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	485d      	ldr	r0, [pc, #372]	; (8000e64 <lcd_print+0x254>)
 8000cf0:	f001 fe50 	bl	8002994 <u8g2_GetStrWidth>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <lcd_print+0x250>)
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	b2cb      	uxtb	r3, r1
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <lcd_print+0x250>)
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e086      	b.n	8000e16 <lcd_print+0x206>
		}

	} else {
		if (text_wrap) {
 8000d08:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <lcd_print+0x24c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d068      	beq.n	8000de2 <lcd_print+0x1d2>
			str_warper(&wrap, txt);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fee8 	bl	8000aec <str_warper>
			if (wrap.wrap_times) {
 8000d1c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d046      	beq.n	8000db2 <lcd_print+0x1a2>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d2a:	e03b      	b.n	8000da4 <lcd_print+0x194>
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <lcd_print+0x250>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b298      	uxth	r0, r3
 8000d32:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <lcd_print+0x250>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	b29c      	uxth	r4, r3
							wrap.wrap_str[aux]);
 8000d38:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000d3c:	f107 0108 	add.w	r1, r7, #8
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d4a:	4622      	mov	r2, r4
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	4845      	ldr	r0, [pc, #276]	; (8000e64 <lcd_print+0x254>)
 8000d50:	f001 fce4 	bl	800271c <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 8000d54:	4843      	ldr	r0, [pc, #268]	; (8000e64 <lcd_print+0x254>)
 8000d56:	f000 fdb5 	bl	80018c4 <u8g2_SendBuffer>

					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <lcd_print+0x250>)
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <lcd_print+0x254>)
 8000d60:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <lcd_print+0x258>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <lcd_print+0x250>)
 8000d74:	705a      	strb	r2, [r3, #1]

					clean_it = !clean_it;
 8000d76:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f083 0301 	eor.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000d8e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000d9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000da4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000da8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d9bd      	bls.n	8000d2c <lcd_print+0x11c>
 8000db0:	e031      	b.n	8000e16 <lcd_print+0x206>
				}
			} else {
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <lcd_print+0x250>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b298      	uxth	r0, r3
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <lcd_print+0x250>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	b29c      	uxth	r4, r3
 8000dbe:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000dc2:	f107 0108 	add.w	r1, r7, #8
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	4622      	mov	r2, r4
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	4823      	ldr	r0, [pc, #140]	; (8000e64 <lcd_print+0x254>)
 8000dd6:	f001 fca1 	bl	800271c <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000dda:	4822      	ldr	r0, [pc, #136]	; (8000e64 <lcd_print+0x254>)
 8000ddc:	f000 fd72 	bl	80018c4 <u8g2_SendBuffer>
 8000de0:	e019      	b.n	8000e16 <lcd_print+0x206>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <lcd_print+0x250>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b299      	uxth	r1, r3
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <lcd_print+0x250>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	481c      	ldr	r0, [pc, #112]	; (8000e64 <lcd_print+0x254>)
 8000df2:	f001 fc93 	bl	800271c <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000df6:	481b      	ldr	r0, [pc, #108]	; (8000e64 <lcd_print+0x254>)
 8000df8:	f000 fd64 	bl	80018c4 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <lcd_print+0x254>)
 8000e00:	f001 fdc8 	bl	8002994 <u8g2_GetStrWidth>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4619      	mov	r1, r3
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <lcd_print+0x250>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	b2cb      	uxtb	r3, r1
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <lcd_print+0x250>)
 8000e14:	701a      	strb	r2, [r3, #0]
		}
	}
	if (clean_it) {
 8000e16:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d018      	beq.n	8000e50 <lcd_print+0x240>

		memset(wrap.wrap_str, 0, sizeof(wrap.wrap_str));
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2264      	movs	r2, #100	; 0x64
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00a ff80 	bl	800bd2c <memset>
		clean_it = !clean_it;
 8000e2c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000e44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	}
}
 8000e50:	bf00      	nop
 8000e52:	3774      	adds	r7, #116	; 0x74
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	200005b9 	.word	0x200005b9
 8000e5c:	200005ba 	.word	0x200005ba
 8000e60:	200005bc 	.word	0x200005bc
 8000e64:	20000434 	.word	0x20000434
 8000e68:	2000022d 	.word	0x2000022d

08000e6c <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e72:	220a      	movs	r2, #10
 8000e74:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e7e:	2217      	movs	r2, #23
 8000e80:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e8a:	2217      	movs	r2, #23
 8000e8c:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e96:	2217      	movs	r2, #23
 8000e98:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000ea2:	2217      	movs	r2, #23
 8000ea4:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000eae:	2217      	movs	r2, #23
 8000eb0:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <Kpd_Irqv_Init+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	729a      	strb	r2, [r3, #10]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200005c0 	.word	0x200005c0

08000ec4 <SystickCallback>:

void SystickCallback(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e01b      	b.n	8000f08 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <SystickCallback+0x54>)
 8000ed4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <SystickCallback+0x54>)
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fefe 	bl	8003cea <HAL_NVIC_EnableIRQ>
 8000eee:	e008      	b.n	8000f02 <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <SystickCallback+0x54>)
 8000ef4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	b2d1      	uxtb	r1, r2
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <SystickCallback+0x54>)
 8000efe:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	3301      	adds	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	d9e0      	bls.n	8000ed0 <SystickCallback+0xc>
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200005c0 	.word	0x200005c0

08000f1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	d10d      	bne.n	8000f48 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fee7 	bl	8003d06 <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f3a:	2277      	movs	r2, #119	; 0x77
 8000f3c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f44:	f003 f89a 	bl	800407c <HAL_GPIO_TogglePin>
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200005c0 	.word	0x200005c0
 8000f54:	40011000 	.word	0x40011000

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f002 fd12 	bl	8003984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f80c 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f8e6 	bl	8001134 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f68:	f00a f9e6 	bl	800b338 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000f6c:	f000 f860 	bl	8001030 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f70:	f000 f894 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8000f74:	f7ff f970 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000f78:	bf30      	wfi
 8000f7a:	e7fd      	b.n	8000f78 <main+0x20>

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	2228      	movs	r2, #40	; 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a fece 	bl	800bd2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 fd48 	bl	8005a68 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fde:	f000 f95b 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 ffb4 	bl	8005f6c <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800100a:	f000 f945 	bl	8001298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800100e:	2310      	movs	r3, #16
 8001010:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4618      	mov	r0, r3
 800101a:	f005 f90d 	bl	8006238 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001024:	f000 f938 	bl	8001298 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	; 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SPI1_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_SPI1_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI1_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI1_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI1_Init+0x64>)
 8001064:	2208      	movs	r2, #8
 8001066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI1_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_SPI1_Init+0x64>)
 8001082:	f005 f98f 	bl	80063a4 <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f904 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200005cc 	.word	0x200005cc
 8001098:	40013000 	.word	0x40013000

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_TIM2_Init+0x94>)
 80010c2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_TIM2_Init+0x94>)
 80010d0:	221d      	movs	r2, #29
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_TIM2_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <MX_TIM2_Init+0x94>)
 80010e2:	f005 fbc5 	bl	8006870 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010ec:	f000 f8d4 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_TIM2_Init+0x94>)
 80010fe:	f005 fd8f 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 f8c6 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM2_Init+0x94>)
 800111a:	f005 ff61 	bl	8006fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 f8b8 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000624 	.word	0x20000624

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <MX_GPIO_Init+0x150>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <MX_GPIO_Init+0x150>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <MX_GPIO_Init+0x150>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <MX_GPIO_Init+0x150>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a47      	ldr	r2, [pc, #284]	; (8001284 <MX_GPIO_Init+0x150>)
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <MX_GPIO_Init+0x150>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_GPIO_Init+0x150>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a41      	ldr	r2, [pc, #260]	; (8001284 <MX_GPIO_Init+0x150>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <MX_GPIO_Init+0x150>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <MX_GPIO_Init+0x150>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a3b      	ldr	r2, [pc, #236]	; (8001284 <MX_GPIO_Init+0x150>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b39      	ldr	r3, [pc, #228]	; (8001284 <MX_GPIO_Init+0x150>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	4836      	ldr	r0, [pc, #216]	; (8001288 <MX_GPIO_Init+0x154>)
 80011b0:	f002 ff4c 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4834      	ldr	r0, [pc, #208]	; (800128c <MX_GPIO_Init+0x158>)
 80011ba:	f002 ff47 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4832      	ldr	r0, [pc, #200]	; (800128c <MX_GPIO_Init+0x158>)
 80011c4:	f002 ff42 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2103      	movs	r1, #3
 80011cc:	4830      	ldr	r0, [pc, #192]	; (8001290 <MX_GPIO_Init+0x15c>)
 80011ce:	f002 ff3d 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4827      	ldr	r0, [pc, #156]	; (8001288 <MX_GPIO_Init+0x154>)
 80011ec:	f002 fdaa 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011f0:	2350      	movs	r3, #80	; 0x50
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	; (800128c <MX_GPIO_Init+0x158>)
 8001208:	f002 fd9c 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800120c:	2303      	movs	r3, #3
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <MX_GPIO_Init+0x15c>)
 8001224:	f002 fd8e 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin;
 8001228:	2310      	movs	r3, #16
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_GPIO_Init+0x160>)
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SET_P_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <MX_GPIO_Init+0x15c>)
 800123c:	f002 fd82 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_P_Pin UP_P_Pin DOWN_P_Pin LEFT_P_Pin
                           RIGHT_P_Pin */
  GPIO_InitStruct.Pin = RESET_P_Pin|UP_P_Pin|DOWN_P_Pin|LEFT_P_Pin
 8001240:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001244:	613b      	str	r3, [r7, #16]
                          |RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_GPIO_Init+0x160>)
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_GPIO_Init+0x15c>)
 8001256:	f002 fd75 	bl	8003d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	200a      	movs	r0, #10
 8001260:	f002 fd27 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001264:	200a      	movs	r0, #10
 8001266:	f002 fd40 	bl	8003cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2017      	movs	r0, #23
 8001270:	f002 fd1f 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001274:	2017      	movs	r0, #23
 8001276:	f002 fd38 	bl	8003cea <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40011000 	.word	0x40011000
 800128c:	40010800 	.word	0x40010800
 8001290:	40010c00 	.word	0x40010c00
 8001294:	10210000 	.word	0x10210000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_MspInit+0x7c>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <HAL_MspInit+0x7c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_MspInit+0x7c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_MspInit+0x7c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <HAL_MspInit+0x7c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_MspInit+0x7c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2005      	movs	r0, #5
 80012e0:	f002 fce7 	bl	8003cb2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012e4:	2005      	movs	r0, #5
 80012e6:	f002 fd00 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2005      	movs	r0, #5
 80012f0:	f002 fcdf 	bl	8003cb2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012f4:	2005      	movs	r0, #5
 80012f6:	f002 fcf8 	bl	8003cea <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x80>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_MspInit+0x80>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x70>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d123      	bne.n	8001390 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_SPI_MspInit+0x74>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_SPI_MspInit+0x74>)
 800134e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_SPI_MspInit+0x74>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_SPI_MspInit+0x74>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_SPI_MspInit+0x74>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_SPI_MspInit+0x74>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_SPI_MspInit+0x78>)
 800138c:	f002 fcda 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b4:	d113      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201c      	movs	r0, #28
 80013d4:	f002 fc6d 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d8:	201c      	movs	r0, #28
 80013da:	f002 fc86 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001432:	f7ff fd47 	bl	8000ec4 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f002 faeb 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 800144e:	2010      	movs	r0, #16
 8001450:	f002 fe2e 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800145e:	f002 ff70 	bl	8004342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000190c 	.word	0x2000190c

0800146c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001472:	f002 ff66 	bl	8004342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000190c 	.word	0x2000190c

08001480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001484:	2020      	movs	r0, #32
 8001486:	f002 fe13 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 800148a:	2040      	movs	r0, #64	; 0x40
 800148c:	f002 fe10 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001490:	2080      	movs	r0, #128	; 0x80
 8001492:	f002 fe0d 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001496:	f44f 7080 	mov.w	r0, #256	; 0x100
 800149a:	f002 fe09 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 800149e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a2:	f002 fe05 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM2_IRQHandler+0x10>)
 80014b2:	f005 faad 	bl	8006a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000624 	.word	0x20000624

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f00a fbe4 	bl	800bcbc <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20005000 	.word	0x20005000
 8001520:	00000400 	.word	0x00000400
 8001524:	2000066c 	.word	0x2000066c
 8001528:	20001e28 	.word	0x20001e28

0800152c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b088      	sub	sp, #32
 800155a:	af02      	add	r7, sp, #8
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	4608      	mov	r0, r1
 8001560:	4611      	mov	r1, r2
 8001562:	461a      	mov	r2, r3
 8001564:	4603      	mov	r3, r0
 8001566:	817b      	strh	r3, [r7, #10]
 8001568:	460b      	mov	r3, r1
 800156a:	813b      	strh	r3, [r7, #8]
 800156c:	4613      	mov	r3, r2
 800156e:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001576:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001586:	897a      	ldrh	r2, [r7, #10]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4413      	add	r3, r2
 800158c:	b298      	uxth	r0, r3
 800158e:	893b      	ldrh	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4603      	mov	r3, r0
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f001 fbc8 	bl	8002d32 <u8g2_IsIntersection>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d040      	beq.n	800162a <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80015ac:	e035      	b.n	800161a <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	4013      	ands	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	7dba      	ldrb	r2, [r7, #22]
 80015c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015c4:	893a      	ldrh	r2, [r7, #8]
 80015c6:	8979      	ldrh	r1, [r7, #10]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f001 fa76 	bl	8002ac0 <u8g2_DrawHVLine>
 80015d4:	e010      	b.n	80015f8 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	7d7a      	ldrb	r2, [r7, #21]
 80015e4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015e8:	893a      	ldrh	r2, [r7, #8]
 80015ea:	8979      	ldrh	r1, [r7, #10]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f001 fa64 	bl	8002ac0 <u8g2_DrawHVLine>
    }
    x++;
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	3301      	adds	r3, #1
 80015fc:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d104      	bne.n	8001614 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
      b++;
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	3301      	adds	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	3b01      	subs	r3, #1
 8001618:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1c6      	bne.n	80015ae <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7dba      	ldrb	r2, [r7, #22]
 8001624:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001628:	e000      	b.n	800162c <u8g2_DrawHXBM+0xd6>
    return;
 800162a:	bf00      	nop
}
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b088      	sub	sp, #32
 8001636:	af02      	add	r7, sp, #8
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	4608      	mov	r0, r1
 800163c:	4611      	mov	r1, r2
 800163e:	461a      	mov	r2, r3
 8001640:	4603      	mov	r3, r0
 8001642:	817b      	strh	r3, [r7, #10]
 8001644:	460b      	mov	r3, r1
 8001646:	813b      	strh	r3, [r7, #8]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	3307      	adds	r3, #7
 8001654:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001656:	8afb      	ldrh	r3, [r7, #22]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800165c:	897a      	ldrh	r2, [r7, #10]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4413      	add	r3, r2
 8001662:	b298      	uxth	r0, r3
 8001664:	893a      	ldrh	r2, [r7, #8]
 8001666:	8c3b      	ldrh	r3, [r7, #32]
 8001668:	4413      	add	r3, r2
 800166a:	b29b      	uxth	r3, r3
 800166c:	893a      	ldrh	r2, [r7, #8]
 800166e:	8979      	ldrh	r1, [r7, #10]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4603      	mov	r3, r0
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f001 fb5c 	bl	8002d32 <u8g2_IsIntersection>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d017      	beq.n	80016b0 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001680:	e012      	b.n	80016a8 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001682:	88f8      	ldrh	r0, [r7, #6]
 8001684:	893a      	ldrh	r2, [r7, #8]
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff ff61 	bl	8001556 <u8g2_DrawHXBM>
    bitmap += blen;
 8001694:	8afb      	ldrh	r3, [r7, #22]
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	4413      	add	r3, r2
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	813b      	strh	r3, [r7, #8]
    h--;
 80016a2:	8c3b      	ldrh	r3, [r7, #32]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80016a8:	8c3b      	ldrh	r3, [r7, #32]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e9      	bne.n	8001682 <u8g2_DrawXBM+0x50>
 80016ae:	e000      	b.n	80016b2 <u8g2_DrawXBM+0x80>
    return;
 80016b0:	bf00      	nop
  }
}
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	817b      	strh	r3, [r7, #10]
 80016ca:	460b      	mov	r3, r1
 80016cc:	813b      	strh	r3, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80016d2:	897a      	ldrh	r2, [r7, #10]
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4413      	add	r3, r2
 80016d8:	b298      	uxth	r0, r3
 80016da:	893a      	ldrh	r2, [r7, #8]
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	893a      	ldrh	r2, [r7, #8]
 80016e4:	8979      	ldrh	r1, [r7, #10]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4603      	mov	r3, r0
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f001 fb21 	bl	8002d32 <u8g2_IsIntersection>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d012      	beq.n	800171c <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80016f6:	e00d      	b.n	8001714 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	893a      	ldrh	r2, [r7, #8]
 80016fc:	8979      	ldrh	r1, [r7, #10]
 80016fe:	2000      	movs	r0, #0
 8001700:	9000      	str	r0, [sp, #0]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f001 f9dc 	bl	8002ac0 <u8g2_DrawHVLine>
    y++;    
 8001708:	893b      	ldrh	r3, [r7, #8]
 800170a:	3301      	adds	r3, #1
 800170c:	813b      	strh	r3, [r7, #8]
    h--;
 800170e:	8b3b      	ldrh	r3, [r7, #24]
 8001710:	3b01      	subs	r3, #1
 8001712:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001714:	8b3b      	ldrh	r3, [r7, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ee      	bne.n	80016f8 <u8g2_DrawBox+0x40>
 800171a:	e000      	b.n	800171e <u8g2_DrawBox+0x66>
    return;
 800171c:	bf00      	nop
  }
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 800173e:	897b      	ldrh	r3, [r7, #10]
 8001740:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001742:	897a      	ldrh	r2, [r7, #10]
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4413      	add	r3, r2
 8001748:	b298      	uxth	r0, r3
 800174a:	893a      	ldrh	r2, [r7, #8]
 800174c:	8c3b      	ldrh	r3, [r7, #32]
 800174e:	4413      	add	r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	893a      	ldrh	r2, [r7, #8]
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4603      	mov	r3, r0
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f001 fae9 	bl	8002d32 <u8g2_IsIntersection>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d037      	beq.n	80017d6 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	8979      	ldrh	r1, [r7, #10]
 800176c:	2000      	movs	r0, #0
 800176e:	9000      	str	r0, [sp, #0]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f001 f9a5 	bl	8002ac0 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001776:	8c3b      	ldrh	r3, [r7, #32]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d92d      	bls.n	80017d8 <u8g2_DrawFrame+0xb4>
    h-=2;
 800177c:	8c3b      	ldrh	r3, [r7, #32]
 800177e:	3b02      	subs	r3, #2
 8001780:	843b      	strh	r3, [r7, #32]
    y++;
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001788:	8c3b      	ldrh	r3, [r7, #32]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01a      	beq.n	80017c4 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800178e:	8c3b      	ldrh	r3, [r7, #32]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	8979      	ldrh	r1, [r7, #10]
 8001794:	2001      	movs	r0, #1
 8001796:	9000      	str	r0, [sp, #0]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f001 f991 	bl	8002ac0 <u8g2_DrawHVLine>
      x+=w;
 800179e:	897a      	ldrh	r2, [r7, #10]
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4413      	add	r3, r2
 80017a4:	817b      	strh	r3, [r7, #10]
      x--;
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80017ac:	8c3b      	ldrh	r3, [r7, #32]
 80017ae:	893a      	ldrh	r2, [r7, #8]
 80017b0:	8979      	ldrh	r1, [r7, #10]
 80017b2:	2001      	movs	r0, #1
 80017b4:	9000      	str	r0, [sp, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f001 f982 	bl	8002ac0 <u8g2_DrawHVLine>
      y+=h;
 80017bc:	893a      	ldrh	r2, [r7, #8]
 80017be:	8c3b      	ldrh	r3, [r7, #32]
 80017c0:	4413      	add	r3, r2
 80017c2:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	893a      	ldrh	r2, [r7, #8]
 80017c8:	8af9      	ldrh	r1, [r7, #22]
 80017ca:	2000      	movs	r0, #0
 80017cc:	9000      	str	r0, [sp, #0]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f001 f976 	bl	8002ac0 <u8g2_DrawHVLine>
 80017d4:	e000      	b.n	80017d8 <u8g2_DrawFrame+0xb4>
    return;
 80017d6:	bf00      	nop
  }
}
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	7c1b      	ldrb	r3, [r3, #16]
 80017ec:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00a fa8d 	bl	800bd2c <memset>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af02      	add	r7, sp, #8
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	70fb      	strb	r3, [r7, #3]
 8001826:	4613      	mov	r3, r2
 8001828:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	7c1b      	ldrb	r3, [r3, #16]
 8001830:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	b29b      	uxth	r3, r3
 8001840:	89ba      	ldrh	r2, [r7, #12]
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001856:	7bf9      	ldrb	r1, [r7, #15]
 8001858:	78ba      	ldrb	r2, [r7, #2]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	460b      	mov	r3, r1
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f001 ff88 	bl	8003778 <u8x8_DrawTile>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001882:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800188a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	7c5b      	ldrb	r3, [r3, #17]
 8001892:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001894:	7bba      	ldrb	r2, [r7, #14]
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffbd 	bl	800181a <u8g2_send_tile_row>
    src_row++;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d203      	bcs.n	80018bc <u8g2_send_buffer+0x4c>
 80018b4:	7bba      	ldrb	r2, [r7, #14]
 80018b6:	7b3b      	ldrb	r3, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d3eb      	bcc.n	8001894 <u8g2_send_buffer+0x24>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffcf 	bl	8001870 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f001 ffb2 	bl	800383c <u8x8_RefreshDisplay>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff5b 	bl	80017de <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffd8 	bl	80018e0 <u8g2_SetBufferCurrTileRow>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff95 	bl	8001870 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800194c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	4413      	add	r3, r2
 8001958:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	7c5b      	ldrb	r3, [r3, #17]
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	429a      	cmp	r2, r3
 8001964:	d304      	bcc.n	8001970 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 ff68 	bl	800383c <u8x8_RefreshDisplay>
    return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e00d      	b.n	800198c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff2f 	bl	80017de <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffab 	bl	80018e0 <u8g2_SetBufferCurrTileRow>
  return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	460b      	mov	r3, r1
 80019a8:	813b      	strh	r3, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80019ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019b0:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80019b2:	2308      	movs	r3, #8
 80019b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80019c4:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80019cc:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019d4:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80019e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80019e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80019ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80019f0:	897b      	ldrh	r3, [r7, #10]
 80019f2:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80019f4:	8b7a      	ldrh	r2, [r7, #26]
 80019f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80019fc:	8b7a      	ldrh	r2, [r7, #26]
 80019fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 8001a04:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a08:	4413      	add	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	8c3b      	ldrh	r3, [r7, #32]
 8001a12:	4413      	add	r3, r2
 8001a14:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 8001a16:	893b      	ldrh	r3, [r7, #8]
 8001a18:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	4798      	blx	r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	8afb      	ldrh	r3, [r7, #22]
 8001a28:	4413      	add	r3, r2
 8001a2a:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001a2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	8afa      	ldrh	r2, [r7, #22]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8001a38:	8afa      	ldrh	r2, [r7, #22]
 8001a3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001a40:	8afa      	ldrh	r2, [r7, #22]
 8001a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8001a48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a5e:	440b      	add	r3, r1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d067      	beq.n	8001b40 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001a70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d109      	bne.n	8001a8c <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001a78:	7f7b      	ldrb	r3, [r7, #29]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f001 f90a 	bl	8002ca0 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001a8c:	8b38      	ldrh	r0, [r7, #24]
 8001a8e:	8afa      	ldrh	r2, [r7, #22]
 8001a90:	8b79      	ldrh	r1, [r7, #26]
 8001a92:	8abb      	ldrh	r3, [r7, #20]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4603      	mov	r3, r0
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fe43 	bl	8001724 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001a9e:	7f7b      	ldrb	r3, [r7, #29]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f001 f8fc 	bl	8002ca0 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f003 0318 	and.w	r3, r3, #24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d042      	beq.n	8001b38 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8001ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d13c      	bne.n	8001b38 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	10db      	asrs	r3, r3, #3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001aca:	8a7b      	ldrh	r3, [r7, #18]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ad4:	e02c      	b.n	8001b30 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001ad6:	8b7a      	ldrh	r2, [r7, #26]
 8001ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ada:	4413      	add	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	8a7b      	ldrh	r3, [r7, #18]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	8afa      	ldrh	r2, [r7, #22]
 8001ae6:	8abb      	ldrh	r3, [r7, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	8b3b      	ldrh	r3, [r7, #24]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f001 f86b 	bl	8002bd6 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001b00:	8b7a      	ldrh	r2, [r7, #26]
 8001b02:	8b3b      	ldrh	r3, [r7, #24]
 8001b04:	4413      	add	r3, r2
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	8a7b      	ldrh	r3, [r7, #18]
 8001b10:	4413      	add	r3, r2
 8001b12:	b299      	uxth	r1, r3
 8001b14:	8afa      	ldrh	r2, [r7, #22]
 8001b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	8a7b      	ldrh	r3, [r7, #18]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	8abb      	ldrh	r3, [r7, #20]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f001 f86f 	bl	8002c08 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3ce      	bcc.n	8001ad6 <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001b3e:	e757      	b.n	80019f0 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001b40:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d011      	beq.n	8001b70 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f001 f8a6 	bl	8002ca0 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001b54:	8b38      	ldrh	r0, [r7, #24]
 8001b56:	8afa      	ldrh	r2, [r7, #22]
 8001b58:	8b79      	ldrh	r1, [r7, #26]
 8001b5a:	8abb      	ldrh	r3, [r7, #20]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff fda9 	bl	80016b8 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001b66:	7f7b      	ldrb	r3, [r7, #29]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 f898 	bl	8002ca0 <u8g2_SetDrawColor>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af04      	add	r7, sp, #16
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	817b      	strh	r3, [r7, #10]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	813b      	strh	r3, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 ff11 	bl	80029bc <u8g2_GetUTF8Width>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001bac:	8afb      	ldrh	r3, [r7, #22]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	0fda      	lsrs	r2, r3, #31
 8001bb2:	4413      	add	r3, r2
 8001bb4:	105b      	asrs	r3, r3, #1
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001bc0:	8afa      	ldrh	r2, [r7, #22]
 8001bc2:	8c3b      	ldrh	r3, [r7, #32]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d20d      	bcs.n	8001be4 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8001bd2:	8c3a      	ldrh	r2, [r7, #32]
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	0fda      	lsrs	r2, r3, #31
 8001bda:	4413      	add	r3, r2
 8001bdc:	105b      	asrs	r3, r3, #1
 8001bde:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001be0:	8c3b      	ldrh	r3, [r7, #32]
 8001be2:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001be4:	2101      	movs	r1, #1
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fcda 	bl	80025a0 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001bec:	893a      	ldrh	r2, [r7, #8]
 8001bee:	8979      	ldrh	r1, [r7, #10]
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fd92 	bl	800271c <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001bf8:	897a      	ldrh	r2, [r7, #10]
 8001bfa:	8abb      	ldrh	r3, [r7, #20]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b299      	uxth	r1, r3
 8001c00:	88f8      	ldrh	r0, [r7, #6]
 8001c02:	893a      	ldrh	r2, [r7, #8]
 8001c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	8afb      	ldrh	r3, [r7, #22]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4603      	mov	r3, r0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff febe 	bl	8001994 <u8g2_DrawButtonFrame>
  
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fe71 	bl	8001910 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe82 	bl	8001938 <u8g2_NextPage>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe4f 	bl	80018e0 <u8g2_SetBufferCurrTileRow>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2208      	movs	r2, #8
 8001c58:	701a      	strb	r2, [r3, #0]
  return buf;
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000670 	.word	0x20000670

08001c6c <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8001c82:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 fe39 	bl	80038fc <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001c8a:	f107 0313 	add.w	r3, r7, #19
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffdc 	bl	8001c4c <u8g2_m_24_8_f>
 8001c94:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001c96:	7cfa      	ldrb	r2, [r7, #19]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8001c9e:	6979      	ldr	r1, [r7, #20]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f001 f92f 	bl	8002f04 <u8g2_SetupBuffer>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08003495 	.word	0x08003495
 8001cb4:	08003675 	.word	0x08003675
 8001cb8:	08002d89 	.word	0x08002d89

08001cbc <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	81fb      	strh	r3, [r7, #14]
	font++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	81fb      	strh	r3, [r7, #14]
	return pos;
 8001d10:	89fb      	ldrh	r3, [r7, #14]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	6838      	ldr	r0, [r7, #0]
 8001d2a:	f7ff ffc7 	bl	8001cbc <u8g2_font_get_byte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001d36:	2101      	movs	r1, #1
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f7ff ffbf 	bl	8001cbc <u8g2_font_get_byte>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001d46:	2102      	movs	r1, #2
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f7ff ffb7 	bl	8001cbc <u8g2_font_get_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001d56:	2103      	movs	r1, #3
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f7ff ffaf 	bl	8001cbc <u8g2_font_get_byte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001d66:	2104      	movs	r1, #4
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	f7ff ffa7 	bl	8001cbc <u8g2_font_get_byte>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001d76:	2105      	movs	r1, #5
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	f7ff ff9f 	bl	8001cbc <u8g2_font_get_byte>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001d86:	2106      	movs	r1, #6
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7ff ff97 	bl	8001cbc <u8g2_font_get_byte>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001d96:	2107      	movs	r1, #7
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7ff ff8f 	bl	8001cbc <u8g2_font_get_byte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001da6:	2108      	movs	r1, #8
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f7ff ff87 	bl	8001cbc <u8g2_font_get_byte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001db6:	2109      	movs	r1, #9
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f7ff ff7f 	bl	8001cbc <u8g2_font_get_byte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff ff77 	bl	8001cbc <u8g2_font_get_byte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001dd6:	210b      	movs	r1, #11
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff ff6f 	bl	8001cbc <u8g2_font_get_byte>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001de6:	210c      	movs	r1, #12
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff ff67 	bl	8001cbc <u8g2_font_get_byte>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001df6:	210d      	movs	r1, #13
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f7ff ff5f 	bl	8001cbc <u8g2_font_get_byte>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001e06:	210e      	movs	r1, #14
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f7ff ff57 	bl	8001cbc <u8g2_font_get_byte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001e16:	210f      	movs	r1, #15
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7ff ff4f 	bl	8001cbc <u8g2_font_get_byte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001e26:	2110      	movs	r1, #16
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f7ff ff47 	bl	8001cbc <u8g2_font_get_byte>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b25a      	sxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001e36:	2111      	movs	r1, #17
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f7ff ff50 	bl	8001cde <u8g2_font_get_word>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001e46:	2113      	movs	r1, #19
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ff48 	bl	8001cde <u8g2_font_get_word>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001e56:	2115      	movs	r1, #21
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f7ff ff40 	bl	8001cde <u8g2_font_get_word>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	82da      	strh	r2, [r3, #22]
#endif
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7b1b      	ldrb	r3, [r3, #12]
 8001e7e:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	fa42 f303 	asr.w	r3, r2, r3
 8001e90:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001e92:	7b7b      	ldrb	r3, [r7, #13]
 8001e94:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001e96:	7bba      	ldrb	r2, [r7, #14]
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d91a      	bls.n	8001eda <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001ea8:	7b3a      	ldrb	r2, [r7, #12]
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	7b3b      	ldrb	r3, [r7, #12]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	3b08      	subs	r3, #8
 8001ed8:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	4013      	ands	r3, r2
 8001eee:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7bba      	ldrb	r2, [r7, #14]
 8001ef4:	731a      	strb	r2, [r3, #12]
	return val;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffab 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001f26:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	73fb      	strb	r3, [r7, #15]
	return v;
 8001f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001f48:	b490      	push	{r4, r7}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	80fb      	strh	r3, [r7, #6]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	717b      	strb	r3, [r7, #5]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	713b      	strb	r3, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d014      	beq.n	8001f96 <u8g2_add_vector_y+0x4e>
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	dc19      	bgt.n	8001fa4 <u8g2_add_vector_y+0x5c>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <u8g2_add_vector_y+0x32>
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d007      	beq.n	8001f88 <u8g2_add_vector_y+0x40>
 8001f78:	e014      	b.n	8001fa4 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001f7a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	4413      	add	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
		break;
 8001f86:	e014      	b.n	8001fb2 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001f88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	4413      	add	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]
		break;
 8001f94:	e00d      	b.n	8001fb2 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001f96:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	80fb      	strh	r3, [r7, #6]
		break;
 8001fa2:	e006      	b.n	8001fb2 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001fa4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	80fb      	strh	r3, [r7, #6]
		break;
 8001fb0:	bf00      	nop
	}
	return dy;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc90      	pop	{r4, r7}
 8001fbc:	4770      	bx	lr

08001fbe <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001fbe:	b490      	push	{r4, r7}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	4611      	mov	r1, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4623      	mov	r3, r4
 8001fce:	80fb      	strh	r3, [r7, #6]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	717b      	strb	r3, [r7, #5]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	713b      	strb	r3, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d014      	beq.n	800200c <u8g2_add_vector_x+0x4e>
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	dc19      	bgt.n	800201a <u8g2_add_vector_x+0x5c>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <u8g2_add_vector_x+0x32>
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d007      	beq.n	8001ffe <u8g2_add_vector_x+0x40>
 8001fee:	e014      	b.n	800201a <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001ff0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	80fb      	strh	r3, [r7, #6]
		break;
 8001ffc:	e014      	b.n	8002028 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001ffe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002002:	b29b      	uxth	r3, r3
 8002004:	88fa      	ldrh	r2, [r7, #6]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	80fb      	strh	r3, [r7, #6]
		break;
 800200a:	e00d      	b.n	8002028 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 800200c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002010:	b29b      	uxth	r3, r3
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	80fb      	strh	r3, [r7, #6]
		break;
 8002018:	e006      	b.n	8002028 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 800201a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800201e:	b29a      	uxth	r2, r3
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	4413      	add	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
		break;
 8002026:	bf00      	nop
	}
	return dx;
 8002028:	88fb      	ldrh	r3, [r7, #6]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bc90      	pop	{r4, r7}
 8002032:	4770      	bx	lr

08002034 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af02      	add	r7, sp, #8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
 8002040:	4613      	mov	r3, r2
 8002042:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3360      	adds	r3, #96	; 0x60
 8002048:	613b      	str	r3, [r7, #16]

	cnt = len;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002054:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800205c:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002064:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	7d7b      	ldrb	r3, [r7, #21]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002072:	7dfa      	ldrb	r2, [r7, #23]
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	429a      	cmp	r2, r3
 8002078:	d201      	bcs.n	800207e <u8g2_font_decode_len+0x4a>
			current = cnt;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	889b      	ldrh	r3, [r3, #4]
 8002082:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	88db      	ldrh	r3, [r3, #6]
 8002088:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800208a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800208e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	7c1b      	ldrb	r3, [r3, #16]
 8002096:	89b8      	ldrh	r0, [r7, #12]
 8002098:	f7ff ff91 	bl	8001fbe <u8g2_add_vector_x>
 800209c:	4603      	mov	r3, r0
 800209e:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80020a0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80020a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	7c1b      	ldrb	r3, [r3, #16]
 80020ac:	8978      	ldrh	r0, [r7, #10]
 80020ae:	f7ff ff4b 	bl	8001f48 <u8g2_add_vector_y>
 80020b2:	4603      	mov	r3, r0
 80020b4:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 80020b6:	78bb      	ldrb	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	7b9a      	ldrb	r2, [r3, #14]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020c6:	7dbb      	ldrb	r3, [r7, #22]
 80020c8:	b298      	uxth	r0, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	7c1b      	ldrb	r3, [r3, #16]
 80020ce:	897a      	ldrh	r2, [r7, #10]
 80020d0:	89b9      	ldrh	r1, [r7, #12]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4603      	mov	r3, r0
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fcf2 	bl	8002ac0 <u8g2_DrawHVLine>
 80020dc:	e013      	b.n	8002106 <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	7bda      	ldrb	r2, [r3, #15]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020f0:	7dbb      	ldrb	r3, [r7, #22]
 80020f2:	b298      	uxth	r0, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	7c1b      	ldrb	r3, [r3, #16]
 80020f8:	897a      	ldrh	r2, [r7, #10]
 80020fa:	89b9      	ldrh	r1, [r7, #12]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4603      	mov	r3, r0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fcdd 	bl	8002ac0 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002106:	7dfa      	ldrb	r2, [r7, #23]
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	429a      	cmp	r2, r3
 800210c:	d309      	bcc.n	8002122 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 800210e:	7dfa      	ldrb	r2, [r7, #23]
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	757b      	strb	r3, [r7, #21]
		ly++;
 800211a:	7d3b      	ldrb	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002120:	e79d      	b.n	800205e <u8g2_font_decode_len+0x2a>
			break;
 8002122:	bf00      	nop
	}
	lx += cnt;
 8002124:	7d7a      	ldrb	r2, [r7, #21]
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	4413      	add	r3, r2
 800212a:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 800212c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002134:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	725a      	strb	r2, [r3, #9]

}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3360      	adds	r3, #96	; 0x60
 8002152:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002166:	4619      	mov	r1, r3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fe80 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 800216e:	4603      	mov	r3, r0
 8002170:	b25a      	sxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800217c:	4619      	mov	r1, r3
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fe75 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 8002184:	4603      	mov	r3, r0
 8002186:	b25a      	sxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	7b9b      	ldrb	r3, [r3, #14]
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	73da      	strb	r2, [r3, #15]
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffbc 	bl	8002144 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80021d2:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80021da:	4619      	mov	r1, r3
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff fe90 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
 80021e2:	4603      	mov	r3, r0
 80021e4:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80021ec:	4619      	mov	r1, r3
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff fe87 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
 80021f4:	4603      	mov	r3, r0
 80021f6:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80021fe:	4619      	mov	r1, r3
 8002200:	6978      	ldr	r0, [r7, #20]
 8002202:	f7ff fe7e 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
 8002206:	4603      	mov	r3, r0
 8002208:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f340 80d7 	ble.w	80023c4 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	8898      	ldrh	r0, [r3, #4]
 800221a:	7cfa      	ldrb	r2, [r7, #19]
 800221c:	7c7b      	ldrb	r3, [r7, #17]
 800221e:	4413      	add	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	425b      	negs	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	7c1b      	ldrb	r3, [r3, #16]
 800222c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002230:	f7ff fec5 	bl	8001fbe <u8g2_add_vector_x>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	88d8      	ldrh	r0, [r3, #6]
 8002240:	7cfa      	ldrb	r2, [r7, #19]
 8002242:	7c7b      	ldrb	r3, [r7, #17]
 8002244:	4413      	add	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	425b      	negs	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	b25a      	sxtb	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	7c1b      	ldrb	r3, [r3, #16]
 8002252:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002256:	f7ff fe77 	bl	8001f48 <u8g2_add_vector_y>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	88db      	ldrh	r3, [r3, #6]
 800226c:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 800226e:	8bfb      	ldrh	r3, [r7, #30]
 8002270:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	7c1b      	ldrb	r3, [r3, #16]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d85a      	bhi.n	8002334 <u8g2_font_decode_glyph+0x180>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <u8g2_font_decode_glyph+0xd0>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	08002295 	.word	0x08002295
 8002288:	080022b1 	.word	0x080022b1
 800228c:	080022d9 	.word	0x080022d9
 8002290:	0800230d 	.word	0x0800230d
			case 0:
				x1 += decode->glyph_width;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800229a:	b29a      	uxth	r2, r3
 800229c:	8bbb      	ldrh	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 80022a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	8b3b      	ldrh	r3, [r7, #24]
 80022aa:	4413      	add	r3, r2
 80022ac:	833b      	strh	r3, [r7, #24]
				break;
 80022ae:	e041      	b.n	8002334 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 80022b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8bfa      	ldrh	r2, [r7, #30]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022bc:	8bfb      	ldrh	r3, [r7, #30]
 80022be:	3301      	adds	r3, #1
 80022c0:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022c2:	8bbb      	ldrh	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	8b3b      	ldrh	r3, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	833b      	strh	r3, [r7, #24]
				break;
 80022d6:	e02d      	b.n	8002334 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	8bfa      	ldrh	r2, [r7, #30]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
 80022e8:	3301      	adds	r3, #1
 80022ea:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022ec:	8bbb      	ldrh	r3, [r7, #28]
 80022ee:	3301      	adds	r3, #1
 80022f0:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 80022f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8b7a      	ldrh	r2, [r7, #26]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	3301      	adds	r3, #1
 8002302:	837b      	strh	r3, [r7, #26]
				y1++;
 8002304:	8b3b      	ldrh	r3, [r7, #24]
 8002306:	3301      	adds	r3, #1
 8002308:	833b      	strh	r3, [r7, #24]
				break;
 800230a:	e013      	b.n	8002334 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 800230c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002310:	b29a      	uxth	r2, r3
 8002312:	8bbb      	ldrh	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800231e:	b29b      	uxth	r3, r3
 8002320:	8b7a      	ldrh	r2, [r7, #26]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002326:	8b7b      	ldrh	r3, [r7, #26]
 8002328:	3301      	adds	r3, #1
 800232a:	837b      	strh	r3, [r7, #26]
				y1++;
 800232c:	8b3b      	ldrh	r3, [r7, #24]
 800232e:	3301      	adds	r3, #1
 8002330:	833b      	strh	r3, [r7, #24]
				break;
 8002332:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002334:	8bb8      	ldrh	r0, [r7, #28]
 8002336:	8b7a      	ldrh	r2, [r7, #26]
 8002338:	8bf9      	ldrh	r1, [r7, #30]
 800233a:	8b3b      	ldrh	r3, [r7, #24]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fcf6 	bl	8002d32 <u8g2_IsIntersection>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <u8g2_font_decode_glyph+0x19e>
				return d;
 800234c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002350:	e03a      	b.n	80023c8 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2200      	movs	r2, #0
 800235c:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002364:	4619      	mov	r1, r3
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff fd81 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002376:	4619      	mov	r1, r3
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f7ff fd78 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 800237e:	4603      	mov	r3, r0
 8002380:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2200      	movs	r2, #0
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe53 	bl	8002034 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	2201      	movs	r2, #1
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fe4d 	bl	8002034 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 800239a:	2101      	movs	r1, #1
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f7ff fd66 	bl	8001e6e <u8g2_font_decode_get_unsigned_bits>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ec      	bne.n	8002382 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80023ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dd00      	ble.n	80023b8 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 80023b6:	e7d2      	b.n	800235e <u8g2_font_decode_glyph+0x1aa>
				break;
 80023b8:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	7b9a      	ldrb	r2, [r3, #14]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 80023c4:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3317      	adds	r3, #23
 80023e6:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	2bff      	cmp	r3, #255	; 0xff
 80023ec:	d82a      	bhi.n	8002444 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d907      	bls.n	8002404 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80023fa:	461a      	mov	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d906      	bls.n	8002418 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04e      	beq.n	80024c0 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	429a      	cmp	r2, r3
 800242c:	d102      	bne.n	8002434 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3302      	adds	r3, #2
 8002432:	e049      	b.n	80024c8 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002442:	e7e9      	b.n	8002418 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800244a:	461a      	mov	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002456:	2100      	movs	r1, #0
 8002458:	6938      	ldr	r0, [r7, #16]
 800245a:	f7ff fc40 	bl	8001cde <u8g2_font_get_word>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4413      	add	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002468:	2102      	movs	r1, #2
 800246a:	6938      	ldr	r0, [r7, #16]
 800246c:	f7ff fc37 	bl	8001cde <u8g2_font_get_word>
 8002470:	4603      	mov	r3, r0
 8002472:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3304      	adds	r3, #4
 8002478:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 800247a:	89fa      	ldrh	r2, [r7, #14]
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	429a      	cmp	r2, r3
 8002480:	d3e9      	bcc.n	8002456 <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b29a      	uxth	r2, r3
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	4313      	orrs	r3, r2
 800249a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 800249c:	89fb      	ldrh	r3, [r7, #14]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 80024a2:	89fa      	ldrh	r2, [r7, #14]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d102      	bne.n	80024b0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3303      	adds	r3, #3
 80024ae:	e00b      	b.n	80024c8 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3302      	adds	r3, #2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 80024be:	e7e0      	b.n	8002482 <u8g2_font_get_glyph_data+0xb2>
				break;
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <u8g2_font_get_glyph_data+0xf6>
				break;
 80024c4:	bf00      	nop
		}
	}
#endif

	return NULL;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	897a      	ldrh	r2, [r7, #10]
 80024f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4619      	mov	r1, r3
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff ff64 	bl	80023d0 <u8g2_font_get_glyph_data>
 8002508:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002510:	6939      	ldr	r1, [r7, #16]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fe4e 	bl	80021b4 <u8g2_font_decode_glyph>
 8002518:	4603      	mov	r3, r0
 800251a:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 800251c:	8afb      	ldrh	r3, [r7, #22]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff4a 	bl	80023d0 <u8g2_font_get_glyph_data>
 800253c:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002544:	2300      	movs	r3, #0
 8002546:	e027      	b.n	8002598 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fdfa 	bl	8002144 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7ff fccf 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fcc0 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7ff fcb6 	bl	8001f02 <u8g2_font_decode_get_signed_bits>
 8002596:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d833      	bhi.n	800264c <u8g2_DrawGlyph+0x8c>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <u8g2_DrawGlyph+0x2c>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	08002611 	.word	0x08002611
 80025f4:	08002625 	.word	0x08002625
 80025f8:	08002639 	.word	0x08002639
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	4798      	blx	r3
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	893b      	ldrh	r3, [r7, #8]
 800260a:	4413      	add	r3, r2
 800260c:	813b      	strh	r3, [r7, #8]
		break;
 800260e:	e01d      	b.n	800264c <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	4798      	blx	r3
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	897b      	ldrh	r3, [r7, #10]
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	817b      	strh	r3, [r7, #10]
		break;
 8002622:	e013      	b.n	800264c <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	4798      	blx	r3
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	893b      	ldrh	r3, [r7, #8]
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	813b      	strh	r3, [r7, #8]
		break;
 8002636:	e009      	b.n	800264c <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	4413      	add	r3, r2
 8002648:	817b      	strh	r3, [r7, #10]
		break;
 800264a:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	893a      	ldrh	r2, [r7, #8]
 8002650:	8979      	ldrh	r1, [r7, #10]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff ff3c 	bl	80024d0 <u8g2_font_draw_glyph>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop

08002664 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	817b      	strh	r3, [r7, #10]
 8002672:	4613      	mov	r3, r2
 8002674:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fd86 	bl	8003188 <u8x8_utf8_init>
	sum = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	4611      	mov	r1, r2
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	4798      	blx	r3
 800268e:	4603      	mov	r3, r0
 8002690:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002692:	8abb      	ldrh	r3, [r7, #20]
 8002694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002698:	4293      	cmp	r3, r2
 800269a:	d038      	beq.n	800270e <u8g2_draw_string+0xaa>
			break;
		str++;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 80026a2:	8abb      	ldrh	r3, [r7, #20]
 80026a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d0e9      	beq.n	8002680 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80026ac:	8abb      	ldrh	r3, [r7, #20]
 80026ae:	893a      	ldrh	r2, [r7, #8]
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ff84 	bl	80025c0 <u8g2_DrawGlyph>
 80026b8:	4603      	mov	r3, r0
 80026ba:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d81e      	bhi.n	8002704 <u8g2_draw_string+0xa0>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <u8g2_draw_string+0x68>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026e7 	.word	0x080026e7
 80026d4:	080026f1 	.word	0x080026f1
 80026d8:	080026fb 	.word	0x080026fb
			case 0:
				x += delta;
 80026dc:	897a      	ldrh	r2, [r7, #10]
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	4413      	add	r3, r2
 80026e2:	817b      	strh	r3, [r7, #10]
				break;
 80026e4:	e00e      	b.n	8002704 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 80026e6:	893a      	ldrh	r2, [r7, #8]
 80026e8:	8a7b      	ldrh	r3, [r7, #18]
 80026ea:	4413      	add	r3, r2
 80026ec:	813b      	strh	r3, [r7, #8]
				break;
 80026ee:	e009      	b.n	8002704 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 80026f0:	897a      	ldrh	r2, [r7, #10]
 80026f2:	8a7b      	ldrh	r3, [r7, #18]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	817b      	strh	r3, [r7, #10]
				break;
 80026f8:	e004      	b.n	8002704 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80026fa:	893a      	ldrh	r2, [r7, #8]
 80026fc:	8a7b      	ldrh	r3, [r7, #18]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	813b      	strh	r3, [r7, #8]
				break;
 8002702:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8002704:	8afa      	ldrh	r2, [r7, #22]
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	4413      	add	r3, r2
 800270a:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800270c:	e7b8      	b.n	8002680 <u8g2_draw_string+0x1c>
			break;
 800270e:	bf00      	nop
		}
	}
	return sum;
 8002710:	8afb      	ldrh	r3, [r7, #22]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop

0800271c <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	4613      	mov	r3, r2
 800272c:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <u8g2_DrawUTF8+0x30>)
 8002732:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002734:	893a      	ldrh	r2, [r7, #8]
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff92 	bl	8002664 <u8g2_draw_string>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	080031cf 	.word	0x080031cf

08002750 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	2b00      	cmp	r3, #0
 800275e:	d05d      	beq.n	800281c <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800277e:	2b00      	cmp	r3, #0
 8002780:	d04d      	beq.n	800281e <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002788:	2b01      	cmp	r3, #1
 800278a:	d11c      	bne.n	80027c6 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002798:	429a      	cmp	r2, r3
 800279a:	da05      	bge.n	80027a8 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80027b4:	429a      	cmp	r2, r3
 80027b6:	dd32      	ble.n	800281e <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80027c4:	e02b      	b.n	800281e <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80027cc:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027d4:	4619      	mov	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027dc:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80027de:	429a      	cmp	r2, r3
 80027e0:	da0d      	bge.n	80027fe <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027e8:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800280a:	429a      	cmp	r2, r3
 800280c:	dd07      	ble.n	800281e <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800281a:	e000      	b.n	800281e <u8g2_UpdateRefHeight+0xce>
		return;
 800281c:	bf00      	nop
	}
}
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return 0;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
	...

0800283c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a03      	ldr	r2, [pc, #12]	; (8002854 <u8g2_SetFontPosBaseline+0x18>)
 8002848:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	08002827 	.word	0x08002827

08002858 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002866:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	3301      	adds	r3, #1
 800286c:	81fb      	strh	r3, [r7, #14]
	return tmp;
 800286e:	89fb      	ldrh	r3, [r7, #14]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a03      	ldr	r2, [pc, #12]	; (8002894 <u8g2_SetFontPosTop+0x18>)
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	08002859 	.word	0x08002859

08002898 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d00b      	beq.n	80028c4 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3374      	adds	r3, #116	; 0x74
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fa2f 	bl	8001d1c <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff46 	bl	8002750 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80028d6:	23c0      	movs	r3, #192	; 0xc0
 80028d8:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fc50 	bl	8003188 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	4611      	mov	r1, r2
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
 80028fe:	4603      	mov	r3, r0
 8002900:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 8002902:	893b      	ldrh	r3, [r7, #8]
 8002904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002908:	4293      	cmp	r3, r2
 800290a:	d01c      	beq.n	8002946 <u8g2_string_width+0x7a>
			break;
		str++;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8002912:	893b      	ldrh	r3, [r7, #8]
 8002914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002918:	4293      	cmp	r3, r2
 800291a:	d0e9      	beq.n	80028f0 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fe00 	bl	8002526 <u8g2_GetGlyphWidth>
 8002926:	4603      	mov	r3, r0
 8002928:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800292a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800292e:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002932:	d103      	bne.n	800293c <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800293a:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 800293c:	89fa      	ldrh	r2, [r7, #14]
 800293e:	89bb      	ldrh	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002944:	e7d4      	b.n	80028f0 <u8g2_string_width+0x24>
			break;
 8002946:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01b      	beq.n	800298a <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8002952:	89fa      	ldrh	r2, [r7, #14]
 8002954:	89bb      	ldrh	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002960:	b29a      	uxth	r2, r3
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	4413      	add	r3, r2
 8002966:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 800296e:	b29a      	uxth	r2, r3
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	4413      	add	r3, r2
 8002974:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 8002976:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800297a:	2b00      	cmp	r3, #0
 800297c:	dd05      	ble.n	800298a <u8g2_string_width+0xbe>
			w += initial_x_offset;
 800297e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002982:	b29a      	uxth	r2, r3
 8002984:	89fb      	ldrh	r3, [r7, #14]
 8002986:	4413      	add	r3, r2
 8002988:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 800298a:	89fb      	ldrh	r3, [r7, #14]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <u8g2_GetStrWidth+0x24>)
 80029a2:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ff90 	bl	80028cc <u8g2_string_width>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	080031a3 	.word	0x080031a3

080029bc <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <u8g2_GetUTF8Width+0x24>)
 80029ca:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ff7c 	bl	80028cc <u8g2_string_width>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	080031cf 	.word	0x080031cf

080029e4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002a00:	8afb      	ldrh	r3, [r7, #22]
 8002a02:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	8abb      	ldrh	r3, [r7, #20]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002a0e:	8afa      	ldrh	r2, [r7, #22]
 8002a10:	8abb      	ldrh	r3, [r7, #20]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d90b      	bls.n	8002a2e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002a16:	8afa      	ldrh	r2, [r7, #22]
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d205      	bcs.n	8002a2a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002a1e:	88bb      	ldrh	r3, [r7, #4]
 8002a20:	82bb      	strh	r3, [r7, #20]
      b--;
 8002a22:	8abb      	ldrh	r3, [r7, #20]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	82bb      	strh	r3, [r7, #20]
 8002a28:	e001      	b.n	8002a2e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002a2e:	8afa      	ldrh	r2, [r7, #22]
 8002a30:	88bb      	ldrh	r3, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d301      	bcc.n	8002a3a <u8g2_clip_intersection2+0x56>
    return 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e01c      	b.n	8002a74 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002a3a:	8aba      	ldrh	r2, [r7, #20]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d801      	bhi.n	8002a46 <u8g2_clip_intersection2+0x62>
    return 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e016      	b.n	8002a74 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002a46:	8afa      	ldrh	r2, [r7, #22]
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d201      	bcs.n	8002a52 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002a52:	8aba      	ldrh	r2, [r7, #20]
 8002a54:	88bb      	ldrh	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d901      	bls.n	8002a5e <u8g2_clip_intersection2+0x7a>
    b = d;
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8afa      	ldrh	r2, [r7, #22]
 8002a62:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002a64:	8aba      	ldrh	r2, [r7, #20]
 8002a66:	8afb      	ldrh	r3, [r7, #22]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	8aba      	ldrh	r2, [r7, #20]
 8002a70:	801a      	strh	r2, [r3, #0]
  return 1;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	817b      	strh	r3, [r7, #10]
 8002a90:	460b      	mov	r3, r1
 8002a92:	813b      	strh	r3, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002aa6:	88f8      	ldrh	r0, [r7, #6]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	47a0      	blx	r4
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d075      	beq.n	8002bd0 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d072      	beq.n	8002bd0 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d91a      	bls.n	8002b26 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d109      	bne.n	8002b0c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002af8:	897a      	ldrh	r2, [r7, #10]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	817b      	strh	r3, [r7, #10]
	  x++;
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	e00c      	b.n	8002b26 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d108      	bne.n	8002b26 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002b14:	893a      	ldrh	r2, [r7, #8]
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	813b      	strh	r3, [r7, #8]
	  y++;
 8002b1e:	893b      	ldrh	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002b32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11a      	bne.n	8002b70 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d83b      	bhi.n	8002bbe <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d937      	bls.n	8002bc2 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002b5e:	1db9      	adds	r1, r7, #6
 8002b60:	f107 000a 	add.w	r0, r7, #10
 8002b64:	f7ff ff3e 	bl	80029e4 <u8g2_clip_intersection2>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11a      	bne.n	8002ba4 <u8g2_DrawHVLine+0xe4>
	  return;
 8002b6e:	e02f      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d824      	bhi.n	8002bc6 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d920      	bls.n	8002bca <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002b94:	1db9      	adds	r1, r7, #6
 8002b96:	f107 0008 	add.w	r0, r7, #8
 8002b9a:	f7ff ff23 	bl	80029e4 <u8g2_clip_intersection2>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d014      	beq.n	8002bce <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	689c      	ldr	r4, [r3, #8]
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	893a      	ldrh	r2, [r7, #8]
 8002bae:	88f8      	ldrh	r0, [r7, #6]
 8002bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	47a0      	blx	r4
 8002bbc:	e008      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
	  return;
 8002bbe:	bf00      	nop
 8002bc0:	e006      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
	  return;
 8002bc2:	bf00      	nop
 8002bc4:	e004      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
	  return;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
	  return;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <u8g2_DrawHVLine+0x110>
	  return;
 8002bce:	bf00      	nop
    }
}
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd90      	pop	{r4, r7, pc}

08002bd6 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af02      	add	r7, sp, #8
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	4608      	mov	r0, r1
 8002be0:	4611      	mov	r1, r2
 8002be2:	461a      	mov	r2, r3
 8002be4:	4603      	mov	r3, r0
 8002be6:	817b      	strh	r3, [r7, #10]
 8002be8:	460b      	mov	r3, r1
 8002bea:	813b      	strh	r3, [r7, #8]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff ff60 	bl	8002ac0 <u8g2_DrawHVLine>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	893a      	ldrh	r2, [r7, #8]
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	2001      	movs	r0, #1
 8002c2a:	9000      	str	r0, [sp, #0]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff ff47 	bl	8002ac0 <u8g2_DrawHVLine>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	807b      	strh	r3, [r7, #2]
 8002c46:	4613      	mov	r3, r2
 8002c48:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002c50:	883a      	ldrh	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d31a      	bcc.n	8002c8c <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002c5c:	883a      	ldrh	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d216      	bcs.n	8002c90 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d312      	bcc.n	8002c94 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20e      	bcs.n	8002c98 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002c7a:	883a      	ldrh	r2, [r7, #0]
 8002c7c:	8879      	ldrh	r1, [r7, #2]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2301      	movs	r3, #1
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff1b 	bl	8002ac0 <u8g2_DrawHVLine>
 8002c8a:	e006      	b.n	8002c9a <u8g2_DrawPixel+0x60>
    return;
 8002c8c:	bf00      	nop
 8002c8e:	e004      	b.n	8002c9a <u8g2_DrawPixel+0x60>
    return;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <u8g2_DrawPixel+0x60>
    return;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <u8g2_DrawPixel+0x60>
    return;
 8002c98:	bf00      	nop
}
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d903      	bls.n	8002cc2 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002ccc:	b490      	push	{r4, r7}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	80fb      	strh	r3, [r7, #6]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80bb      	strh	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20d      	bcs.n	8002d0e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002cf2:	883a      	ldrh	r2, [r7, #0]
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d901      	bls.n	8002cfe <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e014      	b.n	8002d28 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	883b      	ldrh	r3, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d901      	bls.n	8002d0a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00e      	b.n	8002d28 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e00c      	b.n	8002d28 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002d0e:	883a      	ldrh	r2, [r7, #0]
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d907      	bls.n	8002d26 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	883b      	ldrh	r3, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d901      	bls.n	8002d22 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e002      	b.n	8002d28 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002d26:	2300      	movs	r3, #0
    }
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc90      	pop	{r4, r7}
 8002d30:	4770      	bx	lr

08002d32 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	4608      	mov	r0, r1
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	817b      	strh	r3, [r7, #10]
 8002d44:	460b      	mov	r3, r1
 8002d46:	813b      	strh	r3, [r7, #8]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002d58:	8b3b      	ldrh	r3, [r7, #24]
 8002d5a:	893a      	ldrh	r2, [r7, #8]
 8002d5c:	f7ff ffb6 	bl	8002ccc <u8g2_is_intersection_decision_tree>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <u8g2_IsIntersection+0x38>
    return 0; 
 8002d66:	2300      	movs	r3, #0
 8002d68:	e00a      	b.n	8002d80 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	897a      	ldrh	r2, [r7, #10]
 8002d7a:	f7ff ffa7 	bl	8002ccc <u8g2_is_intersection_decision_tree>
 8002d7e:	4603      	mov	r3, r0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002db2:	7e3a      	ldrb	r2, [r7, #24]
 8002db4:	7efb      	ldrb	r3, [r7, #27]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d801      	bhi.n	8002dd2 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002dce:	7e3b      	ldrb	r3, [r7, #24]
 8002dd0:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d001      	beq.n	8002de0 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002ddc:	7e3b      	ldrb	r3, [r7, #24]
 8002dde:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002de4:	8afb      	ldrh	r3, [r7, #22]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	7c1b      	ldrb	r3, [r3, #16]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8afa      	ldrh	r2, [r7, #22]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002e02:	8afb      	ldrh	r3, [r7, #22]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d117      	bne.n	8002e4a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	7ebb      	ldrb	r3, [r7, #26]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	7e7b      	ldrb	r3, [r7, #25]
 8002e2e:	4053      	eors	r3, r2
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
	len--;
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e8      	bne.n	8002e1a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002e48:	e038      	b.n	8002ebc <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	7ebb      	ldrb	r3, [r7, #26]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	7e7b      	ldrb	r3, [r7, #25]
 8002e5e:	4053      	eors	r3, r2
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002e66:	7efb      	ldrb	r3, [r7, #27]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002e6c:	7efb      	ldrb	r3, [r7, #27]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	76fb      	strb	r3, [r7, #27]
      len--;
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e7a:	7efb      	ldrb	r3, [r7, #27]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d114      	bne.n	8002eaa <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e84:	461a      	mov	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d801      	bhi.n	8002e9a <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d008      	beq.n	8002eb6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	767b      	strb	r3, [r7, #25]
 8002ea8:	e005      	b.n	8002eb6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002eaa:	7ebb      	ldrb	r3, [r7, #26]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002eb0:	7e7b      	ldrb	r3, [r7, #25]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1c6      	bne.n	8002e4a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002ebc:	bf00      	nop
 8002ebe:	3724      	adds	r7, #36	; 0x24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	79fa      	ldrb	r2, [r7, #7]
 8002f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ffad 	bl	8002ec6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fc65 	bl	800283c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f96:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	89fa      	ldrh	r2, [r7, #14]
 8002fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7c1b      	ldrb	r3, [r3, #16]
 8002fa8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	89fa      	ldrh	r2, [r7, #14]
 8002fb4:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fbc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fbe:	89fb      	ldrh	r3, [r7, #14]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	89fa      	ldrh	r2, [r7, #14]
 8002fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002fda:	4413      	add	r3, r2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	7c52      	ldrb	r2, [r2, #17]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	dd08      	ble.n	8002ff6 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	7c5b      	ldrb	r3, [r3, #17]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	4413      	add	r3, r2
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	8a9a      	ldrh	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	8ada      	ldrh	r2, [r3, #22]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af02      	add	r7, sp, #8
 8003048:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4603      	mov	r3, r0
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fe63 	bl	8002d32 <u8g2_IsIntersection>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800307a:	e03b      	b.n	80030f4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	429a      	cmp	r2, r3
 8003092:	d205      	bcs.n	80030a0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d905      	bls.n	80030bc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d205      	bcs.n	80030d8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d905      	bls.n	80030f4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff3c 	bl	8002f82 <u8g2_update_dimension_common>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff7b 	bl	8003042 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800316e:	88f8      	ldrh	r0, [r7, #6]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	7e3b      	ldrb	r3, [r7, #24]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4603      	mov	r3, r0
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff fc7f 	bl	8002a7e <u8g2_draw_hv_line_2dir>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <u8x8_ascii_next+0x18>
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d102      	bne.n	80031c0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80031ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031be:	e001      	b.n	80031c4 <u8x8_ascii_next+0x22>
  return b;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	b29b      	uxth	r3, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <u8x8_utf8_next+0x18>
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d102      	bne.n	80031ec <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80031e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ea:	e06e      	b.n	80032ca <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d145      	bne.n	8003282 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	2bfb      	cmp	r3, #251	; 0xfb
 80031fa:	d908      	bls.n	800320e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	70fb      	strb	r3, [r7, #3]
 800320c:	e032      	b.n	8003274 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	2bf7      	cmp	r3, #247	; 0xf7
 8003212:	d908      	bls.n	8003226 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2204      	movs	r2, #4
 8003218:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	70fb      	strb	r3, [r7, #3]
 8003224:	e026      	b.n	8003274 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	2bef      	cmp	r3, #239	; 0xef
 800322a:	d908      	bls.n	800323e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	70fb      	strb	r3, [r7, #3]
 800323c:	e01a      	b.n	8003274 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	2bdf      	cmp	r3, #223	; 0xdf
 8003242:	d908      	bls.n	8003256 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	e00e      	b.n	8003274 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	2bbf      	cmp	r3, #191	; 0xbf
 800325a:	d908      	bls.n	800326e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	70fb      	strb	r3, [r7, #3]
 800326c:	e002      	b.n	8003274 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	b29b      	uxth	r3, r3
 8003272:	e02a      	b.n	80032ca <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 800327c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003280:	e023      	b.n	80032ca <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003288:	3b01      	subs	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8c1b      	ldrh	r3, [r3, #32]
 8003296:	019b      	lsls	r3, r3, #6
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8c1a      	ldrh	r2, [r3, #32]
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80032c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80032c4:	e001      	b.n	80032ca <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8c1b      	ldrh	r3, [r3, #32]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691c      	ldr	r4, [r3, #16]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	2300      	movs	r3, #0
 80032e8:	2120      	movs	r1, #32
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	47a0      	blx	r4
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}

080032f8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	460b      	mov	r3, r1
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691c      	ldr	r4, [r3, #16]
 800330a:	7afa      	ldrb	r2, [r7, #11]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2117      	movs	r1, #23
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	47a0      	blx	r4
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}

0800331e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800332a:	1cfb      	adds	r3, r7, #3
 800332c:	461a      	mov	r2, r3
 800332e:	2101      	movs	r1, #1
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ffe1 	bl	80032f8 <u8x8_byte_SendBytes>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68dc      	ldr	r4, [r3, #12]
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	2300      	movs	r3, #0
 8003354:	2115      	movs	r1, #21
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	47a0      	blx	r4
 800335a:	4603      	mov	r3, r0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}

08003364 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68dc      	ldr	r4, [r3, #12]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	2300      	movs	r3, #0
 8003378:	2116      	movs	r1, #22
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	47a0      	blx	r4
 800337e:	4603      	mov	r3, r0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}

08003388 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	460b      	mov	r3, r1
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68dc      	ldr	r4, [r3, #12]
 800339a:	7afa      	ldrb	r2, [r7, #11]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2117      	movs	r1, #23
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	47a0      	blx	r4
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}

080033ae <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80033ae:	b590      	push	{r4, r7, lr}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68dc      	ldr	r4, [r3, #12]
 80033ba:	2300      	movs	r3, #0
 80033bc:	2200      	movs	r2, #0
 80033be:	2118      	movs	r1, #24
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	47a0      	blx	r4
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80033ce:	b590      	push	{r4, r7, lr}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68dc      	ldr	r4, [r3, #12]
 80033da:	2300      	movs	r3, #0
 80033dc:	2200      	movs	r2, #0
 80033de:	2119      	movs	r1, #25
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	47a0      	blx	r4
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}

080033ee <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80033ee:	b590      	push	{r4, r7, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	73fb      	strb	r3, [r7, #15]
    data++;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2bfe      	cmp	r3, #254	; 0xfe
 8003408:	d031      	beq.n	800346e <u8x8_cad_SendSequence+0x80>
 800340a:	2bfe      	cmp	r3, #254	; 0xfe
 800340c:	dc3d      	bgt.n	800348a <u8x8_cad_SendSequence+0x9c>
 800340e:	2b19      	cmp	r3, #25
 8003410:	dc3b      	bgt.n	800348a <u8x8_cad_SendSequence+0x9c>
 8003412:	2b18      	cmp	r3, #24
 8003414:	da23      	bge.n	800345e <u8x8_cad_SendSequence+0x70>
 8003416:	2b16      	cmp	r3, #22
 8003418:	dc02      	bgt.n	8003420 <u8x8_cad_SendSequence+0x32>
 800341a:	2b15      	cmp	r3, #21
 800341c:	da03      	bge.n	8003426 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800341e:	e034      	b.n	800348a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003420:	2b17      	cmp	r3, #23
 8003422:	d00e      	beq.n	8003442 <u8x8_cad_SendSequence+0x54>
	return;
 8003424:	e031      	b.n	800348a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68dc      	ldr	r4, [r3, #12]
 8003430:	7bba      	ldrb	r2, [r7, #14]
 8003432:	7bf9      	ldrb	r1, [r7, #15]
 8003434:	2300      	movs	r3, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	47a0      	blx	r4
	  data++;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
	  break;
 8003440:	e022      	b.n	8003488 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003448:	f107 030e 	add.w	r3, r7, #14
 800344c:	461a      	mov	r2, r3
 800344e:	2101      	movs	r1, #1
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff99 	bl	8003388 <u8x8_cad_SendData>
	  data++;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	603b      	str	r3, [r7, #0]
	  break;
 800345c:	e014      	b.n	8003488 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68dc      	ldr	r4, [r3, #12]
 8003462:	7bf9      	ldrb	r1, [r7, #15]
 8003464:	2300      	movs	r3, #0
 8003466:	2200      	movs	r2, #0
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	47a0      	blx	r4
	  break;
 800346c:	e00c      	b.n	8003488 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003474:	7bbb      	ldrb	r3, [r7, #14]
 8003476:	461a      	mov	r2, r3
 8003478:	2129      	movs	r1, #41	; 0x29
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9ed 	bl	800385a <u8x8_gpio_call>
	  data++;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	603b      	str	r3, [r7, #0]
	  break;
 8003486:	bf00      	nop
    cmd = *data;
 8003488:	e7b6      	b.n	80033f8 <u8x8_cad_SendSequence+0xa>
	return;
 800348a:	bf00      	nop
    }
  }
}
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
	...

08003494 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	72fb      	strb	r3, [r7, #11]
 80034a2:	4613      	mov	r3, r2
 80034a4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	3b14      	subs	r3, #20
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d82f      	bhi.n	800350e <u8x8_cad_001+0x7a>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <u8x8_cad_001+0x20>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	080034fd 	.word	0x080034fd
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080034fd 	.word	0x080034fd
 80034c8:	080034fd 	.word	0x080034fd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80034cc:	2100      	movs	r1, #0
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff ff00 	bl	80032d4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80034d4:	7abb      	ldrb	r3, [r7, #10]
 80034d6:	4619      	mov	r1, r3
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ff20 	bl	800331e <u8x8_byte_SendByte>
      break;
 80034de:	e018      	b.n	8003512 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80034e0:	2100      	movs	r1, #0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff fef6 	bl	80032d4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80034e8:	7abb      	ldrb	r3, [r7, #10]
 80034ea:	4619      	mov	r1, r3
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff ff16 	bl	800331e <u8x8_byte_SendByte>
      break;
 80034f2:	e00e      	b.n	8003512 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80034f4:	2101      	movs	r1, #1
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff feec 	bl	80032d4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691c      	ldr	r4, [r3, #16]
 8003500:	7aba      	ldrb	r2, [r7, #10]
 8003502:	7af9      	ldrb	r1, [r7, #11]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	47a0      	blx	r4
 800350a:	4603      	mov	r3, r0
 800350c:	e002      	b.n	8003514 <u8x8_cad_001+0x80>
    default:
      return 0;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <u8x8_cad_001+0x80>
  }
  return 1;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}

0800351c <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	72fb      	strb	r3, [r7, #11]
 800352a:	4613      	mov	r3, r2
 800352c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	3b0b      	subs	r3, #11
 8003532:	2b04      	cmp	r3, #4
 8003534:	f200 808e 	bhi.w	8003654 <u8x8_d_uc1604_common+0x138>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <u8x8_d_uc1604_common+0x24>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	080035e9 	.word	0x080035e9
 8003544:	08003655 	.word	0x08003655
 8003548:	08003603 	.word	0x08003603
 800354c:	08003635 	.word	0x08003635
 8003550:	08003555 	.word	0x08003555
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ff2a 	bl	80033ae <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	795b      	ldrb	r3, [r3, #5]
 800355e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fee5 	bl	8003340 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0310 	orr.w	r3, r3, #16
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff fedb 	bl	8003340 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	799b      	ldrb	r3, [r3, #6]
 800358e:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003596:	7dbb      	ldrb	r3, [r7, #22]
 8003598:	4413      	add	r3, r2
 800359a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 800359c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fec5 	bl	8003340 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	791b      	ldrb	r3, [r3, #4]
 80035ba:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80035bc:	7d7b      	ldrb	r3, [r7, #21]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80035c8:	7d7b      	ldrb	r3, [r7, #21]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4619      	mov	r1, r3
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff feda 	bl	8003388 <u8x8_cad_SendData>
	arg_int--;
 80035d4:	7abb      	ldrb	r3, [r7, #10]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80035da:	7abb      	ldrb	r3, [r7, #10]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f3      	bne.n	80035c8 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff fef4 	bl	80033ce <u8x8_cad_EndTransfer>
      break;
 80035e6:	e037      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80035e8:	7abb      	ldrb	r3, [r7, #10]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 80035ee:	491d      	ldr	r1, [pc, #116]	; (8003664 <u8x8_d_uc1604_common+0x148>)
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fefc 	bl	80033ee <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 80035f6:	e02f      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 80035f8:	491b      	ldr	r1, [pc, #108]	; (8003668 <u8x8_d_uc1604_common+0x14c>)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff fef7 	bl	80033ee <u8x8_cad_SendSequence>
      break;
 8003600:	e02a      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003602:	7abb      	ldrb	r3, [r7, #10]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003608:	4918      	ldr	r1, [pc, #96]	; (800366c <u8x8_d_uc1604_common+0x150>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff feef 	bl	80033ee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	7c9a      	ldrb	r2, [r3, #18]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 800361c:	e01c      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 800361e:	4914      	ldr	r1, [pc, #80]	; (8003670 <u8x8_d_uc1604_common+0x154>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fee4 	bl	80033ee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	7cda      	ldrb	r2, [r3, #19]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003632:	e011      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff feba 	bl	80033ae <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800363a:	2181      	movs	r1, #129	; 0x81
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fe7f 	bl	8003340 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003642:	7abb      	ldrb	r3, [r7, #10]
 8003644:	4619      	mov	r1, r3
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fe8c 	bl	8003364 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff febe 	bl	80033ce <u8x8_cad_EndTransfer>
      break;
 8003652:	e001      	b.n	8003658 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0800d7d4 	.word	0x0800d7d4
 8003668:	0800d7e4 	.word	0x0800d7e4
 800366c:	0800d7ec 	.word	0x0800d7ec
 8003670:	0800d7f4 	.word	0x0800d7f4

08003674 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	72fb      	strb	r3, [r7, #11]
 8003682:	4613      	mov	r3, r2
 8003684:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003686:	7aba      	ldrb	r2, [r7, #10]
 8003688:	7af9      	ldrb	r1, [r7, #11]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff45 	bl	800351c <u8x8_d_uc1604_common>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	2b09      	cmp	r3, #9
 800369c:	d002      	beq.n	80036a4 <u8x8_d_uc1604_jlx19264+0x30>
 800369e:	2b0a      	cmp	r3, #10
 80036a0:	d005      	beq.n	80036ae <u8x8_d_uc1604_jlx19264+0x3a>
 80036a2:	e00c      	b.n	80036be <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 80036a4:	490a      	ldr	r1, [pc, #40]	; (80036d0 <u8x8_d_uc1604_jlx19264+0x5c>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f816 	bl	80036d8 <u8x8_d_helper_display_setup_memory>
	break;
 80036ac:	e00a      	b.n	80036c4 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f825 	bl	80036fe <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <u8x8_d_uc1604_jlx19264+0x60>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fe99 	bl	80033ee <u8x8_cad_SendSequence>
	break;
 80036bc:	e002      	b.n	80036c4 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 80036be:	2300      	movs	r3, #0
 80036c0:	e001      	b.n	80036c6 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 80036c2:	bf00      	nop
  return 1;
 80036c4:	2301      	movs	r3, #1
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	0800d7fc 	.word	0x0800d7fc
 80036d4:	0800d814 	.word	0x0800d814

080036d8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	7c9a      	ldrb	r2, [r3, #18]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80036fe:	b590      	push	{r4, r7, lr}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695c      	ldr	r4, [r3, #20]
 800370a:	2300      	movs	r3, #0
 800370c:	2200      	movs	r2, #0
 800370e:	2128      	movs	r1, #40	; 0x28
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68dc      	ldr	r4, [r3, #12]
 8003718:	2300      	movs	r3, #0
 800371a:	2200      	movs	r2, #0
 800371c:	2114      	movs	r1, #20
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003722:	2201      	movs	r2, #1
 8003724:	214b      	movs	r1, #75	; 0x4b
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f897 	bl	800385a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	791b      	ldrb	r3, [r3, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	2129      	movs	r1, #41	; 0x29
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f88f 	bl	800385a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	214b      	movs	r1, #75	; 0x4b
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f88a 	bl	800385a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	791b      	ldrb	r3, [r3, #4]
 800374c:	461a      	mov	r2, r3
 800374e:	2129      	movs	r1, #41	; 0x29
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f882 	bl	800385a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003756:	2201      	movs	r2, #1
 8003758:	214b      	movs	r1, #75	; 0x4b
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f87d 	bl	800385a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	795b      	ldrb	r3, [r3, #5]
 8003766:	461a      	mov	r2, r3
 8003768:	2129      	movs	r1, #41	; 0x29
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f875 	bl	800385a <u8x8_gpio_call>
}    
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	70fb      	strb	r3, [r7, #3]
 800378a:	460b      	mov	r3, r1
 800378c:	70bb      	strb	r3, [r7, #2]
 800378e:	4613      	mov	r3, r2
 8003790:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003796:	78bb      	ldrb	r3, [r7, #2]
 8003798:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800379a:	787b      	ldrb	r3, [r7, #1]
 800379c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689c      	ldr	r4, [r3, #8]
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	2201      	movs	r2, #1
 80037ac:	210f      	movs	r1, #15
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	47a0      	blx	r4
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}

080037bc <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689c      	ldr	r4, [r3, #8]
 80037c8:	2300      	movs	r3, #0
 80037ca:	2200      	movs	r2, #0
 80037cc:	2109      	movs	r1, #9
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	47a0      	blx	r4
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80037da:	b590      	push	{r4, r7, lr}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689c      	ldr	r4, [r3, #8]
 80037e6:	2300      	movs	r3, #0
 80037e8:	2200      	movs	r2, #0
 80037ea:	210a      	movs	r1, #10
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	47a0      	blx	r4
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}

080037f8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689c      	ldr	r4, [r3, #8]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	2300      	movs	r3, #0
 800380c:	210b      	movs	r1, #11
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	47a0      	blx	r4
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689c      	ldr	r4, [r3, #8]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	2300      	movs	r3, #0
 800382e:	210e      	movs	r1, #14
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	47a0      	blx	r4
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bd90      	pop	{r4, r7, pc}

0800383c <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689c      	ldr	r4, [r3, #8]
 8003848:	2300      	movs	r3, #0
 800384a:	2200      	movs	r2, #0
 800384c:	2110      	movs	r1, #16
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	47a0      	blx	r4
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}

0800385a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800385a:	b590      	push	{r4, r7, lr}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
 8003866:	4613      	mov	r3, r2
 8003868:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695c      	ldr	r4, [r3, #20]
 800386e:	78ba      	ldrb	r2, [r7, #2]
 8003870:	78f9      	ldrb	r1, [r7, #3]
 8003872:	2300      	movs	r3, #0
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	47a0      	blx	r4
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	72fb      	strb	r3, [r7, #11]
 800388e:	4613      	mov	r3, r2
 8003890:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
	...

080038a0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a11      	ldr	r2, [pc, #68]	; (80038f8 <u8x8_SetupDefaults+0x58>)
 80038b2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <u8x8_SetupDefaults+0x58>)
 80038b8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <u8x8_SetupDefaults+0x58>)
 80038be:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <u8x8_SetupDefaults+0x58>)
 80038c4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	22ff      	movs	r2, #255	; 0xff
 80038e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08003881 	.word	0x08003881

080038fc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff ffc8 	bl	80038a0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ff47 	bl	80037bc <u8x8_SetupMemory>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003938:	480c      	ldr	r0, [pc, #48]	; (800396c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003940:	e002      	b.n	8003948 <LoopCopyDataInit>

08003942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003946:	3304      	adds	r3, #4

08003948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800394c:	d3f9      	bcc.n	8003942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003950:	4c0a      	ldr	r4, [pc, #40]	; (800397c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003954:	e001      	b.n	800395a <LoopFillZerobss>

08003956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003958:	3204      	adds	r2, #4

0800395a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800395c:	d3fb      	bcc.n	8003956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800395e:	f7fd fde5 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003962:	f008 f9b1 	bl	800bcc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003966:	f7fd faf7 	bl	8000f58 <main>
  bx lr
 800396a:	4770      	bx	lr
  ldr r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003970:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8003974:	0800d874 	.word	0x0800d874
  ldr r2, =_sbss
 8003978:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800397c:	20001e28 	.word	0x20001e28

08003980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC1_2_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_Init+0x28>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_Init+0x28>)
 800398e:	f043 0310 	orr.w	r3, r3, #16
 8003992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 f981 	bl	8003c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399a:	200f      	movs	r0, #15
 800399c:	f000 f808 	bl	80039b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a0:	f7fd fc80 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_InitTick+0x54>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9ab 	bl	8003d2a <HAL_SYSTICK_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00e      	b.n	80039fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d80a      	bhi.n	80039fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ec:	f000 f961 	bl	8003cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_InitTick+0x5c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000230 	.word	0x20000230
 8003a08:	20000238 	.word	0x20000238
 8003a0c:	20000234 	.word	0x20000234

08003a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_IncTick+0x1c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_IncTick+0x20>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_IncTick+0x20>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000238 	.word	0x20000238
 8003a30:	20000c70 	.word	0x20000c70

08003a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_GetTick+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000c70 	.word	0x20000c70

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a6e:	bf00      	nop
 8003a70:	f7ff ffe0 	bl	8003a34 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000238 	.word	0x20000238

08003a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aac:	4013      	ands	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	60d3      	str	r3, [r2, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 0307 	and.w	r3, r3, #7
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	db0b      	blt.n	8003b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4906      	ldr	r1, [pc, #24]	; (8003b28 <__NVIC_EnableIRQ+0x34>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2001      	movs	r0, #1
 8003b16:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db12      	blt.n	8003b64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	490a      	ldr	r1, [pc, #40]	; (8003b70 <__NVIC_DisableIRQ+0x44>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	3320      	adds	r3, #32
 8003b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b58:	f3bf 8f4f 	dsb	sy
}
 8003b5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b5e:	f3bf 8f6f 	isb	sy
}
 8003b62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	; (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003c30:	f3bf 8f4f 	dsb	sy
}
 8003c34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <__NVIC_SystemReset+0x24>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c3e:	4904      	ldr	r1, [pc, #16]	; (8003c50 <__NVIC_SystemReset+0x24>)
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <__NVIC_SystemReset+0x28>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c46:	f3bf 8f4f 	dsb	sy
}
 8003c4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <__NVIC_SystemReset+0x20>
 8003c50:	e000ed00 	.word	0xe000ed00
 8003c54:	05fa0004 	.word	0x05fa0004

08003c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d301      	bcc.n	8003c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00f      	b.n	8003c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <SysTick_Config+0x40>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c76:	210f      	movs	r1, #15
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c7c:	f7ff ff7a 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <SysTick_Config+0x40>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <SysTick_Config+0x40>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fef3 	bl	8003a90 <__NVIC_SetPriorityGrouping>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc4:	f7ff ff08 	bl	8003ad8 <__NVIC_GetPriorityGrouping>
 8003cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7ff ff7a 	bl	8003bc8 <NVIC_EncodePriority>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff49 	bl	8003b74 <__NVIC_SetPriority>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fefb 	bl	8003af4 <__NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff09 	bl	8003b2c <__NVIC_DisableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003d26:	f7ff ff81 	bl	8003c2c <__NVIC_SystemReset>

08003d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff90 	bl	8003c58 <SysTick_Config>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b08b      	sub	sp, #44	; 0x2c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d56:	e169      	b.n	800402c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d58:	2201      	movs	r2, #1
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 8158 	bne.w	8004026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a9a      	ldr	r2, [pc, #616]	; (8003fe4 <HAL_GPIO_Init+0x2a0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d05e      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d80:	4a98      	ldr	r2, [pc, #608]	; (8003fe4 <HAL_GPIO_Init+0x2a0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d875      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d86:	4a98      	ldr	r2, [pc, #608]	; (8003fe8 <HAL_GPIO_Init+0x2a4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d058      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d8c:	4a96      	ldr	r2, [pc, #600]	; (8003fe8 <HAL_GPIO_Init+0x2a4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d86f      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d92:	4a96      	ldr	r2, [pc, #600]	; (8003fec <HAL_GPIO_Init+0x2a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d052      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d98:	4a94      	ldr	r2, [pc, #592]	; (8003fec <HAL_GPIO_Init+0x2a8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d869      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d9e:	4a94      	ldr	r2, [pc, #592]	; (8003ff0 <HAL_GPIO_Init+0x2ac>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04c      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003da4:	4a92      	ldr	r2, [pc, #584]	; (8003ff0 <HAL_GPIO_Init+0x2ac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d863      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003daa:	4a92      	ldr	r2, [pc, #584]	; (8003ff4 <HAL_GPIO_Init+0x2b0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d046      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003db0:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <HAL_GPIO_Init+0x2b0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d85d      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003db6:	2b12      	cmp	r3, #18
 8003db8:	d82a      	bhi.n	8003e10 <HAL_GPIO_Init+0xcc>
 8003dba:	2b12      	cmp	r3, #18
 8003dbc:	d859      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_GPIO_Init+0x80>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e3f 	.word	0x08003e3f
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e2b 	.word	0x08003e2b
 8003dd0:	08003e6d 	.word	0x08003e6d
 8003dd4:	08003e73 	.word	0x08003e73
 8003dd8:	08003e73 	.word	0x08003e73
 8003ddc:	08003e73 	.word	0x08003e73
 8003de0:	08003e73 	.word	0x08003e73
 8003de4:	08003e73 	.word	0x08003e73
 8003de8:	08003e73 	.word	0x08003e73
 8003dec:	08003e73 	.word	0x08003e73
 8003df0:	08003e73 	.word	0x08003e73
 8003df4:	08003e73 	.word	0x08003e73
 8003df8:	08003e73 	.word	0x08003e73
 8003dfc:	08003e73 	.word	0x08003e73
 8003e00:	08003e73 	.word	0x08003e73
 8003e04:	08003e73 	.word	0x08003e73
 8003e08:	08003e21 	.word	0x08003e21
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	4a79      	ldr	r2, [pc, #484]	; (8003ff8 <HAL_GPIO_Init+0x2b4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e16:	e02c      	b.n	8003e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	623b      	str	r3, [r7, #32]
          break;
 8003e1e:	e029      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	623b      	str	r3, [r7, #32]
          break;
 8003e28:	e024      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
          break;
 8003e32:	e01f      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	623b      	str	r3, [r7, #32]
          break;
 8003e3c:	e01a      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e46:	2304      	movs	r3, #4
 8003e48:	623b      	str	r3, [r7, #32]
          break;
 8003e4a:	e013      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e54:	2308      	movs	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	611a      	str	r2, [r3, #16]
          break;
 8003e5e:	e009      	b.n	8003e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e60:	2308      	movs	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	615a      	str	r2, [r3, #20]
          break;
 8003e6a:	e003      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
          break;
 8003e70:	e000      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          break;
 8003e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2bff      	cmp	r3, #255	; 0xff
 8003e78:	d801      	bhi.n	8003e7e <HAL_GPIO_Init+0x13a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	e001      	b.n	8003e82 <HAL_GPIO_Init+0x13e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2bff      	cmp	r3, #255	; 0xff
 8003e88:	d802      	bhi.n	8003e90 <HAL_GPIO_Init+0x14c>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x152>
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	3b08      	subs	r3, #8
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	210f      	movs	r1, #15
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80b1 	beq.w	8004026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a4c      	ldr	r2, [pc, #304]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003edc:	4a48      	ldr	r2, [pc, #288]	; (8004000 <HAL_GPIO_Init+0x2bc>)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a40      	ldr	r2, [pc, #256]	; (8004004 <HAL_GPIO_Init+0x2c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_GPIO_Init+0x1ec>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <HAL_GPIO_Init+0x2c4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_GPIO_Init+0x1e8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <HAL_GPIO_Init+0x2c8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <HAL_GPIO_Init+0x1e4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <HAL_GPIO_Init+0x2cc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_GPIO_Init+0x1e0>
 8003f20:	2303      	movs	r3, #3
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f30:	2300      	movs	r3, #0
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f42:	492f      	ldr	r1, [pc, #188]	; (8004000 <HAL_GPIO_Init+0x2bc>)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	492c      	ldr	r1, [pc, #176]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e006      	b.n	8003f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4928      	ldr	r1, [pc, #160]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4922      	ldr	r1, [pc, #136]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	491e      	ldr	r1, [pc, #120]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4918      	ldr	r1, [pc, #96]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4914      	ldr	r1, [pc, #80]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d021      	beq.n	8004018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
 8003fe0:	e021      	b.n	8004026 <HAL_GPIO_Init+0x2e2>
 8003fe2:	bf00      	nop
 8003fe4:	10320000 	.word	0x10320000
 8003fe8:	10310000 	.word	0x10310000
 8003fec:	10220000 	.word	0x10220000
 8003ff0:	10210000 	.word	0x10210000
 8003ff4:	10120000 	.word	0x10120000
 8003ff8:	10110000 	.word	0x10110000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010000 	.word	0x40010000
 8004004:	40010800 	.word	0x40010800
 8004008:	40010c00 	.word	0x40010c00
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_GPIO_Init+0x304>)
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	43db      	mvns	r3, r3
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <HAL_GPIO_Init+0x304>)
 8004022:	4013      	ands	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	3301      	adds	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f47f ae8e 	bne.w	8003d58 <HAL_GPIO_Init+0x14>
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	372c      	adds	r7, #44	; 0x2c
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004068:	e003      	b.n	8004072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	041a      	lsls	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	611a      	str	r2, [r3, #16]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	041a      	lsls	r2, r3, #16
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43d9      	mvns	r1, r3
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	400b      	ands	r3, r1
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	611a      	str	r2, [r3, #16]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc ff24 	bl	8000f1c <HAL_GPIO_EXTI_Callback>
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e2:	b08b      	sub	sp, #44	; 0x2c
 80040e4:	af06      	add	r7, sp, #24
 80040e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0fd      	b.n	80042ee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f007 fb26 	bl	800b758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f002 fff7 	bl	800710c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	687e      	ldr	r6, [r7, #4]
 8004126:	466d      	mov	r5, sp
 8004128:	f106 0410 	add.w	r4, r6, #16
 800412c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	1d33      	adds	r3, r6, #4
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	f002 ffc1 	bl	80070c0 <USB_CoreInit>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ce      	b.n	80042ee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f002 fff2 	bl	8007140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e04c      	b.n	80041fc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	440b      	add	r3, r1
 8004172:	3301      	adds	r3, #1
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	440b      	add	r3, r1
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800418c:	7bfa      	ldrb	r2, [r7, #15]
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	b298      	uxth	r0, r3
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	440b      	add	r3, r1
 800419e:	3336      	adds	r3, #54	; 0x36
 80041a0:	4602      	mov	r2, r0
 80041a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	440b      	add	r3, r1
 80041b4:	3303      	adds	r3, #3
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	3338      	adds	r3, #56	; 0x38
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	440b      	add	r3, r1
 80041dc:	333c      	adds	r3, #60	; 0x3c
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3340      	adds	r3, #64	; 0x40
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	3301      	adds	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d3ad      	bcc.n	8004162 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
 800420a:	e044      	b.n	8004296 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	440b      	add	r3, r1
 8004288:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3301      	adds	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3b5      	bcc.n	800420c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	687e      	ldr	r6, [r7, #4]
 80042a8:	466d      	mov	r5, sp
 80042aa:	f106 0410 	add.w	r4, r6, #16
 80042ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	1d33      	adds	r3, r6, #4
 80042b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ba:	6838      	ldr	r0, [r7, #0]
 80042bc:	f002 ff4c 	bl	8007158 <USB_DevInit>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00d      	b.n	80042ee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f005 fbfe 	bl	8009ae8 <USB_DevDisconnect>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_PCD_Start+0x16>
 8004308:	2302      	movs	r3, #2
 800430a:	e016      	b.n	800433a <HAL_PCD_Start+0x44>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f002 fee1 	bl	80070e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800431e:	2101      	movs	r1, #1
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f007 fc94 	bl	800bc4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f005 fbd2 	bl	8009ad4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b088      	sub	sp, #32
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fbd4 	bl	8009afc <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435e:	d102      	bne.n	8004366 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fb5f 	bl	8004a24 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f005 fbc6 	bl	8009afc <USB_ReadInterrupts>
 8004370:	4603      	mov	r3, r0
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d112      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004384:	b29a      	uxth	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438e:	b292      	uxth	r2, r2
 8004390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f007 fa62 	bl	800b85e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800439a:	2100      	movs	r1, #0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f923 	bl	80045e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fba8 	bl	8009afc <USB_ReadInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b6:	d10b      	bne.n	80043d0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ca:	b292      	uxth	r2, r2
 80043cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f005 fb91 	bl	8009afc <USB_ReadInterrupts>
 80043da:	4603      	mov	r3, r0
 80043dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e4:	d10b      	bne.n	80043fe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f8:	b292      	uxth	r2, r2
 80043fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fb7a 	bl	8009afc <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d126      	bne.n	8004462 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	b292      	uxth	r2, r2
 8004428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0208 	bic.w	r2, r2, #8
 800443e:	b292      	uxth	r2, r2
 8004440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f007 fa43 	bl	800b8d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800445c:	b292      	uxth	r2, r2
 800445e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f005 fb48 	bl	8009afc <USB_ReadInterrupts>
 800446c:	4603      	mov	r3, r0
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	f040 8082 	bne.w	800457e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e010      	b.n	80044a2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	8812      	ldrh	r2, [r2, #0]
 8004490:	b292      	uxth	r2, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	3320      	adds	r3, #32
 8004496:	443b      	add	r3, r7
 8004498:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	3301      	adds	r3, #1
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	d9eb      	bls.n	8004480 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	b292      	uxth	r2, r2
 80044bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	b292      	uxth	r2, r2
 80044d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80044d8:	bf00      	nop
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f6      	beq.n	80044da <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fe:	b292      	uxth	r2, r2
 8004500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e00f      	b.n	800452a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800450a:	7ffb      	ldrb	r3, [r7, #31]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	4611      	mov	r1, r2
 8004512:	7ffa      	ldrb	r2, [r7, #31]
 8004514:	0092      	lsls	r2, r2, #2
 8004516:	440a      	add	r2, r1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	3320      	adds	r3, #32
 800451c:	443b      	add	r3, r7
 800451e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004522:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004524:	7ffb      	ldrb	r3, [r7, #31]
 8004526:	3301      	adds	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	2b07      	cmp	r3, #7
 800452e:	d9ec      	bls.n	800450a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	b292      	uxth	r2, r2
 8004544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455a:	b292      	uxth	r2, r2
 800455c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0204 	orr.w	r2, r2, #4
 8004572:	b292      	uxth	r2, r2
 8004574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f007 f98f 	bl	800b89c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f005 faba 	bl	8009afc <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004592:	d10e      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a6:	b292      	uxth	r2, r2
 80045a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f007 f948 	bl	800b842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 faa0 	bl	8009afc <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d10b      	bne.n	80045e0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	b292      	uxth	r2, r2
 80045dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80045e0:	bf00      	nop
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_PCD_SetAddress+0x1a>
 80045fe:	2302      	movs	r3, #2
 8004600:	e013      	b.n	800462a <HAL_PCD_SetAddress+0x42>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f005 fa47 	bl	8009aae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	4608      	mov	r0, r1
 800463c:	4611      	mov	r1, r2
 800463e:	461a      	mov	r2, r3
 8004640:	4603      	mov	r3, r0
 8004642:	70fb      	strb	r3, [r7, #3]
 8004644:	460b      	mov	r3, r1
 8004646:	803b      	strh	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004654:	2b00      	cmp	r3, #0
 8004656:	da0e      	bge.n	8004676 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	705a      	strb	r2, [r3, #1]
 8004674:	e00e      	b.n	8004694 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	f003 0207 	and.w	r2, r3, #7
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4413      	add	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046a0:	883a      	ldrh	r2, [r7, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	78ba      	ldrb	r2, [r7, #2]
 80046aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046be:	78bb      	ldrb	r3, [r7, #2]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d102      	bne.n	80046ca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_PCD_EP_Open+0xa6>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e00e      	b.n	80046f6 <HAL_PCD_EP_Open+0xc4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f002 fd56 	bl	8007198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80046f4:	7afb      	ldrb	r3, [r7, #11]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800470a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470e:	2b00      	cmp	r3, #0
 8004710:	da0e      	bge.n	8004730 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	705a      	strb	r2, [r3, #1]
 800472e:	e00e      	b.n	800474e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 0207 	and.w	r2, r3, #7
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_PCD_EP_Close+0x6a>
 8004764:	2302      	movs	r3, #2
 8004766:	e00e      	b.n	8004786 <HAL_PCD_EP_Close+0x88>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68f9      	ldr	r1, [r7, #12]
 8004776:	4618      	mov	r0, r3
 8004778:	f003 f878 	bl	800786c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	460b      	mov	r3, r1
 800479c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479e:	7afb      	ldrb	r3, [r7, #11]
 80047a0:	f003 0207 	and.w	r2, r3, #7
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2200      	movs	r2, #0
 80047cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6979      	ldr	r1, [r7, #20]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f003 fa2a 	bl	8007c44 <USB_EPStartXfer>
 80047f0:	e005      	b.n	80047fe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f003 fa23 	bl	8007c44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 0207 	and.w	r2, r3, #7
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	460b      	mov	r3, r1
 8004844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2201      	movs	r2, #1
 8004880:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	b2da      	uxtb	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6979      	ldr	r1, [r7, #20]
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 f9d0 	bl	8007c44 <USB_EPStartXfer>
 80048a4:	e005      	b.n	80048b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6979      	ldr	r1, [r7, #20]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f003 f9c9 	bl	8007c44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 0207 	and.w	r2, r3, #7
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d901      	bls.n	80048da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e04c      	b.n	8004974 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da0e      	bge.n	8004900 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	705a      	strb	r2, [r3, #1]
 80048fe:	e00c      	b.n	800491a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_PCD_EP_SetStall+0x7e>
 8004936:	2302      	movs	r3, #2
 8004938:	e01c      	b.n	8004974 <HAL_PCD_EP_SetStall+0xb8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	4618      	mov	r0, r3
 800494a:	f004 ffb3 	bl	80098b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f005 f8d8 	bl	8009b1a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 020f 	and.w	r2, r3, #15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d901      	bls.n	800499a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e040      	b.n	8004a1c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800499a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da0e      	bge.n	80049c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	705a      	strb	r2, [r3, #1]
 80049be:	e00e      	b.n	80049de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 0207 	and.w	r2, r3, #7
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_PCD_EP_ClrStall+0x82>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e00e      	b.n	8004a1c <HAL_PCD_EP_ClrStall+0xa0>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f004 ffa1 	bl	8009954 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	; 0x38
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a2c:	e2ec      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a36:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004a44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 8161 	bne.w	8004d10 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d152      	bne.n	8004afe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	81fb      	strh	r3, [r7, #14]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	89fb      	ldrh	r3, [r7, #14]
 8004a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3328      	adds	r3, #40	; 0x28
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	3302      	adds	r3, #2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004abc:	2100      	movs	r1, #0
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f006 fea5 	bl	800b80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 829b 	beq.w	8005008 <PCD_EP_ISR_Handler+0x5e4>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f040 8296 	bne.w	8005008 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b292      	uxth	r2, r2
 8004af0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004afc:	e284      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d034      	beq.n	8004b82 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3306      	adds	r3, #6
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f005 f82f 	bl	8009bba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b68:	4013      	ands	r3, r2
 8004b6a:	823b      	strh	r3, [r7, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	8a3a      	ldrh	r2, [r7, #16]
 8004b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b76:	b292      	uxth	r2, r2
 8004b78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f006 fe1a 	bl	800b7b4 <HAL_PCD_SetupStageCallback>
 8004b80:	e242      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f280 823e 	bge.w	8005008 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b98:	4013      	ands	r3, r2
 8004b9a:	83bb      	strh	r3, [r7, #28]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	8bba      	ldrh	r2, [r7, #28]
 8004ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3306      	adds	r3, #6
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d019      	beq.n	8004c12 <PCD_EP_ISR_Handler+0x1ee>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d015      	beq.n	8004c12 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	6959      	ldr	r1, [r3, #20]
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f004 ffdf 	bl	8009bba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	441a      	add	r2, r3
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f006 fde3 	bl	800b7d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 81f2 	bne.w	8005008 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d112      	bne.n	8004c72 <PCD_EP_ISR_Handler+0x24e>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e02f      	b.n	8004cd2 <PCD_EP_ISR_Handler+0x2ae>
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b3e      	cmp	r3, #62	; 0x3e
 8004c78:	d813      	bhi.n	8004ca2 <PCD_EP_ISR_Handler+0x27e>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <PCD_EP_ISR_Handler+0x270>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	3301      	adds	r3, #1
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	e017      	b.n	8004cd2 <PCD_EP_ISR_Handler+0x2ae>
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <PCD_EP_ISR_Handler+0x298>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	029b      	lsls	r3, r3, #10
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	827b      	strh	r3, [r7, #18]
 8004ce4:	8a7b      	ldrh	r3, [r7, #18]
 8004ce6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cea:	827b      	strh	r3, [r7, #18]
 8004cec:	8a7b      	ldrh	r3, [r7, #18]
 8004cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cf2:	827b      	strh	r3, [r7, #18]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]
 8004d0e:	e17b      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f280 80ea 	bge.w	8004f00 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d42:	4013      	ands	r3, r2
 8004d44:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d5e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	7b1b      	ldrb	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d122      	bne.n	8004dc2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	3306      	adds	r3, #6
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004da6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8087 	beq.w	8004ebc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	6959      	ldr	r1, [r3, #20]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	88da      	ldrh	r2, [r3, #6]
 8004dba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dbc:	f004 fefd 	bl	8009bba <USB_ReadPMA>
 8004dc0:	e07c      	b.n	8004ebc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	78db      	ldrb	r3, [r3, #3]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d108      	bne.n	8004ddc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f927 	bl	8005024 <HAL_PCD_EP_DB_Receive>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dda:	e06f      	b.n	8004ebc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d021      	beq.n	8004e7a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02a      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	6959      	ldr	r1, [r3, #20]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	891a      	ldrh	r2, [r3, #8]
 8004e72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e74:	f004 fea1 	bl	8009bba <USB_ReadPMA>
 8004e78:	e020      	b.n	8004ebc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3306      	adds	r3, #6
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	6959      	ldr	r1, [r3, #20]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	895a      	ldrh	r2, [r3, #10]
 8004eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eb8:	f004 fe7f 	bl	8009bba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ec2:	441a      	add	r2, r3
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ece:	441a      	add	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <PCD_EP_ISR_Handler+0x4c2>
 8004edc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d206      	bcs.n	8004ef4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f006 fc73 	bl	800b7d8 <HAL_PCD_DataOutStageCallback>
 8004ef2:	e005      	b.n	8004f00 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 fea2 	bl	8007c44 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d07e      	beq.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	843b      	strh	r3, [r7, #32]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	8c3b      	ldrh	r3, [r7, #32]
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	78db      	ldrb	r3, [r3, #3]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d00c      	beq.n	8004f78 <PCD_EP_ISR_Handler+0x554>
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d146      	bne.n	8004ffc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d141      	bne.n	8004ffc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	8bfb      	ldrh	r3, [r7, #30]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d906      	bls.n	8004fba <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	8bfb      	ldrh	r3, [r7, #30]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	619a      	str	r2, [r3, #24]
 8004fb8:	e002      	b.n	8004fc0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f006 fc1d 	bl	800b80e <HAL_PCD_DataInStageCallback>
 8004fd4:	e018      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	8bfb      	ldrh	r3, [r7, #30]
 8004fdc:	441a      	add	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	8bfb      	ldrh	r3, [r7, #30]
 8004fe8:	441a      	add	r2, r3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 fe25 	bl	8007c44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004ffa:	e005      	b.n	8005008 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ffc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f91b 	bl	800523e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005010:	b29b      	uxth	r3, r3
 8005012:	b21b      	sxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	f6ff ad0a 	blt.w	8004a2e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3738      	adds	r7, #56	; 0x38
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d07e      	beq.n	800513a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005044:	b29b      	uxth	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	3302      	adds	r3, #2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005064:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	8b7b      	ldrh	r3, [r7, #26]
 800506c:	429a      	cmp	r2, r3
 800506e:	d306      	bcc.n	800507e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	8b7b      	ldrh	r3, [r7, #26]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	619a      	str	r2, [r3, #24]
 800507c:	e002      	b.n	8005084 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d123      	bne.n	80050d4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	833b      	strh	r3, [r7, #24]
 80050a8:	8b3b      	ldrh	r3, [r7, #24]
 80050aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050ae:	833b      	strh	r3, [r7, #24]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8b3b      	ldrh	r3, [r7, #24]
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01f      	beq.n	800511e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	82fb      	strh	r3, [r7, #22]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8afb      	ldrh	r3, [r7, #22]
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800511e:	8b7b      	ldrh	r3, [r7, #26]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8087 	beq.w	8005234 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6959      	ldr	r1, [r3, #20]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	891a      	ldrh	r2, [r3, #8]
 8005132:	8b7b      	ldrh	r3, [r7, #26]
 8005134:	f004 fd41 	bl	8009bba <USB_ReadPMA>
 8005138:	e07c      	b.n	8005234 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005142:	b29b      	uxth	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	3306      	adds	r3, #6
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005162:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	429a      	cmp	r2, r3
 800516c:	d306      	bcc.n	800517c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	8b7b      	ldrh	r3, [r7, #26]
 8005174:	1ad2      	subs	r2, r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	619a      	str	r2, [r3, #24]
 800517a:	e002      	b.n	8005182 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d123      	bne.n	80051d2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	83fb      	strh	r3, [r7, #30]
 80051a6:	8bfb      	ldrh	r3, [r7, #30]
 80051a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051ac:	83fb      	strh	r3, [r7, #30]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8bfb      	ldrh	r3, [r7, #30]
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d11f      	bne.n	800521c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	83bb      	strh	r3, [r7, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	8bbb      	ldrh	r3, [r7, #28]
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800521c:	8b7b      	ldrh	r3, [r7, #26]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6959      	ldr	r1, [r3, #20]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	895a      	ldrh	r2, [r3, #10]
 800522e:	8b7b      	ldrh	r3, [r7, #26]
 8005230:	f004 fcc3 	bl	8009bba <USB_ReadPMA>
    }
  }

  return count;
 8005234:	8b7b      	ldrh	r3, [r7, #26]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b0a2      	sub	sp, #136	; 0x88
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81c7 	beq.w	80055e6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	3302      	adds	r3, #2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005280:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800528c:	429a      	cmp	r2, r3
 800528e:	d907      	bls.n	80052a0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005298:	1ad2      	subs	r2, r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	619a      	str	r2, [r3, #24]
 800529e:	e002      	b.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 80b9 	bne.w	8005422 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d126      	bne.n	8005306 <HAL_PCD_EP_DB_Transmit+0xc8>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	4413      	add	r3, r2
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	011a      	lsls	r2, r3, #4
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	4413      	add	r3, r2
 80052da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e01a      	b.n	800533c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d116      	bne.n	800533c <HAL_PCD_EP_DB_Transmit+0xfe>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531c:	b29b      	uxth	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	4413      	add	r3, r2
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	4413      	add	r3, r2
 8005330:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2200      	movs	r2, #0
 800533a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d126      	bne.n	8005398 <HAL_PCD_EP_DB_Transmit+0x15a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4413      	add	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	011a      	lsls	r2, r3, #4
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4413      	add	r3, r2
 800536c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005390:	b29a      	uxth	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	e017      	b.n	80053c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d113      	bne.n	80053c8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	4413      	add	r3, r2
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	011a      	lsls	r2, r3, #4
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2200      	movs	r2, #0
 80053c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f006 fa1d 	bl	800b80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 82d4 	beq.w	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	827b      	strh	r3, [r7, #18]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	8a7b      	ldrh	r3, [r7, #18]
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]
 8005420:	e2b2      	b.n	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d021      	beq.n	8005470 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800545c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	b29b      	uxth	r3, r3
 800546e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005476:	2b01      	cmp	r3, #1
 8005478:	f040 8286 	bne.w	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005484:	441a      	add	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005492:	441a      	add	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d309      	bcc.n	80054b8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	621a      	str	r2, [r3, #32]
 80054b6:	e015      	b.n	80054e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80054c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054ce:	e009      	b.n	80054e4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d155      	bne.n	8005598 <HAL_PCD_EP_DB_Transmit+0x35a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	4413      	add	r3, r2
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	011a      	lsls	r2, r3, #4
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	4413      	add	r3, r2
 800550e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	2b00      	cmp	r3, #0
 8005518:	d112      	bne.n	8005540 <HAL_PCD_EP_DB_Transmit+0x302>
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005524:	b29a      	uxth	r2, r3
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e047      	b.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	2b3e      	cmp	r3, #62	; 0x3e
 8005544:	d811      	bhi.n	800556a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
 800554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005558:	3301      	adds	r3, #1
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	b29b      	uxth	r3, r3
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	b29a      	uxth	r2, r3
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e032      	b.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x392>
 800556a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <HAL_PCD_EP_DB_Transmit+0x342>
 800557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557c:	3b01      	subs	r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005590:	b29a      	uxth	r2, r3
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e01b      	b.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d117      	bne.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x392>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b4:	4413      	add	r3, r2
 80055b6:	643b      	str	r3, [r7, #64]	; 0x40
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	4413      	add	r3, r2
 80055c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	891a      	ldrh	r2, [r3, #8]
 80055dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f004 faa6 	bl	8009b30 <USB_WritePMA>
 80055e4:	e1d0      	b.n	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	3306      	adds	r3, #6
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800561a:	429a      	cmp	r2, r3
 800561c:	d307      	bcc.n	800562e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	619a      	str	r2, [r3, #24]
 800562c:	e002      	b.n	8005634 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 80c4 	bne.w	80057c6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d126      	bne.n	8005694 <HAL_PCD_EP_DB_Transmit+0x456>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	4413      	add	r3, r2
 800565c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	4413      	add	r3, r2
 8005668:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800566c:	66bb      	str	r3, [r7, #104]	; 0x68
 800566e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005678:	b29a      	uxth	r2, r3
 800567a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e01a      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x48c>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d116      	bne.n	80056ca <HAL_PCD_EP_DB_Transmit+0x48c>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	677b      	str	r3, [r7, #116]	; 0x74
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b0:	4413      	add	r3, r2
 80056b2:	677b      	str	r3, [r7, #116]	; 0x74
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056bc:	4413      	add	r3, r2
 80056be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c2:	673b      	str	r3, [r7, #112]	; 0x70
 80056c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c6:	2200      	movs	r2, #0
 80056c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d12f      	bne.n	8005738 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056f0:	4413      	add	r3, r2
 80056f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	011a      	lsls	r2, r3, #4
 80056fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005700:	4413      	add	r3, r2
 8005702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800570a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e017      	b.n	8005768 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d113      	bne.n	8005768 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574e:	4413      	add	r3, r2
 8005750:	67bb      	str	r3, [r7, #120]	; 0x78
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	011a      	lsls	r2, r3, #4
 8005758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575a:	4413      	add	r3, r2
 800575c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005760:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005764:	2200      	movs	r2, #0
 8005766:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f006 f84d 	bl	800b80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 8104 	bne.w	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
 80057c4:	e0e0      	b.n	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d121      	bne.n	8005814 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800581a:	2b01      	cmp	r3, #1
 800581c:	f040 80b4 	bne.w	8005988 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005828:	441a      	add	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	69da      	ldr	r2, [r3, #28]
 8005832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005836:	441a      	add	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	d309      	bcc.n	800585c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	621a      	str	r2, [r3, #32]
 800585a:	e015      	b.n	8005888 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005872:	e009      	b.n	8005888 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	667b      	str	r3, [r7, #100]	; 0x64
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d155      	bne.n	8005942 <HAL_PCD_EP_DB_Transmit+0x704>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058aa:	4413      	add	r3, r2
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d112      	bne.n	80058ea <HAL_PCD_EP_DB_Transmit+0x6ac>
 80058c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	e044      	b.n	8005974 <HAL_PCD_EP_DB_Transmit+0x736>
 80058ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d811      	bhi.n	8005914 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	657b      	str	r3, [r7, #84]	; 0x54
 80058f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005902:	3301      	adds	r3, #1
 8005904:	657b      	str	r3, [r7, #84]	; 0x54
 8005906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005908:	b29b      	uxth	r3, r3
 800590a:	029b      	lsls	r3, r3, #10
 800590c:	b29a      	uxth	r2, r3
 800590e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e02f      	b.n	8005974 <HAL_PCD_EP_DB_Transmit+0x736>
 8005914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	657b      	str	r3, [r7, #84]	; 0x54
 800591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005926:	3b01      	subs	r3, #1
 8005928:	657b      	str	r3, [r7, #84]	; 0x54
 800592a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593a:	b29a      	uxth	r2, r3
 800593c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e018      	b.n	8005974 <HAL_PCD_EP_DB_Transmit+0x736>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d114      	bne.n	8005974 <HAL_PCD_EP_DB_Transmit+0x736>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005958:	4413      	add	r3, r2
 800595a:	667b      	str	r3, [r7, #100]	; 0x64
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	011a      	lsls	r2, r3, #4
 8005962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005964:	4413      	add	r3, r2
 8005966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800596a:	663b      	str	r3, [r7, #96]	; 0x60
 800596c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596e:	b29a      	uxth	r2, r3
 8005970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005972:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6959      	ldr	r1, [r3, #20]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	895a      	ldrh	r2, [r3, #10]
 8005980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005982:	b29b      	uxth	r3, r3
 8005984:	f004 f8d4 	bl	8009b30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	823b      	strh	r3, [r7, #16]
 80059a4:	8a3b      	ldrh	r3, [r7, #16]
 80059a6:	f083 0310 	eor.w	r3, r3, #16
 80059aa:	823b      	strh	r3, [r7, #16]
 80059ac:	8a3b      	ldrh	r3, [r7, #16]
 80059ae:	f083 0320 	eor.w	r3, r3, #32
 80059b2:	823b      	strh	r3, [r7, #16]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	8a3b      	ldrh	r3, [r7, #16]
 80059c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3788      	adds	r7, #136	; 0x88
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	607b      	str	r3, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	817b      	strh	r3, [r7, #10]
 80059f0:	4613      	mov	r3, r2
 80059f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80059f4:	897b      	ldrh	r3, [r7, #10]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a00:	897b      	ldrh	r3, [r7, #10]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e009      	b.n	8005a2c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a18:	897a      	ldrh	r2, [r7, #10]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a2c:	893b      	ldrh	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	80da      	strh	r2, [r3, #6]
 8005a40:	e00b      	b.n	8005a5a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2201      	movs	r2, #1
 8005a46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e272      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8087 	beq.w	8005b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a88:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d00c      	beq.n	8005aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a94:	4b8f      	ldr	r3, [pc, #572]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d112      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x5e>
 8005aa0:	4b8c      	ldr	r3, [pc, #560]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aae:	4b89      	ldr	r3, [pc, #548]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06c      	beq.n	8005b94 <HAL_RCC_OscConfig+0x12c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d168      	bne.n	8005b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e24c      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x76>
 8005ad0:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7f      	ldr	r2, [pc, #508]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e02e      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x98>
 8005ae6:	4b7b      	ldr	r3, [pc, #492]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7a      	ldr	r2, [pc, #488]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b78      	ldr	r3, [pc, #480]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a77      	ldr	r2, [pc, #476]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e01d      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCC_OscConfig+0xbc>
 8005b0a:	4b72      	ldr	r3, [pc, #456]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a71      	ldr	r2, [pc, #452]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b6f      	ldr	r3, [pc, #444]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6e      	ldr	r2, [pc, #440]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e00b      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005b24:	4b6b      	ldr	r3, [pc, #428]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6a      	ldr	r2, [pc, #424]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	4b68      	ldr	r3, [pc, #416]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a67      	ldr	r2, [pc, #412]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d013      	beq.n	8005b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b44:	f7fd ff76 	bl	8003a34 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7fd ff72 	bl	8003a34 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	; 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e200      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0xe4>
 8005b6a:	e014      	b.n	8005b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fd ff62 	bl	8003a34 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fd ff5e 	bl	8003a34 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e1ec      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b86:	4b53      	ldr	r3, [pc, #332]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x10c>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d063      	beq.n	8005c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ba2:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bae:	4b49      	ldr	r3, [pc, #292]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d11c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x18c>
 8005bba:	4b46      	ldr	r3, [pc, #280]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d116      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc6:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_RCC_OscConfig+0x176>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e1c0      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4939      	ldr	r1, [pc, #228]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf2:	e03a      	b.n	8005c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d020      	beq.n	8005c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bfc:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCC_OscConfig+0x270>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fd ff17 	bl	8003a34 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c0a:	f7fd ff13 	bl	8003a34 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1a1      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1c:	4b2d      	ldr	r3, [pc, #180]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4927      	ldr	r1, [pc, #156]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <HAL_RCC_OscConfig+0x270>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd fef6 	bl	8003a34 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fef2 	bl	8003a34 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e180      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d03a      	beq.n	8005cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d019      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c7e:	4b17      	ldr	r3, [pc, #92]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c84:	f7fd fed6 	bl	8003a34 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8c:	f7fd fed2 	bl	8003a34 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e160      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005caa:	2001      	movs	r0, #1
 8005cac:	f000 faa6 	bl	80061fc <RCC_Delay>
 8005cb0:	e01c      	b.n	8005cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb8:	f7fd febc 	bl	8003a34 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cbe:	e00f      	b.n	8005ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc0:	f7fd feb8 	bl	8003a34 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d908      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e146      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
 8005cd2:	bf00      	nop
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	42420000 	.word	0x42420000
 8005cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce0:	4b92      	ldr	r3, [pc, #584]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e9      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a6 	beq.w	8005e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfe:	4b8b      	ldr	r3, [pc, #556]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4a87      	ldr	r2, [pc, #540]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	61d3      	str	r3, [r2, #28]
 8005d16:	4b85      	ldr	r3, [pc, #532]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <HAL_RCC_OscConfig+0x4c8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d118      	bne.n	8005d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d32:	4b7f      	ldr	r3, [pc, #508]	; (8005f30 <HAL_RCC_OscConfig+0x4c8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a7e      	ldr	r2, [pc, #504]	; (8005f30 <HAL_RCC_OscConfig+0x4c8>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d3e:	f7fd fe79 	bl	8003a34 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fd fe75 	bl	8003a34 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b64      	cmp	r3, #100	; 0x64
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e103      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	4b75      	ldr	r3, [pc, #468]	; (8005f30 <HAL_RCC_OscConfig+0x4c8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x312>
 8005d6c:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	4a6e      	ldr	r2, [pc, #440]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6213      	str	r3, [r2, #32]
 8005d78:	e02d      	b.n	8005dd6 <HAL_RCC_OscConfig+0x36e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x334>
 8005d82:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	4a69      	ldr	r2, [pc, #420]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6213      	str	r3, [r2, #32]
 8005d8e:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	4a66      	ldr	r2, [pc, #408]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	6213      	str	r3, [r2, #32]
 8005d9a:	e01c      	b.n	8005dd6 <HAL_RCC_OscConfig+0x36e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCC_OscConfig+0x356>
 8005da4:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	4a60      	ldr	r2, [pc, #384]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6213      	str	r3, [r2, #32]
 8005db0:	4b5e      	ldr	r3, [pc, #376]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a5d      	ldr	r2, [pc, #372]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6213      	str	r3, [r2, #32]
 8005dbc:	e00b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x36e>
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a5a      	ldr	r2, [pc, #360]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6213      	str	r3, [r2, #32]
 8005dca:	4b58      	ldr	r3, [pc, #352]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	4a57      	ldr	r2, [pc, #348]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fd fe29 	bl	8003a34 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fd fe25 	bl	8003a34 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0b1      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0ee      	beq.n	8005de6 <HAL_RCC_OscConfig+0x37e>
 8005e08:	e014      	b.n	8005e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e0a:	f7fd fe13 	bl	8003a34 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fd fe0f 	bl	8003a34 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e09b      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e28:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ee      	bne.n	8005e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3a:	4b3c      	ldr	r3, [pc, #240]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4a3b      	ldr	r2, [pc, #236]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8087 	beq.w	8005f5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e50:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 030c 	and.w	r3, r3, #12
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d061      	beq.n	8005f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d146      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6a:	f7fd fde3 	bl	8003a34 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e72:	f7fd fddf 	bl	8003a34 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e06d      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e84:	4b29      	ldr	r3, [pc, #164]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f0      	bne.n	8005e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e98:	d108      	bne.n	8005eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	4921      	ldr	r1, [pc, #132]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a19      	ldr	r1, [r3, #32]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	491b      	ldr	r1, [pc, #108]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eca:	f7fd fdb3 	bl	8003a34 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed2:	f7fd fdaf 	bl	8003a34 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03d      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x46a>
 8005ef0:	e035      	b.n	8005f5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fd fd9c 	bl	8003a34 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f00:	f7fd fd98 	bl	8003a34 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e026      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <HAL_RCC_OscConfig+0x4c4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x498>
 8005f1e:	e01e      	b.n	8005f5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e019      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40007000 	.word	0x40007000
 8005f34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_RCC_OscConfig+0x500>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000

08005f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0d0      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b67      	ldr	r3, [pc, #412]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	4965      	ldr	r1, [pc, #404]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b63      	ldr	r3, [pc, #396]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0b8      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc8:	4b59      	ldr	r3, [pc, #356]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4a58      	ldr	r2, [pc, #352]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe0:	4b53      	ldr	r3, [pc, #332]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a52      	ldr	r2, [pc, #328]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fec:	4b50      	ldr	r3, [pc, #320]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	494d      	ldr	r1, [pc, #308]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d040      	beq.n	800608c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b47      	ldr	r3, [pc, #284]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d115      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e07f      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d107      	bne.n	800603a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e073      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603a:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e06b      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b39      	ldr	r3, [pc, #228]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4936      	ldr	r1, [pc, #216]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	4313      	orrs	r3, r2
 800605a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800605c:	f7fd fcea 	bl	8003a34 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fd fce6 	bl	8003a34 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e053      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d210      	bcs.n	80060bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 0207 	bic.w	r2, r3, #7
 80060a2:	4922      	ldr	r1, [pc, #136]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_RCC_ClockConfig+0x1c0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e032      	b.n	8006122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c8:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4916      	ldr	r1, [pc, #88]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060e6:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	490e      	ldr	r1, [pc, #56]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060fa:	f000 f821 	bl	8006140 <HAL_RCC_GetSysClockFreq>
 80060fe:	4602      	mov	r2, r0
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	490a      	ldr	r1, [pc, #40]	; (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <HAL_RCC_ClockConfig+0x1cc>)
 8006114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <HAL_RCC_ClockConfig+0x1d0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fd fc48 	bl	80039b0 <HAL_InitTick>

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40022000 	.word	0x40022000
 8006130:	40021000 	.word	0x40021000
 8006134:	0800c774 	.word	0x0800c774
 8006138:	20000230 	.word	0x20000230
 800613c:	20000234 	.word	0x20000234

08006140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006140:	b490      	push	{r4, r7}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006146:	4b29      	ldr	r3, [pc, #164]	; (80061ec <HAL_RCC_GetSysClockFreq+0xac>)
 8006148:	1d3c      	adds	r4, r7, #4
 800614a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800614c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006150:	f240 2301 	movw	r3, #513	; 0x201
 8006154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800616a:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b04      	cmp	r3, #4
 8006178:	d002      	beq.n	8006180 <HAL_RCC_GetSysClockFreq+0x40>
 800617a:	2b08      	cmp	r3, #8
 800617c:	d003      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0x46>
 800617e:	e02b      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006180:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006182:	623b      	str	r3, [r7, #32]
      break;
 8006184:	e02b      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	0c9b      	lsrs	r3, r3, #18
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	3328      	adds	r3, #40	; 0x28
 8006190:	443b      	add	r3, r7
 8006192:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006196:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	0c5b      	lsrs	r3, r3, #17
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	3328      	adds	r3, #40	; 0x28
 80061ae:	443b      	add	r3, r7
 80061b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4a0e      	ldr	r2, [pc, #56]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	e004      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	623b      	str	r3, [r7, #32]
      break;
 80061d6:	e002      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061da:	623b      	str	r3, [r7, #32]
      break;
 80061dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061de:	6a3b      	ldr	r3, [r7, #32]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3728      	adds	r7, #40	; 0x28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc90      	pop	{r4, r7}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	0800c72c 	.word	0x0800c72c
 80061f0:	40021000 	.word	0x40021000
 80061f4:	007a1200 	.word	0x007a1200
 80061f8:	003d0900 	.word	0x003d0900

080061fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <RCC_Delay+0x34>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <RCC_Delay+0x38>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	0a5b      	lsrs	r3, r3, #9
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006218:	bf00      	nop
  }
  while (Delay --);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	60fa      	str	r2, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f9      	bne.n	8006218 <RCC_Delay+0x1c>
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr
 8006230:	20000230 	.word	0x20000230
 8006234:	10624dd3 	.word	0x10624dd3

08006238 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d07d      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006258:	4b4f      	ldr	r3, [pc, #316]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10d      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006264:	4b4c      	ldr	r3, [pc, #304]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4a4b      	ldr	r2, [pc, #300]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626e:	61d3      	str	r3, [r2, #28]
 8006270:	4b49      	ldr	r3, [pc, #292]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	4b46      	ldr	r3, [pc, #280]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d118      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628c:	4b43      	ldr	r3, [pc, #268]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a42      	ldr	r2, [pc, #264]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006298:	f7fd fbcc 	bl	8003a34 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629e:	e008      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a0:	f7fd fbc8 	bl	8003a34 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	; 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e06d      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b2:	4b3a      	ldr	r3, [pc, #232]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062be:	4b36      	ldr	r3, [pc, #216]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02e      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d027      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062dc:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e6:	4b2e      	ldr	r3, [pc, #184]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062ec:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062f2:	4a29      	ldr	r2, [pc, #164]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006302:	f7fd fb97 	bl	8003a34 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006308:	e00a      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f7fd fb93 	bl	8003a34 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f241 3288 	movw	r2, #5000	; 0x1388
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e036      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006320:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ee      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4917      	ldr	r1, [pc, #92]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800633a:	4313      	orrs	r3, r2
 800633c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d105      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006344:	4b14      	ldr	r3, [pc, #80]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	490b      	ldr	r1, [pc, #44]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636a:	4313      	orrs	r3, r2
 800636c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	4904      	ldr	r1, [pc, #16]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006388:	4313      	orrs	r3, r2
 800638a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000
 800639c:	40007000 	.word	0x40007000
 80063a0:	42420440 	.word	0x42420440

080063a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e076      	b.n	80064a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c6:	d009      	beq.n	80063dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	61da      	str	r2, [r3, #28]
 80063ce:	e005      	b.n	80063dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fa ff96 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	ea42 0103 	orr.w	r1, r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	0c1a      	lsrs	r2, r3, #16
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f002 0204 	and.w	r2, r2, #4
 8006482:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69da      	ldr	r2, [r3, #28]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_SPI_Transmit+0x22>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e126      	b.n	800671c <HAL_SPI_Transmit+0x270>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064d6:	f7fd faad 	bl	8003a34 <HAL_GetTick>
 80064da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d002      	beq.n	80064f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
 80064ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064f0:	e10b      	b.n	800670a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x52>
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006502:	e102      	b.n	800670a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2203      	movs	r2, #3
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654a:	d10f      	bne.n	800656c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d007      	beq.n	800658a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006592:	d14b      	bne.n	800662c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_SPI_Transmit+0xf6>
 800659c:	8afb      	ldrh	r3, [r7, #22]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d13e      	bne.n	8006620 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	881a      	ldrh	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065c6:	e02b      	b.n	8006620 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d112      	bne.n	80065fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	1c9a      	adds	r2, r3, #2
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065fa:	e011      	b.n	8006620 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fc:	f7fd fa1a 	bl	8003a34 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d803      	bhi.n	8006614 <HAL_SPI_Transmit+0x168>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006612:	d102      	bne.n	800661a <HAL_SPI_Transmit+0x16e>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800661e:	e074      	b.n	800670a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ce      	bne.n	80065c8 <HAL_SPI_Transmit+0x11c>
 800662a:	e04c      	b.n	80066c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_SPI_Transmit+0x18e>
 8006634:	8afb      	ldrh	r3, [r7, #22]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d140      	bne.n	80066bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006660:	e02c      	b.n	80066bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d113      	bne.n	8006698 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	86da      	strh	r2, [r3, #54]	; 0x36
 8006696:	e011      	b.n	80066bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006698:	f7fd f9cc 	bl	8003a34 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d803      	bhi.n	80066b0 <HAL_SPI_Transmit+0x204>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ae:	d102      	bne.n	80066b6 <HAL_SPI_Transmit+0x20a>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066ba:	e026      	b.n	800670a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1cd      	bne.n	8006662 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f8b2 	bl	8006834 <SPI_EndRxTxTransaction>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e000      	b.n	800670a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800671a:	7ffb      	ldrb	r3, [r7, #31]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006734:	f7fd f97e 	bl	8003a34 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4413      	add	r3, r2
 8006742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006744:	f7fd f976 	bl	8003a34 <HAL_GetTick>
 8006748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800674a:	4b39      	ldr	r3, [pc, #228]	; (8006830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	015b      	lsls	r3, r3, #5
 8006750:	0d1b      	lsrs	r3, r3, #20
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800675a:	e054      	b.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006762:	d050      	beq.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006764:	f7fd f966 	bl	8003a34 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	429a      	cmp	r2, r3
 8006772:	d902      	bls.n	800677a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d13d      	bne.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d111      	bne.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679c:	d004      	beq.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	d107      	bne.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d10f      	bne.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e017      	b.n	8006826 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3b01      	subs	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	429a      	cmp	r2, r3
 8006822:	d19b      	bne.n	800675c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000230 	.word	0x20000230

08006834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff6a 	bl	8006724 <SPI_WaitFlagStateUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e000      	b.n	8006868 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e041      	b.n	8006906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fa fd84 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f000 fa9e 	bl	8006df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	d001      	beq.n	8006928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e03a      	b.n	800699e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <HAL_TIM_Base_Start_IT+0x98>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00e      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x58>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006952:	d009      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x58>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <HAL_TIM_Base_Start_IT+0x9c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x58>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d111      	bne.n	800698c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b06      	cmp	r3, #6
 8006978:	d010      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698a:	e007      	b.n	800699c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800

080069b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80069d6:	4013      	ands	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10f      	bne.n	80069fc <HAL_TIM_Base_Stop_IT+0x48>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a1a      	ldr	r2, [r3, #32]
 80069e2:	f240 4344 	movw	r3, #1092	; 0x444
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_Base_Stop_IT+0x48>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0201 	bic.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d122      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0202 	mvn.w	r2, #2
 8006a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9b1 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9a4 	bl	8006da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9b3 	bl	8006dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d122      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d11b      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0204 	mvn.w	r2, #4
 8006a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f987 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f97a 	bl	8006da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f989 	bl	8006dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0208 	mvn.w	r2, #8
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f95d 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f950 	bl	8006da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f95f 	bl	8006dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0210 	mvn.w	r2, #16
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f933 	bl	8006dba <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f926 	bl	8006da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f935 	bl	8006dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0201 	mvn.w	r2, #1
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7f9 fbb6 	bl	8000300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bac:	2b80      	cmp	r3, #128	; 0x80
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa77 	bl	80070ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d10e      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8f9 	bl	8006dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d10e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0220 	mvn.w	r2, #32
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa42 	bl	800709c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIM_ConfigClockSource+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e0b3      	b.n	8006da0 <HAL_TIM_ConfigClockSource+0x180>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c70:	d03e      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0xd0>
 8006c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c76:	f200 8087 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	f000 8085 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d87f      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d01a      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0xa2>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d87b      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006c90:	2b60      	cmp	r3, #96	; 0x60
 8006c92:	d050      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x116>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d877      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006c98:	2b50      	cmp	r3, #80	; 0x50
 8006c9a:	d03c      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0xf6>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d873      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d058      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x136>
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d86f      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d064      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x156>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d86b      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d060      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x156>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d867      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d05c      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x156>
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d05a      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006cc0:	e062      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6899      	ldr	r1, [r3, #8]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f000 f966 	bl	8006fa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	609a      	str	r2, [r3, #8]
      break;
 8006cee:	e04e      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f000 f94f 	bl	8006fa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d12:	609a      	str	r2, [r3, #8]
      break;
 8006d14:	e03b      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 f8c6 	bl	8006eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2150      	movs	r1, #80	; 0x50
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f91d 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 8006d34:	e02b      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 f8e4 	bl	8006f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2160      	movs	r1, #96	; 0x60
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f90d 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 8006d54:	e01b      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6859      	ldr	r1, [r3, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f000 f8a6 	bl	8006eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2140      	movs	r1, #64	; 0x40
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f8fd 	bl	8006f6e <TIM_ITRx_SetConfig>
      break;
 8006d74:	e00b      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 f8f4 	bl	8006f6e <TIM_ITRx_SetConfig>
        break;
 8006d86:	e002      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <TIM_Base_SetConfig+0xb8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_Base_SetConfig+0x30>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d007      	beq.n	8006e20 <TIM_Base_SetConfig+0x30>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a26      	ldr	r2, [pc, #152]	; (8006eac <TIM_Base_SetConfig+0xbc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0x30>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <TIM_Base_SetConfig+0xc0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d108      	bne.n	8006e32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <TIM_Base_SetConfig+0xb8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <TIM_Base_SetConfig+0x62>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e40:	d007      	beq.n	8006e52 <TIM_Base_SetConfig+0x62>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <TIM_Base_SetConfig+0xbc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_Base_SetConfig+0x62>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <TIM_Base_SetConfig+0xc0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d108      	bne.n	8006e64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a07      	ldr	r2, [pc, #28]	; (8006ea8 <TIM_Base_SetConfig+0xb8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d103      	bne.n	8006e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	615a      	str	r2, [r3, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800

08006eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f023 0201 	bic.w	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 030a 	bic.w	r3, r3, #10
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f023 0210 	bic.w	r2, r3, #16
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	031b      	lsls	r3, r3, #12
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 0307 	orr.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b087      	sub	sp, #28
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	021a      	lsls	r2, r3, #8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	609a      	str	r2, [r3, #8]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bc80      	pop	{r7}
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e046      	b.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a16      	ldr	r2, [pc, #88]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d009      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a12      	ldr	r2, [pc, #72]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a10      	ldr	r2, [pc, #64]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10c      	bne.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4313      	orrs	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40000400 	.word	0x40000400
 8007098:	40000800 	.word	0x40000800

0800709c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070c0:	b084      	sub	sp, #16
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	f107 0014 	add.w	r0, r7, #20
 80070ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	b004      	add	sp, #16
 80070de:	4770      	bx	lr

080070e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007114:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007118:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	b29b      	uxth	r3, r3
 8007126:	43db      	mvns	r3, r3
 8007128:	b29b      	uxth	r3, r3
 800712a:	4013      	ands	r3, r2
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007158:	b084      	sub	sp, #16
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	f107 0014 	add.w	r0, r7, #20
 8007166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	b004      	add	sp, #16
 8007196:	4770      	bx	lr

08007198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007198:	b480      	push	{r7}
 800719a:	b09b      	sub	sp, #108	; 0x6c
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	78db      	ldrb	r3, [r3, #3]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d81f      	bhi.n	800720a <USB_ActivateEndpoint+0x72>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USB_ActivateEndpoint+0x38>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007213 	.word	0x08007213
 80071dc:	080071ef 	.word	0x080071ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80071e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071ec:	e012      	b.n	8007214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80071f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071fa:	e00b      	b.n	8007214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007204:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007208:	e004      	b.n	8007214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007210:	e000      	b.n	8007214 <USB_ActivateEndpoint+0x7c>
      break;
 8007212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800722e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	b29a      	uxth	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 8149 	bne.w	8007518 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8084 	beq.w	8007398 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729a:	b29b      	uxth	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	81fb      	strh	r3, [r7, #14]
 80072d2:	89fb      	ldrh	r3, [r7, #14]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <USB_ActivateEndpoint+0x17c>
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	81bb      	strh	r3, [r7, #12]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	89bb      	ldrh	r3, [r7, #12]
 8007300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	78db      	ldrb	r3, [r3, #3]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d020      	beq.n	800735e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	813b      	strh	r3, [r7, #8]
 8007334:	893b      	ldrh	r3, [r7, #8]
 8007336:	f083 0320 	eor.w	r3, r3, #32
 800733a:	813b      	strh	r3, [r7, #8]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	893b      	ldrh	r3, [r7, #8]
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
 800735c:	e27f      	b.n	800785e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007374:	817b      	strh	r3, [r7, #10]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	897b      	ldrh	r3, [r7, #10]
 8007382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]
 8007396:	e262      	b.n	800785e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	4413      	add	r3, r2
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	011a      	lsls	r2, r3, #4
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	88db      	ldrh	r3, [r3, #6]
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	4413      	add	r3, r2
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	011a      	lsls	r2, r3, #4
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	4413      	add	r3, r2
 80073ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ee:	623b      	str	r3, [r7, #32]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d112      	bne.n	800741e <USB_ActivateEndpoint+0x286>
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007402:	b29a      	uxth	r2, r3
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007416:	b29a      	uxth	r2, r3
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	e02f      	b.n	800747e <USB_ActivateEndpoint+0x2e6>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b3e      	cmp	r3, #62	; 0x3e
 8007424:	d813      	bhi.n	800744e <USB_ActivateEndpoint+0x2b6>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	663b      	str	r3, [r7, #96]	; 0x60
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <USB_ActivateEndpoint+0x2a8>
 800743a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800743c:	3301      	adds	r3, #1
 800743e:	663b      	str	r3, [r7, #96]	; 0x60
 8007440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29a      	uxth	r2, r3
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e017      	b.n	800747e <USB_ActivateEndpoint+0x2e6>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	663b      	str	r3, [r7, #96]	; 0x60
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <USB_ActivateEndpoint+0x2d0>
 8007462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007464:	3b01      	subs	r3, #1
 8007466:	663b      	str	r3, [r7, #96]	; 0x60
 8007468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800746a:	b29b      	uxth	r3, r3
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	b29b      	uxth	r3, r3
 8007470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007478:	b29a      	uxth	r2, r3
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	83fb      	strh	r3, [r7, #30]
 800748c:	8bfb      	ldrh	r3, [r7, #30]
 800748e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01b      	beq.n	80074ce <USB_ActivateEndpoint+0x336>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	83bb      	strh	r3, [r7, #28]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	8bbb      	ldrh	r3, [r7, #28]
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e4:	837b      	strh	r3, [r7, #26]
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074ec:	837b      	strh	r3, [r7, #26]
 80074ee:	8b7b      	ldrh	r3, [r7, #26]
 80074f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074f4:	837b      	strh	r3, [r7, #26]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	441a      	add	r2, r3
 8007500:	8b7b      	ldrh	r3, [r7, #26]
 8007502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]
 8007516:	e1a2      	b.n	800785e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007548:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007550:	b29b      	uxth	r3, r3
 8007552:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	65bb      	str	r3, [r7, #88]	; 0x58
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007564:	4413      	add	r3, r2
 8007566:	65bb      	str	r3, [r7, #88]	; 0x58
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	011a      	lsls	r2, r3, #4
 800756e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007570:	4413      	add	r3, r2
 8007572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007576:	657b      	str	r3, [r7, #84]	; 0x54
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	891b      	ldrh	r3, [r3, #8]
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	b29b      	uxth	r3, r3
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	653b      	str	r3, [r7, #80]	; 0x50
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007598:	4413      	add	r3, r2
 800759a:	653b      	str	r3, [r7, #80]	; 0x50
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	011a      	lsls	r2, r3, #4
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80075aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	895b      	ldrh	r3, [r3, #10]
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 8091 	bne.w	80076e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01b      	beq.n	8007616 <USB_ActivateEndpoint+0x47e>
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	441a      	add	r2, r3
 8007600:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800760e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007612:	b29b      	uxth	r3, r3
 8007614:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	873b      	strh	r3, [r7, #56]	; 0x38
 8007624:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d01b      	beq.n	8007666 <USB_ActivateEndpoint+0x4ce>
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007644:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800767e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007680:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007684:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007686:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800768c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800769a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]
 80076e6:	e0ba      	b.n	800785e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01d      	beq.n	8007740 <USB_ActivateEndpoint+0x5a8>
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	441a      	add	r2, r3
 8007728:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800772c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773c:	b29b      	uxth	r3, r3
 800773e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007750:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01d      	beq.n	8007798 <USB_ActivateEndpoint+0x600>
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	78db      	ldrb	r3, [r3, #3]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d024      	beq.n	80077ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80077ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80077be:	f083 0320 	eor.w	r3, r3, #32
 80077c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	441a      	add	r2, r3
 80077d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
 80077e8:	e01d      	b.n	8007826 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	b29b      	uxth	r3, r3
 8007824:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800784a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785a:	b29b      	uxth	r3, r3
 800785c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800785e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007862:	4618      	mov	r0, r3
 8007864:	376c      	adds	r7, #108	; 0x6c
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b08d      	sub	sp, #52	; 0x34
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	7b1b      	ldrb	r3, [r3, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f040 808e 	bne.w	800799c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d044      	beq.n	8007912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	81bb      	strh	r3, [r7, #12]
 8007896:	89bb      	ldrh	r3, [r7, #12]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01b      	beq.n	80078d8 <USB_DeactivateEndpoint+0x6c>
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	817b      	strh	r3, [r7, #10]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	441a      	add	r2, r3
 80078c2:	897b      	ldrh	r3, [r7, #10]
 80078c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ee:	813b      	strh	r3, [r7, #8]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	893b      	ldrh	r3, [r7, #8]
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]
 8007910:	e192      	b.n	8007c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	827b      	strh	r3, [r7, #18]
 8007920:	8a7b      	ldrh	r3, [r7, #18]
 8007922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01b      	beq.n	8007962 <USB_DeactivateEndpoint+0xf6>
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	823b      	strh	r3, [r7, #16]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	441a      	add	r2, r3
 800794c:	8a3b      	ldrh	r3, [r7, #16]
 800794e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800795a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795e:	b29b      	uxth	r3, r3
 8007960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007978:	81fb      	strh	r3, [r7, #14]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	441a      	add	r2, r3
 8007984:	89fb      	ldrh	r3, [r7, #14]
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]
 800799a:	e14d      	b.n	8007c38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 80a5 	bne.w	8007af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	843b      	strh	r3, [r7, #32]
 80079b4:	8c3b      	ldrh	r3, [r7, #32]
 80079b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01b      	beq.n	80079f6 <USB_DeactivateEndpoint+0x18a>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	83fb      	strh	r3, [r7, #30]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	8bfb      	ldrh	r3, [r7, #30]
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	83bb      	strh	r3, [r7, #28]
 8007a04:	8bbb      	ldrh	r3, [r7, #28]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d01b      	beq.n	8007a46 <USB_DeactivateEndpoint+0x1da>
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	837b      	strh	r3, [r7, #26]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	441a      	add	r2, r3
 8007a30:	8b7b      	ldrh	r3, [r7, #26]
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5c:	833b      	strh	r3, [r7, #24]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	441a      	add	r2, r3
 8007a68:	8b3b      	ldrh	r3, [r7, #24]
 8007a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a94:	82fb      	strh	r3, [r7, #22]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	441a      	add	r2, r3
 8007aa0:	8afb      	ldrh	r3, [r7, #22]
 8007aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	82bb      	strh	r3, [r7, #20]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	8abb      	ldrh	r3, [r7, #20]
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
 8007aee:	e0a3      	b.n	8007c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01b      	beq.n	8007b40 <USB_DeactivateEndpoint+0x2d4>
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	441a      	add	r2, r3
 8007b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01b      	beq.n	8007b90 <USB_DeactivateEndpoint+0x324>
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3734      	adds	r7, #52	; 0x34
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b0cc      	sub	sp, #304	; 0x130
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c52:	6018      	str	r0, [r3, #0]
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	f041 817d 	bne.w	8008f6a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d908      	bls.n	8007c9e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c9c:	e007      	b.n	8007cae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d152      	bne.n	8007d64 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6959      	ldr	r1, [r3, #20]
 8007cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	88da      	ldrh	r2, [r3, #6]
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ce0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ce4:	6800      	ldr	r0, [r0, #0]
 8007ce6:	f001 ff23 	bl	8009b30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007cf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cf6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d1c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	440a      	add	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	011a      	lsls	r2, r3, #4
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	f001 b8b5 	b.w	8008ece <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	78db      	ldrb	r3, [r3, #3]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f040 84c6 	bne.w	8008702 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	f240 8443 	bls.w	800861a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 823e 	beq.w	80082b2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e42:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f040 809a 	bne.w	8007f90 <USB_EPStartXfer+0x34c>
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e68:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4619      	mov	r1, r3
 8007e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e8e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	440a      	add	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	011a      	lsls	r2, r3, #4
 8007ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d122      	bne.n	8007f0e <USB_EPStartXfer+0x2ca>
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e079      	b.n	8008002 <USB_EPStartXfer+0x3be>
 8007f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f12:	2b3e      	cmp	r3, #62	; 0x3e
 8007f14:	d81b      	bhi.n	8007f4e <USB_EPStartXfer+0x30a>
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <USB_EPStartXfer+0x2f2>
 8007f2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f30:	3301      	adds	r3, #1
 8007f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e059      	b.n	8008002 <USB_EPStartXfer+0x3be>
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <USB_EPStartXfer+0x32a>
 8007f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	029b      	lsls	r3, r3, #10
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e038      	b.n	8008002 <USB_EPStartXfer+0x3be>
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d130      	bne.n	8008002 <USB_EPStartXfer+0x3be>
 8007fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007fba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fbe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	011a      	lsls	r2, r3, #4
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	895b      	ldrh	r3, [r3, #10]
 800800e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6959      	ldr	r1, [r3, #20]
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	b29b      	uxth	r3, r3
 8008024:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008028:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800802c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008030:	6800      	ldr	r0, [r0, #0]
 8008032:	f001 fd7d 	bl	8009b30 <USB_WritePMA>
            ep->xfer_buff += len;
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695a      	ldr	r2, [r3, #20]
 8008042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008046:	441a      	add	r2, r3
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d90f      	bls.n	8008090 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	1ad2      	subs	r2, r2, r3
 8008082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	621a      	str	r2, [r3, #32]
 800808e:	e00e      	b.n	80080ae <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80080a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f040 809a 	bne.w	80081f4 <USB_EPStartXfer+0x5b0>
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80080c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	4619      	mov	r1, r3
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80080ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080f2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	440a      	add	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	011a      	lsls	r2, r3, #4
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d122      	bne.n	8008172 <USB_EPStartXfer+0x52e>
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800813e:	b29a      	uxth	r2, r3
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008150:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008162:	b29a      	uxth	r2, r3
 8008164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008168:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e083      	b.n	800827a <USB_EPStartXfer+0x636>
 8008172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008176:	2b3e      	cmp	r3, #62	; 0x3e
 8008178:	d81b      	bhi.n	80081b2 <USB_EPStartXfer+0x56e>
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <USB_EPStartXfer+0x556>
 8008190:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008194:	3301      	adds	r3, #1
 8008196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800819a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800819e:	b29b      	uxth	r3, r3
 80081a0:	029b      	lsls	r3, r3, #10
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	e063      	b.n	800827a <USB_EPStartXfer+0x636>
 80081b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80081bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <USB_EPStartXfer+0x58e>
 80081c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80081d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	029b      	lsls	r3, r3, #10
 80081da:	b29b      	uxth	r3, r3
 80081dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	e042      	b.n	800827a <USB_EPStartXfer+0x636>
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d13a      	bne.n	800827a <USB_EPStartXfer+0x636>
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800820c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008210:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008226:	b29b      	uxth	r3, r3
 8008228:	4619      	mov	r1, r3
 800822a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008236:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	440a      	add	r2, r1
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	011a      	lsls	r2, r3, #4
 800824e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008252:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4413      	add	r3, r2
 800825a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826c:	b29a      	uxth	r2, r3
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800827a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	891b      	ldrh	r3, [r3, #8]
 8008286:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800828a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6959      	ldr	r1, [r3, #20]
 8008296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829a:	b29b      	uxth	r3, r3
 800829c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80082a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80082a8:	6800      	ldr	r0, [r0, #0]
 80082aa:	f001 fc41 	bl	8009b30 <USB_WritePMA>
 80082ae:	f000 be0e 	b.w	8008ece <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d16d      	bne.n	800839e <USB_EPStartXfer+0x75a>
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082dc:	b29b      	uxth	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e2:	4413      	add	r3, r2
 80082e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	011a      	lsls	r2, r3, #4
 80082f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f6:	4413      	add	r3, r2
 80082f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082fc:	647b      	str	r3, [r7, #68]	; 0x44
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d112      	bne.n	800832c <USB_EPStartXfer+0x6e8>
 8008306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008310:	b29a      	uxth	r2, r3
 8008312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008324:	b29a      	uxth	r2, r3
 8008326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008328:	801a      	strh	r2, [r3, #0]
 800832a:	e063      	b.n	80083f4 <USB_EPStartXfer+0x7b0>
 800832c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008330:	2b3e      	cmp	r3, #62	; 0x3e
 8008332:	d817      	bhi.n	8008364 <USB_EPStartXfer+0x720>
 8008334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800833e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d004      	beq.n	8008354 <USB_EPStartXfer+0x710>
 800834a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800834e:	3301      	adds	r3, #1
 8008350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008354:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008358:	b29b      	uxth	r3, r3
 800835a:	029b      	lsls	r3, r3, #10
 800835c:	b29a      	uxth	r2, r3
 800835e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	e047      	b.n	80083f4 <USB_EPStartXfer+0x7b0>
 8008364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <USB_EPStartXfer+0x740>
 800837a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800837e:	3b01      	subs	r3, #1
 8008380:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008384:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008388:	b29b      	uxth	r3, r3
 800838a:	029b      	lsls	r3, r3, #10
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	e02a      	b.n	80083f4 <USB_EPStartXfer+0x7b0>
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d122      	bne.n	80083f4 <USB_EPStartXfer+0x7b0>
 80083ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	653b      	str	r3, [r7, #80]	; 0x50
 80083ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ce:	4413      	add	r3, r2
 80083d0:	653b      	str	r3, [r7, #80]	; 0x50
 80083d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	011a      	lsls	r2, r3, #4
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	4413      	add	r3, r2
 80083e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	891b      	ldrh	r3, [r3, #8]
 8008400:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6959      	ldr	r1, [r3, #20]
 8008410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008414:	b29b      	uxth	r3, r3
 8008416:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800841a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800841e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008422:	6800      	ldr	r0, [r0, #0]
 8008424:	f001 fb84 	bl	8009b30 <USB_WritePMA>
            ep->xfer_buff += len;
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008438:	441a      	add	r2, r3
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a1a      	ldr	r2, [r3, #32]
 8008452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	429a      	cmp	r2, r3
 8008460:	d90f      	bls.n	8008482 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6a1a      	ldr	r2, [r3, #32]
 800846e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	621a      	str	r2, [r3, #32]
 8008480:	e00e      	b.n	80084a0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2200      	movs	r2, #0
 800849e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d16d      	bne.n	8008598 <USB_EPStartXfer+0x954>
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	4413      	add	r3, r2
 80084de:	63bb      	str	r3, [r7, #56]	; 0x38
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	011a      	lsls	r2, r3, #4
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
 80084f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d112      	bne.n	8008526 <USB_EPStartXfer+0x8e2>
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800850a:	b29a      	uxth	r2, r3
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851e:	b29a      	uxth	r2, r3
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e05d      	b.n	80085e2 <USB_EPStartXfer+0x99e>
 8008526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852a:	2b3e      	cmp	r3, #62	; 0x3e
 800852c:	d817      	bhi.n	800855e <USB_EPStartXfer+0x91a>
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <USB_EPStartXfer+0x90a>
 8008544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008548:	3301      	adds	r3, #1
 800854a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800854e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008552:	b29b      	uxth	r3, r3
 8008554:	029b      	lsls	r3, r3, #10
 8008556:	b29a      	uxth	r2, r3
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e041      	b.n	80085e2 <USB_EPStartXfer+0x99e>
 800855e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <USB_EPStartXfer+0x93a>
 8008574:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008578:	3b01      	subs	r3, #1
 800857a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800857e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008582:	b29b      	uxth	r3, r3
 8008584:	029b      	lsls	r3, r3, #10
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	e024      	b.n	80085e2 <USB_EPStartXfer+0x99e>
 8008598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d11c      	bne.n	80085e2 <USB_EPStartXfer+0x99e>
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	4413      	add	r3, r2
 80085be:	643b      	str	r3, [r7, #64]	; 0x40
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	011a      	lsls	r2, r3, #4
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	4413      	add	r3, r2
 80085d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085dc:	b29a      	uxth	r2, r3
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	895b      	ldrh	r3, [r3, #10]
 80085ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6959      	ldr	r1, [r3, #20]
 80085fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008602:	b29b      	uxth	r3, r3
 8008604:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008608:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800860c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008610:	6800      	ldr	r0, [r0, #0]
 8008612:	f001 fa8d 	bl	8009b30 <USB_WritePMA>
 8008616:	f000 bc5a 	b.w	8008ece <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800862a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800864c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008650:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	441a      	add	r2, r3
 800866e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	b29b      	uxth	r3, r3
 8008684:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800868a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a6:	4413      	add	r3, r2
 80086a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	011a      	lsls	r2, r3, #4
 80086b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ba:	4413      	add	r3, r2
 80086bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80086c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	891b      	ldrh	r3, [r3, #8]
 80086d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6959      	ldr	r1, [r3, #20]
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80086f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	f001 fa18 	bl	8009b30 <USB_WritePMA>
 8008700:	e3e5      	b.n	8008ece <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008728:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800872c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800874a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008752:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875a:	b29b      	uxth	r3, r3
 800875c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 81bc 	beq.w	8008b1c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d16d      	bne.n	800889e <USB_EPStartXfer+0xc5a>
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087dc:	b29b      	uxth	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e2:	4413      	add	r3, r2
 80087e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	011a      	lsls	r2, r3, #4
 80087f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f6:	4413      	add	r3, r2
 80087f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087fc:	677b      	str	r3, [r7, #116]	; 0x74
 80087fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d112      	bne.n	800882c <USB_EPStartXfer+0xbe8>
 8008806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008810:	b29a      	uxth	r2, r3
 8008812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008814:	801a      	strh	r2, [r3, #0]
 8008816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008824:	b29a      	uxth	r2, r3
 8008826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	e060      	b.n	80088ee <USB_EPStartXfer+0xcaa>
 800882c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008830:	2b3e      	cmp	r3, #62	; 0x3e
 8008832:	d817      	bhi.n	8008864 <USB_EPStartXfer+0xc20>
 8008834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800883e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d004      	beq.n	8008854 <USB_EPStartXfer+0xc10>
 800884a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800884e:	3301      	adds	r3, #1
 8008850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008854:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008858:	b29b      	uxth	r3, r3
 800885a:	029b      	lsls	r3, r3, #10
 800885c:	b29a      	uxth	r2, r3
 800885e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	e044      	b.n	80088ee <USB_EPStartXfer+0xcaa>
 8008864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800886e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <USB_EPStartXfer+0xc40>
 800887a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800887e:	3b01      	subs	r3, #1
 8008880:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008884:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008896:	b29a      	uxth	r2, r3
 8008898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e027      	b.n	80088ee <USB_EPStartXfer+0xcaa>
 800889e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d11f      	bne.n	80088ee <USB_EPStartXfer+0xcaa>
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088bc:	b29b      	uxth	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088c4:	4413      	add	r3, r2
 80088c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	011a      	lsls	r2, r3, #4
 80088d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088dc:	4413      	add	r3, r2
 80088de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80088ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	895b      	ldrh	r3, [r3, #10]
 80088fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6959      	ldr	r1, [r3, #20]
 800890a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890e:	b29b      	uxth	r3, r3
 8008910:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008914:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008918:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f001 f907 	bl	8009b30 <USB_WritePMA>
          ep->xfer_buff += len;
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008932:	441a      	add	r2, r3
 8008934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	d90f      	bls.n	800897c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800895c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a1a      	ldr	r2, [r3, #32]
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	1ad2      	subs	r2, r2, r3
 800896e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	621a      	str	r2, [r3, #32]
 800897a:	e00e      	b.n	800899a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800897c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800898c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800899a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8295 	beq.w	8008ece <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d16d      	bne.n	8008a90 <USB_EPStartXfer+0xe4c>
 80089b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	66bb      	str	r3, [r7, #104]	; 0x68
 80089c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089d4:	4413      	add	r3, r2
 80089d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80089d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	011a      	lsls	r2, r3, #4
 80089e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089e8:	4413      	add	r3, r2
 80089ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089ee:	667b      	str	r3, [r7, #100]	; 0x64
 80089f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d112      	bne.n	8008a1e <USB_EPStartXfer+0xdda>
 80089f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a06:	801a      	strh	r2, [r3, #0]
 8008a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	e063      	b.n	8008ae6 <USB_EPStartXfer+0xea2>
 8008a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a22:	2b3e      	cmp	r3, #62	; 0x3e
 8008a24:	d817      	bhi.n	8008a56 <USB_EPStartXfer+0xe12>
 8008a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <USB_EPStartXfer+0xe02>
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a40:	3301      	adds	r3, #1
 8008a42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	e047      	b.n	8008ae6 <USB_EPStartXfer+0xea2>
 8008a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <USB_EPStartXfer+0xe32>
 8008a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a70:	3b01      	subs	r3, #1
 8008a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	029b      	lsls	r3, r3, #10
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e02a      	b.n	8008ae6 <USB_EPStartXfer+0xea2>
 8008a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d122      	bne.n	8008ae6 <USB_EPStartXfer+0xea2>
 8008aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8008aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac0:	4413      	add	r3, r2
 8008ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	011a      	lsls	r2, r3, #4
 8008ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	891b      	ldrh	r3, [r3, #8]
 8008af2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6959      	ldr	r1, [r3, #20]
 8008b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b14:	6800      	ldr	r0, [r0, #0]
 8008b16:	f001 f80b 	bl	8009b30 <USB_WritePMA>
 8008b1a:	e1d8      	b.n	8008ece <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d178      	bne.n	8008c1e <USB_EPStartXfer+0xfda>
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	011a      	lsls	r2, r3, #4
 8008b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b68:	4413      	add	r3, r2
 8008b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <USB_EPStartXfer+0xf64>
 8008b7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	e06b      	b.n	8008c80 <USB_EPStartXfer+0x103c>
 8008ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bac:	2b3e      	cmp	r3, #62	; 0x3e
 8008bae:	d818      	bhi.n	8008be2 <USB_EPStartXfer+0xf9e>
 8008bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USB_EPStartXfer+0xf8c>
 8008bc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e04e      	b.n	8008c80 <USB_EPStartXfer+0x103c>
 8008be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USB_EPStartXfer+0xfbe>
 8008bf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	029b      	lsls	r3, r3, #10
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	e030      	b.n	8008c80 <USB_EPStartXfer+0x103c>
 8008c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d128      	bne.n	8008c80 <USB_EPStartXfer+0x103c>
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c52:	4413      	add	r3, r2
 8008c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	011a      	lsls	r2, r3, #4
 8008c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	891b      	ldrh	r3, [r3, #8]
 8008c8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6959      	ldr	r1, [r3, #20]
 8008c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ca6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008caa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	f000 ff3e 	bl	8009b30 <USB_WritePMA>
          ep->xfer_buff += len;
 8008cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc4:	441a      	add	r2, r3
 8008cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90f      	bls.n	8008d0e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a1a      	ldr	r2, [r3, #32]
 8008cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	621a      	str	r2, [r3, #32]
 8008d0c:	e00e      	b.n	8008d2c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80cc 	beq.w	8008ece <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d178      	bne.n	8008e46 <USB_EPStartXfer+0x1202>
 8008d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	461a      	mov	r2, r3
 8008d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d78:	4413      	add	r3, r2
 8008d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	011a      	lsls	r2, r3, #4
 8008d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d90:	4413      	add	r3, r2
 8008d92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d116      	bne.n	8008dd0 <USB_EPStartXfer+0x118c>
 8008da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dcc:	801a      	strh	r2, [r3, #0]
 8008dce:	e064      	b.n	8008e9a <USB_EPStartXfer+0x1256>
 8008dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8008dd6:	d818      	bhi.n	8008e0a <USB_EPStartXfer+0x11c6>
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <USB_EPStartXfer+0x11b4>
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df2:	3301      	adds	r3, #1
 8008df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	029b      	lsls	r3, r3, #10
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e047      	b.n	8008e9a <USB_EPStartXfer+0x1256>
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <USB_EPStartXfer+0x11e6>
 8008e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e24:	3b01      	subs	r3, #1
 8008e26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e029      	b.n	8008e9a <USB_EPStartXfer+0x1256>
 8008e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d121      	bne.n	8008e9a <USB_EPStartXfer+0x1256>
 8008e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	011a      	lsls	r2, r3, #4
 8008e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e84:	4413      	add	r3, r2
 8008e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	895b      	ldrh	r3, [r3, #10]
 8008ea6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6959      	ldr	r1, [r3, #20]
 8008eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ec0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ec4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ec8:	6800      	ldr	r0, [r0, #0]
 8008eca:	f000 fe31 	bl	8009b30 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ef0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efc:	8013      	strh	r3, [r2, #0]
 8008efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f02:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008f06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f0a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008f0e:	8812      	ldrh	r2, [r2, #0]
 8008f10:	f082 0210 	eor.w	r2, r2, #16
 8008f14:	801a      	strh	r2, [r3, #0]
 8008f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008f1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f22:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008f26:	8812      	ldrh	r2, [r2, #0]
 8008f28:	f082 0220 	eor.w	r2, r2, #32
 8008f2c:	801a      	strh	r2, [r3, #0]
 8008f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	8013      	strh	r3, [r2, #0]
 8008f66:	f000 bc9f 	b.w	80098a8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	7b1b      	ldrb	r3, [r3, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f040 80ae 	bne.w	80090d8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699a      	ldr	r2, [r3, #24]
 8008f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d917      	bls.n	8008fc8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699a      	ldr	r2, [r3, #24]
 8008fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb8:	1ad2      	subs	r2, r2, r3
 8008fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	619a      	str	r2, [r3, #24]
 8008fc6:	e00e      	b.n	8008fe6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009002:	b29b      	uxth	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800900a:	4413      	add	r3, r2
 800900c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	011a      	lsls	r2, r3, #4
 800901e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009022:	4413      	add	r3, r2
 8009024:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800902c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d116      	bne.n	8009062 <USB_EPStartXfer+0x141e>
 8009034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	b29b      	uxth	r3, r3
 800903c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009058:	b29a      	uxth	r2, r3
 800905a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	e3e8      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
 8009062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009066:	2b3e      	cmp	r3, #62	; 0x3e
 8009068:	d818      	bhi.n	800909c <USB_EPStartXfer+0x1458>
 800906a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <USB_EPStartXfer+0x1446>
 8009080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009084:	3301      	adds	r3, #1
 8009086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800908a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800908e:	b29b      	uxth	r3, r3
 8009090:	029b      	lsls	r3, r3, #10
 8009092:	b29a      	uxth	r2, r3
 8009094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009098:	801a      	strh	r2, [r3, #0]
 800909a:	e3cb      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
 800909c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <USB_EPStartXfer+0x1478>
 80090b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090b6:	3b01      	subs	r3, #1
 80090b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	029b      	lsls	r3, r3, #10
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	e3ad      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80090d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	f040 8200 	bne.w	80094ea <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 8091 	bne.w	800921e <USB_EPStartXfer+0x15da>
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800910a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009118:	b29b      	uxth	r3, r3
 800911a:	461a      	mov	r2, r3
 800911c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009120:	4413      	add	r3, r2
 8009122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	011a      	lsls	r2, r3, #4
 8009134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009138:	4413      	add	r3, r2
 800913a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800913e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d116      	bne.n	8009180 <USB_EPStartXfer+0x153c>
 8009152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800915e:	b29a      	uxth	r2, r3
 8009160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009176:	b29a      	uxth	r2, r3
 8009178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	e083      	b.n	8009288 <USB_EPStartXfer+0x1644>
 8009180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b3e      	cmp	r3, #62	; 0x3e
 800918e:	d820      	bhi.n	80091d2 <USB_EPStartXfer+0x158e>
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	085b      	lsrs	r3, r3, #1
 800919e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <USB_EPStartXfer+0x157c>
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ba:	3301      	adds	r3, #1
 80091bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	029b      	lsls	r3, r3, #10
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ce:	801a      	strh	r2, [r3, #0]
 80091d0:	e05a      	b.n	8009288 <USB_EPStartXfer+0x1644>
 80091d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	f003 031f 	and.w	r3, r3, #31
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <USB_EPStartXfer+0x15be>
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fc:	3b01      	subs	r3, #1
 80091fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009206:	b29b      	uxth	r3, r3
 8009208:	029b      	lsls	r3, r3, #10
 800920a:	b29b      	uxth	r3, r3
 800920c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009214:	b29a      	uxth	r2, r3
 8009216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e034      	b.n	8009288 <USB_EPStartXfer+0x1644>
 800921e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d12c      	bne.n	8009288 <USB_EPStartXfer+0x1644>
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800923c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009252:	4413      	add	r3, r2
 8009254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	011a      	lsls	r2, r3, #4
 8009266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800926a:	4413      	add	r3, r2
 800926c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	b29a      	uxth	r2, r3
 8009282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f040 8091 	bne.w	80093ca <USB_EPStartXfer+0x1786>
 80092a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092cc:	4413      	add	r3, r2
 80092ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	011a      	lsls	r2, r3, #4
 80092e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092e4:	4413      	add	r3, r2
 80092e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d116      	bne.n	800932c <USB_EPStartXfer+0x16e8>
 80092fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009322:	b29a      	uxth	r2, r3
 8009324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e07c      	b.n	8009426 <USB_EPStartXfer+0x17e2>
 800932c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b3e      	cmp	r3, #62	; 0x3e
 800933a:	d820      	bhi.n	800937e <USB_EPStartXfer+0x173a>
 800933c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800934e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d004      	beq.n	800936c <USB_EPStartXfer+0x1728>
 8009362:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009366:	3301      	adds	r3, #1
 8009368:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800936c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009370:	b29b      	uxth	r3, r3
 8009372:	029b      	lsls	r3, r3, #10
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e053      	b.n	8009426 <USB_EPStartXfer+0x17e2>
 800937e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d104      	bne.n	80093ae <USB_EPStartXfer+0x176a>
 80093a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80093a8:	3b01      	subs	r3, #1
 80093aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80093ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	029b      	lsls	r3, r3, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	e02d      	b.n	8009426 <USB_EPStartXfer+0x17e2>
 80093ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d125      	bne.n	8009426 <USB_EPStartXfer+0x17e2>
 80093da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093f0:	4413      	add	r3, r2
 80093f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	011a      	lsls	r2, r3, #4
 8009404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009408:	4413      	add	r3, r2
 800940a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800940e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	b29a      	uxth	r2, r3
 8009420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009424:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 81fe 	beq.w	8009834 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009458:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800945c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <USB_EPStartXfer+0x182c>
 8009464:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10d      	bne.n	800948c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009470:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009478:	2b00      	cmp	r3, #0
 800947a:	f040 81db 	bne.w	8009834 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800947e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	f040 81d4 	bne.w	8009834 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800948c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80094b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	441a      	add	r2, r3
 80094d0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80094d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8013      	strh	r3, [r2, #0]
 80094e8:	e1a4      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	f040 819a 	bne.w	8009830 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	429a      	cmp	r2, r3
 8009516:	d917      	bls.n	8009548 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009538:	1ad2      	subs	r2, r2, r3
 800953a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	619a      	str	r2, [r3, #24]
 8009546:	e00e      	b.n	8009566 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800955c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800956a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d178      	bne.n	8009668 <USB_EPStartXfer+0x1a24>
 8009576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009592:	b29b      	uxth	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800959a:	4413      	add	r3, r2
 800959c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	011a      	lsls	r2, r3, #4
 80095ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095b2:	4413      	add	r3, r2
 80095b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d116      	bne.n	80095f2 <USB_EPStartXfer+0x19ae>
 80095c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095d6:	801a      	strh	r2, [r3, #0]
 80095d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	e06b      	b.n	80096ca <USB_EPStartXfer+0x1a86>
 80095f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f6:	2b3e      	cmp	r3, #62	; 0x3e
 80095f8:	d818      	bhi.n	800962c <USB_EPStartXfer+0x19e8>
 80095fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <USB_EPStartXfer+0x19d6>
 8009610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009614:	3301      	adds	r3, #1
 8009616:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800961a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800961e:	b29b      	uxth	r3, r3
 8009620:	029b      	lsls	r3, r3, #10
 8009622:	b29a      	uxth	r2, r3
 8009624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	e04e      	b.n	80096ca <USB_EPStartXfer+0x1a86>
 800962c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009630:	095b      	lsrs	r3, r3, #5
 8009632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963a:	f003 031f 	and.w	r3, r3, #31
 800963e:	2b00      	cmp	r3, #0
 8009640:	d104      	bne.n	800964c <USB_EPStartXfer+0x1a08>
 8009642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009646:	3b01      	subs	r3, #1
 8009648:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800964c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009650:	b29b      	uxth	r3, r3
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	b29b      	uxth	r3, r3
 8009656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800965a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800965e:	b29a      	uxth	r2, r3
 8009660:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009664:	801a      	strh	r2, [r3, #0]
 8009666:	e030      	b.n	80096ca <USB_EPStartXfer+0x1a86>
 8009668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d128      	bne.n	80096ca <USB_EPStartXfer+0x1a86>
 8009678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009694:	b29b      	uxth	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	4413      	add	r3, r2
 800969e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	011a      	lsls	r2, r3, #4
 80096b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b4:	4413      	add	r3, r2
 80096b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d178      	bne.n	80097da <USB_EPStartXfer+0x1b96>
 80096e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970c:	4413      	add	r3, r2
 800970e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	011a      	lsls	r2, r3, #4
 8009720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009724:	4413      	add	r3, r2
 8009726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800972a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800972e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d116      	bne.n	8009764 <USB_EPStartXfer+0x1b20>
 8009736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009742:	b29a      	uxth	r2, r3
 8009744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800975a:	b29a      	uxth	r2, r3
 800975c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009760:	801a      	strh	r2, [r3, #0]
 8009762:	e067      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009768:	2b3e      	cmp	r3, #62	; 0x3e
 800976a:	d818      	bhi.n	800979e <USB_EPStartXfer+0x1b5a>
 800976c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <USB_EPStartXfer+0x1b48>
 8009782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009786:	3301      	adds	r3, #1
 8009788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800978c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009790:	b29b      	uxth	r3, r3
 8009792:	029b      	lsls	r3, r3, #10
 8009794:	b29a      	uxth	r2, r3
 8009796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800979a:	801a      	strh	r2, [r3, #0]
 800979c:	e04a      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
 800979e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <USB_EPStartXfer+0x1b7a>
 80097b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097b8:	3b01      	subs	r3, #1
 80097ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	029b      	lsls	r3, r3, #10
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	e02c      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
 80097da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d124      	bne.n	8009834 <USB_EPStartXfer+0x1bf0>
 80097ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009800:	4413      	add	r3, r2
 8009802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	011a      	lsls	r2, r3, #4
 8009814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009818:	4413      	add	r3, r2
 800981a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800981e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009826:	b29a      	uxth	r2, r3
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e001      	b.n	8009834 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e03a      	b.n	80098aa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800985e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009862:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009866:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800986a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800986e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009872:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	441a      	add	r2, r3
 8009890:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d020      	beq.n	8009908 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098dc:	81bb      	strh	r3, [r7, #12]
 80098de:	89bb      	ldrh	r3, [r7, #12]
 80098e0:	f083 0310 	eor.w	r3, r3, #16
 80098e4:	81bb      	strh	r3, [r7, #12]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	441a      	add	r2, r3
 80098f0:	89bb      	ldrh	r3, [r7, #12]
 80098f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	b29b      	uxth	r3, r3
 8009904:	8013      	strh	r3, [r2, #0]
 8009906:	e01f      	b.n	8009948 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800991a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991e:	81fb      	strh	r3, [r7, #14]
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009926:	81fb      	strh	r3, [r7, #14]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	441a      	add	r2, r3
 8009932:	89fb      	ldrh	r3, [r7, #14]
 8009934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009944:	b29b      	uxth	r3, r3
 8009946:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	7b1b      	ldrb	r3, [r3, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	f040 809d 	bne.w	8009aa2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d04c      	beq.n	8009a0a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	823b      	strh	r3, [r7, #16]
 800997e:	8a3b      	ldrh	r3, [r7, #16]
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01b      	beq.n	80099c0 <USB_EPClearStall+0x6c>
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	81fb      	strh	r3, [r7, #14]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	89fb      	ldrh	r3, [r7, #14]
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	78db      	ldrb	r3, [r3, #3]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d06c      	beq.n	8009aa2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099de:	81bb      	strh	r3, [r7, #12]
 80099e0:	89bb      	ldrh	r3, [r7, #12]
 80099e2:	f083 0320 	eor.w	r3, r3, #32
 80099e6:	81bb      	strh	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	89bb      	ldrh	r3, [r7, #12]
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
 8009a08:	e04b      	b.n	8009aa2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	82fb      	strh	r3, [r7, #22]
 8009a18:	8afb      	ldrh	r3, [r7, #22]
 8009a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d01b      	beq.n	8009a5a <USB_EPClearStall+0x106>
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a38:	82bb      	strh	r3, [r7, #20]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	441a      	add	r2, r3
 8009a44:	8abb      	ldrh	r3, [r7, #20]
 8009a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a70:	827b      	strh	r3, [r7, #18]
 8009a72:	8a7b      	ldrh	r3, [r7, #18]
 8009a74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a78:	827b      	strh	r3, [r7, #18]
 8009a7a:	8a7b      	ldrh	r3, [r7, #18]
 8009a7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a80:	827b      	strh	r3, [r7, #18]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	441a      	add	r2, r3
 8009a8c:	8a7b      	ldrh	r3, [r7, #18]
 8009a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr

08009aae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2280      	movs	r2, #128	; 0x80
 8009ac4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr

08009ad4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr

08009afc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bc80      	pop	{r7}
 8009b18:	4770      	bx	lr

08009b1a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr

08009b30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b08d      	sub	sp, #52	; 0x34
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	460b      	mov	r3, r1
 8009b40:	80fb      	strh	r3, [r7, #6]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b46:	88bb      	ldrh	r3, [r7, #4]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	005a      	lsls	r2, r3, #1
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b62:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b68:	e01e      	b.n	8009ba8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	3301      	adds	r3, #1
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	3302      	adds	r3, #2
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	3302      	adds	r3, #2
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1dd      	bne.n	8009b6a <USB_WritePMA+0x3a>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	3734      	adds	r7, #52	; 0x34
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b08b      	sub	sp, #44	; 0x2c
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	460b      	mov	r3, r1
 8009bca:	80fb      	strh	r3, [r7, #6]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bd0:	88bb      	ldrh	r3, [r7, #4]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	005a      	lsls	r2, r3, #1
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf2:	e01b      	b.n	8009c2c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	3302      	adds	r3, #2
 8009c00:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	3302      	adds	r3, #2
 8009c24:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e0      	bne.n	8009bf4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009c32:	88bb      	ldrh	r3, [r7, #4]
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d007      	beq.n	8009c4e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	701a      	strb	r2, [r3, #0]
  }
}
 8009c4e:	bf00      	nop
 8009c50:	372c      	adds	r7, #44	; 0x2c
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc80      	pop	{r7}
 8009c56:	4770      	bx	lr

08009c58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d115      	bne.n	8009c9c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c74:	2202      	movs	r2, #2
 8009c76:	2181      	movs	r1, #129	; 0x81
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 feac 	bl	800b9d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c88:	2202      	movs	r2, #2
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fea2 	bl	800b9d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c9a:	e012      	b.n	8009cc2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	2181      	movs	r1, #129	; 0x81
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fe97 	bl	800b9d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cae:	2340      	movs	r3, #64	; 0x40
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 fe8e 	bl	800b9d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	2182      	movs	r1, #130	; 0x82
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 fe84 	bl	800b9d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cd8:	f001 ffa4 	bl	800bc24 <USBD_static_malloc>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
 8009cf2:	e026      	b.n	8009d42 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	7c1b      	ldrb	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d28:	2101      	movs	r1, #1
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 ff44 	bl	800bbb8 <USBD_LL_PrepareReceive>
 8009d30:	e007      	b.n	8009d42 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d38:	2340      	movs	r3, #64	; 0x40
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 ff3b 	bl	800bbb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d5c:	2181      	movs	r1, #129	; 0x81
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fe5f 	bl	800ba22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fe58 	bl	800ba22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d7a:	2182      	movs	r1, #130	; 0x82
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 fe50 	bl	800ba22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00e      	beq.n	8009db0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 ff4a 	bl	800bc3c <USBD_static_free>
    pdev->pClassData = NULL;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d039      	beq.n	8009e58 <USBD_CDC_Setup+0x9e>
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d17f      	bne.n	8009ee8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	88db      	ldrh	r3, [r3, #6]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d029      	beq.n	8009e44 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	b25b      	sxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da11      	bge.n	8009e1e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009e06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	88d2      	ldrh	r2, [r2, #6]
 8009e0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e0e:	6939      	ldr	r1, [r7, #16]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	88db      	ldrh	r3, [r3, #6]
 8009e14:	461a      	mov	r2, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fa09 	bl	800b22e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e1c:	e06b      	b.n	8009ef6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	785a      	ldrb	r2, [r3, #1]
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	88db      	ldrh	r3, [r3, #6]
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e34:	6939      	ldr	r1, [r7, #16]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fa24 	bl	800b28a <USBD_CtlPrepareRx>
      break;
 8009e42:	e058      	b.n	8009ef6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	7850      	ldrb	r0, [r2, #1]
 8009e50:	2200      	movs	r2, #0
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	4798      	blx	r3
      break;
 8009e56:	e04e      	b.n	8009ef6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b0b      	cmp	r3, #11
 8009e5e:	d02e      	beq.n	8009ebe <USBD_CDC_Setup+0x104>
 8009e60:	2b0b      	cmp	r3, #11
 8009e62:	dc38      	bgt.n	8009ed6 <USBD_CDC_Setup+0x11c>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <USBD_CDC_Setup+0xb4>
 8009e68:	2b0a      	cmp	r3, #10
 8009e6a:	d014      	beq.n	8009e96 <USBD_CDC_Setup+0xdc>
 8009e6c:	e033      	b.n	8009ed6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d107      	bne.n	8009e88 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e78:	f107 030c 	add.w	r3, r7, #12
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f9d4 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e86:	e02e      	b.n	8009ee6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 f965 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e90:	2302      	movs	r3, #2
 8009e92:	75fb      	strb	r3, [r7, #23]
          break;
 8009e94:	e027      	b.n	8009ee6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d107      	bne.n	8009eb0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ea0:	f107 030f 	add.w	r3, r7, #15
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 f9c0 	bl	800b22e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eae:	e01a      	b.n	8009ee6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 f951 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	75fb      	strb	r3, [r7, #23]
          break;
 8009ebc:	e013      	b.n	8009ee6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d00d      	beq.n	8009ee4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 f945 	bl	800b15a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ed4:	e006      	b.n	8009ee4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f93e 	bl	800b15a <USBD_CtlError>
          ret = USBD_FAIL;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ee2:	e000      	b.n	8009ee6 <USBD_CDC_Setup+0x12c>
          break;
 8009ee4:	bf00      	nop
      }
      break;
 8009ee6:	e006      	b.n	8009ef6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 f935 	bl	800b15a <USBD_CtlError>
      ret = USBD_FAIL;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef4:	bf00      	nop
  }

  return ret;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d03a      	beq.n	8009f9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f26:	78fa      	ldrb	r2, [r7, #3]
 8009f28:	6879      	ldr	r1, [r7, #4]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	440b      	add	r3, r1
 8009f34:	331c      	adds	r3, #28
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d029      	beq.n	8009f90 <USBD_CDC_DataIn+0x90>
 8009f3c:	78fa      	ldrb	r2, [r7, #3]
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	331c      	adds	r3, #28
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	78f9      	ldrb	r1, [r7, #3]
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	460b      	mov	r3, r1
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4403      	add	r3, r0
 8009f5c:	3338      	adds	r3, #56	; 0x38
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f64:	fb01 f303 	mul.w	r3, r1, r3
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d110      	bne.n	8009f90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	331c      	adds	r3, #28
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f82:	78f9      	ldrb	r1, [r7, #3]
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 fdf2 	bl	800bb72 <USBD_LL_Transmit>
 8009f8e:	e003      	b.n	8009f98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e000      	b.n	8009f9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009f9c:	2302      	movs	r3, #2
  }
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 fe1d 	bl	800bbfe <USBD_LL_GetRxDataSize>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fea:	4611      	mov	r1, r2
 8009fec:	4798      	blx	r3

    return USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e000      	b.n	8009ff4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ff2:	2302      	movs	r3, #2
  }
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a012:	2b00      	cmp	r3, #0
 800a014:	d015      	beq.n	800a042 <USBD_CDC_EP0_RxReady+0x46>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a01c:	2bff      	cmp	r3, #255	; 0xff
 800a01e:	d010      	beq.n	800a042 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a02e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a036:	b292      	uxth	r2, r2
 800a038:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	22ff      	movs	r2, #255	; 0xff
 800a03e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2243      	movs	r2, #67	; 0x43
 800a058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	200002c4 	.word	0x200002c4

0800a06c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2243      	movs	r2, #67	; 0x43
 800a078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a07a:	4b03      	ldr	r3, [pc, #12]	; (800a088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	20000280 	.word	0x20000280

0800a08c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2243      	movs	r2, #67	; 0x43
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20000308 	.word	0x20000308

0800a0ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	2000023c 	.word	0x2000023c

0800a0cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bc80      	pop	{r7}
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	bc80      	pop	{r7}
 800a128:	4770      	bx	lr

0800a12a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01c      	beq.n	800a1a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a170:	2b00      	cmp	r3, #0
 800a172:	d115      	bne.n	800a1a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a192:	b29b      	uxth	r3, r3
 800a194:	2181      	movs	r1, #129	; 0x81
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 fceb 	bl	800bb72 <USBD_LL_Transmit>

      return USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e002      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a1a4:	2302      	movs	r3, #2
  }
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d017      	beq.n	800a1f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7c1b      	ldrb	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	2101      	movs	r1, #1
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fceb 	bl	800bbb8 <USBD_LL_PrepareReceive>
 800a1e2:	e007      	b.n	800a1f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fce2 	bl	800bbb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	4613      	mov	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a216:	2302      	movs	r3, #2
 800a218:	e01a      	b.n	800a250 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	79fa      	ldrb	r2, [r7, #7]
 800a246:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f001 fb4f 	bl	800b8ec <USBD_LL_Init>

  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
 800a278:	e001      	b.n	800a27e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a27a:	2302      	movs	r3, #2
 800a27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fb84 	bl	800b9a0 <USBD_LL_Start>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00c      	beq.n	800a2ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4798      	blx	r3
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3

  return USBD_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fed8 	bl	800b0e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a340:	461a      	mov	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	2b02      	cmp	r3, #2
 800a354:	d016      	beq.n	800a384 <USBD_LL_SetupStage+0x6a>
 800a356:	2b02      	cmp	r3, #2
 800a358:	d81c      	bhi.n	800a394 <USBD_LL_SetupStage+0x7a>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <USBD_LL_SetupStage+0x4a>
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d008      	beq.n	800a374 <USBD_LL_SetupStage+0x5a>
 800a362:	e017      	b.n	800a394 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f9cb 	bl	800a708 <USBD_StdDevReq>
      break;
 800a372:	e01a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa2d 	bl	800a7dc <USBD_StdItfReq>
      break;
 800a382:	e012      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa6d 	bl	800a86c <USBD_StdEPReq>
      break;
 800a392:	e00a      	b.n	800a3aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a39a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fb5c 	bl	800ba60 <USBD_LL_StallEP>
      break;
 800a3a8:	bf00      	nop
  }

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d14b      	bne.n	800a460 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d134      	bne.n	800a444 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d919      	bls.n	800a41a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d203      	bcs.n	800a408 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a404:	b29b      	uxth	r3, r3
 800a406:	e002      	b.n	800a40e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 ff57 	bl	800b2c6 <USBD_CtlContinueRx>
 800a418:	e038      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d105      	bne.n	800a43c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 ff54 	bl	800b2ea <USBD_CtlSendStatus>
 800a442:	e023      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d11e      	bne.n	800a48c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a456:	2100      	movs	r1, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f001 fb01 	bl	800ba60 <USBD_LL_StallEP>
 800a45e:	e015      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00d      	beq.n	800a488 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a472:	2b03      	cmp	r3, #3
 800a474:	d108      	bne.n	800a488 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	7afa      	ldrb	r2, [r7, #11]
 800a480:	4611      	mov	r1, r2
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3
 800a486:	e001      	b.n	800a48c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a488:	2302      	movs	r3, #2
 800a48a:	e000      	b.n	800a48e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b086      	sub	sp, #24
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4a4:	7afb      	ldrb	r3, [r7, #11]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d17f      	bne.n	800a5aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d15c      	bne.n	800a574 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d915      	bls.n	800a4f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fec1 	bl	800b266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 fb64 	bl	800bbb8 <USBD_LL_PrepareReceive>
 800a4f0:	e04e      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	6912      	ldr	r2, [r2, #16]
 800a4fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4fe:	fb01 f202 	mul.w	r2, r1, r2
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11c      	bne.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a510:	429a      	cmp	r2, r3
 800a512:	d316      	bcc.n	800a542 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a51e:	429a      	cmp	r2, r3
 800a520:	d20f      	bcs.n	800a542 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fe9d 	bl	800b266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a534:	2300      	movs	r3, #0
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f001 fb3c 	bl	800bbb8 <USBD_LL_PrepareReceive>
 800a540:	e026      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a554:	2b03      	cmp	r3, #3
 800a556:	d105      	bne.n	800a564 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a564:	2180      	movs	r1, #128	; 0x80
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f001 fa7a 	bl	800ba60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 fecf 	bl	800b310 <USBD_CtlReceiveStatus>
 800a572:	e00d      	b.n	800a590 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d004      	beq.n	800a588 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 fa68 	bl	800ba60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d11d      	bne.n	800a5d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fe81 	bl	800a2a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5a8:	e015      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d108      	bne.n	800a5d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	7afa      	ldrb	r2, [r7, #11]
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	4798      	blx	r3
 800a5d0:	e001      	b.n	800a5d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e000      	b.n	800a5d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9f1 	bl	800b9d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	2200      	movs	r2, #0
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f9e3 	bl	800b9d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	; 0x40
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d009      	beq.n	800a658 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	6852      	ldr	r2, [r2, #4]
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	4611      	mov	r1, r2
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
  }

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2204      	movs	r2, #4
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc80      	pop	{r7}
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d105      	bne.n	800a6c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bc80      	pop	{r7}
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d10b      	bne.n	800a6fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	d005      	beq.n	800a72e <USBD_StdDevReq+0x26>
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d84f      	bhi.n	800a7c6 <USBD_StdDevReq+0xbe>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <USBD_StdDevReq+0x36>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d14b      	bne.n	800a7c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
      break;
 800a73c:	e048      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d839      	bhi.n	800a7ba <USBD_StdDevReq+0xb2>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <USBD_StdDevReq+0x44>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a79d 	.word	0x0800a79d
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	0800a7bb 	.word	0x0800a7bb
 800a758:	0800a7a7 	.word	0x0800a7a7
 800a75c:	0800a7bb 	.word	0x0800a7bb
 800a760:	0800a77f 	.word	0x0800a77f
 800a764:	0800a775 	.word	0x0800a775
 800a768:	0800a7bb 	.word	0x0800a7bb
 800a76c:	0800a793 	.word	0x0800a793
 800a770:	0800a789 	.word	0x0800a789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f9dc 	bl	800ab34 <USBD_GetDescriptor>
          break;
 800a77c:	e022      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fb3f 	bl	800ae04 <USBD_SetAddress>
          break;
 800a786:	e01d      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fb7e 	bl	800ae8c <USBD_SetConfig>
          break;
 800a790:	e018      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fc07 	bl	800afa8 <USBD_GetConfig>
          break;
 800a79a:	e013      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fc37 	bl	800b012 <USBD_GetStatus>
          break;
 800a7a4:	e00e      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc65 	bl	800b078 <USBD_SetFeature>
          break;
 800a7ae:	e009      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fc74 	bl	800b0a0 <USBD_ClrFeature>
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fccc 	bl	800b15a <USBD_CtlError>
          break;
 800a7c2:	bf00      	nop
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fcc6 	bl	800b15a <USBD_CtlError>
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop

0800a7dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d005      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d82e      	bhi.n	800a858 <USBD_StdItfReq+0x7c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <USBD_StdItfReq+0x26>
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d12a      	bne.n	800a858 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	3b01      	subs	r3, #1
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d81d      	bhi.n	800a84a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	889b      	ldrh	r3, [r3, #4]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	d813      	bhi.n	800a840 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	88db      	ldrh	r3, [r3, #6]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d110      	bne.n	800a854 <USBD_StdItfReq+0x78>
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10d      	bne.n	800a854 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fd56 	bl	800b2ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a83e:	e009      	b.n	800a854 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc89 	bl	800b15a <USBD_CtlError>
          break;
 800a848:	e004      	b.n	800a854 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc84 	bl	800b15a <USBD_CtlError>
          break;
 800a852:	e000      	b.n	800a856 <USBD_StdItfReq+0x7a>
          break;
 800a854:	bf00      	nop
      }
      break;
 800a856:	e004      	b.n	800a862 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc7d 	bl	800b15a <USBD_CtlError>
      break;
 800a860:	bf00      	nop
  }

  return USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	889b      	ldrh	r3, [r3, #4]
 800a87e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a888:	2b40      	cmp	r3, #64	; 0x40
 800a88a:	d007      	beq.n	800a89c <USBD_StdEPReq+0x30>
 800a88c:	2b40      	cmp	r3, #64	; 0x40
 800a88e:	f200 8146 	bhi.w	800ab1e <USBD_StdEPReq+0x2b2>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <USBD_StdEPReq+0x40>
 800a896:	2b20      	cmp	r3, #32
 800a898:	f040 8141 	bne.w	800ab1e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
      break;
 800a8aa:	e13d      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d10a      	bne.n	800a8ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	e12d      	b.n	800ab2a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d007      	beq.n	800a8e6 <USBD_StdEPReq+0x7a>
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	f300 811b 	bgt.w	800ab12 <USBD_StdEPReq+0x2a6>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d072      	beq.n	800a9c6 <USBD_StdEPReq+0x15a>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d03a      	beq.n	800a95a <USBD_StdEPReq+0xee>
 800a8e4:	e115      	b.n	800ab12 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d002      	beq.n	800a8f6 <USBD_StdEPReq+0x8a>
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d015      	beq.n	800a920 <USBD_StdEPReq+0xb4>
 800a8f4:	e02b      	b.n	800a94e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <USBD_StdEPReq+0xaa>
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b80      	cmp	r3, #128	; 0x80
 800a900:	d009      	beq.n	800a916 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 f8aa 	bl	800ba60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 f8a6 	bl	800ba60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a914:	e020      	b.n	800a958 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc1e 	bl	800b15a <USBD_CtlError>
              break;
 800a91e:	e01b      	b.n	800a958 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	885b      	ldrh	r3, [r3, #2]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10e      	bne.n	800a946 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00b      	beq.n	800a946 <USBD_StdEPReq+0xda>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b80      	cmp	r3, #128	; 0x80
 800a932:	d008      	beq.n	800a946 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	88db      	ldrh	r3, [r3, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 f88d 	bl	800ba60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fccf 	bl	800b2ea <USBD_CtlSendStatus>

              break;
 800a94c:	e004      	b.n	800a958 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc02 	bl	800b15a <USBD_CtlError>
              break;
 800a956:	bf00      	nop
          }
          break;
 800a958:	e0e0      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	2b02      	cmp	r3, #2
 800a962:	d002      	beq.n	800a96a <USBD_StdEPReq+0xfe>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d015      	beq.n	800a994 <USBD_StdEPReq+0x128>
 800a968:	e026      	b.n	800a9b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00c      	beq.n	800a98a <USBD_StdEPReq+0x11e>
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d009      	beq.n	800a98a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f870 	bl	800ba60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f86c 	bl	800ba60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a988:	e01c      	b.n	800a9c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fbe4 	bl	800b15a <USBD_CtlError>
              break;
 800a992:	e017      	b.n	800a9c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	885b      	ldrh	r3, [r3, #2]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d112      	bne.n	800a9c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 f877 	bl	800ba9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fc9a 	bl	800b2ea <USBD_CtlSendStatus>
              }
              break;
 800a9b6:	e004      	b.n	800a9c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fbcd 	bl	800b15a <USBD_CtlError>
              break;
 800a9c0:	e000      	b.n	800a9c4 <USBD_StdEPReq+0x158>
              break;
 800a9c2:	bf00      	nop
          }
          break;
 800a9c4:	e0aa      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d002      	beq.n	800a9d6 <USBD_StdEPReq+0x16a>
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d032      	beq.n	800aa3a <USBD_StdEPReq+0x1ce>
 800a9d4:	e097      	b.n	800ab06 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <USBD_StdEPReq+0x180>
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d004      	beq.n	800a9ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fbb8 	bl	800b15a <USBD_CtlError>
                break;
 800a9ea:	e091      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da0b      	bge.n	800aa0c <USBD_StdEPReq+0x1a0>
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	3310      	adds	r3, #16
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4413      	add	r3, r2
 800aa08:	3304      	adds	r3, #4
 800aa0a:	e00b      	b.n	800aa24 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	3304      	adds	r3, #4
 800aa24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fbfb 	bl	800b22e <USBD_CtlSendData>
              break;
 800aa38:	e06a      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	da11      	bge.n	800aa66 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	3318      	adds	r3, #24
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d117      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fb7b 	bl	800b15a <USBD_CtlError>
                  break;
 800aa64:	e054      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fb68 	bl	800b15a <USBD_CtlError>
                  break;
 800aa8a:	e041      	b.n	800ab10 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da0b      	bge.n	800aaac <USBD_StdEPReq+0x240>
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	3310      	adds	r3, #16
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	e00b      	b.n	800aac4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	3304      	adds	r3, #4
 800aac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <USBD_StdEPReq+0x266>
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d103      	bne.n	800aada <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e00e      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fffc 	bl	800badc <USBD_LL_IsStallEP>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e002      	b.n	800aaf8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2202      	movs	r2, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fb95 	bl	800b22e <USBD_CtlSendData>
              break;
 800ab04:	e004      	b.n	800ab10 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fb26 	bl	800b15a <USBD_CtlError>
              break;
 800ab0e:	bf00      	nop
          }
          break;
 800ab10:	e004      	b.n	800ab1c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fb20 	bl	800b15a <USBD_CtlError>
          break;
 800ab1a:	bf00      	nop
      }
      break;
 800ab1c:	e004      	b.n	800ab28 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fb1a 	bl	800b15a <USBD_CtlError>
      break;
 800ab26:	bf00      	nop
  }

  return ret;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b01      	subs	r3, #1
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	f200 8128 	bhi.w	800adaa <USBD_GetDescriptor+0x276>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <USBD_GetDescriptor+0x2c>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	0800ab95 	.word	0x0800ab95
 800ab68:	0800abd5 	.word	0x0800abd5
 800ab6c:	0800adab 	.word	0x0800adab
 800ab70:	0800adab 	.word	0x0800adab
 800ab74:	0800ad4b 	.word	0x0800ad4b
 800ab78:	0800ad77 	.word	0x0800ad77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
      break;
 800ab92:	e112      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7c1b      	ldrb	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abb6:	e100      	b.n	800adba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	2202      	movs	r2, #2
 800abd0:	701a      	strb	r2, [r3, #0]
      break;
 800abd2:	e0f2      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b05      	cmp	r3, #5
 800abdc:	f200 80ac 	bhi.w	800ad38 <USBD_GetDescriptor+0x204>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0xb4>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac35 	.word	0x0800ac35
 800abf0:	0800ac69 	.word	0x0800ac69
 800abf4:	0800ac9d 	.word	0x0800ac9d
 800abf8:	0800acd1 	.word	0x0800acd1
 800abfc:	0800ad05 	.word	0x0800ad05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e091      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa97 	bl	800b15a <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e089      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e077      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa7d 	bl	800b15a <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e06f      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e05d      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa63 	bl	800b15a <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e055      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e043      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa49 	bl	800b15a <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e03b      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e029      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa2f 	bl	800b15a <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e021      	b.n	800ad48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e00f      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa15 	bl	800b15a <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e007      	b.n	800ad48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa0d 	bl	800b15a <USBD_CtlError>
          err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad46:	e038      	b.n	800adba <USBD_GetDescriptor+0x286>
 800ad48:	e037      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7c1b      	ldrb	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	f107 0208 	add.w	r2, r7, #8
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad64:	e029      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f9f6 	bl	800b15a <USBD_CtlError>
        err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	e021      	b.n	800adba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1b      	ldrb	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f107 0208 	add.w	r2, r7, #8
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4798      	blx	r3
 800ad8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	2207      	movs	r2, #7
 800ad96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad98:	e00f      	b.n	800adba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f9dc 	bl	800b15a <USBD_CtlError>
        err++;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	3301      	adds	r3, #1
 800ada6:	72fb      	strb	r3, [r7, #11]
      break;
 800ada8:	e007      	b.n	800adba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f9d4 	bl	800b15a <USBD_CtlError>
      err++;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3301      	adds	r3, #1
 800adb6:	72fb      	strb	r3, [r7, #11]
      break;
 800adb8:	bf00      	nop
  }

  if (err != 0U)
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11c      	bne.n	800adfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800adc0:	893b      	ldrh	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d011      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88da      	ldrh	r2, [r3, #6]
 800add2:	893b      	ldrh	r3, [r7, #8]
 800add4:	4293      	cmp	r3, r2
 800add6:	bf28      	it	cs
 800add8:	4613      	movcs	r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	461a      	mov	r2, r3
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa22 	bl	800b22e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa79 	bl	800b2ea <USBD_CtlSendStatus>
 800adf8:	e000      	b.n	800adfc <USBD_GetDescriptor+0x2c8>
    return;
 800adfa:	bf00      	nop
    }
  }
}
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d130      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12c      	bne.n	800ae78 <USBD_SetAddress+0x74>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b7f      	cmp	r3, #127	; 0x7f
 800ae24:	d828      	bhi.n	800ae78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d104      	bne.n	800ae46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f98b 	bl	800b15a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae44:	e01d      	b.n	800ae82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fe6e 	bl	800bb34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fa46 	bl	800b2ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6c:	e009      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	e004      	b.n	800ae82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f96d 	bl	800b15a <USBD_CtlError>
  }
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <USBD_SetConfig+0x118>)
 800ae9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aea0:	4b40      	ldr	r3, [pc, #256]	; (800afa4 <USBD_SetConfig+0x118>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d904      	bls.n	800aeb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f955 	bl	800b15a <USBD_CtlError>
 800aeb0:	e075      	b.n	800af9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d002      	beq.n	800aec2 <USBD_SetConfig+0x36>
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d023      	beq.n	800af08 <USBD_SetConfig+0x7c>
 800aec0:	e062      	b.n	800af88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aec2:	4b38      	ldr	r3, [pc, #224]	; (800afa4 <USBD_SetConfig+0x118>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01a      	beq.n	800af00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aeca:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <USBD_SetConfig+0x118>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2203      	movs	r2, #3
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aedc:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <USBD_SetConfig+0x118>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f9e7 	bl	800a2b6 <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d104      	bne.n	800aef8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f932 	bl	800b15a <USBD_CtlError>
            return;
 800aef6:	e052      	b.n	800af9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f9f6 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aefe:	e04e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f9f2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af06:	e04a      	b.n	800af9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800af08:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <USBD_SetConfig+0x118>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d112      	bne.n	800af36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800af18:	4b22      	ldr	r3, [pc, #136]	; (800afa4 <USBD_SetConfig+0x118>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af22:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <USBD_SetConfig+0x118>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff f9e3 	bl	800a2f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f9db 	bl	800b2ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af34:	e033      	b.n	800af9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af36:	4b1b      	ldr	r3, [pc, #108]	; (800afa4 <USBD_SetConfig+0x118>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d01d      	beq.n	800af80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff f9d1 	bl	800a2f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af52:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <USBD_SetConfig+0x118>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <USBD_SetConfig+0x118>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff f9a7 	bl	800a2b6 <USBD_SetClassConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d104      	bne.n	800af78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8f2 	bl	800b15a <USBD_CtlError>
            return;
 800af76:	e012      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f9b6 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af7e:	e00e      	b.n	800af9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f9b2 	bl	800b2ea <USBD_CtlSendStatus>
        break;
 800af86:	e00a      	b.n	800af9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8e5 	bl	800b15a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <USBD_SetConfig+0x118>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f9ac 	bl	800a2f4 <USBD_ClrClassConfig>
        break;
 800af9c:	bf00      	nop
    }
  }
}
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20000c74 	.word	0x20000c74

0800afa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d004      	beq.n	800afc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8cc 	bl	800b15a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afc2:	e022      	b.n	800b00a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afca:	2b02      	cmp	r3, #2
 800afcc:	dc02      	bgt.n	800afd4 <USBD_GetConfig+0x2c>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	dc03      	bgt.n	800afda <USBD_GetConfig+0x32>
 800afd2:	e015      	b.n	800b000 <USBD_GetConfig+0x58>
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d00b      	beq.n	800aff0 <USBD_GetConfig+0x48>
 800afd8:	e012      	b.n	800b000 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3308      	adds	r3, #8
 800afe4:	2201      	movs	r2, #1
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f920 	bl	800b22e <USBD_CtlSendData>
        break;
 800afee:	e00c      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f918 	bl	800b22e <USBD_CtlSendData>
        break;
 800affe:	e004      	b.n	800b00a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f8a9 	bl	800b15a <USBD_CtlError>
        break;
 800b008:	bf00      	nop
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	3b01      	subs	r3, #1
 800b024:	2b02      	cmp	r3, #2
 800b026:	d81e      	bhi.n	800b066 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d004      	beq.n	800b03a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f891 	bl	800b15a <USBD_CtlError>
        break;
 800b038:	e01a      	b.n	800b070 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f043 0202 	orr.w	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	330c      	adds	r3, #12
 800b05a:	2202      	movs	r2, #2
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f8e5 	bl	800b22e <USBD_CtlSendData>
      break;
 800b064:	e004      	b.n	800b070 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f876 	bl	800b15a <USBD_CtlError>
      break;
 800b06e:	bf00      	nop
  }
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	885b      	ldrh	r3, [r3, #2]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d106      	bne.n	800b098 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f929 	bl	800b2ea <USBD_CtlSendStatus>
  }
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d80b      	bhi.n	800b0ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d10c      	bne.n	800b0d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f90f 	bl	800b2ea <USBD_CtlSendStatus>
      }
      break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f842 	bl	800b15a <USBD_CtlError>
      break;
 800b0d6:	e000      	b.n	800b0da <USBD_ClrFeature+0x3a>
      break;
 800b0d8:	bf00      	nop
  }
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	785a      	ldrb	r2, [r3, #1]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	3302      	adds	r3, #2
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3303      	adds	r3, #3
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3304      	adds	r3, #4
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b29a      	uxth	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3305      	adds	r3, #5
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	3306      	adds	r3, #6
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	3307      	adds	r3, #7
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	b29b      	uxth	r3, r3
 800b148:	4413      	add	r3, r2
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	80da      	strh	r2, [r3, #6]

}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr

0800b15a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b164:	2180      	movs	r1, #128	; 0x80
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc7a 	bl	800ba60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b16c:	2100      	movs	r1, #0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fc76 	bl	800ba60 <USBD_LL_StallEP>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d032      	beq.n	800b1f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 f834 	bl	800b200 <USBD_GetLen>
 800b198:	4603      	mov	r3, r0
 800b19a:	3301      	adds	r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	75fa      	strb	r2, [r7, #23]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	7812      	ldrb	r2, [r2, #0]
 800b1b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	75fa      	strb	r2, [r7, #23]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1c8:	e012      	b.n	800b1f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	60fa      	str	r2, [r7, #12]
 800b1d0:	7dfa      	ldrb	r2, [r7, #23]
 800b1d2:	1c51      	adds	r1, r2, #1
 800b1d4:	75f9      	strb	r1, [r7, #23]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	440a      	add	r2, r1
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	75fa      	strb	r2, [r7, #23]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e8      	bne.n	800b1ca <USBD_GetString+0x4e>
    }
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b20c:	e005      	b.n	800b21a <USBD_GetLen+0x1a>
  {
    len++;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	3301      	adds	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3301      	adds	r3, #1
 800b218:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f5      	bne.n	800b20e <USBD_GetLen+0xe>
  }

  return len;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2202      	movs	r2, #2
 800b240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fc8b 	bl	800bb72 <USBD_LL_Transmit>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	2100      	movs	r1, #0
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 fc79 	bl	800bb72 <USBD_LL_Transmit>

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2203      	movs	r2, #3
 800b29c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fc7e 	bl	800bbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2d4:	88fb      	ldrh	r3, [r7, #6]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 fc6c 	bl	800bbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2204      	movs	r2, #4
 800b2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fc36 	bl	800bb72 <USBD_LL_Transmit>

  return USBD_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2205      	movs	r2, #5
 800b31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b320:	2300      	movs	r3, #0
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fc46 	bl	800bbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b33c:	2200      	movs	r2, #0
 800b33e:	4912      	ldr	r1, [pc, #72]	; (800b388 <MX_USB_DEVICE_Init+0x50>)
 800b340:	4812      	ldr	r0, [pc, #72]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b342:	f7fe ff5e 	bl	800a202 <USBD_Init>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b34c:	f7f5 ffa4 	bl	8001298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b350:	490f      	ldr	r1, [pc, #60]	; (800b390 <MX_USB_DEVICE_Init+0x58>)
 800b352:	480e      	ldr	r0, [pc, #56]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b354:	f7fe ff80 	bl	800a258 <USBD_RegisterClass>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b35e:	f7f5 ff9b 	bl	8001298 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <MX_USB_DEVICE_Init+0x5c>)
 800b364:	4809      	ldr	r0, [pc, #36]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b366:	f7fe feb1 	bl	800a0cc <USBD_CDC_RegisterInterface>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b370:	f7f5 ff92 	bl	8001298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b374:	4805      	ldr	r0, [pc, #20]	; (800b38c <MX_USB_DEVICE_Init+0x54>)
 800b376:	f7fe ff88 	bl	800a28a <USBD_Start>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b380:	f7f5 ff8a 	bl	8001298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b384:	bf00      	nop
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000364 	.word	0x20000364
 800b38c:	20000c78 	.word	0x20000c78
 800b390:	20000248 	.word	0x20000248
 800b394:	20000354 	.word	0x20000354

0800b398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b39c:	2200      	movs	r2, #0
 800b39e:	4905      	ldr	r1, [pc, #20]	; (800b3b4 <CDC_Init_FS+0x1c>)
 800b3a0:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3a2:	f7fe fea9 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3a6:	4905      	ldr	r1, [pc, #20]	; (800b3bc <CDC_Init_FS+0x24>)
 800b3a8:	4803      	ldr	r0, [pc, #12]	; (800b3b8 <CDC_Init_FS+0x20>)
 800b3aa:	f7fe febe 	bl	800a12a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	20001324 	.word	0x20001324
 800b3b8:	20000c78 	.word	0x20000c78
 800b3bc:	20000f3c 	.word	0x20000f3c

0800b3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	2b23      	cmp	r3, #35	; 0x23
 800b3e4:	d85c      	bhi.n	800b4a0 <CDC_Control_FS+0xd0>
 800b3e6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <CDC_Control_FS+0x1c>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b4a1 	.word	0x0800b4a1
 800b3f0:	0800b4a1 	.word	0x0800b4a1
 800b3f4:	0800b4a1 	.word	0x0800b4a1
 800b3f8:	0800b4a1 	.word	0x0800b4a1
 800b3fc:	0800b4a1 	.word	0x0800b4a1
 800b400:	0800b4a1 	.word	0x0800b4a1
 800b404:	0800b4a1 	.word	0x0800b4a1
 800b408:	0800b4a1 	.word	0x0800b4a1
 800b40c:	0800b4a1 	.word	0x0800b4a1
 800b410:	0800b4a1 	.word	0x0800b4a1
 800b414:	0800b4a1 	.word	0x0800b4a1
 800b418:	0800b4a1 	.word	0x0800b4a1
 800b41c:	0800b4a1 	.word	0x0800b4a1
 800b420:	0800b4a1 	.word	0x0800b4a1
 800b424:	0800b4a1 	.word	0x0800b4a1
 800b428:	0800b4a1 	.word	0x0800b4a1
 800b42c:	0800b4a1 	.word	0x0800b4a1
 800b430:	0800b4a1 	.word	0x0800b4a1
 800b434:	0800b4a1 	.word	0x0800b4a1
 800b438:	0800b4a1 	.word	0x0800b4a1
 800b43c:	0800b4a1 	.word	0x0800b4a1
 800b440:	0800b4a1 	.word	0x0800b4a1
 800b444:	0800b4a1 	.word	0x0800b4a1
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4a1 	.word	0x0800b4a1
 800b450:	0800b4a1 	.word	0x0800b4a1
 800b454:	0800b4a1 	.word	0x0800b4a1
 800b458:	0800b4a1 	.word	0x0800b4a1
 800b45c:	0800b4a1 	.word	0x0800b4a1
 800b460:	0800b4a1 	.word	0x0800b4a1
 800b464:	0800b4a1 	.word	0x0800b4a1
 800b468:	0800b4a1 	.word	0x0800b4a1
 800b46c:	0800b47d 	.word	0x0800b47d
 800b470:	0800b48f 	.word	0x0800b48f
 800b474:	0800b4a1 	.word	0x0800b4a1
 800b478:	0800b4a1 	.word	0x0800b4a1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800b47c:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <CDC_Control_FS+0xe0>)
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	6810      	ldr	r0, [r2, #0]
 800b482:	6018      	str	r0, [r3, #0]
 800b484:	8891      	ldrh	r1, [r2, #4]
 800b486:	7992      	ldrb	r2, [r2, #6]
 800b488:	8099      	strh	r1, [r3, #4]
 800b48a:	719a      	strb	r2, [r3, #6]
    break;
 800b48c:	e009      	b.n	800b4a2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	4a07      	ldr	r2, [pc, #28]	; (800b4b0 <CDC_Control_FS+0xe0>)
 800b492:	6810      	ldr	r0, [r2, #0]
 800b494:	6018      	str	r0, [r3, #0]
 800b496:	8891      	ldrh	r1, [r2, #4]
 800b498:	7992      	ldrb	r2, [r2, #6]
 800b49a:	8099      	strh	r1, [r3, #4]
 800b49c:	719a      	strb	r2, [r3, #6]
    break;
 800b49e:	e000      	b.n	800b4a2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4a0:	bf00      	nop
  }

  return (USBD_OK);
 800b4a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bc80      	pop	{r7}
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	2000034c 	.word	0x2000034c

0800b4b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7f5 f85b 	bl	8000588 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	4805      	ldr	r0, [pc, #20]	; (800b4ec <CDC_Receive_FS+0x38>)
 800b4d6:	f7fe fe28 	bl	800a12a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4da:	4804      	ldr	r0, [pc, #16]	; (800b4ec <CDC_Receive_FS+0x38>)
 800b4dc:	f7fe fe67 	bl	800a1ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000c78 	.word	0x20000c78

0800b4f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b500:	4b0d      	ldr	r3, [pc, #52]	; (800b538 <CDC_Transmit_FS+0x48>)
 800b502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b506:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b512:	2301      	movs	r3, #1
 800b514:	e00b      	b.n	800b52e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b516:	887b      	ldrh	r3, [r7, #2]
 800b518:	461a      	mov	r2, r3
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	4806      	ldr	r0, [pc, #24]	; (800b538 <CDC_Transmit_FS+0x48>)
 800b51e:	f7fe fdeb 	bl	800a0f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b522:	4805      	ldr	r0, [pc, #20]	; (800b538 <CDC_Transmit_FS+0x48>)
 800b524:	f7fe fe14 	bl	800a150 <USBD_CDC_TransmitPacket>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000c78 	.word	0x20000c78

0800b53c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	6039      	str	r1, [r7, #0]
 800b546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2212      	movs	r2, #18
 800b54c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b54e:	4b03      	ldr	r3, [pc, #12]	; (800b55c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	20000380 	.word	0x20000380

0800b560 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2204      	movs	r2, #4
 800b570:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b572:	4b03      	ldr	r3, [pc, #12]	; (800b580 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b574:	4618      	mov	r0, r3
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	bc80      	pop	{r7}
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	20000394 	.word	0x20000394

0800b584 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d105      	bne.n	800b5a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	4907      	ldr	r1, [pc, #28]	; (800b5b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b59a:	4808      	ldr	r0, [pc, #32]	; (800b5bc <USBD_FS_ProductStrDescriptor+0x38>)
 800b59c:	f7ff fdee 	bl	800b17c <USBD_GetString>
 800b5a0:	e004      	b.n	800b5ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4904      	ldr	r1, [pc, #16]	; (800b5b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5a6:	4805      	ldr	r0, [pc, #20]	; (800b5bc <USBD_FS_ProductStrDescriptor+0x38>)
 800b5a8:	f7ff fde8 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5ac:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000170c 	.word	0x2000170c
 800b5bc:	0800c73c 	.word	0x0800c73c

0800b5c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5d0:	4804      	ldr	r0, [pc, #16]	; (800b5e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5d2:	f7ff fdd3 	bl	800b17c <USBD_GetString>
  return USBD_StrDesc;
 800b5d6:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	2000170c 	.word	0x2000170c
 800b5e4:	0800c750 	.word	0x0800c750

0800b5e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	221a      	movs	r2, #26
 800b5f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5fa:	f000 f843 	bl	800b684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b5fe:	4b02      	ldr	r3, [pc, #8]	; (800b608 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	20000398 	.word	0x20000398

0800b60c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d105      	bne.n	800b62a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4907      	ldr	r1, [pc, #28]	; (800b640 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b622:	4808      	ldr	r0, [pc, #32]	; (800b644 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b624:	f7ff fdaa 	bl	800b17c <USBD_GetString>
 800b628:	e004      	b.n	800b634 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	4904      	ldr	r1, [pc, #16]	; (800b640 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b62e:	4805      	ldr	r0, [pc, #20]	; (800b644 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b630:	f7ff fda4 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b634:	4b02      	ldr	r3, [pc, #8]	; (800b640 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	2000170c 	.word	0x2000170c
 800b644:	0800c758 	.word	0x0800c758

0800b648 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b65e:	4808      	ldr	r0, [pc, #32]	; (800b680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b660:	f7ff fd8c 	bl	800b17c <USBD_GetString>
 800b664:	e004      	b.n	800b670 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4904      	ldr	r1, [pc, #16]	; (800b67c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b66a:	4805      	ldr	r0, [pc, #20]	; (800b680 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b66c:	f7ff fd86 	bl	800b17c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	2000170c 	.word	0x2000170c
 800b680:	0800c764 	.word	0x0800c764

0800b684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b68a:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <Get_SerialNum+0x44>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b690:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <Get_SerialNum+0x48>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b696:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <Get_SerialNum+0x4c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	4909      	ldr	r1, [pc, #36]	; (800b6d4 <Get_SerialNum+0x50>)
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 f814 	bl	800b6dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	4908      	ldr	r1, [pc, #32]	; (800b6d8 <Get_SerialNum+0x54>)
 800b6b8:	68b8      	ldr	r0, [r7, #8]
 800b6ba:	f000 f80f 	bl	800b6dc <IntToUnicode>
  }
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	1ffff7e8 	.word	0x1ffff7e8
 800b6cc:	1ffff7ec 	.word	0x1ffff7ec
 800b6d0:	1ffff7f0 	.word	0x1ffff7f0
 800b6d4:	2000039a 	.word	0x2000039a
 800b6d8:	200003aa 	.word	0x200003aa

0800b6dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]
 800b6f2:	e027      	b.n	800b744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	0f1b      	lsrs	r3, r3, #28
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d80b      	bhi.n	800b714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	0f1b      	lsrs	r3, r3, #28
 800b700:	b2da      	uxtb	r2, r3
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4619      	mov	r1, r3
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	440b      	add	r3, r1
 800b70c:	3230      	adds	r2, #48	; 0x30
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	e00a      	b.n	800b72a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	0f1b      	lsrs	r3, r3, #28
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	4619      	mov	r1, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	440b      	add	r3, r1
 800b724:	3237      	adds	r2, #55	; 0x37
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	3301      	adds	r3, #1
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	4413      	add	r3, r2
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	3301      	adds	r3, #1
 800b742:	75fb      	strb	r3, [r7, #23]
 800b744:	7dfa      	ldrb	r2, [r7, #23]
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d3d3      	bcc.n	800b6f4 <IntToUnicode+0x18>
  }
}
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
 800b750:	371c      	adds	r7, #28
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr

0800b758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a11      	ldr	r2, [pc, #68]	; (800b7ac <HAL_PCD_MspInit+0x54>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d11b      	bne.n	800b7a2 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b76a:	4b11      	ldr	r3, [pc, #68]	; (800b7b0 <HAL_PCD_MspInit+0x58>)
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <HAL_PCD_MspInit+0x58>)
 800b770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b774:	61d3      	str	r3, [r2, #28]
 800b776:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <HAL_PCD_MspInit+0x58>)
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	2013      	movs	r0, #19
 800b788:	f7f8 fa93 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800b78c:	2013      	movs	r0, #19
 800b78e:	f7f8 faac 	bl	8003cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b792:	2200      	movs	r2, #0
 800b794:	2100      	movs	r1, #0
 800b796:	2014      	movs	r0, #20
 800b798:	f7f8 fa8b 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b79c:	2014      	movs	r0, #20
 800b79e:	f7f8 faa4 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40005c00 	.word	0x40005c00
 800b7b0:	40021000 	.word	0x40021000

0800b7b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	f7fe fda5 	bl	800a31a <USBD_LL_SetupStage>
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7ea:	78fa      	ldrb	r2, [r7, #3]
 800b7ec:	6879      	ldr	r1, [r7, #4]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	440b      	add	r3, r1
 800b7f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	78fb      	ldrb	r3, [r7, #3]
 800b800:	4619      	mov	r1, r3
 800b802:	f7fe fdd7 	bl	800a3b4 <USBD_LL_DataOutStage>
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b820:	78fa      	ldrb	r2, [r7, #3]
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	440b      	add	r3, r1
 800b82e:	333c      	adds	r3, #60	; 0x3c
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	78fb      	ldrb	r3, [r7, #3]
 800b834:	4619      	mov	r1, r3
 800b836:	f7fe fe2e 	bl	800a496 <USBD_LL_DataInStage>
}
 800b83a:	bf00      	nop
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe ff3e 	bl	800a6d2 <USBD_LL_SOF>
}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b866:	2301      	movs	r3, #1
 800b868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d001      	beq.n	800b876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b872:	f7f5 fd11 	bl	8001298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b87c:	7bfa      	ldrb	r2, [r7, #15]
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe feee 	bl	800a662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fea7 	bl	800a5e0 <USBD_LL_Reset>
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fee8 	bl	800a680 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8b8:	4b04      	ldr	r3, [pc, #16]	; (800b8cc <HAL_PCD_SuspendCallback+0x30>)
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	4a03      	ldr	r2, [pc, #12]	; (800b8cc <HAL_PCD_SuspendCallback+0x30>)
 800b8be:	f043 0306 	orr.w	r3, r3, #6
 800b8c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	e000ed00 	.word	0xe000ed00

0800b8d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe fee2 	bl	800a6a8 <USBD_LL_Resume>
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8f4:	4a28      	ldr	r2, [pc, #160]	; (800b998 <USBD_LL_Init+0xac>)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a26      	ldr	r2, [pc, #152]	; (800b998 <USBD_LL_Init+0xac>)
 800b900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b904:	4b24      	ldr	r3, [pc, #144]	; (800b998 <USBD_LL_Init+0xac>)
 800b906:	4a25      	ldr	r2, [pc, #148]	; (800b99c <USBD_LL_Init+0xb0>)
 800b908:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b90a:	4b23      	ldr	r3, [pc, #140]	; (800b998 <USBD_LL_Init+0xac>)
 800b90c:	2208      	movs	r2, #8
 800b90e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b910:	4b21      	ldr	r3, [pc, #132]	; (800b998 <USBD_LL_Init+0xac>)
 800b912:	2202      	movs	r2, #2
 800b914:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b916:	4b20      	ldr	r3, [pc, #128]	; (800b998 <USBD_LL_Init+0xac>)
 800b918:	2200      	movs	r2, #0
 800b91a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b91c:	4b1e      	ldr	r3, [pc, #120]	; (800b998 <USBD_LL_Init+0xac>)
 800b91e:	2200      	movs	r2, #0
 800b920:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b922:	4b1d      	ldr	r3, [pc, #116]	; (800b998 <USBD_LL_Init+0xac>)
 800b924:	2200      	movs	r2, #0
 800b926:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b928:	481b      	ldr	r0, [pc, #108]	; (800b998 <USBD_LL_Init+0xac>)
 800b92a:	f7f8 fbd9 	bl	80040e0 <HAL_PCD_Init>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b934:	f7f5 fcb0 	bl	8001298 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93e:	2318      	movs	r3, #24
 800b940:	2200      	movs	r2, #0
 800b942:	2100      	movs	r1, #0
 800b944:	f7fa f84d 	bl	80059e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b94e:	2358      	movs	r3, #88	; 0x58
 800b950:	2200      	movs	r2, #0
 800b952:	2180      	movs	r1, #128	; 0x80
 800b954:	f7fa f845 	bl	80059e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b95e:	23c0      	movs	r3, #192	; 0xc0
 800b960:	2200      	movs	r2, #0
 800b962:	2181      	movs	r1, #129	; 0x81
 800b964:	f7fa f83d 	bl	80059e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b96e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b972:	2200      	movs	r2, #0
 800b974:	2101      	movs	r1, #1
 800b976:	f7fa f834 	bl	80059e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b980:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b984:	2200      	movs	r2, #0
 800b986:	2182      	movs	r1, #130	; 0x82
 800b988:	f7fa f82b 	bl	80059e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	2000190c 	.word	0x2000190c
 800b99c:	40005c00 	.word	0x40005c00

0800b9a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f8 fc9d 	bl	80042f6 <HAL_PCD_Start>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f94e 	bl	800bc64 <USBD_Get_USB_Status>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	4608      	mov	r0, r1
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	70fb      	strb	r3, [r7, #3]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70bb      	strb	r3, [r7, #2]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9fe:	78bb      	ldrb	r3, [r7, #2]
 800ba00:	883a      	ldrh	r2, [r7, #0]
 800ba02:	78f9      	ldrb	r1, [r7, #3]
 800ba04:	f7f8 fe15 	bl	8004632 <HAL_PCD_EP_Open>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 f928 	bl	800bc64 <USBD_Get_USB_Status>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba3c:	78fa      	ldrb	r2, [r7, #3]
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7f8 fe5c 	bl	80046fe <HAL_PCD_EP_Close>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f909 	bl	800bc64 <USBD_Get_USB_Status>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba7a:	78fa      	ldrb	r2, [r7, #3]
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f8 ff1c 	bl	80048bc <HAL_PCD_EP_SetStall>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 f8ea 	bl	800bc64 <USBD_Get_USB_Status>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7f8 ff5d 	bl	800497c <HAL_PCD_EP_ClrStall>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f8cb 	bl	800bc64 <USBD_Get_USB_Status>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	da0c      	bge.n	800bb12 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800baf8:	78fb      	ldrb	r3, [r7, #3]
 800bafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bafe:	68f9      	ldr	r1, [r7, #12]
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	440b      	add	r3, r1
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	e00b      	b.n	800bb2a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb12:	78fb      	ldrb	r3, [r7, #3]
 800bb14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb18:	68f9      	ldr	r1, [r7, #12]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	440b      	add	r3, r1
 800bb24:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb28:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bc80      	pop	{r7}
 800bb32:	4770      	bx	lr

0800bb34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb4e:	78fa      	ldrb	r2, [r7, #3]
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f8 fd48 	bl	80045e8 <HAL_PCD_SetAddress>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 f880 	bl	800bc64 <USBD_Get_USB_Status>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b086      	sub	sp, #24
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	460b      	mov	r3, r1
 800bb80:	72fb      	strb	r3, [r7, #11]
 800bb82:	4613      	mov	r3, r2
 800bb84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb94:	893b      	ldrh	r3, [r7, #8]
 800bb96:	7af9      	ldrb	r1, [r7, #11]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	f7f8 fe4c 	bl	8004836 <HAL_PCD_EP_Transmit>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 f85d 	bl	800bc64 <USBD_Get_USB_Status>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbae:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	72fb      	strb	r3, [r7, #11]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbda:	893b      	ldrh	r3, [r7, #8]
 800bbdc:	7af9      	ldrb	r1, [r7, #11]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	f7f8 fdd5 	bl	800478e <HAL_PCD_EP_Receive>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f83a 	bl	800bc64 <USBD_Get_USB_Status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc10:	78fa      	ldrb	r2, [r7, #3]
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f8 fdf7 	bl	8004808 <HAL_PCD_EP_GetRxCount>
 800bc1a:	4603      	mov	r3, r0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc2c:	4b02      	ldr	r3, [pc, #8]	; (800bc38 <USBD_static_malloc+0x14>)
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bc80      	pop	{r7}
 800bc36:	4770      	bx	lr
 800bc38:	20001bf8 	.word	0x20001bf8

0800bc3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]

}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bc80      	pop	{r7}
 800bc62:	4770      	bx	lr

0800bc64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d817      	bhi.n	800bca8 <USBD_Get_USB_Status+0x44>
 800bc78:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <USBD_Get_USB_Status+0x1c>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc97 	.word	0x0800bc97
 800bc88:	0800bc9d 	.word	0x0800bc9d
 800bc8c:	0800bca3 	.word	0x0800bca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
    break;
 800bc94:	e00b      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc96:	2302      	movs	r3, #2
 800bc98:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9a:	e008      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bca0:	e005      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bca2:	2302      	movs	r3, #2
 800bca4:	73fb      	strb	r3, [r7, #15]
    break;
 800bca6:	e002      	b.n	800bcae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcac:	bf00      	nop
  }
  return usb_status;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bc80      	pop	{r7}
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop

0800bcbc <__errno>:
 800bcbc:	4b01      	ldr	r3, [pc, #4]	; (800bcc4 <__errno+0x8>)
 800bcbe:	6818      	ldr	r0, [r3, #0]
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	200003b4 	.word	0x200003b4

0800bcc8 <__libc_init_array>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	2600      	movs	r6, #0
 800bccc:	4d0c      	ldr	r5, [pc, #48]	; (800bd00 <__libc_init_array+0x38>)
 800bcce:	4c0d      	ldr	r4, [pc, #52]	; (800bd04 <__libc_init_array+0x3c>)
 800bcd0:	1b64      	subs	r4, r4, r5
 800bcd2:	10a4      	asrs	r4, r4, #2
 800bcd4:	42a6      	cmp	r6, r4
 800bcd6:	d109      	bne.n	800bcec <__libc_init_array+0x24>
 800bcd8:	f000 fcd6 	bl	800c688 <_init>
 800bcdc:	2600      	movs	r6, #0
 800bcde:	4d0a      	ldr	r5, [pc, #40]	; (800bd08 <__libc_init_array+0x40>)
 800bce0:	4c0a      	ldr	r4, [pc, #40]	; (800bd0c <__libc_init_array+0x44>)
 800bce2:	1b64      	subs	r4, r4, r5
 800bce4:	10a4      	asrs	r4, r4, #2
 800bce6:	42a6      	cmp	r6, r4
 800bce8:	d105      	bne.n	800bcf6 <__libc_init_array+0x2e>
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcf0:	4798      	blx	r3
 800bcf2:	3601      	adds	r6, #1
 800bcf4:	e7ee      	b.n	800bcd4 <__libc_init_array+0xc>
 800bcf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcfa:	4798      	blx	r3
 800bcfc:	3601      	adds	r6, #1
 800bcfe:	e7f2      	b.n	800bce6 <__libc_init_array+0x1e>
 800bd00:	0800d86c 	.word	0x0800d86c
 800bd04:	0800d86c 	.word	0x0800d86c
 800bd08:	0800d86c 	.word	0x0800d86c
 800bd0c:	0800d870 	.word	0x0800d870

0800bd10 <memcpy>:
 800bd10:	440a      	add	r2, r1
 800bd12:	4291      	cmp	r1, r2
 800bd14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd18:	d100      	bne.n	800bd1c <memcpy+0xc>
 800bd1a:	4770      	bx	lr
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd22:	4291      	cmp	r1, r2
 800bd24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd28:	d1f9      	bne.n	800bd1e <memcpy+0xe>
 800bd2a:	bd10      	pop	{r4, pc}

0800bd2c <memset>:
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4402      	add	r2, r0
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d100      	bne.n	800bd36 <memset+0xa>
 800bd34:	4770      	bx	lr
 800bd36:	f803 1b01 	strb.w	r1, [r3], #1
 800bd3a:	e7f9      	b.n	800bd30 <memset+0x4>

0800bd3c <sniprintf>:
 800bd3c:	b40c      	push	{r2, r3}
 800bd3e:	b530      	push	{r4, r5, lr}
 800bd40:	4b17      	ldr	r3, [pc, #92]	; (800bda0 <sniprintf+0x64>)
 800bd42:	1e0c      	subs	r4, r1, #0
 800bd44:	681d      	ldr	r5, [r3, #0]
 800bd46:	b09d      	sub	sp, #116	; 0x74
 800bd48:	da08      	bge.n	800bd5c <sniprintf+0x20>
 800bd4a:	238b      	movs	r3, #139	; 0x8b
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd50:	602b      	str	r3, [r5, #0]
 800bd52:	b01d      	add	sp, #116	; 0x74
 800bd54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd58:	b002      	add	sp, #8
 800bd5a:	4770      	bx	lr
 800bd5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd60:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd64:	bf0c      	ite	eq
 800bd66:	4623      	moveq	r3, r4
 800bd68:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd74:	9002      	str	r0, [sp, #8]
 800bd76:	9006      	str	r0, [sp, #24]
 800bd78:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	ab21      	add	r3, sp, #132	; 0x84
 800bd80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd82:	a902      	add	r1, sp, #8
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	f000 f88f 	bl	800bea8 <_svfiprintf_r>
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	bfbc      	itt	lt
 800bd8e:	238b      	movlt	r3, #139	; 0x8b
 800bd90:	602b      	strlt	r3, [r5, #0]
 800bd92:	2c00      	cmp	r4, #0
 800bd94:	d0dd      	beq.n	800bd52 <sniprintf+0x16>
 800bd96:	2200      	movs	r2, #0
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	701a      	strb	r2, [r3, #0]
 800bd9c:	e7d9      	b.n	800bd52 <sniprintf+0x16>
 800bd9e:	bf00      	nop
 800bda0:	200003b4 	.word	0x200003b4

0800bda4 <strncmp>:
 800bda4:	4603      	mov	r3, r0
 800bda6:	b510      	push	{r4, lr}
 800bda8:	b172      	cbz	r2, 800bdc8 <strncmp+0x24>
 800bdaa:	3901      	subs	r1, #1
 800bdac:	1884      	adds	r4, r0, r2
 800bdae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bdb6:	4290      	cmp	r0, r2
 800bdb8:	d101      	bne.n	800bdbe <strncmp+0x1a>
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d101      	bne.n	800bdc2 <strncmp+0x1e>
 800bdbe:	1a80      	subs	r0, r0, r2
 800bdc0:	bd10      	pop	{r4, pc}
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d1f3      	bne.n	800bdae <strncmp+0xa>
 800bdc6:	e7fa      	b.n	800bdbe <strncmp+0x1a>
 800bdc8:	4610      	mov	r0, r2
 800bdca:	e7f9      	b.n	800bdc0 <strncmp+0x1c>

0800bdcc <strncpy>:
 800bdcc:	4603      	mov	r3, r0
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	3901      	subs	r1, #1
 800bdd2:	b132      	cbz	r2, 800bde2 <strncpy+0x16>
 800bdd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdd8:	3a01      	subs	r2, #1
 800bdda:	f803 4b01 	strb.w	r4, [r3], #1
 800bdde:	2c00      	cmp	r4, #0
 800bde0:	d1f7      	bne.n	800bdd2 <strncpy+0x6>
 800bde2:	2100      	movs	r1, #0
 800bde4:	441a      	add	r2, r3
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d100      	bne.n	800bdec <strncpy+0x20>
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	f803 1b01 	strb.w	r1, [r3], #1
 800bdf0:	e7f9      	b.n	800bde6 <strncpy+0x1a>

0800bdf2 <__ssputs_r>:
 800bdf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf6:	688e      	ldr	r6, [r1, #8]
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	429e      	cmp	r6, r3
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	4690      	mov	r8, r2
 800be00:	461f      	mov	r7, r3
 800be02:	d838      	bhi.n	800be76 <__ssputs_r+0x84>
 800be04:	898a      	ldrh	r2, [r1, #12]
 800be06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be0a:	d032      	beq.n	800be72 <__ssputs_r+0x80>
 800be0c:	6825      	ldr	r5, [r4, #0]
 800be0e:	6909      	ldr	r1, [r1, #16]
 800be10:	3301      	adds	r3, #1
 800be12:	eba5 0901 	sub.w	r9, r5, r1
 800be16:	6965      	ldr	r5, [r4, #20]
 800be18:	444b      	add	r3, r9
 800be1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be22:	106d      	asrs	r5, r5, #1
 800be24:	429d      	cmp	r5, r3
 800be26:	bf38      	it	cc
 800be28:	461d      	movcc	r5, r3
 800be2a:	0553      	lsls	r3, r2, #21
 800be2c:	d531      	bpl.n	800be92 <__ssputs_r+0xa0>
 800be2e:	4629      	mov	r1, r5
 800be30:	f000 fb60 	bl	800c4f4 <_malloc_r>
 800be34:	4606      	mov	r6, r0
 800be36:	b950      	cbnz	r0, 800be4e <__ssputs_r+0x5c>
 800be38:	230c      	movs	r3, #12
 800be3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be3e:	f8ca 3000 	str.w	r3, [sl]
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4e:	464a      	mov	r2, r9
 800be50:	6921      	ldr	r1, [r4, #16]
 800be52:	f7ff ff5d 	bl	800bd10 <memcpy>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	6126      	str	r6, [r4, #16]
 800be64:	444e      	add	r6, r9
 800be66:	6026      	str	r6, [r4, #0]
 800be68:	463e      	mov	r6, r7
 800be6a:	6165      	str	r5, [r4, #20]
 800be6c:	eba5 0509 	sub.w	r5, r5, r9
 800be70:	60a5      	str	r5, [r4, #8]
 800be72:	42be      	cmp	r6, r7
 800be74:	d900      	bls.n	800be78 <__ssputs_r+0x86>
 800be76:	463e      	mov	r6, r7
 800be78:	4632      	mov	r2, r6
 800be7a:	4641      	mov	r1, r8
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	f000 fab7 	bl	800c3f0 <memmove>
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	2000      	movs	r0, #0
 800be86:	1b9b      	subs	r3, r3, r6
 800be88:	60a3      	str	r3, [r4, #8]
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	4433      	add	r3, r6
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	e7db      	b.n	800be4a <__ssputs_r+0x58>
 800be92:	462a      	mov	r2, r5
 800be94:	f000 fba2 	bl	800c5dc <_realloc_r>
 800be98:	4606      	mov	r6, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d1e1      	bne.n	800be62 <__ssputs_r+0x70>
 800be9e:	4650      	mov	r0, sl
 800bea0:	6921      	ldr	r1, [r4, #16]
 800bea2:	f000 fabf 	bl	800c424 <_free_r>
 800bea6:	e7c7      	b.n	800be38 <__ssputs_r+0x46>

0800bea8 <_svfiprintf_r>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	4698      	mov	r8, r3
 800beae:	898b      	ldrh	r3, [r1, #12]
 800beb0:	4607      	mov	r7, r0
 800beb2:	061b      	lsls	r3, r3, #24
 800beb4:	460d      	mov	r5, r1
 800beb6:	4614      	mov	r4, r2
 800beb8:	b09d      	sub	sp, #116	; 0x74
 800beba:	d50e      	bpl.n	800beda <_svfiprintf_r+0x32>
 800bebc:	690b      	ldr	r3, [r1, #16]
 800bebe:	b963      	cbnz	r3, 800beda <_svfiprintf_r+0x32>
 800bec0:	2140      	movs	r1, #64	; 0x40
 800bec2:	f000 fb17 	bl	800c4f4 <_malloc_r>
 800bec6:	6028      	str	r0, [r5, #0]
 800bec8:	6128      	str	r0, [r5, #16]
 800beca:	b920      	cbnz	r0, 800bed6 <_svfiprintf_r+0x2e>
 800becc:	230c      	movs	r3, #12
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bed4:	e0d1      	b.n	800c07a <_svfiprintf_r+0x1d2>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	616b      	str	r3, [r5, #20]
 800beda:	2300      	movs	r3, #0
 800bedc:	9309      	str	r3, [sp, #36]	; 0x24
 800bede:	2320      	movs	r3, #32
 800bee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bee4:	2330      	movs	r3, #48	; 0x30
 800bee6:	f04f 0901 	mov.w	r9, #1
 800beea:	f8cd 800c 	str.w	r8, [sp, #12]
 800beee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c094 <_svfiprintf_r+0x1ec>
 800bef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bef6:	4623      	mov	r3, r4
 800bef8:	469a      	mov	sl, r3
 800befa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800befe:	b10a      	cbz	r2, 800bf04 <_svfiprintf_r+0x5c>
 800bf00:	2a25      	cmp	r2, #37	; 0x25
 800bf02:	d1f9      	bne.n	800bef8 <_svfiprintf_r+0x50>
 800bf04:	ebba 0b04 	subs.w	fp, sl, r4
 800bf08:	d00b      	beq.n	800bf22 <_svfiprintf_r+0x7a>
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ff6e 	bl	800bdf2 <__ssputs_r>
 800bf16:	3001      	adds	r0, #1
 800bf18:	f000 80aa 	beq.w	800c070 <_svfiprintf_r+0x1c8>
 800bf1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf1e:	445a      	add	r2, fp
 800bf20:	9209      	str	r2, [sp, #36]	; 0x24
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 80a2 	beq.w	800c070 <_svfiprintf_r+0x1c8>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf36:	f10a 0a01 	add.w	sl, sl, #1
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	9307      	str	r3, [sp, #28]
 800bf3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf42:	931a      	str	r3, [sp, #104]	; 0x68
 800bf44:	4654      	mov	r4, sl
 800bf46:	2205      	movs	r2, #5
 800bf48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4c:	4851      	ldr	r0, [pc, #324]	; (800c094 <_svfiprintf_r+0x1ec>)
 800bf4e:	f000 fa41 	bl	800c3d4 <memchr>
 800bf52:	9a04      	ldr	r2, [sp, #16]
 800bf54:	b9d8      	cbnz	r0, 800bf8e <_svfiprintf_r+0xe6>
 800bf56:	06d0      	lsls	r0, r2, #27
 800bf58:	bf44      	itt	mi
 800bf5a:	2320      	movmi	r3, #32
 800bf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf60:	0711      	lsls	r1, r2, #28
 800bf62:	bf44      	itt	mi
 800bf64:	232b      	movmi	r3, #43	; 0x2b
 800bf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf70:	d015      	beq.n	800bf9e <_svfiprintf_r+0xf6>
 800bf72:	4654      	mov	r4, sl
 800bf74:	2000      	movs	r0, #0
 800bf76:	f04f 0c0a 	mov.w	ip, #10
 800bf7a:	9a07      	ldr	r2, [sp, #28]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf82:	3b30      	subs	r3, #48	; 0x30
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	d94e      	bls.n	800c026 <_svfiprintf_r+0x17e>
 800bf88:	b1b0      	cbz	r0, 800bfb8 <_svfiprintf_r+0x110>
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	e014      	b.n	800bfb8 <_svfiprintf_r+0x110>
 800bf8e:	eba0 0308 	sub.w	r3, r0, r8
 800bf92:	fa09 f303 	lsl.w	r3, r9, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	46a2      	mov	sl, r4
 800bf9a:	9304      	str	r3, [sp, #16]
 800bf9c:	e7d2      	b.n	800bf44 <_svfiprintf_r+0x9c>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	1d19      	adds	r1, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	9103      	str	r1, [sp, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bfbb      	ittet	lt
 800bfaa:	425b      	neglt	r3, r3
 800bfac:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb0:	9307      	strge	r3, [sp, #28]
 800bfb2:	9307      	strlt	r3, [sp, #28]
 800bfb4:	bfb8      	it	lt
 800bfb6:	9204      	strlt	r2, [sp, #16]
 800bfb8:	7823      	ldrb	r3, [r4, #0]
 800bfba:	2b2e      	cmp	r3, #46	; 0x2e
 800bfbc:	d10c      	bne.n	800bfd8 <_svfiprintf_r+0x130>
 800bfbe:	7863      	ldrb	r3, [r4, #1]
 800bfc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc2:	d135      	bne.n	800c030 <_svfiprintf_r+0x188>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	3402      	adds	r4, #2
 800bfc8:	1d1a      	adds	r2, r3, #4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	9203      	str	r2, [sp, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfb8      	it	lt
 800bfd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfd6:	9305      	str	r3, [sp, #20]
 800bfd8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c098 <_svfiprintf_r+0x1f0>
 800bfdc:	2203      	movs	r2, #3
 800bfde:	4650      	mov	r0, sl
 800bfe0:	7821      	ldrb	r1, [r4, #0]
 800bfe2:	f000 f9f7 	bl	800c3d4 <memchr>
 800bfe6:	b140      	cbz	r0, 800bffa <_svfiprintf_r+0x152>
 800bfe8:	2340      	movs	r3, #64	; 0x40
 800bfea:	eba0 000a 	sub.w	r0, r0, sl
 800bfee:	fa03 f000 	lsl.w	r0, r3, r0
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	3401      	adds	r4, #1
 800bff6:	4303      	orrs	r3, r0
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffe:	2206      	movs	r2, #6
 800c000:	4826      	ldr	r0, [pc, #152]	; (800c09c <_svfiprintf_r+0x1f4>)
 800c002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c006:	f000 f9e5 	bl	800c3d4 <memchr>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d038      	beq.n	800c080 <_svfiprintf_r+0x1d8>
 800c00e:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <_svfiprintf_r+0x1f8>)
 800c010:	bb1b      	cbnz	r3, 800c05a <_svfiprintf_r+0x1b2>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	3307      	adds	r3, #7
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	3308      	adds	r3, #8
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c020:	4433      	add	r3, r6
 800c022:	9309      	str	r3, [sp, #36]	; 0x24
 800c024:	e767      	b.n	800bef6 <_svfiprintf_r+0x4e>
 800c026:	460c      	mov	r4, r1
 800c028:	2001      	movs	r0, #1
 800c02a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c02e:	e7a5      	b.n	800bf7c <_svfiprintf_r+0xd4>
 800c030:	2300      	movs	r3, #0
 800c032:	f04f 0c0a 	mov.w	ip, #10
 800c036:	4619      	mov	r1, r3
 800c038:	3401      	adds	r4, #1
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	4620      	mov	r0, r4
 800c03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c042:	3a30      	subs	r2, #48	; 0x30
 800c044:	2a09      	cmp	r2, #9
 800c046:	d903      	bls.n	800c050 <_svfiprintf_r+0x1a8>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0c5      	beq.n	800bfd8 <_svfiprintf_r+0x130>
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	e7c3      	b.n	800bfd8 <_svfiprintf_r+0x130>
 800c050:	4604      	mov	r4, r0
 800c052:	2301      	movs	r3, #1
 800c054:	fb0c 2101 	mla	r1, ip, r1, r2
 800c058:	e7f0      	b.n	800c03c <_svfiprintf_r+0x194>
 800c05a:	ab03      	add	r3, sp, #12
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	462a      	mov	r2, r5
 800c060:	4638      	mov	r0, r7
 800c062:	4b10      	ldr	r3, [pc, #64]	; (800c0a4 <_svfiprintf_r+0x1fc>)
 800c064:	a904      	add	r1, sp, #16
 800c066:	f3af 8000 	nop.w
 800c06a:	1c42      	adds	r2, r0, #1
 800c06c:	4606      	mov	r6, r0
 800c06e:	d1d6      	bne.n	800c01e <_svfiprintf_r+0x176>
 800c070:	89ab      	ldrh	r3, [r5, #12]
 800c072:	065b      	lsls	r3, r3, #25
 800c074:	f53f af2c 	bmi.w	800bed0 <_svfiprintf_r+0x28>
 800c078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07a:	b01d      	add	sp, #116	; 0x74
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	ab03      	add	r3, sp, #12
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	462a      	mov	r2, r5
 800c086:	4638      	mov	r0, r7
 800c088:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <_svfiprintf_r+0x1fc>)
 800c08a:	a904      	add	r1, sp, #16
 800c08c:	f000 f87c 	bl	800c188 <_printf_i>
 800c090:	e7eb      	b.n	800c06a <_svfiprintf_r+0x1c2>
 800c092:	bf00      	nop
 800c094:	0800d837 	.word	0x0800d837
 800c098:	0800d83d 	.word	0x0800d83d
 800c09c:	0800d841 	.word	0x0800d841
 800c0a0:	00000000 	.word	0x00000000
 800c0a4:	0800bdf3 	.word	0x0800bdf3

0800c0a8 <_printf_common>:
 800c0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	4699      	mov	r9, r3
 800c0b0:	688a      	ldr	r2, [r1, #8]
 800c0b2:	690b      	ldr	r3, [r1, #16]
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bfb8      	it	lt
 800c0ba:	4613      	movlt	r3, r2
 800c0bc:	6033      	str	r3, [r6, #0]
 800c0be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0c8:	b10a      	cbz	r2, 800c0ce <_printf_common+0x26>
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	6033      	str	r3, [r6, #0]
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	0699      	lsls	r1, r3, #26
 800c0d2:	bf42      	ittt	mi
 800c0d4:	6833      	ldrmi	r3, [r6, #0]
 800c0d6:	3302      	addmi	r3, #2
 800c0d8:	6033      	strmi	r3, [r6, #0]
 800c0da:	6825      	ldr	r5, [r4, #0]
 800c0dc:	f015 0506 	ands.w	r5, r5, #6
 800c0e0:	d106      	bne.n	800c0f0 <_printf_common+0x48>
 800c0e2:	f104 0a19 	add.w	sl, r4, #25
 800c0e6:	68e3      	ldr	r3, [r4, #12]
 800c0e8:	6832      	ldr	r2, [r6, #0]
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	42ab      	cmp	r3, r5
 800c0ee:	dc28      	bgt.n	800c142 <_printf_common+0x9a>
 800c0f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0f4:	1e13      	subs	r3, r2, #0
 800c0f6:	6822      	ldr	r2, [r4, #0]
 800c0f8:	bf18      	it	ne
 800c0fa:	2301      	movne	r3, #1
 800c0fc:	0692      	lsls	r2, r2, #26
 800c0fe:	d42d      	bmi.n	800c15c <_printf_common+0xb4>
 800c100:	4649      	mov	r1, r9
 800c102:	4638      	mov	r0, r7
 800c104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c108:	47c0      	blx	r8
 800c10a:	3001      	adds	r0, #1
 800c10c:	d020      	beq.n	800c150 <_printf_common+0xa8>
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	68e5      	ldr	r5, [r4, #12]
 800c112:	f003 0306 	and.w	r3, r3, #6
 800c116:	2b04      	cmp	r3, #4
 800c118:	bf18      	it	ne
 800c11a:	2500      	movne	r5, #0
 800c11c:	6832      	ldr	r2, [r6, #0]
 800c11e:	f04f 0600 	mov.w	r6, #0
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	bf08      	it	eq
 800c126:	1aad      	subeq	r5, r5, r2
 800c128:	6922      	ldr	r2, [r4, #16]
 800c12a:	bf08      	it	eq
 800c12c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c130:	4293      	cmp	r3, r2
 800c132:	bfc4      	itt	gt
 800c134:	1a9b      	subgt	r3, r3, r2
 800c136:	18ed      	addgt	r5, r5, r3
 800c138:	341a      	adds	r4, #26
 800c13a:	42b5      	cmp	r5, r6
 800c13c:	d11a      	bne.n	800c174 <_printf_common+0xcc>
 800c13e:	2000      	movs	r0, #0
 800c140:	e008      	b.n	800c154 <_printf_common+0xac>
 800c142:	2301      	movs	r3, #1
 800c144:	4652      	mov	r2, sl
 800c146:	4649      	mov	r1, r9
 800c148:	4638      	mov	r0, r7
 800c14a:	47c0      	blx	r8
 800c14c:	3001      	adds	r0, #1
 800c14e:	d103      	bne.n	800c158 <_printf_common+0xb0>
 800c150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c158:	3501      	adds	r5, #1
 800c15a:	e7c4      	b.n	800c0e6 <_printf_common+0x3e>
 800c15c:	2030      	movs	r0, #48	; 0x30
 800c15e:	18e1      	adds	r1, r4, r3
 800c160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c16a:	4422      	add	r2, r4
 800c16c:	3302      	adds	r3, #2
 800c16e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c172:	e7c5      	b.n	800c100 <_printf_common+0x58>
 800c174:	2301      	movs	r3, #1
 800c176:	4622      	mov	r2, r4
 800c178:	4649      	mov	r1, r9
 800c17a:	4638      	mov	r0, r7
 800c17c:	47c0      	blx	r8
 800c17e:	3001      	adds	r0, #1
 800c180:	d0e6      	beq.n	800c150 <_printf_common+0xa8>
 800c182:	3601      	adds	r6, #1
 800c184:	e7d9      	b.n	800c13a <_printf_common+0x92>
	...

0800c188 <_printf_i>:
 800c188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c18c:	7e0f      	ldrb	r7, [r1, #24]
 800c18e:	4691      	mov	r9, r2
 800c190:	2f78      	cmp	r7, #120	; 0x78
 800c192:	4680      	mov	r8, r0
 800c194:	460c      	mov	r4, r1
 800c196:	469a      	mov	sl, r3
 800c198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c19a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c19e:	d807      	bhi.n	800c1b0 <_printf_i+0x28>
 800c1a0:	2f62      	cmp	r7, #98	; 0x62
 800c1a2:	d80a      	bhi.n	800c1ba <_printf_i+0x32>
 800c1a4:	2f00      	cmp	r7, #0
 800c1a6:	f000 80d9 	beq.w	800c35c <_printf_i+0x1d4>
 800c1aa:	2f58      	cmp	r7, #88	; 0x58
 800c1ac:	f000 80a4 	beq.w	800c2f8 <_printf_i+0x170>
 800c1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1b8:	e03a      	b.n	800c230 <_printf_i+0xa8>
 800c1ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1be:	2b15      	cmp	r3, #21
 800c1c0:	d8f6      	bhi.n	800c1b0 <_printf_i+0x28>
 800c1c2:	a101      	add	r1, pc, #4	; (adr r1, 800c1c8 <_printf_i+0x40>)
 800c1c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1c8:	0800c221 	.word	0x0800c221
 800c1cc:	0800c235 	.word	0x0800c235
 800c1d0:	0800c1b1 	.word	0x0800c1b1
 800c1d4:	0800c1b1 	.word	0x0800c1b1
 800c1d8:	0800c1b1 	.word	0x0800c1b1
 800c1dc:	0800c1b1 	.word	0x0800c1b1
 800c1e0:	0800c235 	.word	0x0800c235
 800c1e4:	0800c1b1 	.word	0x0800c1b1
 800c1e8:	0800c1b1 	.word	0x0800c1b1
 800c1ec:	0800c1b1 	.word	0x0800c1b1
 800c1f0:	0800c1b1 	.word	0x0800c1b1
 800c1f4:	0800c343 	.word	0x0800c343
 800c1f8:	0800c265 	.word	0x0800c265
 800c1fc:	0800c325 	.word	0x0800c325
 800c200:	0800c1b1 	.word	0x0800c1b1
 800c204:	0800c1b1 	.word	0x0800c1b1
 800c208:	0800c365 	.word	0x0800c365
 800c20c:	0800c1b1 	.word	0x0800c1b1
 800c210:	0800c265 	.word	0x0800c265
 800c214:	0800c1b1 	.word	0x0800c1b1
 800c218:	0800c1b1 	.word	0x0800c1b1
 800c21c:	0800c32d 	.word	0x0800c32d
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	1d1a      	adds	r2, r3, #4
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	602a      	str	r2, [r5, #0]
 800c228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c22c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c230:	2301      	movs	r3, #1
 800c232:	e0a4      	b.n	800c37e <_printf_i+0x1f6>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	6829      	ldr	r1, [r5, #0]
 800c238:	0606      	lsls	r6, r0, #24
 800c23a:	f101 0304 	add.w	r3, r1, #4
 800c23e:	d50a      	bpl.n	800c256 <_printf_i+0xce>
 800c240:	680e      	ldr	r6, [r1, #0]
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	2e00      	cmp	r6, #0
 800c246:	da03      	bge.n	800c250 <_printf_i+0xc8>
 800c248:	232d      	movs	r3, #45	; 0x2d
 800c24a:	4276      	negs	r6, r6
 800c24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c250:	230a      	movs	r3, #10
 800c252:	485e      	ldr	r0, [pc, #376]	; (800c3cc <_printf_i+0x244>)
 800c254:	e019      	b.n	800c28a <_printf_i+0x102>
 800c256:	680e      	ldr	r6, [r1, #0]
 800c258:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c25c:	602b      	str	r3, [r5, #0]
 800c25e:	bf18      	it	ne
 800c260:	b236      	sxthne	r6, r6
 800c262:	e7ef      	b.n	800c244 <_printf_i+0xbc>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	6820      	ldr	r0, [r4, #0]
 800c268:	1d19      	adds	r1, r3, #4
 800c26a:	6029      	str	r1, [r5, #0]
 800c26c:	0601      	lsls	r1, r0, #24
 800c26e:	d501      	bpl.n	800c274 <_printf_i+0xec>
 800c270:	681e      	ldr	r6, [r3, #0]
 800c272:	e002      	b.n	800c27a <_printf_i+0xf2>
 800c274:	0646      	lsls	r6, r0, #25
 800c276:	d5fb      	bpl.n	800c270 <_printf_i+0xe8>
 800c278:	881e      	ldrh	r6, [r3, #0]
 800c27a:	2f6f      	cmp	r7, #111	; 0x6f
 800c27c:	bf0c      	ite	eq
 800c27e:	2308      	moveq	r3, #8
 800c280:	230a      	movne	r3, #10
 800c282:	4852      	ldr	r0, [pc, #328]	; (800c3cc <_printf_i+0x244>)
 800c284:	2100      	movs	r1, #0
 800c286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c28a:	6865      	ldr	r5, [r4, #4]
 800c28c:	2d00      	cmp	r5, #0
 800c28e:	bfa8      	it	ge
 800c290:	6821      	ldrge	r1, [r4, #0]
 800c292:	60a5      	str	r5, [r4, #8]
 800c294:	bfa4      	itt	ge
 800c296:	f021 0104 	bicge.w	r1, r1, #4
 800c29a:	6021      	strge	r1, [r4, #0]
 800c29c:	b90e      	cbnz	r6, 800c2a2 <_printf_i+0x11a>
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	d04d      	beq.n	800c33e <_printf_i+0x1b6>
 800c2a2:	4615      	mov	r5, r2
 800c2a4:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2a8:	fb03 6711 	mls	r7, r3, r1, r6
 800c2ac:	5dc7      	ldrb	r7, [r0, r7]
 800c2ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2b2:	4637      	mov	r7, r6
 800c2b4:	42bb      	cmp	r3, r7
 800c2b6:	460e      	mov	r6, r1
 800c2b8:	d9f4      	bls.n	800c2a4 <_printf_i+0x11c>
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d10b      	bne.n	800c2d6 <_printf_i+0x14e>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	07de      	lsls	r6, r3, #31
 800c2c2:	d508      	bpl.n	800c2d6 <_printf_i+0x14e>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	6861      	ldr	r1, [r4, #4]
 800c2c8:	4299      	cmp	r1, r3
 800c2ca:	bfde      	ittt	le
 800c2cc:	2330      	movle	r3, #48	; 0x30
 800c2ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2d6:	1b52      	subs	r2, r2, r5
 800c2d8:	6122      	str	r2, [r4, #16]
 800c2da:	464b      	mov	r3, r9
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4640      	mov	r0, r8
 800c2e0:	f8cd a000 	str.w	sl, [sp]
 800c2e4:	aa03      	add	r2, sp, #12
 800c2e6:	f7ff fedf 	bl	800c0a8 <_printf_common>
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d14c      	bne.n	800c388 <_printf_i+0x200>
 800c2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f2:	b004      	add	sp, #16
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	4834      	ldr	r0, [pc, #208]	; (800c3cc <_printf_i+0x244>)
 800c2fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2fe:	6829      	ldr	r1, [r5, #0]
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	f851 6b04 	ldr.w	r6, [r1], #4
 800c306:	6029      	str	r1, [r5, #0]
 800c308:	061d      	lsls	r5, r3, #24
 800c30a:	d514      	bpl.n	800c336 <_printf_i+0x1ae>
 800c30c:	07df      	lsls	r7, r3, #31
 800c30e:	bf44      	itt	mi
 800c310:	f043 0320 	orrmi.w	r3, r3, #32
 800c314:	6023      	strmi	r3, [r4, #0]
 800c316:	b91e      	cbnz	r6, 800c320 <_printf_i+0x198>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	f023 0320 	bic.w	r3, r3, #32
 800c31e:	6023      	str	r3, [r4, #0]
 800c320:	2310      	movs	r3, #16
 800c322:	e7af      	b.n	800c284 <_printf_i+0xfc>
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	f043 0320 	orr.w	r3, r3, #32
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	2378      	movs	r3, #120	; 0x78
 800c32e:	4828      	ldr	r0, [pc, #160]	; (800c3d0 <_printf_i+0x248>)
 800c330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c334:	e7e3      	b.n	800c2fe <_printf_i+0x176>
 800c336:	0659      	lsls	r1, r3, #25
 800c338:	bf48      	it	mi
 800c33a:	b2b6      	uxthmi	r6, r6
 800c33c:	e7e6      	b.n	800c30c <_printf_i+0x184>
 800c33e:	4615      	mov	r5, r2
 800c340:	e7bb      	b.n	800c2ba <_printf_i+0x132>
 800c342:	682b      	ldr	r3, [r5, #0]
 800c344:	6826      	ldr	r6, [r4, #0]
 800c346:	1d18      	adds	r0, r3, #4
 800c348:	6961      	ldr	r1, [r4, #20]
 800c34a:	6028      	str	r0, [r5, #0]
 800c34c:	0635      	lsls	r5, r6, #24
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	d501      	bpl.n	800c356 <_printf_i+0x1ce>
 800c352:	6019      	str	r1, [r3, #0]
 800c354:	e002      	b.n	800c35c <_printf_i+0x1d4>
 800c356:	0670      	lsls	r0, r6, #25
 800c358:	d5fb      	bpl.n	800c352 <_printf_i+0x1ca>
 800c35a:	8019      	strh	r1, [r3, #0]
 800c35c:	2300      	movs	r3, #0
 800c35e:	4615      	mov	r5, r2
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	e7ba      	b.n	800c2da <_printf_i+0x152>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	2100      	movs	r1, #0
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	602a      	str	r2, [r5, #0]
 800c36c:	681d      	ldr	r5, [r3, #0]
 800c36e:	6862      	ldr	r2, [r4, #4]
 800c370:	4628      	mov	r0, r5
 800c372:	f000 f82f 	bl	800c3d4 <memchr>
 800c376:	b108      	cbz	r0, 800c37c <_printf_i+0x1f4>
 800c378:	1b40      	subs	r0, r0, r5
 800c37a:	6060      	str	r0, [r4, #4]
 800c37c:	6863      	ldr	r3, [r4, #4]
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	2300      	movs	r3, #0
 800c382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c386:	e7a8      	b.n	800c2da <_printf_i+0x152>
 800c388:	462a      	mov	r2, r5
 800c38a:	4649      	mov	r1, r9
 800c38c:	4640      	mov	r0, r8
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	47d0      	blx	sl
 800c392:	3001      	adds	r0, #1
 800c394:	d0ab      	beq.n	800c2ee <_printf_i+0x166>
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	079b      	lsls	r3, r3, #30
 800c39a:	d413      	bmi.n	800c3c4 <_printf_i+0x23c>
 800c39c:	68e0      	ldr	r0, [r4, #12]
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	bfb8      	it	lt
 800c3a4:	4618      	movlt	r0, r3
 800c3a6:	e7a4      	b.n	800c2f2 <_printf_i+0x16a>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	4632      	mov	r2, r6
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	47d0      	blx	sl
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d09b      	beq.n	800c2ee <_printf_i+0x166>
 800c3b6:	3501      	adds	r5, #1
 800c3b8:	68e3      	ldr	r3, [r4, #12]
 800c3ba:	9903      	ldr	r1, [sp, #12]
 800c3bc:	1a5b      	subs	r3, r3, r1
 800c3be:	42ab      	cmp	r3, r5
 800c3c0:	dcf2      	bgt.n	800c3a8 <_printf_i+0x220>
 800c3c2:	e7eb      	b.n	800c39c <_printf_i+0x214>
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	f104 0619 	add.w	r6, r4, #25
 800c3ca:	e7f5      	b.n	800c3b8 <_printf_i+0x230>
 800c3cc:	0800d848 	.word	0x0800d848
 800c3d0:	0800d859 	.word	0x0800d859

0800c3d4 <memchr>:
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	b2c9      	uxtb	r1, r1
 800c3da:	4402      	add	r2, r0
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	d101      	bne.n	800c3e6 <memchr+0x12>
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	e003      	b.n	800c3ee <memchr+0x1a>
 800c3e6:	7804      	ldrb	r4, [r0, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	428c      	cmp	r4, r1
 800c3ec:	d1f6      	bne.n	800c3dc <memchr+0x8>
 800c3ee:	bd10      	pop	{r4, pc}

0800c3f0 <memmove>:
 800c3f0:	4288      	cmp	r0, r1
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	eb01 0402 	add.w	r4, r1, r2
 800c3f8:	d902      	bls.n	800c400 <memmove+0x10>
 800c3fa:	4284      	cmp	r4, r0
 800c3fc:	4623      	mov	r3, r4
 800c3fe:	d807      	bhi.n	800c410 <memmove+0x20>
 800c400:	1e43      	subs	r3, r0, #1
 800c402:	42a1      	cmp	r1, r4
 800c404:	d008      	beq.n	800c418 <memmove+0x28>
 800c406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c40a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c40e:	e7f8      	b.n	800c402 <memmove+0x12>
 800c410:	4601      	mov	r1, r0
 800c412:	4402      	add	r2, r0
 800c414:	428a      	cmp	r2, r1
 800c416:	d100      	bne.n	800c41a <memmove+0x2a>
 800c418:	bd10      	pop	{r4, pc}
 800c41a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c41e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c422:	e7f7      	b.n	800c414 <memmove+0x24>

0800c424 <_free_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4605      	mov	r5, r0
 800c428:	2900      	cmp	r1, #0
 800c42a:	d040      	beq.n	800c4ae <_free_r+0x8a>
 800c42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c430:	1f0c      	subs	r4, r1, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfb8      	it	lt
 800c436:	18e4      	addlt	r4, r4, r3
 800c438:	f000 f910 	bl	800c65c <__malloc_lock>
 800c43c:	4a1c      	ldr	r2, [pc, #112]	; (800c4b0 <_free_r+0x8c>)
 800c43e:	6813      	ldr	r3, [r2, #0]
 800c440:	b933      	cbnz	r3, 800c450 <_free_r+0x2c>
 800c442:	6063      	str	r3, [r4, #4]
 800c444:	6014      	str	r4, [r2, #0]
 800c446:	4628      	mov	r0, r5
 800c448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c44c:	f000 b90c 	b.w	800c668 <__malloc_unlock>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d908      	bls.n	800c466 <_free_r+0x42>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	1821      	adds	r1, r4, r0
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf01      	itttt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	1809      	addeq	r1, r1, r0
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	e7ed      	b.n	800c442 <_free_r+0x1e>
 800c466:	461a      	mov	r2, r3
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b10b      	cbz	r3, 800c470 <_free_r+0x4c>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d9fa      	bls.n	800c466 <_free_r+0x42>
 800c470:	6811      	ldr	r1, [r2, #0]
 800c472:	1850      	adds	r0, r2, r1
 800c474:	42a0      	cmp	r0, r4
 800c476:	d10b      	bne.n	800c490 <_free_r+0x6c>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	4401      	add	r1, r0
 800c47c:	1850      	adds	r0, r2, r1
 800c47e:	4283      	cmp	r3, r0
 800c480:	6011      	str	r1, [r2, #0]
 800c482:	d1e0      	bne.n	800c446 <_free_r+0x22>
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4401      	add	r1, r0
 800c48a:	6011      	str	r1, [r2, #0]
 800c48c:	6053      	str	r3, [r2, #4]
 800c48e:	e7da      	b.n	800c446 <_free_r+0x22>
 800c490:	d902      	bls.n	800c498 <_free_r+0x74>
 800c492:	230c      	movs	r3, #12
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	e7d6      	b.n	800c446 <_free_r+0x22>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	1821      	adds	r1, r4, r0
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf01      	itttt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	1809      	addeq	r1, r1, r0
 800c4a6:	6021      	streq	r1, [r4, #0]
 800c4a8:	6063      	str	r3, [r4, #4]
 800c4aa:	6054      	str	r4, [r2, #4]
 800c4ac:	e7cb      	b.n	800c446 <_free_r+0x22>
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20001e18 	.word	0x20001e18

0800c4b4 <sbrk_aligned>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	4e0e      	ldr	r6, [pc, #56]	; (800c4f0 <sbrk_aligned+0x3c>)
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	6831      	ldr	r1, [r6, #0]
 800c4bc:	4605      	mov	r5, r0
 800c4be:	b911      	cbnz	r1, 800c4c6 <sbrk_aligned+0x12>
 800c4c0:	f000 f8bc 	bl	800c63c <_sbrk_r>
 800c4c4:	6030      	str	r0, [r6, #0]
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 f8b7 	bl	800c63c <_sbrk_r>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	d00a      	beq.n	800c4e8 <sbrk_aligned+0x34>
 800c4d2:	1cc4      	adds	r4, r0, #3
 800c4d4:	f024 0403 	bic.w	r4, r4, #3
 800c4d8:	42a0      	cmp	r0, r4
 800c4da:	d007      	beq.n	800c4ec <sbrk_aligned+0x38>
 800c4dc:	1a21      	subs	r1, r4, r0
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 f8ac 	bl	800c63c <_sbrk_r>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d101      	bne.n	800c4ec <sbrk_aligned+0x38>
 800c4e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	20001e1c 	.word	0x20001e1c

0800c4f4 <_malloc_r>:
 800c4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f8:	1ccd      	adds	r5, r1, #3
 800c4fa:	f025 0503 	bic.w	r5, r5, #3
 800c4fe:	3508      	adds	r5, #8
 800c500:	2d0c      	cmp	r5, #12
 800c502:	bf38      	it	cc
 800c504:	250c      	movcc	r5, #12
 800c506:	2d00      	cmp	r5, #0
 800c508:	4607      	mov	r7, r0
 800c50a:	db01      	blt.n	800c510 <_malloc_r+0x1c>
 800c50c:	42a9      	cmp	r1, r5
 800c50e:	d905      	bls.n	800c51c <_malloc_r+0x28>
 800c510:	230c      	movs	r3, #12
 800c512:	2600      	movs	r6, #0
 800c514:	603b      	str	r3, [r7, #0]
 800c516:	4630      	mov	r0, r6
 800c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51c:	4e2e      	ldr	r6, [pc, #184]	; (800c5d8 <_malloc_r+0xe4>)
 800c51e:	f000 f89d 	bl	800c65c <__malloc_lock>
 800c522:	6833      	ldr	r3, [r6, #0]
 800c524:	461c      	mov	r4, r3
 800c526:	bb34      	cbnz	r4, 800c576 <_malloc_r+0x82>
 800c528:	4629      	mov	r1, r5
 800c52a:	4638      	mov	r0, r7
 800c52c:	f7ff ffc2 	bl	800c4b4 <sbrk_aligned>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	4604      	mov	r4, r0
 800c534:	d14d      	bne.n	800c5d2 <_malloc_r+0xde>
 800c536:	6834      	ldr	r4, [r6, #0]
 800c538:	4626      	mov	r6, r4
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	d140      	bne.n	800c5c0 <_malloc_r+0xcc>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	4631      	mov	r1, r6
 800c542:	4638      	mov	r0, r7
 800c544:	eb04 0803 	add.w	r8, r4, r3
 800c548:	f000 f878 	bl	800c63c <_sbrk_r>
 800c54c:	4580      	cmp	r8, r0
 800c54e:	d13a      	bne.n	800c5c6 <_malloc_r+0xd2>
 800c550:	6821      	ldr	r1, [r4, #0]
 800c552:	3503      	adds	r5, #3
 800c554:	1a6d      	subs	r5, r5, r1
 800c556:	f025 0503 	bic.w	r5, r5, #3
 800c55a:	3508      	adds	r5, #8
 800c55c:	2d0c      	cmp	r5, #12
 800c55e:	bf38      	it	cc
 800c560:	250c      	movcc	r5, #12
 800c562:	4638      	mov	r0, r7
 800c564:	4629      	mov	r1, r5
 800c566:	f7ff ffa5 	bl	800c4b4 <sbrk_aligned>
 800c56a:	3001      	adds	r0, #1
 800c56c:	d02b      	beq.n	800c5c6 <_malloc_r+0xd2>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	442b      	add	r3, r5
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	e00e      	b.n	800c594 <_malloc_r+0xa0>
 800c576:	6822      	ldr	r2, [r4, #0]
 800c578:	1b52      	subs	r2, r2, r5
 800c57a:	d41e      	bmi.n	800c5ba <_malloc_r+0xc6>
 800c57c:	2a0b      	cmp	r2, #11
 800c57e:	d916      	bls.n	800c5ae <_malloc_r+0xba>
 800c580:	1961      	adds	r1, r4, r5
 800c582:	42a3      	cmp	r3, r4
 800c584:	6025      	str	r5, [r4, #0]
 800c586:	bf18      	it	ne
 800c588:	6059      	strne	r1, [r3, #4]
 800c58a:	6863      	ldr	r3, [r4, #4]
 800c58c:	bf08      	it	eq
 800c58e:	6031      	streq	r1, [r6, #0]
 800c590:	5162      	str	r2, [r4, r5]
 800c592:	604b      	str	r3, [r1, #4]
 800c594:	4638      	mov	r0, r7
 800c596:	f104 060b 	add.w	r6, r4, #11
 800c59a:	f000 f865 	bl	800c668 <__malloc_unlock>
 800c59e:	f026 0607 	bic.w	r6, r6, #7
 800c5a2:	1d23      	adds	r3, r4, #4
 800c5a4:	1af2      	subs	r2, r6, r3
 800c5a6:	d0b6      	beq.n	800c516 <_malloc_r+0x22>
 800c5a8:	1b9b      	subs	r3, r3, r6
 800c5aa:	50a3      	str	r3, [r4, r2]
 800c5ac:	e7b3      	b.n	800c516 <_malloc_r+0x22>
 800c5ae:	6862      	ldr	r2, [r4, #4]
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	bf0c      	ite	eq
 800c5b4:	6032      	streq	r2, [r6, #0]
 800c5b6:	605a      	strne	r2, [r3, #4]
 800c5b8:	e7ec      	b.n	800c594 <_malloc_r+0xa0>
 800c5ba:	4623      	mov	r3, r4
 800c5bc:	6864      	ldr	r4, [r4, #4]
 800c5be:	e7b2      	b.n	800c526 <_malloc_r+0x32>
 800c5c0:	4634      	mov	r4, r6
 800c5c2:	6876      	ldr	r6, [r6, #4]
 800c5c4:	e7b9      	b.n	800c53a <_malloc_r+0x46>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	603b      	str	r3, [r7, #0]
 800c5cc:	f000 f84c 	bl	800c668 <__malloc_unlock>
 800c5d0:	e7a1      	b.n	800c516 <_malloc_r+0x22>
 800c5d2:	6025      	str	r5, [r4, #0]
 800c5d4:	e7de      	b.n	800c594 <_malloc_r+0xa0>
 800c5d6:	bf00      	nop
 800c5d8:	20001e18 	.word	0x20001e18

0800c5dc <_realloc_r>:
 800c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	4680      	mov	r8, r0
 800c5e2:	4614      	mov	r4, r2
 800c5e4:	460e      	mov	r6, r1
 800c5e6:	b921      	cbnz	r1, 800c5f2 <_realloc_r+0x16>
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ee:	f7ff bf81 	b.w	800c4f4 <_malloc_r>
 800c5f2:	b92a      	cbnz	r2, 800c600 <_realloc_r+0x24>
 800c5f4:	f7ff ff16 	bl	800c424 <_free_r>
 800c5f8:	4625      	mov	r5, r4
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c600:	f000 f838 	bl	800c674 <_malloc_usable_size_r>
 800c604:	4284      	cmp	r4, r0
 800c606:	4607      	mov	r7, r0
 800c608:	d802      	bhi.n	800c610 <_realloc_r+0x34>
 800c60a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c60e:	d812      	bhi.n	800c636 <_realloc_r+0x5a>
 800c610:	4621      	mov	r1, r4
 800c612:	4640      	mov	r0, r8
 800c614:	f7ff ff6e 	bl	800c4f4 <_malloc_r>
 800c618:	4605      	mov	r5, r0
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d0ed      	beq.n	800c5fa <_realloc_r+0x1e>
 800c61e:	42bc      	cmp	r4, r7
 800c620:	4622      	mov	r2, r4
 800c622:	4631      	mov	r1, r6
 800c624:	bf28      	it	cs
 800c626:	463a      	movcs	r2, r7
 800c628:	f7ff fb72 	bl	800bd10 <memcpy>
 800c62c:	4631      	mov	r1, r6
 800c62e:	4640      	mov	r0, r8
 800c630:	f7ff fef8 	bl	800c424 <_free_r>
 800c634:	e7e1      	b.n	800c5fa <_realloc_r+0x1e>
 800c636:	4635      	mov	r5, r6
 800c638:	e7df      	b.n	800c5fa <_realloc_r+0x1e>
	...

0800c63c <_sbrk_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	2300      	movs	r3, #0
 800c640:	4d05      	ldr	r5, [pc, #20]	; (800c658 <_sbrk_r+0x1c>)
 800c642:	4604      	mov	r4, r0
 800c644:	4608      	mov	r0, r1
 800c646:	602b      	str	r3, [r5, #0]
 800c648:	f7f4 ff3a 	bl	80014c0 <_sbrk>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_sbrk_r+0x1a>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_sbrk_r+0x1a>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	20001e20 	.word	0x20001e20

0800c65c <__malloc_lock>:
 800c65c:	4801      	ldr	r0, [pc, #4]	; (800c664 <__malloc_lock+0x8>)
 800c65e:	f000 b811 	b.w	800c684 <__retarget_lock_acquire_recursive>
 800c662:	bf00      	nop
 800c664:	20001e24 	.word	0x20001e24

0800c668 <__malloc_unlock>:
 800c668:	4801      	ldr	r0, [pc, #4]	; (800c670 <__malloc_unlock+0x8>)
 800c66a:	f000 b80c 	b.w	800c686 <__retarget_lock_release_recursive>
 800c66e:	bf00      	nop
 800c670:	20001e24 	.word	0x20001e24

0800c674 <_malloc_usable_size_r>:
 800c674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c678:	1f18      	subs	r0, r3, #4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfbc      	itt	lt
 800c67e:	580b      	ldrlt	r3, [r1, r0]
 800c680:	18c0      	addlt	r0, r0, r3
 800c682:	4770      	bx	lr

0800c684 <__retarget_lock_acquire_recursive>:
 800c684:	4770      	bx	lr

0800c686 <__retarget_lock_release_recursive>:
 800c686:	4770      	bx	lr

0800c688 <_init>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	bf00      	nop
 800c68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68e:	bc08      	pop	{r3}
 800c690:	469e      	mov	lr, r3
 800c692:	4770      	bx	lr

0800c694 <_fini>:
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c696:	bf00      	nop
 800c698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69a:	bc08      	pop	{r3}
 800c69c:	469e      	mov	lr, r3
 800c69e:	4770      	bx	lr
