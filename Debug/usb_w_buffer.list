
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b908  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc0c  0800cc0c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc0c  0800cc0c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc0c  0800cc0c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc10  0800cc10  0001cc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800cc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001998  20000418  0800d02c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800d02c  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038469  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052bf  00000000  00000000  000588aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  0005db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a38  00000000  00000000  0005f870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cad8  00000000  00000000  000612a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d035  00000000  00000000  0007dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097515  00000000  00000000  0009adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001322ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  0013231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b9fc 	.word	0x0800b9fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800b9fc 	.word	0x0800b9fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 faaa 	bl	80036e4 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 faa5 	bl	80036e4 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 fd6e 	bl	8003c84 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 fd67 	bl	8003c84 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f005 ff28 	bl	8006080 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 fd23 	bl	8003c84 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000059c 	.word	0x2000059c
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <Start_APP+0x60>)
 800025e:	4a17      	ldr	r2, [pc, #92]	; (80002bc <Start_APP+0x64>)
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <Start_APP+0x6c>)
 8000264:	f001 fb50 	bl	8001908 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026a:	f003 f904 	bl	8003476 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800026e:	2100      	movs	r1, #0
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <Start_APP+0x6c>)
 8000272:	f003 f90f 	bl	8003494 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST + '0');
 8000276:	2034      	movs	r0, #52	; 0x34
 8000278:	f000 fbd2 	bl	8000a20 <set_contrast>

		u8g2_SetDrawColor(&u8g2, 2);
 800027c:	2102      	movs	r1, #2
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <Start_APP+0x6c>)
 8000280:	f002 fb5c 	bl	800293c <u8g2_SetDrawColor>
		u8g2_SetBitmapMode(&u8g2, 1);
 8000284:	2101      	movs	r1, #1
 8000286:	480f      	ldr	r0, [pc, #60]	; (80002c4 <Start_APP+0x6c>)
 8000288:	f000 ffa4 	bl	80011d4 <u8g2_SetBitmapMode>
		u8g2_SetFontMode(&u8g2, 1);
 800028c:	2101      	movs	r1, #1
 800028e:	480d      	ldr	r0, [pc, #52]	; (80002c4 <Start_APP+0x6c>)
 8000290:	f001 ffd4 	bl	800223c <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <Start_APP+0x6c>)
 8000296:	f002 f93f 	bl	8002518 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_10x20_mf);
 800029a:	490b      	ldr	r1, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <Start_APP+0x6c>)
 800029e:	f002 f949 	bl	8002534 <u8g2_SetFont>
		disp_splash();
 80002a2:	f000 fbd3 	bl	8000a4c <disp_splash>
		text_insertion_point((0 + '0'), (0 + '0'));
 80002a6:	2130      	movs	r1, #48	; 0x30
 80002a8:	2030      	movs	r0, #48	; 0x30
 80002aa:	f000 fa57 	bl	800075c <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002ae:	f000 fa2b 	bl	8000708 <monitor_begin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	0800015d 	.word	0x0800015d
 80002bc:	080001cd 	.word	0x080001cd
 80002c0:	0800cb68 	.word	0x0800cb68
 80002c4:	20000434 	.word	0x20000434
 80002c8:	0800baf8 	.word	0x0800baf8

080002cc <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(buf, strlen(buf));
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ff39 	bl	800014c <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29b      	uxth	r3, r3
 80002de:	4619      	mov	r1, r3
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f00a fac7 	bl	800a874 <CDC_Transmit_FS>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 80002fa:	2204      	movs	r2, #4
 80002fc:	498c      	ldr	r1, [pc, #560]	; (8000530 <monitor_check_cmd+0x240>)
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f00a fefc 	bl	800b0fc <strncmp>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800030a:	4a8a      	ldr	r2, [pc, #552]	; (8000534 <monitor_check_cmd+0x244>)
 800030c:	2164      	movs	r1, #100	; 0x64
 800030e:	488a      	ldr	r0, [pc, #552]	; (8000538 <monitor_check_cmd+0x248>)
 8000310:	f00a fec0 	bl	800b094 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000314:	4888      	ldr	r0, [pc, #544]	; (8000538 <monitor_check_cmd+0x248>)
 8000316:	f7ff ffd9 	bl	80002cc <monitor_send_string>
	}
	//se não era comando, tenta escrever na tela
	/*	else {
	 lcd_print(cmd);
	 }*/
}
 800031a:	e105      	b.n	8000528 <monitor_check_cmd+0x238>
	else if (cmd[0] == LCD_CMD) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2bfe      	cmp	r3, #254	; 0xfe
 8000322:	f040 8101 	bne.w	8000528 <monitor_check_cmd+0x238>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b31      	cmp	r3, #49	; 0x31
 800032e:	d109      	bne.n	8000344 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000330:	4b82      	ldr	r3, [pc, #520]	; (800053c <monitor_check_cmd+0x24c>)
 8000332:	4a83      	ldr	r2, [pc, #524]	; (8000540 <monitor_check_cmd+0x250>)
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4880      	ldr	r0, [pc, #512]	; (8000538 <monitor_check_cmd+0x248>)
 8000338:	f00a feac 	bl	800b094 <sniprintf>
			monitor_send_string(ans);
 800033c:	487e      	ldr	r0, [pc, #504]	; (8000538 <monitor_check_cmd+0x248>)
 800033e:	f7ff ffc5 	bl	80002cc <monitor_send_string>
}
 8000342:	e0f1      	b.n	8000528 <monitor_check_cmd+0x238>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3301      	adds	r3, #1
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b30      	cmp	r3, #48	; 0x30
 800034c:	d109      	bne.n	8000362 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800034e:	4b7b      	ldr	r3, [pc, #492]	; (800053c <monitor_check_cmd+0x24c>)
 8000350:	4a7c      	ldr	r2, [pc, #496]	; (8000544 <monitor_check_cmd+0x254>)
 8000352:	2164      	movs	r1, #100	; 0x64
 8000354:	4878      	ldr	r0, [pc, #480]	; (8000538 <monitor_check_cmd+0x248>)
 8000356:	f00a fe9d 	bl	800b094 <sniprintf>
			monitor_send_string(ans);
 800035a:	4877      	ldr	r0, [pc, #476]	; (8000538 <monitor_check_cmd+0x248>)
 800035c:	f7ff ffb6 	bl	80002cc <monitor_send_string>
}
 8000360:	e0e2      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SOFT_RESET) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b56      	cmp	r3, #86	; 0x56
 800036a:	d102      	bne.n	8000372 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 800036c:	f000 fb32 	bl	80009d4 <lcd_soft_reset>
}
 8000370:	e0da      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b42      	cmp	r3, #66	; 0x42
 800037a:	d103      	bne.n	8000384 <monitor_check_cmd+0x94>
			enable_backlight(true);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 fb3d 	bl	80009fc <enable_backlight>
}
 8000382:	e0d1      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b46      	cmp	r3, #70	; 0x46
 800038c:	d103      	bne.n	8000396 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fb34 	bl	80009fc <enable_backlight>
}
 8000394:	e0c8      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b66      	cmp	r3, #102	; 0x66
 800039e:	d103      	bne.n	80003a8 <monitor_check_cmd+0xb8>
			inverse_text(true);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fa03 	bl	80007ac <inverse_text>
}
 80003a6:	e0bf      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b67      	cmp	r3, #103	; 0x67
 80003b0:	d103      	bne.n	80003ba <monitor_check_cmd+0xca>
			inverse_text(false);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 f9fa 	bl	80007ac <inverse_text>
}
 80003b8:	e0b6      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b58      	cmp	r3, #88	; 0x58
 80003c2:	d102      	bne.n	80003ca <monitor_check_cmd+0xda>
			clear_display();
 80003c4:	f000 fb0c 	bl	80009e0 <clear_display>
}
 80003c8:	e0ae      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b70      	cmp	r3, #112	; 0x70
 80003d2:	d10a      	bne.n	80003ea <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3303      	adds	r3, #3
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3302      	adds	r3, #2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	4610      	mov	r0, r2
 80003e4:	f000 fab2 	bl	800094c <put_pixel>
}
 80003e8:	e09e      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b71      	cmp	r3, #113	; 0x71
 80003f2:	d10a      	bne.n	800040a <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3303      	adds	r3, #3
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3302      	adds	r3, #2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4610      	mov	r0, r2
 8000404:	f000 fac4 	bl	8000990 <erase_pixel>
}
 8000408:	e08e      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3301      	adds	r3, #1
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b43      	cmp	r3, #67	; 0x43
 8000412:	d103      	bne.n	800041c <monitor_check_cmd+0x12c>
			auto_line_wrap(true);
 8000414:	2001      	movs	r0, #1
 8000416:	f000 f991 	bl	800073c <auto_line_wrap>
}
 800041a:	e085      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3301      	adds	r3, #1
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b44      	cmp	r3, #68	; 0x44
 8000424:	d103      	bne.n	800042e <monitor_check_cmd+0x13e>
			auto_line_wrap(false);
 8000426:	2000      	movs	r0, #0
 8000428:	f000 f988 	bl	800073c <auto_line_wrap>
}
 800042c:	e07c      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SET_INSERT) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3301      	adds	r3, #1
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b47      	cmp	r3, #71	; 0x47
 8000436:	d10a      	bne.n	800044e <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3302      	adds	r3, #2
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3303      	adds	r3, #3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	4610      	mov	r0, r2
 8000448:	f000 f988 	bl	800075c <text_insertion_point>
}
 800044c:	e06c      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_HOME_INSERT) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b48      	cmp	r3, #72	; 0x48
 8000456:	d104      	bne.n	8000462 <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000458:	2100      	movs	r1, #0
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f97e 	bl	800075c <text_insertion_point>
}
 8000460:	e062      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_READ_GPI) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b65      	cmp	r3, #101	; 0x65
 800046a:	d114      	bne.n	8000496 <monitor_check_cmd+0x1a6>
			if (cmd[2] == '0') {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b30      	cmp	r3, #48	; 0x30
 8000474:	d158      	bne.n	8000528 <monitor_check_cmd+0x238>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <monitor_check_cmd+0x258>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
						ddp[1]);
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <monitor_check_cmd+0x258>)
 800047e:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	4613      	mov	r3, r2
 8000484:	4a31      	ldr	r2, [pc, #196]	; (800054c <monitor_check_cmd+0x25c>)
 8000486:	2164      	movs	r1, #100	; 0x64
 8000488:	482b      	ldr	r0, [pc, #172]	; (8000538 <monitor_check_cmd+0x248>)
 800048a:	f00a fe03 	bl	800b094 <sniprintf>
				monitor_send_string(ans);
 800048e:	482a      	ldr	r0, [pc, #168]	; (8000538 <monitor_check_cmd+0x248>)
 8000490:	f7ff ff1c 	bl	80002cc <monitor_send_string>
}
 8000494:	e048      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b69      	cmp	r3, #105	; 0x69
 800049e:	d102      	bne.n	80004a6 <monitor_check_cmd+0x1b6>
			disp_splash();
 80004a0:	f000 fad4 	bl	8000a4c <disp_splash>
}
 80004a4:	e040      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b76      	cmp	r3, #118	; 0x76
 80004ae:	d102      	bne.n	80004b6 <monitor_check_cmd+0x1c6>
			def_thick_v_bar();
 80004b0:	f000 f98c 	bl	80007cc <def_thick_v_bar>
}
 80004b4:	e038      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	3301      	adds	r3, #1
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b73      	cmp	r3, #115	; 0x73
 80004be:	d102      	bne.n	80004c6 <monitor_check_cmd+0x1d6>
			def_thin_v_bar();
 80004c0:	f000 f990 	bl	80007e4 <def_thin_v_bar>
}
 80004c4:	e030      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3301      	adds	r3, #1
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b3d      	cmp	r3, #61	; 0x3d
 80004ce:	d10a      	bne.n	80004e6 <monitor_check_cmd+0x1f6>
			draw_v_bar_graph(cmd[2], cmd[3]);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3302      	adds	r3, #2
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3303      	adds	r3, #3
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4610      	mov	r0, r2
 80004e0:	f000 f98c 	bl	80007fc <draw_v_bar_graph>
}
 80004e4:	e020      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b3d      	cmp	r3, #61	; 0x3d
 80004ee:	d10a      	bne.n	8000506 <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3302      	adds	r3, #2
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3303      	adds	r3, #3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4610      	mov	r0, r2
 8000500:	f000 f9b0 	bl	8000864 <erase_v_bar_graph>
}
 8000504:	e010      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b7c      	cmp	r3, #124	; 0x7c
 800050e:	d10b      	bne.n	8000528 <monitor_check_cmd+0x238>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	7818      	ldrb	r0, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3303      	adds	r3, #3
 800051a:	7819      	ldrb	r1, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3304      	adds	r3, #4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	f000 f9d2 	bl	80008cc <draw_h_bar_graph>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	0800ba14 	.word	0x0800ba14
 8000534:	0800ba1c 	.word	0x0800ba1c
 8000538:	2000052c 	.word	0x2000052c
 800053c:	0800ba54 	.word	0x0800ba54
 8000540:	0800ba58 	.word	0x0800ba58
 8000544:	0800ba70 	.word	0x0800ba70
 8000548:	20000000 	.word	0x20000000
 800054c:	0800ba84 	.word	0x0800ba84

08000550 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	uint8_t i;
	CDC_Transmit_FS(buf, len);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f00a f987 	bl	800a874 <CDC_Transmit_FS>

	for (i = 0; i < len; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e009      	b.n	8000580 <app_usb_cbk+0x30>
		cmd[i] = *(buf + i);
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	441a      	add	r2, r3
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	7811      	ldrb	r1, [r2, #0]
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <app_usb_cbk+0x4c>)
 8000578:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len; i++) {
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f1      	bhi.n	800056c <app_usb_cbk+0x1c>
	}

	size = len;
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <app_usb_cbk+0x50>)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	6013      	str	r3, [r2, #0]
	new_cmd = true;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <app_usb_cbk+0x54>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200004c8 	.word	0x200004c8
 80005a0:	20000590 	.word	0x20000590
 80005a4:	20000594 	.word	0x20000594

080005a8 <monitor_interrupt>:

void monitor_interrupt(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80005ae:	4b52      	ldr	r3, [pc, #328]	; (80006f8 <monitor_interrupt+0x150>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f000 809c 	beq.w	80006f0 <monitor_interrupt+0x148>
		uint8_t offset = 0, bgn_print, end_print;
 80005b8:	2300      	movs	r3, #0
 80005ba:	71fb      	strb	r3, [r7, #7]
		bgn_print = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80005c0:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <monitor_interrupt+0x154>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80005ca:	2300      	movs	r3, #0
 80005cc:	70fb      	strb	r3, [r7, #3]
		/*o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
		 começa o inicializador*/
		while (offset <= size) {
 80005ce:	e07a      	b.n	80006c6 <monitor_interrupt+0x11e>
			if(*(cmd + offset)==LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20 ){
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4a4b      	ldr	r2, [pc, #300]	; (8000700 <monitor_interrupt+0x158>)
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2bfd      	cmp	r3, #253	; 0xfd
 80005da:	d10f      	bne.n	80005fc <monitor_interrupt+0x54>
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a47      	ldr	r2, [pc, #284]	; (8000700 <monitor_interrupt+0x158>)
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bfe      	cmp	r3, #254	; 0xfe
 80005e8:	d008      	beq.n	80005fc <monitor_interrupt+0x54>
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a44      	ldr	r2, [pc, #272]	; (8000700 <monitor_interrupt+0x158>)
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b14      	cmp	r3, #20
 80005f6:	d001      	beq.n	80005fc <monitor_interrupt+0x54>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	71bb      	strb	r3, [r7, #6]
			}
			if(*(cmd + offset)==LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size){
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a40      	ldr	r2, [pc, #256]	; (8000700 <monitor_interrupt+0x158>)
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2bfe      	cmp	r3, #254	; 0xfe
 8000606:	d106      	bne.n	8000616 <monitor_interrupt+0x6e>
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a3c      	ldr	r2, [pc, #240]	; (8000700 <monitor_interrupt+0x158>)
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2bfd      	cmp	r3, #253	; 0xfd
 8000614:	d104      	bne.n	8000620 <monitor_interrupt+0x78>
 8000616:	79fa      	ldrb	r2, [r7, #7]
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <monitor_interrupt+0x154>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d103      	bne.n	8000628 <monitor_interrupt+0x80>
				//se o caractere atual é o de inicialização de comando e o anterior não é o começo de outro e
				printable = true;
 8000620:	2301      	movs	r3, #1
 8000622:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	717b      	strb	r3, [r7, #5]
			}

			if (*(cmd + offset) == LCD_CMD) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a35      	ldr	r2, [pc, #212]	; (8000700 <monitor_interrupt+0x158>)
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2bfe      	cmp	r3, #254	; 0xfe
 8000632:	d117      	bne.n	8000664 <monitor_interrupt+0xbc>
				monitor_check_cmd((char*) cmd + offset, size);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4a32      	ldr	r2, [pc, #200]	; (8000700 <monitor_interrupt+0x158>)
 8000638:	4413      	add	r3, r2
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <monitor_interrupt+0x154>)
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe55 	bl	80002f0 <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000646:	793b      	ldrb	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	713b      	strb	r3, [r7, #4]
 800065a:	793b      	ldrb	r3, [r7, #4]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	713b      	strb	r3, [r7, #4]
 8000662:	e02d      	b.n	80006c0 <monitor_interrupt+0x118>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a26      	ldr	r2, [pc, #152]	; (8000700 <monitor_interrupt+0x158>)
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2bfd      	cmp	r3, #253	; 0xfd
 800066e:	d111      	bne.n	8000694 <monitor_interrupt+0xec>
				is_cmd = !is_cmd;
 8000670:	793b      	ldrb	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	713b      	strb	r3, [r7, #4]
 8000684:	793b      	ldrb	r3, [r7, #4]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	713b      	strb	r3, [r7, #4]
				bgn_print = offset + 1;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3301      	adds	r3, #1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	e015      	b.n	80006c0 <monitor_interrupt+0x118>
			} else if (printable && !is_cmd) {
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d012      	beq.n	80006c0 <monitor_interrupt+0x118>
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	f083 0301 	eor.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00c      	beq.n	80006c0 <monitor_interrupt+0x118>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <monitor_interrupt+0x158>)
 80006aa:	1899      	adds	r1, r3, r2
 80006ac:	797a      	ldrb	r2, [r7, #5]
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <monitor_interrupt+0x15c>)
 80006b6:	f00a fd35 	bl	800b124 <strncpy>
				lcd_print(ans);
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <monitor_interrupt+0x15c>)
 80006bc:	f000 fa28 	bl	8000b10 <lcd_print>
			}


			offset++;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	3301      	adds	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
		while (offset <= size) {
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <monitor_interrupt+0x154>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	f67f af7f 	bls.w	80005d0 <monitor_interrupt+0x28>
		}
	new_cmd = !new_cmd;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <monitor_interrupt+0x150>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf14      	ite	ne
 80006da:	2301      	movne	r3, #1
 80006dc:	2300      	moveq	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f083 0301 	eor.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <monitor_interrupt+0x150>)
 80006ee:	701a      	strb	r2, [r3, #0]
	}
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000594 	.word	0x20000594
 80006fc:	20000590 	.word	0x20000590
 8000700:	200004c8 	.word	0x200004c8
 8000704:	2000052c 	.word	0x2000052c

08000708 <monitor_begin>:

void monitor_begin(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	size = 0;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <monitor_begin+0x24>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <monitor_begin+0x28>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <monitor_begin+0x2c>)
 800071a:	2164      	movs	r1, #100	; 0x64
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <monitor_begin+0x30>)
 800071e:	f00a fcb9 	bl	800b094 <sniprintf>
	monitor_send_string(ans);
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <monitor_begin+0x30>)
 8000724:	f7ff fdd2 	bl	80002cc <monitor_send_string>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000590 	.word	0x20000590
 8000730:	20000594 	.word	0x20000594
 8000734:	0800ba90 	.word	0x0800ba90
 8000738:	2000052c 	.word	0x2000052c

0800073c <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <auto_line_wrap+0x1c>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	7013      	strb	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000596 	.word	0x20000596

0800075c <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	col = col * u8g2_GetMaxCharWidth(&u8g2);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <text_insertion_point+0x48>)
 800076e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000772:	b2db      	uxtb	r3, r3
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	71fb      	strb	r3, [r7, #7]
	row = row * u8g2_GetMaxCharHeight(&u8g2);
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <text_insertion_point+0x48>)
 800077e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000782:	b2db      	uxtb	r3, r3
 8000784:	79ba      	ldrb	r2, [r7, #6]
 8000786:	fb02 f303 	mul.w	r3, r2, r3
 800078a:	71bb      	strb	r3, [r7, #6]
	//x do cursor
	//y do cursor
	cursor[0] = col /*- '0'*/;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <text_insertion_point+0x4c>)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	7013      	strb	r3, [r2, #0]
	cursor[1] = row /*- '0'*/;
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <text_insertion_point+0x4c>)
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	7053      	strb	r3, [r2, #1]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000434 	.word	0x20000434
 80007a8:	20000598 	.word	0x20000598

080007ac <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <inverse_text+0x1c>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	7013      	strb	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000595 	.word	0x20000595

080007cc <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <def_thick_v_bar+0x14>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000022c 	.word	0x2000022c

080007e4 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <def_thin_v_bar+0x14>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000022c 	.word	0x2000022c

080007fc <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af02      	add	r7, sp, #8
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3b30      	subs	r3, #48	; 0x30
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <draw_v_bar_graph+0x5c>)
 8000814:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <draw_v_bar_graph+0x60>)
 8000822:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <draw_v_bar_graph+0x60>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b299      	uxth	r1, r3
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <draw_v_bar_graph+0x60>)
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <draw_v_bar_graph+0x64>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b298      	uxth	r0, r3
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	b29b      	uxth	r3, r3
 800083a:	3b30      	subs	r3, #48	; 0x30
 800083c:	b29b      	uxth	r3, r3
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4603      	mov	r3, r0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <draw_v_bar_graph+0x5c>)
 8000844:	f000 fd86 	bl	8001354 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <draw_v_bar_graph+0x5c>)
 800084a:	f000 fe89 	bl	8001560 <u8g2_SendBuffer>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000434 	.word	0x20000434
 800085c:	20000598 	.word	0x20000598
 8000860:	2000022c 	.word	0x2000022c

08000864 <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	3b30      	subs	r3, #48	; 0x30
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <erase_v_bar_graph+0x5c>)
 800087c:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <erase_v_bar_graph+0x60>)
 800088a:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <erase_v_bar_graph+0x60>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b299      	uxth	r1, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <erase_v_bar_graph+0x60>)
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <erase_v_bar_graph+0x64>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b298      	uxth	r0, r3
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	3b30      	subs	r3, #48	; 0x30
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4603      	mov	r3, r0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <erase_v_bar_graph+0x5c>)
 80008ac:	f000 fd52 	bl	8001354 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <erase_v_bar_graph+0x5c>)
 80008b2:	f000 fe55 	bl	8001560 <u8g2_SendBuffer>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000434 	.word	0x20000434
 80008c4:	20000598 	.word	0x20000598
 80008c8:	2000022c 	.word	0x2000022c

080008cc <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	460b      	mov	r3, r1
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	4613      	mov	r3, r2
 80008dc:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col - '0') * u8g2_GetMaxCharHeight(&u8g2);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	3b30      	subs	r3, #48	; 0x30
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4a17      	ldr	r2, [pc, #92]	; (8000944 <draw_h_bar_graph+0x78>)
 80008e6:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <draw_h_bar_graph+0x7c>)
 80008f4:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row - '0') * u8g2_GetMaxCharWidth(&u8g2);
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	3b30      	subs	r3, #48	; 0x30
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4a11      	ldr	r2, [pc, #68]	; (8000944 <draw_h_bar_graph+0x78>)
 80008fe:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <draw_h_bar_graph+0x7c>)
 800090c:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <draw_h_bar_graph+0x7c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b299      	uxth	r1, r3
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <draw_h_bar_graph+0x7c>)
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	b29a      	uxth	r2, r3
 800091a:	797b      	ldrb	r3, [r7, #5]
 800091c:	b29b      	uxth	r3, r3
 800091e:	3b30      	subs	r3, #48	; 0x30
 8000920:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <draw_h_bar_graph+0x78>)
 8000924:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 8000928:	b29b      	uxth	r3, r3
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4603      	mov	r3, r0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <draw_h_bar_graph+0x78>)
 8000930:	f000 fd10 	bl	8001354 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <draw_h_bar_graph+0x78>)
 8000936:	f000 fe13 	bl	8001560 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000434 	.word	0x20000434
 8000948:	20000598 	.word	0x20000598

0800094c <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 800095c:	2101      	movs	r1, #1
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <put_pixel+0x40>)
 8000960:	f001 ffec 	bl	800293c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3b30      	subs	r3, #48	; 0x30
 800096a:	b299      	uxth	r1, r3
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	b29b      	uxth	r3, r3
 8000970:	3b30      	subs	r3, #48	; 0x30
 8000972:	b29b      	uxth	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <put_pixel+0x40>)
 8000978:	f001 ffad 	bl	80028d6 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <put_pixel+0x40>)
 800097e:	f000 fdef 	bl	8001560 <u8g2_SendBuffer>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000434 	.word	0x20000434

08000990 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 80009a0:	2100      	movs	r1, #0
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <erase_pixel+0x40>)
 80009a4:	f001 ffca 	bl	800293c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3b30      	subs	r3, #48	; 0x30
 80009ae:	b299      	uxth	r1, r3
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b30      	subs	r3, #48	; 0x30
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <erase_pixel+0x40>)
 80009bc:	f001 ff8b 	bl	80028d6 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <erase_pixel+0x40>)
 80009c2:	f000 fdcd 	bl	8001560 <u8g2_SendBuffer>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000434 	.word	0x20000434

080009d4 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 80009d8:	f002 ffbf 	bl	800395a <HAL_NVIC_SystemReset>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	text_insertion_point(0 + '0', 0 + '0');
 80009e4:	2130      	movs	r1, #48	; 0x30
 80009e6:	2030      	movs	r0, #48	; 0x30
 80009e8:	f7ff feb8 	bl	800075c <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <clear_display+0x18>)
 80009ee:	f000 ff65 	bl	80018bc <u8g2_ClearDisplay>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000434 	.word	0x20000434

080009fc <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <enable_backlight+0x20>)
 8000a0e:	f003 f939 	bl	8003c84 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010800 	.word	0x40010800

08000a20 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast - '0') * 9);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	00d2      	lsls	r2, r2, #3
 8000a30:	4413      	add	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3350      	adds	r3, #80	; 0x50
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <set_contrast+0x28>)
 8000a3c:	f002 fd3b 	bl	80034b6 <u8x8_SetContrast>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000434 	.word	0x20000434

08000a4c <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <disp_splash+0x28>)
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2318      	movs	r3, #24
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	23b4      	movs	r3, #180	; 0xb4
 8000a5c:	2214      	movs	r2, #20
 8000a5e:	2106      	movs	r1, #6
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <disp_splash+0x2c>)
 8000a62:	f000 fc34 	bl	80012ce <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <disp_splash+0x2c>)
 8000a68:	f000 fd7a 	bl	8001560 <u8g2_SendBuffer>

}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000004 	.word	0x20000004
 8000a78:	20000434 	.word	0x20000434

08000a7c <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap *wrap, uint8_t *txt) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux = 1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73bb      	strb	r3, [r7, #14]

	for (index = 0; txt[index] != '\0'; index++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e002      	b.n	8000a9a <str_warper+0x1e>
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	3301      	adds	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f6      	bne.n	8000a94 <str_warper+0x18>
		;
	index++;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
	wrap->wrap_times = index
			/ (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2));
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <str_warper+0x90>)
 8000ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <str_warper+0x90>)
 8000ab8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000abc:	fb91 f3f3 	sdiv	r3, r1, r3
 8000ac0:	fb92 f3f3 	sdiv	r3, r2, r3
	wrap->wrap_times = index
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	751a      	strb	r2, [r3, #20]
	do {
		wrap->wrap_str[aux] = &txt[aux
				* (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2))];
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <str_warper+0x90>)
 8000ace:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <str_warper+0x90>)
 8000ad6:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000ada:	fb91 f2f2 	sdiv	r2, r1, r2
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	4619      	mov	r1, r3
		wrap->wrap_str[aux] = &txt[aux
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4419      	add	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		aux++;
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	3301      	adds	r3, #1
 8000af4:	73bb      	strb	r3, [r7, #14]
	} while (aux != wrap->wrap_times);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7d1b      	ldrb	r3, [r3, #20]
 8000afa:	7bba      	ldrb	r2, [r7, #14]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d1e4      	bne.n	8000aca <str_warper+0x4e>
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000434 	.word	0x20000434

08000b10 <lcd_print>:
void test_font(void){
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	6078      	str	r0, [r7, #4]
	txt_wrap wrap;
	wrap.wrap_str[0] = txt;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
	wrap.wrap_times = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t aux = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (text_invertion) {
 8000b28:	4b95      	ldr	r3, [pc, #596]	; (8000d80 <lcd_print+0x270>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 809a 	beq.w	8000c66 <lcd_print+0x156>
		if (text_wrap) {
 8000b32:	4b94      	ldr	r3, [pc, #592]	; (8000d84 <lcd_print+0x274>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d072      	beq.n	8000c20 <lcd_print+0x110>
			str_warper(&wrap, txt);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff9b 	bl	8000a7c <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b4c:	e061      	b.n	8000c12 <lcd_print+0x102>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000b4e:	4b8e      	ldr	r3, [pc, #568]	; (8000d88 <lcd_print+0x278>)
 8000b50:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <lcd_print+0x27c>)
 8000b62:	705a      	strb	r2, [r3, #1]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000b64:	4b89      	ldr	r3, [pc, #548]	; (8000d8c <lcd_print+0x27c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <lcd_print+0x27c>)
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
						0, 0, 0, wrap.wrap_str[aux]);
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	3328      	adds	r3, #40	; 0x28
 8000b78:	443b      	add	r3, r7
 8000b7a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000b7e:	9303      	str	r3, [sp, #12]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9302      	str	r3, [sp, #8]
 8000b84:	2300      	movs	r3, #0
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	487e      	ldr	r0, [pc, #504]	; (8000d88 <lcd_print+0x278>)
 8000b90:	f000 fe40 	bl	8001814 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000b94:	487c      	ldr	r0, [pc, #496]	; (8000d88 <lcd_print+0x278>)
 8000b96:	f000 fce3 	bl	8001560 <u8g2_SendBuffer>

				if (u8g2_GetStrWidth(&u8g2,
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	3328      	adds	r3, #40	; 0x28
 8000ba4:	443b      	add	r3, r7
 8000ba6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				if (u8g2_GetStrWidth(&u8g2,
 8000baa:	4619      	mov	r1, r3
 8000bac:	4876      	ldr	r0, [pc, #472]	; (8000d88 <lcd_print+0x278>)
 8000bae:	f001 fd3f 	bl	8002630 <u8g2_GetStrWidth>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000bb6:	4b74      	ldr	r3, [pc, #464]	; (8000d88 <lcd_print+0x278>)
 8000bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
				if (u8g2_GetStrWidth(&u8g2,
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d90e      	bls.n	8000bde <lcd_print+0xce>
					cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000bc0:	4b71      	ldr	r3, [pc, #452]	; (8000d88 <lcd_print+0x278>)
 8000bc2:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000bcc:	fb02 f303 	mul.w	r3, r2, r3
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	; (8000d8c <lcd_print+0x27c>)
 8000bd4:	705a      	strb	r2, [r3, #1]
					cursor[0] = 0;
 8000bd6:	4b6d      	ldr	r3, [pc, #436]	; (8000d8c <lcd_print+0x27c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e014      	b.n	8000c08 <lcd_print+0xf8>
				} else {
					cursor[0] += u8g2_GetStrWidth(&u8g2,
							wrap.wrap_str[aux - 1]);
 8000bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000be2:	3b01      	subs	r3, #1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	3328      	adds	r3, #40	; 0x28
 8000be8:	443b      	add	r3, r7
 8000bea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
					cursor[0] += u8g2_GetStrWidth(&u8g2,
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4865      	ldr	r0, [pc, #404]	; (8000d88 <lcd_print+0x278>)
 8000bf2:	f001 fd1d 	bl	8002630 <u8g2_GetStrWidth>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <lcd_print+0x27c>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	b2cb      	uxtb	r3, r1
 8000c00:	4413      	add	r3, r2
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <lcd_print+0x27c>)
 8000c06:	701a      	strb	r2, [r3, #0]
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d397      	bcc.n	8000b4e <lcd_print+0x3e>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}

}
 8000c1e:	e0ab      	b.n	8000d78 <lcd_print+0x268>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000c20:	4b5a      	ldr	r3, [pc, #360]	; (8000d8c <lcd_print+0x27c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b299      	uxth	r1, r3
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <lcd_print+0x27c>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	2300      	movs	r3, #0
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2300      	movs	r3, #0
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	4852      	ldr	r0, [pc, #328]	; (8000d88 <lcd_print+0x278>)
 8000c40:	f000 fde8 	bl	8001814 <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8000c44:	4850      	ldr	r0, [pc, #320]	; (8000d88 <lcd_print+0x278>)
 8000c46:	f000 fc8b 	bl	8001560 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	484e      	ldr	r0, [pc, #312]	; (8000d88 <lcd_print+0x278>)
 8000c4e:	f001 fcef 	bl	8002630 <u8g2_GetStrWidth>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <lcd_print+0x27c>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	b2cb      	uxtb	r3, r1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <lcd_print+0x27c>)
 8000c62:	701a      	strb	r2, [r3, #0]
}
 8000c64:	e088      	b.n	8000d78 <lcd_print+0x268>
		if (text_wrap) {
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <lcd_print+0x274>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d06a      	beq.n	8000d44 <lcd_print+0x234>
			str_warper(&wrap, txt);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff01 	bl	8000a7c <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c80:	e022      	b.n	8000cc8 <lcd_print+0x1b8>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000c82:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <lcd_print+0x278>)
 8000c84:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <lcd_print+0x27c>)
 8000c96:	705a      	strb	r2, [r3, #1]
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 8000c98:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <lcd_print+0x27c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <lcd_print+0x27c>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	3328      	adds	r3, #40	; 0x28
 8000cac:	443b      	add	r3, r7
 8000cae:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cb2:	4835      	ldr	r0, [pc, #212]	; (8000d88 <lcd_print+0x278>)
 8000cb4:	f001 fb80 	bl	80023b8 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000cb8:	4833      	ldr	r0, [pc, #204]	; (8000d88 <lcd_print+0x278>)
 8000cba:	f000 fc51 	bl	8001560 <u8g2_SendBuffer>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ccc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3d6      	bcc.n	8000c82 <lcd_print+0x172>
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	3328      	adds	r3, #40	; 0x28
 8000cde:	443b      	add	r3, r7
 8000ce0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
			if (u8g2_GetStrWidth(&u8g2,
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4828      	ldr	r0, [pc, #160]	; (8000d88 <lcd_print+0x278>)
 8000ce8:	f001 fca2 	bl	8002630 <u8g2_GetStrWidth>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <lcd_print+0x278>)
 8000cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
			if (u8g2_GetStrWidth(&u8g2,
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d90e      	bls.n	8000d18 <lcd_print+0x208>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <lcd_print+0x278>)
 8000cfc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <lcd_print+0x27c>)
 8000d0e:	705a      	strb	r2, [r3, #1]
				cursor[0] = 0;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <lcd_print+0x27c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	e02f      	b.n	8000d78 <lcd_print+0x268>
				cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	3328      	adds	r3, #40	; 0x28
 8000d22:	443b      	add	r3, r7
 8000d24:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4817      	ldr	r0, [pc, #92]	; (8000d88 <lcd_print+0x278>)
 8000d2c:	f001 fc80 	bl	8002630 <u8g2_GetStrWidth>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4619      	mov	r1, r3
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <lcd_print+0x27c>)
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	b2cb      	uxtb	r3, r1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <lcd_print+0x27c>)
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	e019      	b.n	8000d78 <lcd_print+0x268>
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <lcd_print+0x27c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <lcd_print+0x27c>)
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <lcd_print+0x278>)
 8000d54:	f001 fb30 	bl	80023b8 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <lcd_print+0x278>)
 8000d5a:	f000 fc01 	bl	8001560 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <lcd_print+0x278>)
 8000d62:	f001 fc65 	bl	8002630 <u8g2_GetStrWidth>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <lcd_print+0x27c>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	b2cb      	uxtb	r3, r1
 8000d70:	4413      	add	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <lcd_print+0x27c>)
 8000d76:	701a      	strb	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000595 	.word	0x20000595
 8000d84:	20000596 	.word	0x20000596
 8000d88:	20000434 	.word	0x20000434
 8000d8c:	20000598 	.word	0x20000598

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f002 fc44 	bl	8003620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f80a 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 f898 	bl	8000ed0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000da0:	f009 fc8c 	bl	800a6bc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000da4:	f000 f85e 	bl	8000e64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8000da8:	f7ff fa56 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000dac:	bf30      	wfi
 8000dae:	e7fd      	b.n	8000dac <main+0x1c>

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00a f960 	bl	800b084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fc18 	bl	800563c <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e12:	f000 f8e3 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fe84 	bl	8005b40 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e3e:	f000 f8cd 	bl	8000fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e42:	2310      	movs	r3, #16
 8000e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 ffdd 	bl	8005e0c <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e58:	f000 f8c0 	bl	8000fdc <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MX_SPI1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e98:	2208      	movs	r2, #8
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb6:	f005 f85f 	bl	8005f78 <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 f88c 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000059c 	.word	0x2000059c
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <MX_GPIO_Init+0x100>)
 8000f4c:	f002 fe9a 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2110      	movs	r1, #16
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f56:	f002 fe95 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f60:	f002 fe90 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2103      	movs	r1, #3
 8000f68:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <MX_GPIO_Init+0x108>)
 8000f6a:	f002 fe8b 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <MX_GPIO_Init+0x100>)
 8000f88:	f002 fcf8 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f8c:	2350      	movs	r3, #80	; 0x50
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000fa4:	f002 fcea 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_GPIO_Init+0x108>)
 8000fc0:	f002 fcdc 	bl	800397c <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_MspInit+0x7c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_MspInit+0x7c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_MspInit+0x7c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_MspInit+0x7c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_MspInit+0x7c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_MspInit+0x7c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2005      	movs	r0, #5
 8001024:	f002 fc6f 	bl	8003906 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001028:	2005      	movs	r0, #5
 800102a:	f002 fc88 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2005      	movs	r0, #5
 8001034:	f002 fc67 	bl	8003906 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001038:	2005      	movs	r0, #5
 800103a:	f002 fc80 	bl	800393e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x80>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_MspInit+0x80>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a15      	ldr	r2, [pc, #84]	; (80010dc <HAL_SPI_MspInit+0x70>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d123      	bne.n	80010d4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 8001092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_SPI_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010bc:	23a0      	movs	r3, #160	; 0xa0
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_SPI_MspInit+0x78>)
 80010d0:	f002 fc54 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  monitor_interrupt();
 800112e:	f7ff fa3b 	bl	80005a8 <monitor_interrupt>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f002 fabb 	bl	80036ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800114e:	f002 fee2 	bl	8003f16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001894 	.word	0x20001894

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f009 ff50 	bl	800b030 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20005000 	.word	0x20005000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	200005f4 	.word	0x200005f4
 80011c4:	20001db0 	.word	0x20001db0

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	4608      	mov	r0, r1
 80011fc:	4611      	mov	r1, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	4603      	mov	r3, r0
 8001202:	817b      	strh	r3, [r7, #10]
 8001204:	460b      	mov	r3, r1
 8001206:	813b      	strh	r3, [r7, #8]
 8001208:	4613      	mov	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001212:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001214:	7dbb      	ldrb	r3, [r7, #22]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001222:	897a      	ldrh	r2, [r7, #10]
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4413      	add	r3, r2
 8001228:	b298      	uxth	r0, r3
 800122a:	893b      	ldrh	r3, [r7, #8]
 800122c:	3301      	adds	r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	893a      	ldrh	r2, [r7, #8]
 8001232:	8979      	ldrh	r1, [r7, #10]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4603      	mov	r3, r0
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f001 fbc8 	bl	80029ce <u8g2_IsIntersection>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d040      	beq.n	80012c6 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001248:	e035      	b.n	80012b6 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	4013      	ands	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	7dba      	ldrb	r2, [r7, #22]
 800125c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001260:	893a      	ldrh	r2, [r7, #8]
 8001262:	8979      	ldrh	r1, [r7, #10]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f001 fa76 	bl	800275c <u8g2_DrawHVLine>
 8001270:	e010      	b.n	8001294 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10b      	bne.n	8001294 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	7d7a      	ldrb	r2, [r7, #21]
 8001280:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001284:	893a      	ldrh	r2, [r7, #8]
 8001286:	8979      	ldrh	r1, [r7, #10]
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f001 fa64 	bl	800275c <u8g2_DrawHVLine>
    }
    x++;
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	3301      	adds	r3, #1
 8001298:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
      b++;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	3301      	adds	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
    }
    len--;
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1c6      	bne.n	800124a <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7dba      	ldrb	r2, [r7, #22]
 80012c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80012c4:	e000      	b.n	80012c8 <u8g2_DrawHXBM+0xd6>
    return;
 80012c6:	bf00      	nop
}
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af02      	add	r7, sp, #8
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	817b      	strh	r3, [r7, #10]
 80012e0:	460b      	mov	r3, r1
 80012e2:	813b      	strh	r3, [r7, #8]
 80012e4:	4613      	mov	r3, r2
 80012e6:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80012ec:	8afb      	ldrh	r3, [r7, #22]
 80012ee:	3307      	adds	r3, #7
 80012f0:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80012f2:	8afb      	ldrh	r3, [r7, #22]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012f8:	897a      	ldrh	r2, [r7, #10]
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	4413      	add	r3, r2
 80012fe:	b298      	uxth	r0, r3
 8001300:	893a      	ldrh	r2, [r7, #8]
 8001302:	8c3b      	ldrh	r3, [r7, #32]
 8001304:	4413      	add	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	893a      	ldrh	r2, [r7, #8]
 800130a:	8979      	ldrh	r1, [r7, #10]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f001 fb5c 	bl	80029ce <u8g2_IsIntersection>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d017      	beq.n	800134c <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800131c:	e012      	b.n	8001344 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	893a      	ldrh	r2, [r7, #8]
 8001322:	8979      	ldrh	r1, [r7, #10]
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4603      	mov	r3, r0
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff ff61 	bl	80011f2 <u8g2_DrawHXBM>
    bitmap += blen;
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	4413      	add	r3, r2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001338:	893b      	ldrh	r3, [r7, #8]
 800133a:	3301      	adds	r3, #1
 800133c:	813b      	strh	r3, [r7, #8]
    h--;
 800133e:	8c3b      	ldrh	r3, [r7, #32]
 8001340:	3b01      	subs	r3, #1
 8001342:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001344:	8c3b      	ldrh	r3, [r7, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e9      	bne.n	800131e <u8g2_DrawXBM+0x50>
 800134a:	e000      	b.n	800134e <u8g2_DrawXBM+0x80>
    return;
 800134c:	bf00      	nop
  }
}
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	461a      	mov	r2, r3
 8001362:	4603      	mov	r3, r0
 8001364:	817b      	strh	r3, [r7, #10]
 8001366:	460b      	mov	r3, r1
 8001368:	813b      	strh	r3, [r7, #8]
 800136a:	4613      	mov	r3, r2
 800136c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800136e:	897a      	ldrh	r2, [r7, #10]
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4413      	add	r3, r2
 8001374:	b298      	uxth	r0, r3
 8001376:	893a      	ldrh	r2, [r7, #8]
 8001378:	8b3b      	ldrh	r3, [r7, #24]
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	893a      	ldrh	r2, [r7, #8]
 8001380:	8979      	ldrh	r1, [r7, #10]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	4603      	mov	r3, r0
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f001 fb21 	bl	80029ce <u8g2_IsIntersection>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d012      	beq.n	80013b8 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001392:	e00d      	b.n	80013b0 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	893a      	ldrh	r2, [r7, #8]
 8001398:	8979      	ldrh	r1, [r7, #10]
 800139a:	2000      	movs	r0, #0
 800139c:	9000      	str	r0, [sp, #0]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f001 f9dc 	bl	800275c <u8g2_DrawHVLine>
    y++;    
 80013a4:	893b      	ldrh	r3, [r7, #8]
 80013a6:	3301      	adds	r3, #1
 80013a8:	813b      	strh	r3, [r7, #8]
    h--;
 80013aa:	8b3b      	ldrh	r3, [r7, #24]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80013b0:	8b3b      	ldrh	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ee      	bne.n	8001394 <u8g2_DrawBox+0x40>
 80013b6:	e000      	b.n	80013ba <u8g2_DrawBox+0x66>
    return;
 80013b8:	bf00      	nop
  }
}
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	460b      	mov	r3, r1
 80013d4:	813b      	strh	r3, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 80013da:	897b      	ldrh	r3, [r7, #10]
 80013dc:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80013de:	897a      	ldrh	r2, [r7, #10]
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	893a      	ldrh	r2, [r7, #8]
 80013e8:	8c3b      	ldrh	r3, [r7, #32]
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	893a      	ldrh	r2, [r7, #8]
 80013f0:	8979      	ldrh	r1, [r7, #10]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4603      	mov	r3, r0
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f001 fae9 	bl	80029ce <u8g2_IsIntersection>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d037      	beq.n	8001472 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	8979      	ldrh	r1, [r7, #10]
 8001408:	2000      	movs	r0, #0
 800140a:	9000      	str	r0, [sp, #0]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f001 f9a5 	bl	800275c <u8g2_DrawHVLine>
  if (h >= 2) {
 8001412:	8c3b      	ldrh	r3, [r7, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d92d      	bls.n	8001474 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001418:	8c3b      	ldrh	r3, [r7, #32]
 800141a:	3b02      	subs	r3, #2
 800141c:	843b      	strh	r3, [r7, #32]
    y++;
 800141e:	893b      	ldrh	r3, [r7, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001424:	8c3b      	ldrh	r3, [r7, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01a      	beq.n	8001460 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800142a:	8c3b      	ldrh	r3, [r7, #32]
 800142c:	893a      	ldrh	r2, [r7, #8]
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	2001      	movs	r0, #1
 8001432:	9000      	str	r0, [sp, #0]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f001 f991 	bl	800275c <u8g2_DrawHVLine>
      x+=w;
 800143a:	897a      	ldrh	r2, [r7, #10]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4413      	add	r3, r2
 8001440:	817b      	strh	r3, [r7, #10]
      x--;
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	3b01      	subs	r3, #1
 8001446:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001448:	8c3b      	ldrh	r3, [r7, #32]
 800144a:	893a      	ldrh	r2, [r7, #8]
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	2001      	movs	r0, #1
 8001450:	9000      	str	r0, [sp, #0]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f001 f982 	bl	800275c <u8g2_DrawHVLine>
      y+=h;
 8001458:	893a      	ldrh	r2, [r7, #8]
 800145a:	8c3b      	ldrh	r3, [r7, #32]
 800145c:	4413      	add	r3, r2
 800145e:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	893a      	ldrh	r2, [r7, #8]
 8001464:	8af9      	ldrh	r1, [r7, #22]
 8001466:	2000      	movs	r0, #0
 8001468:	9000      	str	r0, [sp, #0]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f001 f976 	bl	800275c <u8g2_DrawHVLine>
 8001470:	e000      	b.n	8001474 <u8g2_DrawFrame+0xb4>
    return;
 8001472:	bf00      	nop
  }
}
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7c1b      	ldrb	r3, [r3, #16]
 8001488:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f009 fdeb 	bl	800b084 <memset>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af02      	add	r7, sp, #8
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	70fb      	strb	r3, [r7, #3]
 80014c2:	4613      	mov	r3, r2
 80014c4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	7c1b      	ldrb	r3, [r3, #16]
 80014cc:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	89ba      	ldrh	r2, [r7, #12]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80014f2:	7bf9      	ldrb	r1, [r7, #15]
 80014f4:	78ba      	ldrb	r2, [r7, #2]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f001 ff88 	bl	8003414 <u8x8_DrawTile>
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001526:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	7c5b      	ldrb	r3, [r3, #17]
 800152e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001530:	7bba      	ldrb	r2, [r7, #14]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffbd 	bl	80014b6 <u8g2_send_tile_row>
    src_row++;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	3301      	adds	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	429a      	cmp	r2, r3
 800154e:	d203      	bcs.n	8001558 <u8g2_send_buffer+0x4c>
 8001550:	7bba      	ldrb	r2, [r7, #14]
 8001552:	7b3b      	ldrb	r3, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3eb      	bcc.n	8001530 <u8g2_send_buffer+0x24>
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffcf 	bl	800150c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 ffb2 	bl	80034d8 <u8x8_RefreshDisplay>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff5b 	bl	800147a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffd8 	bl	800157c <u8g2_SetBufferCurrTileRow>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff95 	bl	800150c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015e8:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	4413      	add	r3, r2
 80015f4:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	7c5b      	ldrb	r3, [r3, #17]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d304      	bcc.n	800160c <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 ff68 	bl	80034d8 <u8x8_RefreshDisplay>
    return 0;
 8001608:	2300      	movs	r3, #0
 800160a:	e00d      	b.n	8001628 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff2f 	bl	800147a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffab 	bl	800157c <u8g2_SetBufferCurrTileRow>
  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4603      	mov	r3, r0
 8001640:	817b      	strh	r3, [r7, #10]
 8001642:	460b      	mov	r3, r1
 8001644:	813b      	strh	r3, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 800164a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800164c:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800164e:	2308      	movs	r3, #8
 8001650:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001660:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001668:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001670:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 800167c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167e:	3301      	adds	r3, #1
 8001680:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 8001682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001684:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 800168c:	897b      	ldrh	r3, [r7, #10]
 800168e:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 8001690:	8b7a      	ldrh	r2, [r7, #26]
 8001692:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8001698:	8b7a      	ldrh	r2, [r7, #26]
 800169a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80016a0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80016a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	8c3b      	ldrh	r3, [r7, #32]
 80016ae:	4413      	add	r3, r2
 80016b0:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80016b2:	893b      	ldrh	r3, [r7, #8]
 80016b4:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	4798      	blx	r3
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	8afb      	ldrh	r3, [r7, #22]
 80016c4:	4413      	add	r3, r2
 80016c6:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 80016c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	8afa      	ldrh	r2, [r7, #22]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80016d4:	8afa      	ldrh	r2, [r7, #22]
 80016d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80016dc:	8afa      	ldrh	r2, [r7, #22]
 80016de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80016e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80016f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80016fa:	440b      	add	r3, r1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d067      	beq.n	80017dc <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 800170c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800170e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001710:	429a      	cmp	r2, r3
 8001712:	d109      	bne.n	8001728 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001714:	7f7b      	ldrb	r3, [r7, #29]
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf0c      	ite	eq
 800171a:	2301      	moveq	r3, #1
 800171c:	2300      	movne	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4619      	mov	r1, r3
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f001 f90a 	bl	800293c <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001728:	8b38      	ldrh	r0, [r7, #24]
 800172a:	8afa      	ldrh	r2, [r7, #22]
 800172c:	8b79      	ldrh	r1, [r7, #26]
 800172e:	8abb      	ldrh	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4603      	mov	r3, r0
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff fe43 	bl	80013c0 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 800173a:	7f7b      	ldrb	r3, [r7, #29]
 800173c:	4619      	mov	r1, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f001 f8fc 	bl	800293c <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f003 0318 	and.w	r3, r3, #24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d042      	beq.n	80017d4 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800174e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	429a      	cmp	r2, r3
 8001758:	d13c      	bne.n	80017d4 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	10db      	asrs	r3, r3, #3
 800175e:	b29b      	uxth	r3, r3
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001766:	8a7b      	ldrh	r3, [r7, #18]
 8001768:	3b01      	subs	r3, #1
 800176a:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 800176c:	2300      	movs	r3, #0
 800176e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001770:	e02c      	b.n	80017cc <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001772:	8b7a      	ldrh	r2, [r7, #26]
 8001774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001776:	4413      	add	r3, r2
 8001778:	b29a      	uxth	r2, r3
 800177a:	8a7b      	ldrh	r3, [r7, #18]
 800177c:	4413      	add	r3, r2
 800177e:	b299      	uxth	r1, r3
 8001780:	8afa      	ldrh	r2, [r7, #22]
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800178a:	4413      	add	r3, r2
 800178c:	b29a      	uxth	r2, r3
 800178e:	8a7b      	ldrh	r3, [r7, #18]
 8001790:	4413      	add	r3, r2
 8001792:	b29a      	uxth	r2, r3
 8001794:	8b3b      	ldrh	r3, [r7, #24]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f001 f86b 	bl	8002872 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 800179c:	8b7a      	ldrh	r2, [r7, #26]
 800179e:	8b3b      	ldrh	r3, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017a6:	4413      	add	r3, r2
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	8a7b      	ldrh	r3, [r7, #18]
 80017ac:	4413      	add	r3, r2
 80017ae:	b299      	uxth	r1, r3
 80017b0:	8afa      	ldrh	r2, [r7, #22]
 80017b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b4:	4413      	add	r3, r2
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	8a7b      	ldrh	r3, [r7, #18]
 80017ba:	4413      	add	r3, r2
 80017bc:	b29a      	uxth	r2, r3
 80017be:	8abb      	ldrh	r3, [r7, #20]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f001 f86f 	bl	80028a4 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 80017c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c8:	3301      	adds	r3, #1
 80017ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80017cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3ce      	bcc.n	8001772 <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80017d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d6:	3b01      	subs	r3, #1
 80017d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80017da:	e757      	b.n	800168c <u8g2_DrawButtonFrame+0x5c>
      break;
 80017dc:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d011      	beq.n	800180c <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80017e8:	2102      	movs	r1, #2
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f001 f8a6 	bl	800293c <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80017f0:	8b38      	ldrh	r0, [r7, #24]
 80017f2:	8afa      	ldrh	r2, [r7, #22]
 80017f4:	8b79      	ldrh	r1, [r7, #26]
 80017f6:	8abb      	ldrh	r3, [r7, #20]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	4603      	mov	r3, r0
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fda9 	bl	8001354 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001802:	7f7b      	ldrb	r3, [r7, #29]
 8001804:	4619      	mov	r1, r3
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f001 f898 	bl	800293c <u8g2_SetDrawColor>
  }
}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af04      	add	r7, sp, #16
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4603      	mov	r3, r0
 8001824:	817b      	strh	r3, [r7, #10]
 8001826:	460b      	mov	r3, r1
 8001828:	813b      	strh	r3, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 800182e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 ff11 	bl	8002658 <u8g2_GetUTF8Width>
 8001836:	4603      	mov	r3, r0
 8001838:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 800183a:	2300      	movs	r3, #0
 800183c:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001848:	8afb      	ldrh	r3, [r7, #22]
 800184a:	3301      	adds	r3, #1
 800184c:	0fda      	lsrs	r2, r3, #31
 800184e:	4413      	add	r3, r2
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	425b      	negs	r3, r3
 8001854:	b29a      	uxth	r2, r3
 8001856:	897b      	ldrh	r3, [r7, #10]
 8001858:	4413      	add	r3, r2
 800185a:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 800185c:	8afa      	ldrh	r2, [r7, #22]
 800185e:	8c3b      	ldrh	r3, [r7, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d20d      	bcs.n	8001880 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800186e:	8c3a      	ldrh	r2, [r7, #32]
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	0fda      	lsrs	r2, r3, #31
 8001876:	4413      	add	r3, r2
 8001878:	105b      	asrs	r3, r3, #1
 800187a:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 800187c:	8c3b      	ldrh	r3, [r7, #32]
 800187e:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001880:	2101      	movs	r1, #1
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fcda 	bl	800223c <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd92 	bl	80023b8 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001894:	897a      	ldrh	r2, [r7, #10]
 8001896:	8abb      	ldrh	r3, [r7, #20]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b299      	uxth	r1, r3
 800189c:	88f8      	ldrh	r0, [r7, #6]
 800189e:	893a      	ldrh	r2, [r7, #8]
 80018a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4603      	mov	r3, r0
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff febe 	bl	8001630 <u8g2_DrawButtonFrame>
  
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fe71 	bl	80015ac <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fe82 	bl	80015d4 <u8g2_NextPage>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80018d6:	2100      	movs	r1, #0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fe4f 	bl	800157c <u8g2_SetBufferCurrTileRow>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2208      	movs	r2, #8
 80018f4:	701a      	strb	r2, [r3, #0]
  return buf;
 80018f6:	4b03      	ldr	r3, [pc, #12]	; (8001904 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200005f8 	.word	0x200005f8

08001908 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 800191e:	490c      	ldr	r1, [pc, #48]	; (8001950 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f001 fe39 	bl	8003598 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001926:	f107 0313 	add.w	r3, r7, #19
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ffdc 	bl	80018e8 <u8g2_m_24_8_f>
 8001930:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001932:	7cfa      	ldrb	r2, [r7, #19]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f001 f92f 	bl	8002ba0 <u8g2_SetupBuffer>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08003131 	.word	0x08003131
 8001950:	08003311 	.word	0x08003311
 8001954:	08002a25 	.word	0x08002a25

08001958 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	81fb      	strh	r3, [r7, #14]
	font++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	4413      	add	r3, r2
 80019aa:	81fb      	strh	r3, [r7, #14]
	return pos;
 80019ac:	89fb      	ldrh	r3, [r7, #14]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f7ff ffc7 	bl	8001958 <u8g2_font_get_byte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7ff ffbf 	bl	8001958 <u8g2_font_get_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80019e2:	2102      	movs	r1, #2
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff ffb7 	bl	8001958 <u8g2_font_get_byte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80019f2:	2103      	movs	r1, #3
 80019f4:	6838      	ldr	r0, [r7, #0]
 80019f6:	f7ff ffaf 	bl	8001958 <u8g2_font_get_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001a02:	2104      	movs	r1, #4
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff ffa7 	bl	8001958 <u8g2_font_get_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001a12:	2105      	movs	r1, #5
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f7ff ff9f 	bl	8001958 <u8g2_font_get_byte>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001a22:	2106      	movs	r1, #6
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7ff ff97 	bl	8001958 <u8g2_font_get_byte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001a32:	2107      	movs	r1, #7
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff ff8f 	bl	8001958 <u8g2_font_get_byte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001a42:	2108      	movs	r1, #8
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f7ff ff87 	bl	8001958 <u8g2_font_get_byte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001a52:	2109      	movs	r1, #9
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ff7f 	bl	8001958 <u8g2_font_get_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001a62:	210a      	movs	r1, #10
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff ff77 	bl	8001958 <u8g2_font_get_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b25a      	sxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001a72:	210b      	movs	r1, #11
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7ff ff6f 	bl	8001958 <u8g2_font_get_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b25a      	sxtb	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001a82:	210c      	movs	r1, #12
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7ff ff67 	bl	8001958 <u8g2_font_get_byte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001a92:	210d      	movs	r1, #13
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff ff5f 	bl	8001958 <u8g2_font_get_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001aa2:	210e      	movs	r1, #14
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f7ff ff57 	bl	8001958 <u8g2_font_get_byte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f7ff ff4f 	bl	8001958 <u8g2_font_get_byte>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff ff47 	bl	8001958 <u8g2_font_get_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001ad2:	2111      	movs	r1, #17
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7ff ff50 	bl	800197a <u8g2_font_get_word>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001ae2:	2113      	movs	r1, #19
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7ff ff48 	bl	800197a <u8g2_font_get_word>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001af2:	2115      	movs	r1, #21
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7ff ff40 	bl	800197a <u8g2_font_get_word>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	82da      	strh	r2, [r3, #22]
#endif
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7b1b      	ldrb	r3, [r3, #12]
 8001b1a:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	fa42 f303 	asr.w	r3, r2, r3
 8001b2c:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001b2e:	7b7b      	ldrb	r3, [r7, #13]
 8001b30:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001b32:	7bba      	ldrb	r2, [r7, #14]
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	4413      	add	r3, r2
 8001b38:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	2b07      	cmp	r3, #7
 8001b3e:	d91a      	bls.n	8001b76 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001b40:	2308      	movs	r3, #8
 8001b42:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001b44:	7b3a      	ldrb	r2, [r7, #12]
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	7b3b      	ldrb	r3, [r7, #12]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	b25a      	sxtb	r2, r3
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	3b08      	subs	r3, #8
 8001b74:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7bba      	ldrb	r2, [r7, #14]
 8001b90:	731a      	strb	r2, [r3, #12]
	return val;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffab 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001bc2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	7bbb      	ldrb	r3, [r7, #14]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	73fb      	strb	r3, [r7, #15]
	return v;
 8001bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001be4:	b490      	push	{r4, r7}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	80fb      	strh	r3, [r7, #6]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	717b      	strb	r3, [r7, #5]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	713b      	strb	r3, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d014      	beq.n	8001c32 <u8g2_add_vector_y+0x4e>
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	dc19      	bgt.n	8001c40 <u8g2_add_vector_y+0x5c>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <u8g2_add_vector_y+0x32>
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d007      	beq.n	8001c24 <u8g2_add_vector_y+0x40>
 8001c14:	e014      	b.n	8001c40 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001c16:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4413      	add	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
		break;
 8001c22:	e014      	b.n	8001c4e <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001c24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	80fb      	strh	r3, [r7, #6]
		break;
 8001c30:	e00d      	b.n	8001c4e <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001c32:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	80fb      	strh	r3, [r7, #6]
		break;
 8001c3e:	e006      	b.n	8001c4e <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001c40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	80fb      	strh	r3, [r7, #6]
		break;
 8001c4c:	bf00      	nop
	}
	return dy;
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc90      	pop	{r4, r7}
 8001c58:	4770      	bx	lr

08001c5a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001c5a:	b490      	push	{r4, r7}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4604      	mov	r4, r0
 8001c62:	4608      	mov	r0, r1
 8001c64:	4611      	mov	r1, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	4623      	mov	r3, r4
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	717b      	strb	r3, [r7, #5]
 8001c70:	460b      	mov	r3, r1
 8001c72:	713b      	strb	r3, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d014      	beq.n	8001ca8 <u8g2_add_vector_x+0x4e>
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	dc19      	bgt.n	8001cb6 <u8g2_add_vector_x+0x5c>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <u8g2_add_vector_x+0x32>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d007      	beq.n	8001c9a <u8g2_add_vector_x+0x40>
 8001c8a:	e014      	b.n	8001cb6 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001c8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4413      	add	r3, r2
 8001c96:	80fb      	strh	r3, [r7, #6]
		break;
 8001c98:	e014      	b.n	8001cc4 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001c9a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	80fb      	strh	r3, [r7, #6]
		break;
 8001ca6:	e00d      	b.n	8001cc4 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8001ca8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	80fb      	strh	r3, [r7, #6]
		break;
 8001cb4:	e006      	b.n	8001cc4 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8001cb6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	80fb      	strh	r3, [r7, #6]
		break;
 8001cc2:	bf00      	nop
	}
	return dx;
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc90      	pop	{r4, r7}
 8001cce:	4770      	bx	lr

08001cd0 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3360      	adds	r3, #96	; 0x60
 8001ce4:	613b      	str	r3, [r7, #16]

	cnt = len;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001cf0:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001cf8:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d00:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	7d7b      	ldrb	r3, [r7, #21]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8001d0e:	7dfa      	ldrb	r2, [r7, #23]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d201      	bcs.n	8001d1a <u8g2_font_decode_len+0x4a>
			current = cnt;
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	88db      	ldrh	r3, [r3, #6]
 8001d24:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d26:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d2a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	7c1b      	ldrb	r3, [r3, #16]
 8001d32:	89b8      	ldrh	r0, [r7, #12]
 8001d34:	f7ff ff91 	bl	8001c5a <u8g2_add_vector_x>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d3c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d40:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	7c1b      	ldrb	r3, [r3, #16]
 8001d48:	8978      	ldrh	r0, [r7, #10]
 8001d4a:	f7ff ff4b 	bl	8001be4 <u8g2_add_vector_y>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8001d52:	78bb      	ldrb	r3, [r7, #2]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	7b9a      	ldrb	r2, [r3, #14]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001d62:	7dbb      	ldrb	r3, [r7, #22]
 8001d64:	b298      	uxth	r0, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	7c1b      	ldrb	r3, [r3, #16]
 8001d6a:	897a      	ldrh	r2, [r7, #10]
 8001d6c:	89b9      	ldrh	r1, [r7, #12]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fcf2 	bl	800275c <u8g2_DrawHVLine>
 8001d78:	e013      	b.n	8001da2 <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	7b5b      	ldrb	r3, [r3, #13]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	7bda      	ldrb	r2, [r3, #15]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	7c1b      	ldrb	r3, [r3, #16]
 8001d94:	897a      	ldrh	r2, [r7, #10]
 8001d96:	89b9      	ldrh	r1, [r7, #12]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fcdd 	bl	800275c <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8001da2:	7dfa      	ldrb	r2, [r7, #23]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d309      	bcc.n	8001dbe <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8001daa:	7dfa      	ldrb	r2, [r7, #23]
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	757b      	strb	r3, [r7, #21]
		ly++;
 8001db6:	7d3b      	ldrb	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8001dbc:	e79d      	b.n	8001cfa <u8g2_font_decode_len+0x2a>
			break;
 8001dbe:	bf00      	nop
	}
	lx += cnt;
 8001dc0:	7d7a      	ldrb	r2, [r7, #21]
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8001dc8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8001dd0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	725a      	strb	r2, [r3, #9]

}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe80 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b25a      	sxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff fe75 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b25a      	sxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	7b9b      	ldrb	r3, [r3, #14]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	73da      	strb	r2, [r3, #15]
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffbc 	bl	8001de0 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001e6e:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e76:	4619      	mov	r1, r3
 8001e78:	6978      	ldr	r0, [r7, #20]
 8001e7a:	f7ff fe90 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff fe87 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
 8001e90:	4603      	mov	r3, r0
 8001e92:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7ff fe7e 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f340 80d7 	ble.w	8002060 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	8898      	ldrh	r0, [r3, #4]
 8001eb6:	7cfa      	ldrb	r2, [r7, #19]
 8001eb8:	7c7b      	ldrb	r3, [r7, #17]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	7c1b      	ldrb	r3, [r3, #16]
 8001ec8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001ecc:	f7ff fec5 	bl	8001c5a <u8g2_add_vector_x>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	88d8      	ldrh	r0, [r3, #6]
 8001edc:	7cfa      	ldrb	r2, [r7, #19]
 8001ede:	7c7b      	ldrb	r3, [r7, #17]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	425b      	negs	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	7c1b      	ldrb	r3, [r3, #16]
 8001eee:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001ef2:	f7ff fe77 	bl	8001be4 <u8g2_add_vector_y>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	889b      	ldrh	r3, [r3, #4]
 8001f02:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	88db      	ldrh	r3, [r3, #6]
 8001f08:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8001f0e:	8b7b      	ldrh	r3, [r7, #26]
 8001f10:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	7c1b      	ldrb	r3, [r3, #16]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d85a      	bhi.n	8001fd0 <u8g2_font_decode_glyph+0x180>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <u8g2_font_decode_glyph+0xd0>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	08001f75 	.word	0x08001f75
 8001f2c:	08001fa9 	.word	0x08001fa9
			case 0:
				x1 += decode->glyph_width;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	8bbb      	ldrh	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8001f3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	8b3b      	ldrh	r3, [r7, #24]
 8001f46:	4413      	add	r3, r2
 8001f48:	833b      	strh	r3, [r7, #24]
				break;
 8001f4a:	e041      	b.n	8001fd0 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8001f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8bfa      	ldrh	r2, [r7, #30]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001f58:	8bfb      	ldrh	r3, [r7, #30]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	83fb      	strh	r3, [r7, #30]
				x1++;
 8001f5e:	8bbb      	ldrh	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	8b3b      	ldrh	r3, [r7, #24]
 8001f6e:	4413      	add	r3, r2
 8001f70:	833b      	strh	r3, [r7, #24]
				break;
 8001f72:	e02d      	b.n	8001fd0 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8bfa      	ldrh	r2, [r7, #30]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001f82:	8bfb      	ldrh	r3, [r7, #30]
 8001f84:	3301      	adds	r3, #1
 8001f86:	83fb      	strh	r3, [r7, #30]
				x1++;
 8001f88:	8bbb      	ldrh	r3, [r7, #28]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8001f8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	8b7a      	ldrh	r2, [r7, #26]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001f9a:	8b7b      	ldrh	r3, [r7, #26]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	837b      	strh	r3, [r7, #26]
				y1++;
 8001fa0:	8b3b      	ldrh	r3, [r7, #24]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	833b      	strh	r3, [r7, #24]
				break;
 8001fa6:	e013      	b.n	8001fd0 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8001fa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	8bbb      	ldrh	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8b7a      	ldrh	r2, [r7, #26]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	837b      	strh	r3, [r7, #26]
				y1++;
 8001fc8:	8b3b      	ldrh	r3, [r7, #24]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	833b      	strh	r3, [r7, #24]
				break;
 8001fce:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8001fd0:	8bb8      	ldrh	r0, [r7, #28]
 8001fd2:	8b7a      	ldrh	r2, [r7, #26]
 8001fd4:	8bf9      	ldrh	r1, [r7, #30]
 8001fd6:	8b3b      	ldrh	r3, [r7, #24]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fcf6 	bl	80029ce <u8g2_IsIntersection>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <u8g2_font_decode_glyph+0x19e>
				return d;
 8001fe8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001fec:	e03a      	b.n	8002064 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002000:	4619      	mov	r1, r3
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff fd81 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002012:	4619      	mov	r1, r3
 8002014:	6978      	ldr	r0, [r7, #20]
 8002016:	f7ff fd78 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 800201a:	4603      	mov	r3, r0
 800201c:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fe53 	bl	8001cd0 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fe4d 	bl	8001cd0 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002036:	2101      	movs	r1, #1
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f7ff fd66 	bl	8001b0a <u8g2_font_decode_get_unsigned_bits>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ec      	bne.n	800201e <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800204a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800204e:	429a      	cmp	r2, r3
 8002050:	dd00      	ble.n	8002054 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002052:	e7d2      	b.n	8001ffa <u8g2_font_decode_glyph+0x1aa>
				break;
 8002054:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	7b9a      	ldrb	r2, [r3, #14]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002060:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3317      	adds	r3, #23
 8002082:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d82a      	bhi.n	80020e0 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	2b60      	cmp	r3, #96	; 0x60
 800208e:	d907      	bls.n	80020a0 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002096:	461a      	mov	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d906      	bls.n	80020b4 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80020ac:	461a      	mov	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d04e      	beq.n	800215c <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d102      	bne.n	80020d0 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3302      	adds	r3, #2
 80020ce:	e049      	b.n	8002164 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80020de:	e7e9      	b.n	80020b4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80020e6:	461a      	mov	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4413      	add	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 80020f2:	2100      	movs	r1, #0
 80020f4:	6938      	ldr	r0, [r7, #16]
 80020f6:	f7ff fc40 	bl	800197a <u8g2_font_get_word>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4413      	add	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002104:	2102      	movs	r1, #2
 8002106:	6938      	ldr	r0, [r7, #16]
 8002108:	f7ff fc37 	bl	800197a <u8g2_font_get_word>
 800210c:	4603      	mov	r3, r0
 800210e:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3304      	adds	r3, #4
 8002114:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002116:	89fa      	ldrh	r2, [r7, #14]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	429a      	cmp	r2, r3
 800211c:	d3e9      	bcc.n	80020f2 <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b29a      	uxth	r2, r3
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	4313      	orrs	r3, r2
 8002136:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 800213e:	89fa      	ldrh	r2, [r7, #14]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	429a      	cmp	r2, r3
 8002144:	d102      	bne.n	800214c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3303      	adds	r3, #3
 800214a:	e00b      	b.n	8002164 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3302      	adds	r3, #2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 800215a:	e7e0      	b.n	800211e <u8g2_font_get_glyph_data+0xb2>
				break;
 800215c:	bf00      	nop
 800215e:	e000      	b.n	8002162 <u8g2_font_get_glyph_data+0xf6>
				break;
 8002160:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	897a      	ldrh	r2, [r7, #10]
 800218e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	4619      	mov	r1, r3
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff64 	bl	800206c <u8g2_font_get_glyph_data>
 80021a4:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80021ac:	6939      	ldr	r1, [r7, #16]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fe4e 	bl	8001e50 <u8g2_font_decode_glyph>
 80021b4:	4603      	mov	r3, r0
 80021b6:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 80021b8:	8afb      	ldrh	r3, [r7, #22]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff4a 	bl	800206c <u8g2_font_get_glyph_data>
 80021d8:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <u8g2_GetGlyphWidth+0x22>
		return 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e027      	b.n	8002234 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fdfa 	bl	8001de0 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f7ff fccf 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff fcc0 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800222a:	4619      	mov	r1, r3
 800222c:	4610      	mov	r0, r2
 800222e:	f7ff fcb6 	bl	8001b9e <u8g2_font_decode_get_signed_bits>
 8002232:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800227c:	2b03      	cmp	r3, #3
 800227e:	d833      	bhi.n	80022e8 <u8g2_DrawGlyph+0x8c>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <u8g2_DrawGlyph+0x2c>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022ad 	.word	0x080022ad
 8002290:	080022c1 	.word	0x080022c1
 8002294:	080022d5 	.word	0x080022d5
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	4798      	blx	r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	4413      	add	r3, r2
 80022a8:	813b      	strh	r3, [r7, #8]
		break;
 80022aa:	e01d      	b.n	80022e8 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	4798      	blx	r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	817b      	strh	r3, [r7, #10]
		break;
 80022be:	e013      	b.n	80022e8 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	4798      	blx	r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	813b      	strh	r3, [r7, #8]
		break;
 80022d2:	e009      	b.n	80022e8 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	4798      	blx	r3
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	4413      	add	r3, r2
 80022e4:	817b      	strh	r3, [r7, #10]
		break;
 80022e6:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	893a      	ldrh	r2, [r7, #8]
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff3c 	bl	800216c <u8g2_font_draw_glyph>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	4613      	mov	r3, r2
 8002310:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fd86 	bl	8002e24 <u8x8_utf8_init>
	sum = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	4611      	mov	r1, r2
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	4798      	blx	r3
 800232a:	4603      	mov	r3, r0
 800232c:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 800232e:	8abb      	ldrh	r3, [r7, #20]
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	4293      	cmp	r3, r2
 8002336:	d038      	beq.n	80023aa <u8g2_draw_string+0xaa>
			break;
		str++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 800233e:	8abb      	ldrh	r3, [r7, #20]
 8002340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002344:	4293      	cmp	r3, r2
 8002346:	d0e9      	beq.n	800231c <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002348:	8abb      	ldrh	r3, [r7, #20]
 800234a:	893a      	ldrh	r2, [r7, #8]
 800234c:	8979      	ldrh	r1, [r7, #10]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff84 	bl	800225c <u8g2_DrawGlyph>
 8002354:	4603      	mov	r3, r0
 8002356:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800235e:	2b03      	cmp	r3, #3
 8002360:	d81e      	bhi.n	80023a0 <u8g2_draw_string+0xa0>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <u8g2_draw_string+0x68>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	08002383 	.word	0x08002383
 8002370:	0800238d 	.word	0x0800238d
 8002374:	08002397 	.word	0x08002397
			case 0:
				x += delta;
 8002378:	897a      	ldrh	r2, [r7, #10]
 800237a:	8a7b      	ldrh	r3, [r7, #18]
 800237c:	4413      	add	r3, r2
 800237e:	817b      	strh	r3, [r7, #10]
				break;
 8002380:	e00e      	b.n	80023a0 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002382:	893a      	ldrh	r2, [r7, #8]
 8002384:	8a7b      	ldrh	r3, [r7, #18]
 8002386:	4413      	add	r3, r2
 8002388:	813b      	strh	r3, [r7, #8]
				break;
 800238a:	e009      	b.n	80023a0 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 800238c:	897a      	ldrh	r2, [r7, #10]
 800238e:	8a7b      	ldrh	r3, [r7, #18]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	817b      	strh	r3, [r7, #10]
				break;
 8002394:	e004      	b.n	80023a0 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8002396:	893a      	ldrh	r2, [r7, #8]
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	813b      	strh	r3, [r7, #8]
				break;
 800239e:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80023a0:	8afa      	ldrh	r2, [r7, #22]
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	4413      	add	r3, r2
 80023a6:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80023a8:	e7b8      	b.n	800231c <u8g2_draw_string+0x1c>
			break;
 80023aa:	bf00      	nop
		}
	}
	return sum;
 80023ac:	8afb      	ldrh	r3, [r7, #22]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop

080023b8 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	817b      	strh	r3, [r7, #10]
 80023c6:	4613      	mov	r3, r2
 80023c8:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <u8g2_DrawUTF8+0x30>)
 80023ce:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 80023d0:	893a      	ldrh	r2, [r7, #8]
 80023d2:	8979      	ldrh	r1, [r7, #10]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff ff92 	bl	8002300 <u8g2_draw_string>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	08002e6b 	.word	0x08002e6b

080023ec <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d05d      	beq.n	80024b8 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800241a:	2b00      	cmp	r3, #0
 800241c:	d04d      	beq.n	80024ba <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002424:	2b01      	cmp	r3, #1
 8002426:	d11c      	bne.n	8002462 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002434:	429a      	cmp	r2, r3
 8002436:	da05      	bge.n	8002444 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002450:	429a      	cmp	r2, r3
 8002452:	dd32      	ble.n	80024ba <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002460:	e02b      	b.n	80024ba <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002468:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002470:	4619      	mov	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002478:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 800247a:	429a      	cmp	r2, r3
 800247c:	da0d      	bge.n	800249a <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002484:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4413      	add	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dd07      	ble.n	80024ba <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80024b6:	e000      	b.n	80024ba <u8g2_UpdateRefHeight+0xce>
		return;
 80024b8:	bf00      	nop
	}
}
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <u8g2_SetFontPosBaseline+0x18>)
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	080024c3 	.word	0x080024c3

080024f4 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002502:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	3301      	adds	r3, #1
 8002508:	81fb      	strh	r3, [r7, #14]
	return tmp;
 800250a:	89fb      	ldrh	r3, [r7, #14]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <u8g2_SetFontPosTop+0x18>)
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	080024f5 	.word	0x080024f5

08002534 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d00b      	beq.n	8002560 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3374      	adds	r3, #116	; 0x74
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fa2f 	bl	80019b8 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff46 	bl	80023ec <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fc50 	bl	8002e24 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	4611      	mov	r1, r2
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
 800259a:	4603      	mov	r3, r0
 800259c:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 800259e:	893b      	ldrh	r3, [r7, #8]
 80025a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01c      	beq.n	80025e2 <u8g2_string_width+0x7a>
			break;
		str++;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 80025ae:	893b      	ldrh	r3, [r7, #8]
 80025b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d0e9      	beq.n	800258c <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 80025b8:	893b      	ldrh	r3, [r7, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fe00 	bl	80021c2 <u8g2_GetGlyphWidth>
 80025c2:	4603      	mov	r3, r0
 80025c4:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 80025c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80025ca:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80025ce:	d103      	bne.n	80025d8 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80025d6:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 80025d8:	89fa      	ldrh	r2, [r7, #14]
 80025da:	89bb      	ldrh	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80025e0:	e7d4      	b.n	800258c <u8g2_string_width+0x24>
			break;
 80025e2:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01b      	beq.n	8002626 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 80025ee:	89fa      	ldrh	r2, [r7, #14]
 80025f0:	89bb      	ldrh	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	4413      	add	r3, r2
 8002602:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 800260a:	b29a      	uxth	r2, r3
 800260c:	89fb      	ldrh	r3, [r7, #14]
 800260e:	4413      	add	r3, r2
 8002610:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 8002612:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002616:	2b00      	cmp	r3, #0
 8002618:	dd05      	ble.n	8002626 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 800261a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800261e:	b29a      	uxth	r2, r3
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	4413      	add	r3, r2
 8002624:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 8002626:	89fb      	ldrh	r3, [r7, #14]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <u8g2_GetStrWidth+0x24>)
 800263e:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff90 	bl	8002568 <u8g2_string_width>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08002e3f 	.word	0x08002e3f

08002658 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a05      	ldr	r2, [pc, #20]	; (800267c <u8g2_GetUTF8Width+0x24>)
 8002666:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff7c 	bl	8002568 <u8g2_string_width>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08002e6b 	.word	0x08002e6b

08002680 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	460b      	mov	r3, r1
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	4613      	mov	r3, r2
 8002694:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800269c:	8afb      	ldrh	r3, [r7, #22]
 800269e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	8abb      	ldrh	r3, [r7, #20]
 80026a6:	4413      	add	r3, r2
 80026a8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80026aa:	8afa      	ldrh	r2, [r7, #22]
 80026ac:	8abb      	ldrh	r3, [r7, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90b      	bls.n	80026ca <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80026b2:	8afa      	ldrh	r2, [r7, #22]
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d205      	bcs.n	80026c6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	82bb      	strh	r3, [r7, #20]
      b--;
 80026be:	8abb      	ldrh	r3, [r7, #20]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	82bb      	strh	r3, [r7, #20]
 80026c4:	e001      	b.n	80026ca <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80026ca:	8afa      	ldrh	r2, [r7, #22]
 80026cc:	88bb      	ldrh	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d301      	bcc.n	80026d6 <u8g2_clip_intersection2+0x56>
    return 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e01c      	b.n	8002710 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80026d6:	8aba      	ldrh	r2, [r7, #20]
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d801      	bhi.n	80026e2 <u8g2_clip_intersection2+0x62>
    return 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	e016      	b.n	8002710 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80026e2:	8afa      	ldrh	r2, [r7, #22]
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d201      	bcs.n	80026ee <u8g2_clip_intersection2+0x6e>
    a = c;
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80026ee:	8aba      	ldrh	r2, [r7, #20]
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d901      	bls.n	80026fa <u8g2_clip_intersection2+0x7a>
    b = d;
 80026f6:	88bb      	ldrh	r3, [r7, #4]
 80026f8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8afa      	ldrh	r2, [r7, #22]
 80026fe:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002700:	8aba      	ldrh	r2, [r7, #20]
 8002702:	8afb      	ldrh	r3, [r7, #22]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	8aba      	ldrh	r2, [r7, #20]
 800270c:	801a      	strh	r2, [r3, #0]
  return 1;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b087      	sub	sp, #28
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	4608      	mov	r0, r1
 8002724:	4611      	mov	r1, r2
 8002726:	461a      	mov	r2, r3
 8002728:	4603      	mov	r3, r0
 800272a:	817b      	strh	r3, [r7, #10]
 800272c:	460b      	mov	r3, r1
 800272e:	813b      	strh	r3, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002742:	88f8      	ldrh	r0, [r7, #6]
 8002744:	893a      	ldrh	r2, [r7, #8]
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4603      	mov	r3, r0
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	47a0      	blx	r4
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}

0800275c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b087      	sub	sp, #28
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d075      	beq.n	800286c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d072      	beq.n	800286c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d91a      	bls.n	80027c2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800278c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002794:	897a      	ldrh	r2, [r7, #10]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	b29b      	uxth	r3, r3
 800279c:	817b      	strh	r3, [r7, #10]
	  x++;
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	3301      	adds	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	e00c      	b.n	80027c2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80027a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d108      	bne.n	80027c2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80027b0:	893a      	ldrh	r2, [r7, #8]
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	813b      	strh	r3, [r7, #8]
	  y++;
 80027ba:	893b      	ldrh	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80027c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80027ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11a      	bne.n	800280c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80027dc:	893b      	ldrh	r3, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d83b      	bhi.n	800285a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80027e8:	893b      	ldrh	r3, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d937      	bls.n	800285e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80027fa:	1db9      	adds	r1, r7, #6
 80027fc:	f107 000a 	add.w	r0, r7, #10
 8002800:	f7ff ff3e 	bl	8002680 <u8g2_clip_intersection2>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11a      	bne.n	8002840 <u8g2_DrawHVLine+0xe4>
	  return;
 800280a:	e02f      	b.n	800286c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	429a      	cmp	r2, r3
 8002816:	d824      	bhi.n	8002862 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	429a      	cmp	r2, r3
 8002822:	d920      	bls.n	8002866 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002830:	1db9      	adds	r1, r7, #6
 8002832:	f107 0008 	add.w	r0, r7, #8
 8002836:	f7ff ff23 	bl	8002680 <u8g2_clip_intersection2>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d014      	beq.n	800286a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	689c      	ldr	r4, [r3, #8]
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	88f8      	ldrh	r0, [r7, #6]
 800284c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4603      	mov	r3, r0
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	47a0      	blx	r4
 8002858:	e008      	b.n	800286c <u8g2_DrawHVLine+0x110>
	  return;
 800285a:	bf00      	nop
 800285c:	e006      	b.n	800286c <u8g2_DrawHVLine+0x110>
	  return;
 800285e:	bf00      	nop
 8002860:	e004      	b.n	800286c <u8g2_DrawHVLine+0x110>
	  return;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <u8g2_DrawHVLine+0x110>
	  return;
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <u8g2_DrawHVLine+0x110>
	  return;
 800286a:	bf00      	nop
    }
}
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af02      	add	r7, sp, #8
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	4608      	mov	r0, r1
 800287c:	4611      	mov	r1, r2
 800287e:	461a      	mov	r2, r3
 8002880:	4603      	mov	r3, r0
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	460b      	mov	r3, r1
 8002886:	813b      	strh	r3, [r7, #8]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	893a      	ldrh	r2, [r7, #8]
 8002890:	8979      	ldrh	r1, [r7, #10]
 8002892:	2000      	movs	r0, #0
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff ff60 	bl	800275c <u8g2_DrawHVLine>
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	893a      	ldrh	r2, [r7, #8]
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	2001      	movs	r0, #1
 80028c6:	9000      	str	r0, [sp, #0]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff ff47 	bl	800275c <u8g2_DrawHVLine>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af02      	add	r7, sp, #8
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]
 80028e2:	4613      	mov	r3, r2
 80028e4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80028ec:	883a      	ldrh	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d31a      	bcc.n	8002928 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80028f8:	883a      	ldrh	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d216      	bcs.n	800292c <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	429a      	cmp	r2, r3
 8002908:	d312      	bcc.n	8002930 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20e      	bcs.n	8002934 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002916:	883a      	ldrh	r2, [r7, #0]
 8002918:	8879      	ldrh	r1, [r7, #2]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2301      	movs	r3, #1
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff1b 	bl	800275c <u8g2_DrawHVLine>
 8002926:	e006      	b.n	8002936 <u8g2_DrawPixel+0x60>
    return;
 8002928:	bf00      	nop
 800292a:	e004      	b.n	8002936 <u8g2_DrawPixel+0x60>
    return;
 800292c:	bf00      	nop
 800292e:	e002      	b.n	8002936 <u8g2_DrawPixel+0x60>
    return;
 8002930:	bf00      	nop
 8002932:	e000      	b.n	8002936 <u8g2_DrawPixel+0x60>
    return;
 8002934:	bf00      	nop
}
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d903      	bls.n	800295e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002968:	b490      	push	{r4, r7}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4623      	mov	r3, r4
 8002978:	80fb      	strh	r3, [r7, #6]
 800297a:	4603      	mov	r3, r0
 800297c:	80bb      	strh	r3, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
 8002982:	4613      	mov	r3, r2
 8002984:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20d      	bcs.n	80029aa <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800298e:	883a      	ldrh	r2, [r7, #0]
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	429a      	cmp	r2, r3
 8002994:	d901      	bls.n	800299a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002996:	2301      	movs	r3, #1
 8002998:	e014      	b.n	80029c4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	883b      	ldrh	r3, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d901      	bls.n	80029a6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e00c      	b.n	80029c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80029aa:	883a      	ldrh	r2, [r7, #0]
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d907      	bls.n	80029c2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	883b      	ldrh	r3, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d901      	bls.n	80029be <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e002      	b.n	80029c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80029c2:	2300      	movs	r3, #0
    }
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc90      	pop	{r4, r7}
 80029cc:	4770      	bx	lr

080029ce <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	4608      	mov	r0, r1
 80029d8:	4611      	mov	r1, r2
 80029da:	461a      	mov	r2, r3
 80029dc:	4603      	mov	r3, r0
 80029de:	817b      	strh	r3, [r7, #10]
 80029e0:	460b      	mov	r3, r1
 80029e2:	813b      	strh	r3, [r7, #8]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80029f4:	8b3b      	ldrh	r3, [r7, #24]
 80029f6:	893a      	ldrh	r2, [r7, #8]
 80029f8:	f7ff ffb6 	bl	8002968 <u8g2_is_intersection_decision_tree>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <u8g2_IsIntersection+0x38>
    return 0; 
 8002a02:	2300      	movs	r3, #0
 8002a04:	e00a      	b.n	8002a1c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	897a      	ldrh	r2, [r7, #10]
 8002a16:	f7ff ffa7 	bl	8002968 <u8g2_is_intersection_decision_tree>
 8002a1a:	4603      	mov	r3, r0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002a42:	7efb      	ldrb	r3, [r7, #27]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002a4e:	7e3a      	ldrb	r2, [r7, #24]
 8002a50:	7efb      	ldrb	r3, [r7, #27]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d801      	bhi.n	8002a6e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002a6a:	7e3b      	ldrb	r3, [r7, #24]
 8002a6c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002a78:	7e3b      	ldrb	r3, [r7, #24]
 8002a7a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002a80:	8afb      	ldrh	r3, [r7, #22]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	7c1b      	ldrb	r3, [r3, #16]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8afa      	ldrh	r2, [r7, #22]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002aae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d117      	bne.n	8002ae6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	7ebb      	ldrb	r3, [r7, #26]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	7e7b      	ldrb	r3, [r7, #25]
 8002aca:	4053      	eors	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
	len--;
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e8      	bne.n	8002ab6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002ae4:	e038      	b.n	8002b58 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	7ebb      	ldrb	r3, [r7, #26]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	7e7b      	ldrb	r3, [r7, #25]
 8002afa:	4053      	eors	r3, r2
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002b02:	7efb      	ldrb	r3, [r7, #27]
 8002b04:	3301      	adds	r3, #1
 8002b06:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002b08:	7efb      	ldrb	r3, [r7, #27]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	76fb      	strb	r3, [r7, #27]
      len--;
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002b16:	7efb      	ldrb	r3, [r7, #27]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002b20:	461a      	mov	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d801      	bhi.n	8002b36 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d008      	beq.n	8002b52 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	767b      	strb	r3, [r7, #25]
 8002b44:	e005      	b.n	8002b52 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002b46:	7ebb      	ldrb	r3, [r7, #26]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002b4c:	7e7b      	ldrb	r3, [r7, #25]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1c6      	bne.n	8002ae6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002b58:	bf00      	nop
 8002b5a:	3724      	adds	r7, #36	; 0x24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	79fa      	ldrb	r2, [r7, #7]
 8002bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ffad 	bl	8002b62 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff fc65 	bl	80024d8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c32:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	89fa      	ldrh	r2, [r7, #14]
 8002c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	7c1b      	ldrb	r3, [r3, #16]
 8002c44:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	89fa      	ldrh	r2, [r7, #14]
 8002c50:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c58:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	89fa      	ldrh	r2, [r7, #14]
 8002c64:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c6c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002c6e:	89fb      	ldrh	r3, [r7, #14]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002c76:	4413      	add	r3, r2
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	7c52      	ldrb	r2, [r2, #17]
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	dd08      	ble.n	8002c92 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	7c5b      	ldrb	r3, [r3, #17]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	8a9a      	ldrh	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	8ada      	ldrh	r2, [r3, #22]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af02      	add	r7, sp, #8
 8002ce4:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4603      	mov	r3, r0
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fe63 	bl	80029ce <u8g2_IsIntersection>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002d16:	e03b      	b.n	8002d90 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d205      	bcs.n	8002d3c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d905      	bls.n	8002d58 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d205      	bcs.n	8002d74 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d905      	bls.n	8002d90 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff3c 	bl	8002c1e <u8g2_update_dimension_common>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff7b 	bl	8002cde <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002e0a:	88f8      	ldrh	r0, [r7, #6]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	7e3b      	ldrb	r3, [r7, #24]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff fc7f 	bl	800271a <u8g2_draw_hv_line_2dir>
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <u8x8_ascii_next+0x18>
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	2b0a      	cmp	r3, #10
 8002e54:	d102      	bne.n	8002e5c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5a:	e001      	b.n	8002e60 <u8x8_ascii_next+0x22>
  return b;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	b29b      	uxth	r3, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <u8x8_utf8_next+0x18>
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d102      	bne.n	8002e88 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e86:	e06e      	b.n	8002f66 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d145      	bne.n	8002f1e <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2bfb      	cmp	r3, #251	; 0xfb
 8002e96:	d908      	bls.n	8002eaa <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	70fb      	strb	r3, [r7, #3]
 8002ea8:	e032      	b.n	8002f10 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	2bf7      	cmp	r3, #247	; 0xf7
 8002eae:	d908      	bls.n	8002ec2 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	e026      	b.n	8002f10 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	2bef      	cmp	r3, #239	; 0xef
 8002ec6:	d908      	bls.n	8002eda <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	70fb      	strb	r3, [r7, #3]
 8002ed8:	e01a      	b.n	8002f10 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	2bdf      	cmp	r3, #223	; 0xdf
 8002ede:	d908      	bls.n	8002ef2 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	70fb      	strb	r3, [r7, #3]
 8002ef0:	e00e      	b.n	8002f10 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	2bbf      	cmp	r3, #191	; 0xbf
 8002ef6:	d908      	bls.n	8002f0a <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	70fb      	strb	r3, [r7, #3]
 8002f08:	e002      	b.n	8002f10 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	e02a      	b.n	8002f66 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002f18:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002f1c:	e023      	b.n	8002f66 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8c1b      	ldrh	r3, [r3, #32]
 8002f32:	019b      	lsls	r3, r3, #6
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8c1a      	ldrh	r2, [r3, #32]
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002f5c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002f60:	e001      	b.n	8002f66 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8c1b      	ldrh	r3, [r3, #32]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691c      	ldr	r4, [r3, #16]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	2300      	movs	r3, #0
 8002f84:	2120      	movs	r1, #32
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	47a0      	blx	r4
 8002f8a:	4603      	mov	r3, r0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd90      	pop	{r4, r7, pc}

08002f94 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691c      	ldr	r4, [r3, #16]
 8002fa6:	7afa      	ldrb	r2, [r7, #11]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2117      	movs	r1, #23
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	47a0      	blx	r4
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}

08002fba <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002fc6:	1cfb      	adds	r3, r7, #3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ffe1 	bl	8002f94 <u8x8_byte_SendBytes>
 8002fd2:	4603      	mov	r3, r0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68dc      	ldr	r4, [r3, #12]
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2115      	movs	r1, #21
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	47a0      	blx	r4
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68dc      	ldr	r4, [r3, #12]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	2300      	movs	r3, #0
 8003014:	2116      	movs	r1, #22
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	47a0      	blx	r4
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	460b      	mov	r3, r1
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68dc      	ldr	r4, [r3, #12]
 8003036:	7afa      	ldrb	r2, [r7, #11]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2117      	movs	r1, #23
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	47a0      	blx	r4
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}

0800304a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68dc      	ldr	r4, [r3, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2118      	movs	r1, #24
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}

0800306a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68dc      	ldr	r4, [r3, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	2200      	movs	r2, #0
 800307a:	2119      	movs	r1, #25
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	47a0      	blx	r4
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	73fb      	strb	r3, [r7, #15]
    data++;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2bfe      	cmp	r3, #254	; 0xfe
 80030a4:	d031      	beq.n	800310a <u8x8_cad_SendSequence+0x80>
 80030a6:	2bfe      	cmp	r3, #254	; 0xfe
 80030a8:	dc3d      	bgt.n	8003126 <u8x8_cad_SendSequence+0x9c>
 80030aa:	2b19      	cmp	r3, #25
 80030ac:	dc3b      	bgt.n	8003126 <u8x8_cad_SendSequence+0x9c>
 80030ae:	2b18      	cmp	r3, #24
 80030b0:	da23      	bge.n	80030fa <u8x8_cad_SendSequence+0x70>
 80030b2:	2b16      	cmp	r3, #22
 80030b4:	dc02      	bgt.n	80030bc <u8x8_cad_SendSequence+0x32>
 80030b6:	2b15      	cmp	r3, #21
 80030b8:	da03      	bge.n	80030c2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80030ba:	e034      	b.n	8003126 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80030bc:	2b17      	cmp	r3, #23
 80030be:	d00e      	beq.n	80030de <u8x8_cad_SendSequence+0x54>
	return;
 80030c0:	e031      	b.n	8003126 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68dc      	ldr	r4, [r3, #12]
 80030cc:	7bba      	ldrb	r2, [r7, #14]
 80030ce:	7bf9      	ldrb	r1, [r7, #15]
 80030d0:	2300      	movs	r3, #0
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	47a0      	blx	r4
	  data++;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	603b      	str	r3, [r7, #0]
	  break;
 80030dc:	e022      	b.n	8003124 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80030e4:	f107 030e 	add.w	r3, r7, #14
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff99 	bl	8003024 <u8x8_cad_SendData>
	  data++;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3301      	adds	r3, #1
 80030f6:	603b      	str	r3, [r7, #0]
	  break;
 80030f8:	e014      	b.n	8003124 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68dc      	ldr	r4, [r3, #12]
 80030fe:	7bf9      	ldrb	r1, [r7, #15]
 8003100:	2300      	movs	r3, #0
 8003102:	2200      	movs	r2, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	47a0      	blx	r4
	  break;
 8003108:	e00c      	b.n	8003124 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	461a      	mov	r2, r3
 8003114:	2129      	movs	r1, #41	; 0x29
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9ed 	bl	80034f6 <u8x8_gpio_call>
	  data++;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	603b      	str	r3, [r7, #0]
	  break;
 8003122:	bf00      	nop
    cmd = *data;
 8003124:	e7b6      	b.n	8003094 <u8x8_cad_SendSequence+0xa>
	return;
 8003126:	bf00      	nop
    }
  }
}
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bd90      	pop	{r4, r7, pc}
	...

08003130 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	72fb      	strb	r3, [r7, #11]
 800313e:	4613      	mov	r3, r2
 8003140:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	3b14      	subs	r3, #20
 8003146:	2b05      	cmp	r3, #5
 8003148:	d82f      	bhi.n	80031aa <u8x8_cad_001+0x7a>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <u8x8_cad_001+0x20>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003199 	.word	0x08003199
 8003154:	08003169 	.word	0x08003169
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003191 	.word	0x08003191
 8003160:	08003199 	.word	0x08003199
 8003164:	08003199 	.word	0x08003199
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003168:	2100      	movs	r1, #0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff ff00 	bl	8002f70 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003170:	7abb      	ldrb	r3, [r7, #10]
 8003172:	4619      	mov	r1, r3
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff20 	bl	8002fba <u8x8_byte_SendByte>
      break;
 800317a:	e018      	b.n	80031ae <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800317c:	2100      	movs	r1, #0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff fef6 	bl	8002f70 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003184:	7abb      	ldrb	r3, [r7, #10]
 8003186:	4619      	mov	r1, r3
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff16 	bl	8002fba <u8x8_byte_SendByte>
      break;
 800318e:	e00e      	b.n	80031ae <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003190:	2101      	movs	r1, #1
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff feec 	bl	8002f70 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691c      	ldr	r4, [r3, #16]
 800319c:	7aba      	ldrb	r2, [r7, #10]
 800319e:	7af9      	ldrb	r1, [r7, #11]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	47a0      	blx	r4
 80031a6:	4603      	mov	r3, r0
 80031a8:	e002      	b.n	80031b0 <u8x8_cad_001+0x80>
    default:
      return 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <u8x8_cad_001+0x80>
  }
  return 1;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	72fb      	strb	r3, [r7, #11]
 80031c6:	4613      	mov	r3, r2
 80031c8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 80031ca:	7afb      	ldrb	r3, [r7, #11]
 80031cc:	3b0b      	subs	r3, #11
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	f200 808e 	bhi.w	80032f0 <u8x8_d_uc1604_common+0x138>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <u8x8_d_uc1604_common+0x24>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003285 	.word	0x08003285
 80031e0:	080032f1 	.word	0x080032f1
 80031e4:	0800329f 	.word	0x0800329f
 80031e8:	080032d1 	.word	0x080032d1
 80031ec:	080031f1 	.word	0x080031f1
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ff2a 	bl	800304a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	795b      	ldrb	r3, [r3, #5]
 80031fa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff fee5 	bl	8002fdc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4619      	mov	r1, r3
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff fedb 	bl	8002fdc <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	799b      	ldrb	r3, [r3, #6]
 800322a:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003232:	7dbb      	ldrb	r3, [r7, #22]
 8003234:	4413      	add	r3, r2
 8003236:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003238:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	b25b      	sxtb	r3, r3
 8003242:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003246:	b25b      	sxtb	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7ff fec5 	bl	8002fdc <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003258:	7d7b      	ldrb	r3, [r7, #21]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003264:	7d7b      	ldrb	r3, [r7, #21]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4619      	mov	r1, r3
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff feda 	bl	8003024 <u8x8_cad_SendData>
	arg_int--;
 8003270:	7abb      	ldrb	r3, [r7, #10]
 8003272:	3b01      	subs	r3, #1
 8003274:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003276:	7abb      	ldrb	r3, [r7, #10]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f3      	bne.n	8003264 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff fef4 	bl	800306a <u8x8_cad_EndTransfer>
      break;
 8003282:	e037      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003284:	7abb      	ldrb	r3, [r7, #10]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 800328a:	491d      	ldr	r1, [pc, #116]	; (8003300 <u8x8_d_uc1604_common+0x148>)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fefc 	bl	800308a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003292:	e02f      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003294:	491b      	ldr	r1, [pc, #108]	; (8003304 <u8x8_d_uc1604_common+0x14c>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fef7 	bl	800308a <u8x8_cad_SendSequence>
      break;
 800329c:	e02a      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800329e:	7abb      	ldrb	r3, [r7, #10]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 80032a4:	4918      	ldr	r1, [pc, #96]	; (8003308 <u8x8_d_uc1604_common+0x150>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff feef 	bl	800308a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	7c9a      	ldrb	r2, [r3, #18]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 80032b8:	e01c      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 80032ba:	4914      	ldr	r1, [pc, #80]	; (800330c <u8x8_d_uc1604_common+0x154>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fee4 	bl	800308a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	7cda      	ldrb	r2, [r3, #19]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80032ce:	e011      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff feba 	bl	800304a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80032d6:	2181      	movs	r1, #129	; 0x81
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7ff fe7f 	bl	8002fdc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 80032de:	7abb      	ldrb	r3, [r7, #10]
 80032e0:	4619      	mov	r1, r3
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fe8c 	bl	8003000 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff febe 	bl	800306a <u8x8_cad_EndTransfer>
      break;
 80032ee:	e001      	b.n	80032f4 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	0800cb74 	.word	0x0800cb74
 8003304:	0800cb84 	.word	0x0800cb84
 8003308:	0800cb8c 	.word	0x0800cb8c
 800330c:	0800cb94 	.word	0x0800cb94

08003310 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	72fb      	strb	r3, [r7, #11]
 800331e:	4613      	mov	r3, r2
 8003320:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003322:	7aba      	ldrb	r2, [r7, #10]
 8003324:	7af9      	ldrb	r1, [r7, #11]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff ff45 	bl	80031b8 <u8x8_d_uc1604_common>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d114      	bne.n	800335e <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	2b09      	cmp	r3, #9
 8003338:	d002      	beq.n	8003340 <u8x8_d_uc1604_jlx19264+0x30>
 800333a:	2b0a      	cmp	r3, #10
 800333c:	d005      	beq.n	800334a <u8x8_d_uc1604_jlx19264+0x3a>
 800333e:	e00c      	b.n	800335a <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003340:	490a      	ldr	r1, [pc, #40]	; (800336c <u8x8_d_uc1604_jlx19264+0x5c>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f816 	bl	8003374 <u8x8_d_helper_display_setup_memory>
	break;
 8003348:	e00a      	b.n	8003360 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f825 	bl	800339a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <u8x8_d_uc1604_jlx19264+0x60>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fe99 	bl	800308a <u8x8_cad_SendSequence>
	break;
 8003358:	e002      	b.n	8003360 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 800335a:	2300      	movs	r3, #0
 800335c:	e001      	b.n	8003362 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 800335e:	bf00      	nop
  return 1;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	0800cb9c 	.word	0x0800cb9c
 8003370:	0800cbb4 	.word	0x0800cbb4

08003374 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	7c9a      	ldrb	r2, [r3, #18]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800339a:	b590      	push	{r4, r7, lr}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695c      	ldr	r4, [r3, #20]
 80033a6:	2300      	movs	r3, #0
 80033a8:	2200      	movs	r2, #0
 80033aa:	2128      	movs	r1, #40	; 0x28
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68dc      	ldr	r4, [r3, #12]
 80033b4:	2300      	movs	r3, #0
 80033b6:	2200      	movs	r2, #0
 80033b8:	2114      	movs	r1, #20
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80033be:	2201      	movs	r2, #1
 80033c0:	214b      	movs	r1, #75	; 0x4b
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f897 	bl	80034f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	791b      	ldrb	r3, [r3, #4]
 80033ce:	461a      	mov	r2, r3
 80033d0:	2129      	movs	r1, #41	; 0x29
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f88f 	bl	80034f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	214b      	movs	r1, #75	; 0x4b
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f88a 	bl	80034f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	791b      	ldrb	r3, [r3, #4]
 80033e8:	461a      	mov	r2, r3
 80033ea:	2129      	movs	r1, #41	; 0x29
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f882 	bl	80034f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80033f2:	2201      	movs	r2, #1
 80033f4:	214b      	movs	r1, #75	; 0x4b
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f87d 	bl	80034f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	795b      	ldrb	r3, [r3, #5]
 8003402:	461a      	mov	r2, r3
 8003404:	2129      	movs	r1, #41	; 0x29
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f875 	bl	80034f6 <u8x8_gpio_call>
}    
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003432:	78bb      	ldrb	r3, [r7, #2]
 8003434:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003436:	787b      	ldrb	r3, [r7, #1]
 8003438:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689c      	ldr	r4, [r3, #8]
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	2201      	movs	r2, #1
 8003448:	210f      	movs	r1, #15
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	47a0      	blx	r4
 800344e:	4603      	mov	r3, r0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689c      	ldr	r4, [r3, #8]
 8003464:	2300      	movs	r3, #0
 8003466:	2200      	movs	r2, #0
 8003468:	2109      	movs	r1, #9
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	47a0      	blx	r4
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689c      	ldr	r4, [r3, #8]
 8003482:	2300      	movs	r3, #0
 8003484:	2200      	movs	r2, #0
 8003486:	210a      	movs	r1, #10
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	47a0      	blx	r4
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bd90      	pop	{r4, r7, pc}

08003494 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689c      	ldr	r4, [r3, #8]
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	2300      	movs	r3, #0
 80034a8:	210b      	movs	r1, #11
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	47a0      	blx	r4
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}

080034b6 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80034b6:	b590      	push	{r4, r7, lr}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689c      	ldr	r4, [r3, #8]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	2300      	movs	r3, #0
 80034ca:	210e      	movs	r1, #14
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	47a0      	blx	r4
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}

080034d8 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689c      	ldr	r4, [r3, #8]
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	2110      	movs	r1, #16
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	47a0      	blx	r4
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	70fb      	strb	r3, [r7, #3]
 8003502:	4613      	mov	r3, r2
 8003504:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695c      	ldr	r4, [r3, #20]
 800350a:	78ba      	ldrb	r2, [r7, #2]
 800350c:	78f9      	ldrb	r1, [r7, #3]
 800350e:	2300      	movs	r3, #0
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	47a0      	blx	r4
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}

0800351c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	72fb      	strb	r3, [r7, #11]
 800352a:	4613      	mov	r3, r2
 800352c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a11      	ldr	r2, [pc, #68]	; (8003594 <u8x8_SetupDefaults+0x58>)
 800354e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <u8x8_SetupDefaults+0x58>)
 8003554:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <u8x8_SetupDefaults+0x58>)
 800355a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <u8x8_SetupDefaults+0x58>)
 8003560:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	0800351d 	.word	0x0800351d

08003598 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ffc8 	bl	800353c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff ff47 	bl	8003458 <u8x8_SetupMemory>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035d6:	490d      	ldr	r1, [pc, #52]	; (800360c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035d8:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035dc:	e002      	b.n	80035e4 <LoopCopyDataInit>

080035de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e2:	3304      	adds	r3, #4

080035e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e8:	d3f9      	bcc.n	80035de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035ec:	4c0a      	ldr	r4, [pc, #40]	; (8003618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f0:	e001      	b.n	80035f6 <LoopFillZerobss>

080035f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f4:	3204      	adds	r2, #4

080035f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f8:	d3fb      	bcc.n	80035f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035fa:	f7fd fde5 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035fe:	f007 fd1d 	bl	800b03c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003602:	f7fd fbc5 	bl	8000d90 <main>
  bx lr
 8003606:	4770      	bx	lr
  ldr r0, =_sdata
 8003608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800360c:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8003610:	0800cc14 	.word	0x0800cc14
  ldr r2, =_sbss
 8003614:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8003618:	20001db0 	.word	0x20001db0

0800361c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800361c:	e7fe      	b.n	800361c <ADC1_2_IRQHandler>
	...

08003620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_Init+0x28>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a07      	ldr	r2, [pc, #28]	; (8003648 <HAL_Init+0x28>)
 800362a:	f043 0310 	orr.w	r3, r3, #16
 800362e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003630:	2003      	movs	r0, #3
 8003632:	f000 f95d 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003636:	200f      	movs	r0, #15
 8003638:	f000 f808 	bl	800364c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800363c:	f7fd fcd4 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40022000 	.word	0x40022000

0800364c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_InitTick+0x54>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_InitTick+0x58>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003662:	fbb3 f3f1 	udiv	r3, r3, r1
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f979 	bl	8003962 <HAL_SYSTICK_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00e      	b.n	8003698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d80a      	bhi.n	8003696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003680:	2200      	movs	r2, #0
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003688:	f000 f93d 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800368c:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <HAL_InitTick+0x5c>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000230 	.word	0x20000230
 80036a4:	20000238 	.word	0x20000238
 80036a8:	20000234 	.word	0x20000234

080036ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_IncTick+0x1c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_IncTick+0x20>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4a03      	ldr	r2, [pc, #12]	; (80036cc <HAL_IncTick+0x20>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000238 	.word	0x20000238
 80036cc:	20000bf8 	.word	0x20000bf8

080036d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return uwTick;
 80036d4:	4b02      	ldr	r3, [pc, #8]	; (80036e0 <HAL_GetTick+0x10>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	20000bf8 	.word	0x20000bf8

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fff0 	bl	80036d0 <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fc:	d005      	beq.n	800370a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_Delay+0x44>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800370a:	bf00      	nop
 800370c:	f7ff ffe0 	bl	80036d0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f7      	bhi.n	800370c <HAL_Delay+0x28>
  {
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000238 	.word	0x20000238

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db0b      	blt.n	80037ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4906      	ldr	r1, [pc, #24]	; (80037c4 <__NVIC_EnableIRQ+0x34>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0307 	rsb	r3, r3, #7
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf28      	it	cs
 800383a:	2304      	movcs	r3, #4
 800383c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	2b06      	cmp	r3, #6
 8003844:	d902      	bls.n	800384c <NVIC_EncodePriority+0x30>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3b03      	subs	r3, #3
 800384a:	e000      	b.n	800384e <NVIC_EncodePriority+0x32>
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43d9      	mvns	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	4313      	orrs	r3, r2
         );
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003884:	f3bf 8f4f 	dsb	sy
}
 8003888:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <__NVIC_SystemReset+0x24>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003892:	4904      	ldr	r1, [pc, #16]	; (80038a4 <__NVIC_SystemReset+0x24>)
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <__NVIC_SystemReset+0x28>)
 8003896:	4313      	orrs	r3, r2
 8003898:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800389a:	f3bf 8f4f 	dsb	sy
}
 800389e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <__NVIC_SystemReset+0x20>
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	05fa0004 	.word	0x05fa0004

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d0:	f7ff ff7a 	bl	80037c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff17 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff2c 	bl	8003774 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff7a 	bl	800381c <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff49 	bl	80037c8 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff1f 	bl	8003790 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800395e:	f7ff ff8f 	bl	8003880 <__NVIC_SystemReset>

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff9e 	bl	80038ac <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	; 0x2c
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e169      	b.n	8003c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003990:	2201      	movs	r2, #1
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8158 	bne.w	8003c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a9a      	ldr	r2, [pc, #616]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d05e      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039b8:	4a98      	ldr	r2, [pc, #608]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d875      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039be:	4a98      	ldr	r2, [pc, #608]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d058      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039c4:	4a96      	ldr	r2, [pc, #600]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d86f      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ca:	4a96      	ldr	r2, [pc, #600]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d052      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039d0:	4a94      	ldr	r2, [pc, #592]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d869      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039d6:	4a94      	ldr	r2, [pc, #592]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04c      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039dc:	4a92      	ldr	r2, [pc, #584]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d863      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039e2:	4a92      	ldr	r2, [pc, #584]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d046      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039e8:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d85d      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ee:	2b12      	cmp	r3, #18
 80039f0:	d82a      	bhi.n	8003a48 <HAL_GPIO_Init+0xcc>
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d859      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_GPIO_Init+0x80>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a77 	.word	0x08003a77
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a63 	.word	0x08003a63
 8003a08:	08003aa5 	.word	0x08003aa5
 8003a0c:	08003aab 	.word	0x08003aab
 8003a10:	08003aab 	.word	0x08003aab
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003aab 	.word	0x08003aab
 8003a1c:	08003aab 	.word	0x08003aab
 8003a20:	08003aab 	.word	0x08003aab
 8003a24:	08003aab 	.word	0x08003aab
 8003a28:	08003aab 	.word	0x08003aab
 8003a2c:	08003aab 	.word	0x08003aab
 8003a30:	08003aab 	.word	0x08003aab
 8003a34:	08003aab 	.word	0x08003aab
 8003a38:	08003aab 	.word	0x08003aab
 8003a3c:	08003aab 	.word	0x08003aab
 8003a40:	08003a59 	.word	0x08003a59
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	4a79      	ldr	r2, [pc, #484]	; (8003c30 <HAL_GPIO_Init+0x2b4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a4e:	e02c      	b.n	8003aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	623b      	str	r3, [r7, #32]
          break;
 8003a56:	e029      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	623b      	str	r3, [r7, #32]
          break;
 8003a60:	e024      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	3308      	adds	r3, #8
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e01f      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	330c      	adds	r3, #12
 8003a72:	623b      	str	r3, [r7, #32]
          break;
 8003a74:	e01a      	b.n	8003aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a7e:	2304      	movs	r3, #4
 8003a80:	623b      	str	r3, [r7, #32]
          break;
 8003a82:	e013      	b.n	8003aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	611a      	str	r2, [r3, #16]
          break;
 8003a96:	e009      	b.n	8003aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	615a      	str	r2, [r3, #20]
          break;
 8003aa2:	e003      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
          break;
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x130>
          break;
 8003aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d801      	bhi.n	8003ab6 <HAL_GPIO_Init+0x13a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	e001      	b.n	8003aba <HAL_GPIO_Init+0x13e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_GPIO_Init+0x14c>
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	e002      	b.n	8003ace <HAL_GPIO_Init+0x152>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3b08      	subs	r3, #8
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80b1 	beq.w	8003c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b14:	4a48      	ldr	r2, [pc, #288]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <HAL_GPIO_Init+0x2c0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_GPIO_Init+0x1ec>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_GPIO_Init+0x2c4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_GPIO_Init+0x1e8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <HAL_GPIO_Init+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <HAL_GPIO_Init+0x1e4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <HAL_GPIO_Init+0x2cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_GPIO_Init+0x1e0>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e006      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e004      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e002      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b7a:	492f      	ldr	r1, [pc, #188]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	492c      	ldr	r1, [pc, #176]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4928      	ldr	r1, [pc, #160]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4922      	ldr	r1, [pc, #136]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	491e      	ldr	r1, [pc, #120]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4914      	ldr	r1, [pc, #80]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60cb      	str	r3, [r1, #12]
 8003c18:	e021      	b.n	8003c5e <HAL_GPIO_Init+0x2e2>
 8003c1a:	bf00      	nop
 8003c1c:	10320000 	.word	0x10320000
 8003c20:	10310000 	.word	0x10310000
 8003c24:	10220000 	.word	0x10220000
 8003c28:	10210000 	.word	0x10210000
 8003c2c:	10120000 	.word	0x10120000
 8003c30:	10110000 	.word	0x10110000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010800 	.word	0x40010800
 8003c40:	40010c00 	.word	0x40010c00
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	4909      	ldr	r1, [pc, #36]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f47f ae8e 	bne.w	8003990 <HAL_GPIO_Init+0x14>
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	372c      	adds	r7, #44	; 0x2c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb6:	b08b      	sub	sp, #44	; 0x2c
 8003cb8:	af06      	add	r7, sp, #24
 8003cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0fd      	b.n	8003ec2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f006 fefe 	bl	800aadc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 fbcf 	bl	8006490 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	687e      	ldr	r6, [r7, #4]
 8003cfa:	466d      	mov	r5, sp
 8003cfc:	f106 0410 	add.w	r4, r6, #16
 8003d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	602b      	str	r3, [r5, #0]
 8003d08:	1d33      	adds	r3, r6, #4
 8003d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d0c:	6838      	ldr	r0, [r7, #0]
 8003d0e:	f002 fb99 	bl	8006444 <USB_CoreInit>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ce      	b.n	8003ec2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 fbca 	bl	80064c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e04c      	b.n	8003dd0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	3301      	adds	r3, #1
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	b298      	uxth	r0, r3
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	3336      	adds	r3, #54	; 0x36
 8003d74:	4602      	mov	r2, r0
 8003d76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3303      	adds	r3, #3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3338      	adds	r3, #56	; 0x38
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	333c      	adds	r3, #60	; 0x3c
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3340      	adds	r3, #64	; 0x40
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3ad      	bcc.n	8003d36 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e044      	b.n	8003e6a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	440b      	add	r3, r1
 8003e30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	3301      	adds	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3b5      	bcc.n	8003de0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	687e      	ldr	r6, [r7, #4]
 8003e7c:	466d      	mov	r5, sp
 8003e7e:	f106 0410 	add.w	r4, r6, #16
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	1d33      	adds	r3, r6, #4
 8003e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f002 fb24 	bl	80064dc <USB_DevInit>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00d      	b.n	8003ec2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f004 ffd6 	bl	8008e6c <USB_DevDisconnect>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_PCD_Start+0x16>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e016      	b.n	8003f0e <HAL_PCD_Start+0x44>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 fab9 	bl	8006464 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f007 f864 	bl	800afc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 ffaa 	bl	8008e58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b088      	sub	sp, #32
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 ffac 	bl	8008e80 <USB_ReadInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d102      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb5f 	bl	80045f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f004 ff9e 	bl	8008e80 <USB_ReadInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d112      	bne.n	8003f76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f62:	b292      	uxth	r2, r2
 8003f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f006 fe32 	bl	800abd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f923 	bl	80041bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f004 ff80 	bl	8008e80 <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 ff69 	bl	8008e80 <USB_ReadInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 ff52 	bl	8008e80 <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d126      	bne.n	8004036 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0208 	bic.w	r2, r2, #8
 8004012:	b292      	uxth	r2, r2
 8004014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f006 fe13 	bl	800ac44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004030:	b292      	uxth	r2, r2
 8004032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 ff20 	bl	8008e80 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404a:	f040 8082 	bne.w	8004152 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e010      	b.n	8004076 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	b292      	uxth	r2, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	3320      	adds	r3, #32
 800406a:	443b      	add	r3, r7
 800406c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	3301      	adds	r3, #1
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	7ffb      	ldrb	r3, [r7, #31]
 8004078:	2b07      	cmp	r3, #7
 800407a:	d9eb      	bls.n	8004054 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	b292      	uxth	r2, r2
 8004090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	b292      	uxth	r2, r2
 80040a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80040ac:	bf00      	nop
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f6      	beq.n	80040ae <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	b292      	uxth	r2, r2
 80040d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e00f      	b.n	80040fe <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	4611      	mov	r1, r2
 80040e6:	7ffa      	ldrb	r2, [r7, #31]
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	440a      	add	r2, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	3320      	adds	r3, #32
 80040f0:	443b      	add	r3, r7
 80040f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80040f6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
 80040fa:	3301      	adds	r3, #1
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b07      	cmp	r3, #7
 8004102:	d9ec      	bls.n	80040de <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	b292      	uxth	r2, r2
 8004118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412e:	b292      	uxth	r2, r2
 8004130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0204 	orr.w	r2, r2, #4
 8004146:	b292      	uxth	r2, r2
 8004148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f006 fd5f 	bl	800ac10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fe92 	bl	8008e80 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004166:	d10e      	bne.n	8004186 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800417a:	b292      	uxth	r2, r2
 800417c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f006 fd18 	bl	800abb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fe78 	bl	8008e80 <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419a:	d10b      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ae:	b292      	uxth	r2, r2
 80041b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80041b4:	bf00      	nop
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_PCD_SetAddress+0x1a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e013      	b.n	80041fe <HAL_PCD_SetAddress+0x42>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 fe1f 	bl	8008e32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	461a      	mov	r2, r3
 8004214:	4603      	mov	r3, r0
 8004216:	70fb      	strb	r3, [r7, #3]
 8004218:	460b      	mov	r3, r1
 800421a:	803b      	strh	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da0e      	bge.n	800424a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
 8004248:	e00e      	b.n	8004268 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 0207 	and.w	r2, r3, #7
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004274:	883a      	ldrh	r2, [r7, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	78ba      	ldrb	r2, [r7, #2]
 800427e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004292:	78bb      	ldrb	r3, [r7, #2]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d102      	bne.n	800429e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_PCD_EP_Open+0xa6>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e00e      	b.n	80042ca <HAL_PCD_EP_Open+0xc4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f002 f92e 	bl	800651c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da0e      	bge.n	8004304 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	e00e      	b.n	8004322 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 0207 	and.w	r2, r3, #7
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_PCD_EP_Close+0x6a>
 8004338:	2302      	movs	r3, #2
 800433a:	e00e      	b.n	800435a <HAL_PCD_EP_Close+0x88>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	4618      	mov	r0, r3
 800434c:	f002 fc50 	bl	8006bf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	460b      	mov	r3, r1
 8004370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004372:	7afb      	ldrb	r3, [r7, #11]
 8004374:	f003 0207 	and.w	r2, r3, #7
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2200      	movs	r2, #0
 80043a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	7afb      	ldrb	r3, [r7, #11]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 fe02 	bl	8006fc8 <USB_EPStartXfer>
 80043c4:	e005      	b.n	80043d2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f002 fdfb 	bl	8006fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	460b      	mov	r3, r1
 8004418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2201      	movs	r2, #1
 8004454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	b2da      	uxtb	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6979      	ldr	r1, [r7, #20]
 8004472:	4618      	mov	r0, r3
 8004474:	f002 fda8 	bl	8006fc8 <USB_EPStartXfer>
 8004478:	e005      	b.n	8004486 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6979      	ldr	r1, [r7, #20]
 8004480:	4618      	mov	r0, r3
 8004482:	f002 fda1 	bl	8006fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 0207 	and.w	r2, r3, #7
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d901      	bls.n	80044ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e04c      	b.n	8004548 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da0e      	bge.n	80044d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	705a      	strb	r2, [r3, #1]
 80044d2:	e00c      	b.n	80044ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_PCD_EP_SetStall+0x7e>
 800450a:	2302      	movs	r3, #2
 800450c:	e01c      	b.n	8004548 <HAL_PCD_EP_SetStall+0xb8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fb8b 	bl	8008c38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f004 fcb0 	bl	8008e9e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 020f 	and.w	r2, r3, #15
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d901      	bls.n	800456e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e040      	b.n	80045f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800456e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004572:	2b00      	cmp	r3, #0
 8004574:	da0e      	bge.n	8004594 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	705a      	strb	r2, [r3, #1]
 8004592:	e00e      	b.n	80045b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_PCD_EP_ClrStall+0x82>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e00e      	b.n	80045f0 <HAL_PCD_EP_ClrStall+0xa0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 fb79 	bl	8008cd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08e      	sub	sp, #56	; 0x38
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004600:	e2ec      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800460a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800460c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8161 	bne.w	80048e4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004622:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d152      	bne.n	80046d2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	81fb      	strh	r3, [r7, #14]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3328      	adds	r3, #40	; 0x28
 8004654:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	3302      	adds	r3, #2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	441a      	add	r2, r3
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004690:	2100      	movs	r1, #0
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f006 fa75 	bl	800ab82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 829b 	beq.w	8004bdc <PCD_EP_ISR_Handler+0x5e4>
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 8296 	bne.w	8004bdc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	b292      	uxth	r2, r2
 80046c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046d0:	e284      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d034      	beq.n	8004756 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	3306      	adds	r3, #6
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800472a:	b29b      	uxth	r3, r3
 800472c:	f004 fc07 	bl	8008f3e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29a      	uxth	r2, r3
 8004738:	f640 738f 	movw	r3, #3983	; 0xf8f
 800473c:	4013      	ands	r3, r2
 800473e:	823b      	strh	r3, [r7, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	8a3a      	ldrh	r2, [r7, #16]
 8004746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474a:	b292      	uxth	r2, r2
 800474c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f006 f9ea 	bl	800ab28 <HAL_PCD_SetupStageCallback>
 8004754:	e242      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004756:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800475a:	2b00      	cmp	r3, #0
 800475c:	f280 823e 	bge.w	8004bdc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29a      	uxth	r2, r3
 8004768:	f640 738f 	movw	r3, #3983	; 0xf8f
 800476c:	4013      	ands	r3, r2
 800476e:	83bb      	strh	r3, [r7, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	8bba      	ldrh	r2, [r7, #28]
 8004776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800477a:	b292      	uxth	r2, r2
 800477c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	3306      	adds	r3, #6
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d019      	beq.n	80047e6 <PCD_EP_ISR_Handler+0x1ee>
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d015      	beq.n	80047e6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	6959      	ldr	r1, [r3, #20]
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f004 fbb7 	bl	8008f3e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	441a      	add	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047de:	2100      	movs	r1, #0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f006 f9b3 	bl	800ab4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 81f2 	bne.w	8004bdc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d112      	bne.n	8004846 <PCD_EP_ISR_Handler+0x24e>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800482a:	b29a      	uxth	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483e:	b29a      	uxth	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	e02f      	b.n	80048a6 <PCD_EP_ISR_Handler+0x2ae>
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b3e      	cmp	r3, #62	; 0x3e
 800484c:	d813      	bhi.n	8004876 <PCD_EP_ISR_Handler+0x27e>
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <PCD_EP_ISR_Handler+0x270>
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	3301      	adds	r3, #1
 8004866:	633b      	str	r3, [r7, #48]	; 0x30
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29a      	uxth	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e017      	b.n	80048a6 <PCD_EP_ISR_Handler+0x2ae>
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <PCD_EP_ISR_Handler+0x298>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	3b01      	subs	r3, #1
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29b      	uxth	r3, r3
 8004898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	827b      	strh	r3, [r7, #18]
 80048b8:	8a7b      	ldrh	r3, [r7, #18]
 80048ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048be:	827b      	strh	r3, [r7, #18]
 80048c0:	8a7b      	ldrh	r3, [r7, #18]
 80048c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048c6:	827b      	strh	r3, [r7, #18]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	8a7b      	ldrh	r3, [r7, #18]
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
 80048e2:	e17b      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f280 80ea 	bge.w	8004ad4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29a      	uxth	r2, r3
 8004912:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004916:	4013      	ands	r3, r2
 8004918:	853b      	strh	r3, [r7, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800492a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800492e:	b292      	uxth	r2, r2
 8004930:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004932:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	7b1b      	ldrb	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d122      	bne.n	8004996 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004958:	b29b      	uxth	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	3306      	adds	r3, #6
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004978:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800497a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8087 	beq.w	8004a90 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	88da      	ldrh	r2, [r3, #6]
 800498e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004990:	f004 fad5 	bl	8008f3e <USB_ReadPMA>
 8004994:	e07c      	b.n	8004a90 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	78db      	ldrb	r3, [r3, #3]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d108      	bne.n	80049b0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800499e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049a0:	461a      	mov	r2, r3
 80049a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f927 	bl	8004bf8 <HAL_PCD_EP_DB_Receive>
 80049aa:	4603      	mov	r3, r0
 80049ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049ae:	e06f      	b.n	8004a90 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d021      	beq.n	8004a4e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a32:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02a      	beq.n	8004a90 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	6959      	ldr	r1, [r3, #20]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	891a      	ldrh	r2, [r3, #8]
 8004a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a48:	f004 fa79 	bl	8008f3e <USB_ReadPMA>
 8004a4c:	e020      	b.n	8004a90 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	3306      	adds	r3, #6
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a76:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	6959      	ldr	r1, [r3, #20]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	895a      	ldrh	r2, [r3, #10]
 8004a8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a8c:	f004 fa57 	bl	8008f3e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a96:	441a      	add	r2, r3
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aa2:	441a      	add	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <PCD_EP_ISR_Handler+0x4c2>
 8004ab0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d206      	bcs.n	8004ac8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f006 f843 	bl	800ab4c <HAL_PCD_DataOutStageCallback>
 8004ac6:	e005      	b.n	8004ad4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f002 fa7a 	bl	8006fc8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ad4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d07e      	beq.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ade:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	843b      	strh	r3, [r7, #32]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8c3b      	ldrh	r3, [r7, #32]
 8004b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	78db      	ldrb	r3, [r3, #3]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d00c      	beq.n	8004b4c <PCD_EP_ISR_Handler+0x554>
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	78db      	ldrb	r3, [r3, #3]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d146      	bne.n	8004bd0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d141      	bne.n	8004bd0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3302      	adds	r3, #2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b74:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	8bfb      	ldrh	r3, [r7, #30]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d906      	bls.n	8004b8e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	8bfb      	ldrh	r3, [r7, #30]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	619a      	str	r2, [r3, #24]
 8004b8c:	e002      	b.n	8004b94 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f005 ffed 	bl	800ab82 <HAL_PCD_DataInStageCallback>
 8004ba8:	e018      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	8bfb      	ldrh	r3, [r7, #30]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	8bfb      	ldrh	r3, [r7, #30]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f002 f9fd 	bl	8006fc8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004bce:	e005      	b.n	8004bdc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004bd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f91b 	bl	8004e12 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f6ff ad0a 	blt.w	8004602 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3738      	adds	r7, #56	; 0x38
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d07e      	beq.n	8004d0e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4413      	add	r3, r2
 8004c24:	3302      	adds	r3, #2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	8b7b      	ldrh	r3, [r7, #26]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d306      	bcc.n	8004c52 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	8b7b      	ldrh	r3, [r7, #26]
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	619a      	str	r2, [r3, #24]
 8004c50:	e002      	b.n	8004c58 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2200      	movs	r2, #0
 8004c56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d123      	bne.n	8004ca8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	833b      	strh	r3, [r7, #24]
 8004c7c:	8b3b      	ldrh	r3, [r7, #24]
 8004c7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c82:	833b      	strh	r3, [r7, #24]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	8b3b      	ldrh	r3, [r7, #24]
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01f      	beq.n	8004cf2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	82fb      	strh	r3, [r7, #22]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	8afb      	ldrh	r3, [r7, #22]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cf2:	8b7b      	ldrh	r3, [r7, #26]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8087 	beq.w	8004e08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6959      	ldr	r1, [r3, #20]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	891a      	ldrh	r2, [r3, #8]
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	f004 f919 	bl	8008f3e <USB_ReadPMA>
 8004d0c:	e07c      	b.n	8004e08 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	3306      	adds	r3, #6
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	8b7b      	ldrh	r3, [r7, #26]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d306      	bcc.n	8004d50 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	1ad2      	subs	r2, r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	619a      	str	r2, [r3, #24]
 8004d4e:	e002      	b.n	8004d56 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2200      	movs	r2, #0
 8004d54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d123      	bne.n	8004da6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	83fb      	strh	r3, [r7, #30]
 8004d7a:	8bfb      	ldrh	r3, [r7, #30]
 8004d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d80:	83fb      	strh	r3, [r7, #30]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8bfb      	ldrh	r3, [r7, #30]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d11f      	bne.n	8004df0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	83bb      	strh	r3, [r7, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	8bbb      	ldrh	r3, [r7, #28]
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004df0:	8b7b      	ldrh	r3, [r7, #26]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6959      	ldr	r1, [r3, #20]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	895a      	ldrh	r2, [r3, #10]
 8004e02:	8b7b      	ldrh	r3, [r7, #26]
 8004e04:	f004 f89b 	bl	8008f3e <USB_ReadPMA>
    }
  }

  return count;
 8004e08:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b0a2      	sub	sp, #136	; 0x88
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 81c7 	beq.w	80051ba <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3302      	adds	r3, #2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d907      	bls.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e6c:	1ad2      	subs	r2, r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	619a      	str	r2, [r3, #24]
 8004e72:	e002      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 80b9 	bne.w	8004ff6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d126      	bne.n	8004eda <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	4413      	add	r3, r2
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e01a      	b.n	8004f10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d116      	bne.n	8004f10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	4413      	add	r3, r2
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d126      	bne.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	4413      	add	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	011a      	lsls	r2, r3, #4
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e017      	b.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d113      	bne.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	4413      	add	r3, r2
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011a      	lsls	r2, r3, #4
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f005 fded 	bl	800ab82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 82d4 	beq.w	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	827b      	strh	r3, [r7, #18]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	8a7b      	ldrh	r3, [r7, #18]
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]
 8004ff4:	e2b2      	b.n	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d021      	beq.n	8005044 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 8286 	bne.w	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005058:	441a      	add	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005066:	441a      	add	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d309      	bcc.n	800508c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	621a      	str	r2, [r3, #32]
 800508a:	e015      	b.n	80050b8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005094:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005098:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050a2:	e009      	b.n	80050b8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d155      	bne.n	800516c <HAL_PCD_EP_DB_Transmit+0x35a>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	4413      	add	r3, r2
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d112      	bne.n	8005114 <HAL_PCD_EP_DB_Transmit+0x302>
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510c:	b29a      	uxth	r2, r3
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e047      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d811      	bhi.n	800513e <HAL_PCD_EP_DB_Transmit+0x32c>
 800511a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_PCD_EP_DB_Transmit+0x31e>
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	3301      	adds	r3, #1
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29a      	uxth	r2, r3
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e032      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x392>
 800513e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <HAL_PCD_EP_DB_Transmit+0x342>
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005150:	3b01      	subs	r3, #1
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29b      	uxth	r3, r3
 800515c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005164:	b29a      	uxth	r2, r3
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	e01b      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x392>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d117      	bne.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005188:	4413      	add	r3, r2
 800518a:	643b      	str	r3, [r7, #64]	; 0x40
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005194:	4413      	add	r3, r2
 8005196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519e:	b29a      	uxth	r2, r3
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	891a      	ldrh	r2, [r3, #8]
 80051b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f003 fe7e 	bl	8008eb4 <USB_WritePMA>
 80051b8:	e1d0      	b.n	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	3306      	adds	r3, #6
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d307      	bcc.n	8005202 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	619a      	str	r2, [r3, #24]
 8005200:	e002      	b.n	8005208 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 80c4 	bne.w	800539a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d126      	bne.n	8005268 <HAL_PCD_EP_DB_Transmit+0x456>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005228:	b29b      	uxth	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	4413      	add	r3, r2
 8005230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	011a      	lsls	r2, r3, #4
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	4413      	add	r3, r2
 800523c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68
 8005242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800524c:	b29a      	uxth	r2, r3
 800524e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e01a      	b.n	800529e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d116      	bne.n	800529e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	677b      	str	r3, [r7, #116]	; 0x74
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527e:	b29b      	uxth	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005284:	4413      	add	r3, r2
 8005286:	677b      	str	r3, [r7, #116]	; 0x74
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	011a      	lsls	r2, r3, #4
 800528e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005290:	4413      	add	r3, r2
 8005292:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005296:	673b      	str	r3, [r7, #112]	; 0x70
 8005298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529a:	2200      	movs	r2, #0
 800529c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d12f      	bne.n	800530c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052c4:	4413      	add	r3, r2
 80052c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	011a      	lsls	r2, r3, #4
 80052d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005302:	b29a      	uxth	r2, r3
 8005304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e017      	b.n	800533c <HAL_PCD_EP_DB_Transmit+0x52a>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d113      	bne.n	800533c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531c:	b29b      	uxth	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005322:	4413      	add	r3, r2
 8005324:	67bb      	str	r3, [r7, #120]	; 0x78
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005338:	2200      	movs	r2, #0
 800533a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f005 fc1d 	bl	800ab82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8104 	bne.w	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	b29b      	uxth	r3, r3
 8005396:	8013      	strh	r3, [r2, #0]
 8005398:	e0e0      	b.n	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d121      	bne.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	f040 80b4 	bne.w	800555c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053fc:	441a      	add	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800540a:	441a      	add	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d309      	bcc.n	8005430 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	621a      	str	r2, [r3, #32]
 800542e:	e015      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800543c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005446:	e009      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	667b      	str	r3, [r7, #100]	; 0x64
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d155      	bne.n	8005516 <HAL_PCD_EP_DB_Transmit+0x704>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547e:	4413      	add	r3, r2
 8005480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548a:	4413      	add	r3, r2
 800548c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005490:	65bb      	str	r3, [r7, #88]	; 0x58
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d112      	bne.n	80054be <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e044      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x736>
 80054be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c0:	2b3e      	cmp	r3, #62	; 0x3e
 80054c2:	d811      	bhi.n	80054e8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_PCD_EP_DB_Transmit+0x6c8>
 80054d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d6:	3301      	adds	r3, #1
 80054d8:	657b      	str	r3, [r7, #84]	; 0x54
 80054da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e02f      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x736>
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	657b      	str	r3, [r7, #84]	; 0x54
 80054ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <HAL_PCD_EP_DB_Transmit+0x6ec>
 80054f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fa:	3b01      	subs	r3, #1
 80054fc:	657b      	str	r3, [r7, #84]	; 0x54
 80054fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005500:	b29b      	uxth	r3, r3
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29a      	uxth	r2, r3
 8005510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e018      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x736>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d114      	bne.n	8005548 <HAL_PCD_EP_DB_Transmit+0x736>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552c:	4413      	add	r3, r2
 800552e:	667b      	str	r3, [r7, #100]	; 0x64
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005538:	4413      	add	r3, r2
 800553a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553e:	663b      	str	r3, [r7, #96]	; 0x60
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	b29a      	uxth	r2, r3
 8005544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005546:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6959      	ldr	r1, [r3, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	895a      	ldrh	r2, [r3, #10]
 8005554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	f003 fcac 	bl	8008eb4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005576:	823b      	strh	r3, [r7, #16]
 8005578:	8a3b      	ldrh	r3, [r7, #16]
 800557a:	f083 0310 	eor.w	r3, r3, #16
 800557e:	823b      	strh	r3, [r7, #16]
 8005580:	8a3b      	ldrh	r3, [r7, #16]
 8005582:	f083 0320 	eor.w	r3, r3, #32
 8005586:	823b      	strh	r3, [r7, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	8a3b      	ldrh	r3, [r7, #16]
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3788      	adds	r7, #136	; 0x88
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	817b      	strh	r3, [r7, #10]
 80055c4:	4613      	mov	r3, r2
 80055c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d4:	897b      	ldrh	r3, [r7, #10]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e009      	b.n	8005600 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055ec:	897a      	ldrh	r2, [r7, #10]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	b29a      	uxth	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	80da      	strh	r2, [r3, #6]
 8005614:	e00b      	b.n	800562e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2201      	movs	r2, #1
 800561a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	b29a      	uxth	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	b29a      	uxth	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
	...

0800563c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e272      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8087 	beq.w	800576a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800565c:	4b92      	ldr	r3, [pc, #584]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b04      	cmp	r3, #4
 8005666:	d00c      	beq.n	8005682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005668:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b08      	cmp	r3, #8
 8005672:	d112      	bne.n	800569a <HAL_RCC_OscConfig+0x5e>
 8005674:	4b8c      	ldr	r3, [pc, #560]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d10b      	bne.n	800569a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005682:	4b89      	ldr	r3, [pc, #548]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d06c      	beq.n	8005768 <HAL_RCC_OscConfig+0x12c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d168      	bne.n	8005768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e24c      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d106      	bne.n	80056b2 <HAL_RCC_OscConfig+0x76>
 80056a4:	4b80      	ldr	r3, [pc, #512]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a7f      	ldr	r2, [pc, #508]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	e02e      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7a      	ldr	r2, [pc, #488]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b78      	ldr	r3, [pc, #480]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a77      	ldr	r2, [pc, #476]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01d      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0xbc>
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a71      	ldr	r2, [pc, #452]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6f      	ldr	r3, [pc, #444]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6e      	ldr	r2, [pc, #440]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e00b      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056f8:	4b6b      	ldr	r3, [pc, #428]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a67      	ldr	r2, [pc, #412]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800570a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd ffda 	bl	80036d0 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fd ffd6 	bl	80036d0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e200      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0xe4>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fd ffc6 	bl	80036d0 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005748:	f7fd ffc2 	bl	80036d0 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1ec      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x10c>
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d063      	beq.n	800583e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005776:	4b4c      	ldr	r3, [pc, #304]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005782:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x18c>
 800578e:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579a:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x176>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1c0      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b2:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4939      	ldr	r1, [pc, #228]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	e03a      	b.n	800583e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_OscConfig+0x270>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fd ff7b 	bl	80036d0 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057de:	f7fd ff77 	bl	80036d0 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e1a1      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f0:	4b2d      	ldr	r3, [pc, #180]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4927      	ldr	r1, [pc, #156]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	e015      	b.n	800583e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x270>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fd ff5a 	bl	80036d0 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005820:	f7fd ff56 	bl	80036d0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e180      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03a      	beq.n	80058c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <HAL_RCC_OscConfig+0x274>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005858:	f7fd ff3a 	bl	80036d0 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005860:	f7fd ff36 	bl	80036d0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e160      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800587e:	2001      	movs	r0, #1
 8005880:	f000 faa6 	bl	8005dd0 <RCC_Delay>
 8005884:	e01c      	b.n	80058c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <HAL_RCC_OscConfig+0x274>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588c:	f7fd ff20 	bl	80036d0 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005892:	e00f      	b.n	80058b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005894:	f7fd ff1c 	bl	80036d0 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d908      	bls.n	80058b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e146      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	42420000 	.word	0x42420000
 80058b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e9      	bne.n	8005894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a6 	beq.w	8005a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ce:	2300      	movs	r3, #0
 80058d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	61d3      	str	r3, [r2, #28]
 80058ea:	4b85      	ldr	r3, [pc, #532]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4b82      	ldr	r3, [pc, #520]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d118      	bne.n	8005938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005906:	4b7f      	ldr	r3, [pc, #508]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a7e      	ldr	r2, [pc, #504]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005912:	f7fd fedd 	bl	80036d0 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fd fed9 	bl	80036d0 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	; 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e103      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592c:	4b75      	ldr	r3, [pc, #468]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x312>
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6213      	str	r3, [r2, #32]
 800594c:	e02d      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0x334>
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6213      	str	r3, [r2, #32]
 8005962:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	4a66      	ldr	r2, [pc, #408]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	6213      	str	r3, [r2, #32]
 800596e:	e01c      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d10c      	bne.n	8005992 <HAL_RCC_OscConfig+0x356>
 8005978:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	4a60      	ldr	r2, [pc, #384]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	6213      	str	r3, [r2, #32]
 8005984:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4a5d      	ldr	r2, [pc, #372]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6213      	str	r3, [r2, #32]
 8005990:	e00b      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 8005992:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	6213      	str	r3, [r2, #32]
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	4a57      	ldr	r2, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	f023 0304 	bic.w	r3, r3, #4
 80059a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d015      	beq.n	80059de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b2:	f7fd fe8d 	bl	80036d0 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	e00a      	b.n	80059d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fd fe89 	bl	80036d0 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e0b1      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d0:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ee      	beq.n	80059ba <HAL_RCC_OscConfig+0x37e>
 80059dc:	e014      	b.n	8005a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059de:	f7fd fe77 	bl	80036d0 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fd fe73 	bl	80036d0 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e09b      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ee      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8087 	beq.w	8005b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d061      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d146      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fd fe47 	bl	80036d0 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fd fe43 	bl	80036d0 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e06d      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a58:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f0      	bne.n	8005a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4921      	ldr	r1, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a19      	ldr	r1, [r3, #32]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	430b      	orrs	r3, r1
 8005a92:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7fd fe17 	bl	80036d0 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fd fe13 	bl	80036d0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e03d      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x46a>
 8005ac4:	e035      	b.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005acc:	f7fd fe00 	bl	80036d0 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fd fdfc 	bl	80036d0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e026      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x498>
 8005af2:	e01e      	b.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e019      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40007000 	.word	0x40007000
 8005b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_OscConfig+0x500>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d001      	beq.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000

08005b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0d0      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d910      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 0207 	bic.w	r2, r3, #7
 8005b6a:	4965      	ldr	r1, [pc, #404]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b63      	ldr	r3, [pc, #396]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b8      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a52      	ldr	r2, [pc, #328]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	494d      	ldr	r1, [pc, #308]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d040      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d115      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e073      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e06b      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4936      	ldr	r1, [pc, #216]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c30:	f7fd fd4e 	bl	80036d0 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c38:	f7fd fd4a 	bl	80036d0 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e053      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 020c 	and.w	r2, r3, #12
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1eb      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d210      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	4922      	ldr	r1, [pc, #136]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4916      	ldr	r1, [pc, #88]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cce:	f000 f821 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490a      	ldr	r1, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_ClockConfig+0x1cc>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_RCC_ClockConfig+0x1d0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd fcac 	bl	800364c <HAL_InitTick>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40022000 	.word	0x40022000
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800bae8 	.word	0x0800bae8
 8005d0c:	20000230 	.word	0x20000230
 8005d10:	20000234 	.word	0x20000234

08005d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	b490      	push	{r4, r7}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d1a:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8005d1c:	1d3c      	adds	r4, r7, #4
 8005d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d24:	f240 2301 	movw	r3, #513	; 0x201
 8005d28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d3e:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d002      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x40>
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0x46>
 8005d52:	e02b      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d56:	623b      	str	r3, [r7, #32]
      break;
 8005d58:	e02b      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	0c9b      	lsrs	r3, r3, #18
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	3328      	adds	r3, #40	; 0x28
 8005d64:	443b      	add	r3, r7
 8005d66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	0c5b      	lsrs	r3, r3, #17
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	3328      	adds	r3, #40	; 0x28
 8005d82:	443b      	add	r3, r7
 8005d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4a0e      	ldr	r2, [pc, #56]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d8e:	fb03 f202 	mul.w	r2, r3, r2
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	e004      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4a0b      	ldr	r2, [pc, #44]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	623b      	str	r3, [r7, #32]
      break;
 8005daa:	e002      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dae:	623b      	str	r3, [r7, #32]
      break;
 8005db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db2:	6a3b      	ldr	r3, [r7, #32]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc90      	pop	{r4, r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	0800baa0 	.word	0x0800baa0
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	007a1200 	.word	0x007a1200
 8005dcc:	003d0900 	.word	0x003d0900

08005dd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <RCC_Delay+0x34>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <RCC_Delay+0x38>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	0a5b      	lsrs	r3, r3, #9
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dec:	bf00      	nop
  }
  while (Delay --);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	60fa      	str	r2, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f9      	bne.n	8005dec <RCC_Delay+0x1c>
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	20000230 	.word	0x20000230
 8005e08:	10624dd3 	.word	0x10624dd3

08005e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d07d      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e2c:	4b4f      	ldr	r3, [pc, #316]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10d      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e38:	4b4c      	ldr	r3, [pc, #304]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4a4b      	ldr	r2, [pc, #300]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e42:	61d3      	str	r3, [r2, #28]
 8005e44:	4b49      	ldr	r3, [pc, #292]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e54:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d118      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e60:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a42      	ldr	r2, [pc, #264]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6c:	f7fd fc30 	bl	80036d0 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	e008      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e74:	f7fd fc2c 	bl	80036d0 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e06d      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e86:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e92:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d02e      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d027      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eb0:	4b2e      	ldr	r3, [pc, #184]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec0:	4b2c      	ldr	r3, [pc, #176]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ec6:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d014      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fd fbfb 	bl	80036d0 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fd fbf7 	bl	80036d0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e036      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ee      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4917      	ldr	r1, [pc, #92]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f18:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	490b      	ldr	r1, [pc, #44]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	4904      	ldr	r1, [pc, #16]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40007000 	.word	0x40007000
 8005f74:	42420440 	.word	0x42420440

08005f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e076      	b.n	8006078 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d108      	bne.n	8005fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f9a:	d009      	beq.n	8005fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	61da      	str	r2, [r3, #28]
 8005fa2:	e005      	b.n	8005fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb f84e 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	ea42 0103 	orr.w	r1, r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	0c1a      	lsrs	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f002 0204 	and.w	r2, r2, #4
 8006056:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006066:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_Transmit+0x22>
 800609e:	2302      	movs	r3, #2
 80060a0:	e126      	b.n	80062f0 <HAL_SPI_Transmit+0x270>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060aa:	f7fd fb11 	bl	80036d0 <HAL_GetTick>
 80060ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060c4:	e10b      	b.n	80062de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Transmit+0x52>
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d6:	e102      	b.n	80062de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2203      	movs	r2, #3
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611e:	d10f      	bne.n	8006140 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d007      	beq.n	800615e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006166:	d14b      	bne.n	8006200 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_SPI_Transmit+0xf6>
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d13e      	bne.n	80061f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	881a      	ldrh	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	1c9a      	adds	r2, r3, #2
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800619a:	e02b      	b.n	80061f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d112      	bne.n	80061d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80061ce:	e011      	b.n	80061f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d0:	f7fd fa7e 	bl	80036d0 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d803      	bhi.n	80061e8 <HAL_SPI_Transmit+0x168>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e6:	d102      	bne.n	80061ee <HAL_SPI_Transmit+0x16e>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061f2:	e074      	b.n	80062de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1ce      	bne.n	800619c <HAL_SPI_Transmit+0x11c>
 80061fe:	e04c      	b.n	800629a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_Transmit+0x18e>
 8006208:	8afb      	ldrh	r3, [r7, #22]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d140      	bne.n	8006290 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006234:	e02c      	b.n	8006290 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d113      	bne.n	800626c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	86da      	strh	r2, [r3, #54]	; 0x36
 800626a:	e011      	b.n	8006290 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800626c:	f7fd fa30 	bl	80036d0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d803      	bhi.n	8006284 <HAL_SPI_Transmit+0x204>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006282:	d102      	bne.n	800628a <HAL_SPI_Transmit+0x20a>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800628e:	e026      	b.n	80062de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1cd      	bne.n	8006236 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f8b2 	bl	8006408 <SPI_EndRxTxTransaction>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e000      	b.n	80062de <HAL_SPI_Transmit+0x25e>
  }

error:
 80062dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006308:	f7fd f9e2 	bl	80036d0 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4413      	add	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006318:	f7fd f9da 	bl	80036d0 <HAL_GetTick>
 800631c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800631e:	4b39      	ldr	r3, [pc, #228]	; (8006404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	0d1b      	lsrs	r3, r3, #20
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632e:	e054      	b.n	80063da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006336:	d050      	beq.n	80063da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006338:	f7fd f9ca 	bl	80036d0 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	429a      	cmp	r2, r3
 8006346:	d902      	bls.n	800634e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d13d      	bne.n	80063ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800635c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006366:	d111      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d004      	beq.n	800637c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d107      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006394:	d10f      	bne.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e017      	b.n	80063fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d19b      	bne.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000230 	.word	0x20000230

08006408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff ff6a 	bl	80062f8 <SPI_WaitFlagStateUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e000      	b.n	800643c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006444:	b084      	sub	sp, #16
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	f107 0014 	add.w	r0, r7, #20
 8006452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	b004      	add	sp, #16
 8006462:	4770      	bx	lr

08006464 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006474:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006478:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006498:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800649c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	43db      	mvns	r3, r3
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4013      	ands	r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064dc:	b084      	sub	sp, #16
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	f107 0014 	add.w	r0, r7, #20
 80064ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr

0800651c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b09b      	sub	sp, #108	; 0x6c
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	78db      	ldrb	r3, [r3, #3]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d81f      	bhi.n	800658e <USB_ActivateEndpoint+0x72>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <USB_ActivateEndpoint+0x38>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006565 	.word	0x08006565
 8006558:	08006581 	.word	0x08006581
 800655c:	08006597 	.word	0x08006597
 8006560:	08006573 	.word	0x08006573
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006564:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800656c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006570:	e012      	b.n	8006598 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006572:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006576:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800657a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800657e:	e00b      	b.n	8006598 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006580:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006584:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006588:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800658c:	e004      	b.n	8006598 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006594:	e000      	b.n	8006598 <USB_ActivateEndpoint+0x7c>
      break;
 8006596:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 8149 	bne.w	800689c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8084 	beq.w	800671c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	011a      	lsls	r2, r3, #4
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	81fb      	strh	r3, [r7, #14]
 8006656:	89fb      	ldrh	r3, [r7, #14]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <USB_ActivateEndpoint+0x17c>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	81bb      	strh	r3, [r7, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	89bb      	ldrh	r3, [r7, #12]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	78db      	ldrb	r3, [r3, #3]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d020      	beq.n	80066e2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	813b      	strh	r3, [r7, #8]
 80066b8:	893b      	ldrh	r3, [r7, #8]
 80066ba:	f083 0320 	eor.w	r3, r3, #32
 80066be:	813b      	strh	r3, [r7, #8]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	893b      	ldrh	r3, [r7, #8]
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
 80066e0:	e27f      	b.n	8006be2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	e262      	b.n	8006be2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	4413      	add	r3, r2
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	4413      	add	r3, r2
 800673a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	88db      	ldrh	r3, [r3, #6]
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	4413      	add	r3, r2
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	4413      	add	r3, r2
 800676e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006772:	623b      	str	r3, [r7, #32]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d112      	bne.n	80067a2 <USB_ActivateEndpoint+0x286>
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006786:	b29a      	uxth	r2, r3
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e02f      	b.n	8006802 <USB_ActivateEndpoint+0x2e6>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b3e      	cmp	r3, #62	; 0x3e
 80067a8:	d813      	bhi.n	80067d2 <USB_ActivateEndpoint+0x2b6>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	663b      	str	r3, [r7, #96]	; 0x60
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <USB_ActivateEndpoint+0x2a8>
 80067be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c0:	3301      	adds	r3, #1
 80067c2:	663b      	str	r3, [r7, #96]	; 0x60
 80067c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	e017      	b.n	8006802 <USB_ActivateEndpoint+0x2e6>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	663b      	str	r3, [r7, #96]	; 0x60
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <USB_ActivateEndpoint+0x2d0>
 80067e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e8:	3b01      	subs	r3, #1
 80067ea:	663b      	str	r3, [r7, #96]	; 0x60
 80067ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	83fb      	strh	r3, [r7, #30]
 8006810:	8bfb      	ldrh	r3, [r7, #30]
 8006812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <USB_ActivateEndpoint+0x336>
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	83bb      	strh	r3, [r7, #28]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8bbb      	ldrh	r3, [r7, #28]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006868:	837b      	strh	r3, [r7, #26]
 800686a:	8b7b      	ldrh	r3, [r7, #26]
 800686c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006870:	837b      	strh	r3, [r7, #26]
 8006872:	8b7b      	ldrh	r3, [r7, #26]
 8006874:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006878:	837b      	strh	r3, [r7, #26]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	8b7b      	ldrh	r3, [r7, #26]
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
 800689a:	e1a2      	b.n	8006be2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80068c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	65bb      	str	r3, [r7, #88]	; 0x58
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e8:	4413      	add	r3, r2
 80068ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	891b      	ldrh	r3, [r3, #8]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	b29b      	uxth	r3, r3
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	653b      	str	r3, [r7, #80]	; 0x50
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691c:	4413      	add	r3, r2
 800691e:	653b      	str	r3, [r7, #80]	; 0x50
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	011a      	lsls	r2, r3, #4
 8006926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006928:	4413      	add	r3, r2
 800692a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800692e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	895b      	ldrh	r3, [r3, #10]
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 8091 	bne.w	8006a6c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006958:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01b      	beq.n	800699a <USB_ActivateEndpoint+0x47e>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	877b      	strh	r3, [r7, #58]	; 0x3a
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80069a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <USB_ActivateEndpoint+0x4ce>
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a48:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]
 8006a6a:	e0ba      	b.n	8006be2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <USB_ActivateEndpoint+0x5a8>
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01d      	beq.n	8006b1c <USB_ActivateEndpoint+0x600>
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	78db      	ldrb	r3, [r3, #3]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d024      	beq.n	8006b6e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b42:	f083 0320 	eor.w	r3, r3, #32
 8006b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]
 8006b6c:	e01d      	b.n	8006baa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006be2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	376c      	adds	r7, #108	; 0x6c
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b08d      	sub	sp, #52	; 0x34
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	7b1b      	ldrb	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 808e 	bne.w	8006d20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d044      	beq.n	8006c96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	81bb      	strh	r3, [r7, #12]
 8006c1a:	89bb      	ldrh	r3, [r7, #12]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01b      	beq.n	8006c5c <USB_DeactivateEndpoint+0x6c>
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	817b      	strh	r3, [r7, #10]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	897b      	ldrh	r3, [r7, #10]
 8006c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c72:	813b      	strh	r3, [r7, #8]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	893b      	ldrh	r3, [r7, #8]
 8006c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8013      	strh	r3, [r2, #0]
 8006c94:	e192      	b.n	8006fbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	827b      	strh	r3, [r7, #18]
 8006ca4:	8a7b      	ldrh	r3, [r7, #18]
 8006ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01b      	beq.n	8006ce6 <USB_DeactivateEndpoint+0xf6>
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	823b      	strh	r3, [r7, #16]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	441a      	add	r2, r3
 8006cd0:	8a3b      	ldrh	r3, [r7, #16]
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfc:	81fb      	strh	r3, [r7, #14]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	89fb      	ldrh	r3, [r7, #14]
 8006d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8013      	strh	r3, [r2, #0]
 8006d1e:	e14d      	b.n	8006fbc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 80a5 	bne.w	8006e74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	843b      	strh	r3, [r7, #32]
 8006d38:	8c3b      	ldrh	r3, [r7, #32]
 8006d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <USB_DeactivateEndpoint+0x18a>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	83fb      	strh	r3, [r7, #30]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8bfb      	ldrh	r3, [r7, #30]
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	83bb      	strh	r3, [r7, #28]
 8006d88:	8bbb      	ldrh	r3, [r7, #28]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <USB_DeactivateEndpoint+0x1da>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	837b      	strh	r3, [r7, #26]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	8b7b      	ldrh	r3, [r7, #26]
 8006db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de0:	833b      	strh	r3, [r7, #24]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8b3b      	ldrh	r3, [r7, #24]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	82fb      	strh	r3, [r7, #22]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8afb      	ldrh	r3, [r7, #22]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e50:	82bb      	strh	r3, [r7, #20]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	8abb      	ldrh	r3, [r7, #20]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e0a3      	b.n	8006fbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01b      	beq.n	8006ec4 <USB_DeactivateEndpoint+0x2d4>
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ed2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01b      	beq.n	8006f14 <USB_DeactivateEndpoint+0x324>
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	441a      	add	r2, r3
 8006efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3734      	adds	r7, #52	; 0x34
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b0cc      	sub	sp, #304	; 0x130
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd6:	6018      	str	r0, [r3, #0]
 8006fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f041 817d 	bne.w	80082ee <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	429a      	cmp	r2, r3
 800700e:	d908      	bls.n	8007022 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007020:	e007      	b.n	8007032 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	7b1b      	ldrb	r3, [r3, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d152      	bne.n	80070e8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6959      	ldr	r1, [r3, #20]
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	88da      	ldrh	r2, [r3, #6]
 800705a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705e:	b29b      	uxth	r3, r3
 8007060:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007064:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f001 ff23 	bl	8008eb4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007076:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800707a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007090:	b29b      	uxth	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800709c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070a0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	440a      	add	r2, r1
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	011a      	lsls	r2, r3, #4
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4413      	add	r3, r2
 80070c4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	f001 b8b5 	b.w	8008252 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	78db      	ldrb	r3, [r3, #3]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f040 84c6 	bne.w	8007a86 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	f240 8443 	bls.w	800799e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	441a      	add	r2, r3
 800715c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007168:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1a      	ldr	r2, [r3, #32]
 8007180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 823e 	beq.w	8007636 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 809a 	bne.w	8007314 <USB_EPStartXfer+0x34c>
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007212:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	440a      	add	r2, r1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	011a      	lsls	r2, r3, #4
 800722a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4413      	add	r3, r2
 8007236:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d122      	bne.n	8007292 <USB_EPStartXfer+0x2ca>
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800725e:	b29a      	uxth	r2, r3
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007282:	b29a      	uxth	r2, r3
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e079      	b.n	8007386 <USB_EPStartXfer+0x3be>
 8007292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007296:	2b3e      	cmp	r3, #62	; 0x3e
 8007298:	d81b      	bhi.n	80072d2 <USB_EPStartXfer+0x30a>
 800729a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <USB_EPStartXfer+0x2f2>
 80072b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b4:	3301      	adds	r3, #1
 80072b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072be:	b29b      	uxth	r3, r3
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e059      	b.n	8007386 <USB_EPStartXfer+0x3be>
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USB_EPStartXfer+0x32a>
 80072e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ec:	3b01      	subs	r3, #1
 80072ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e038      	b.n	8007386 <USB_EPStartXfer+0x3be>
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d130      	bne.n	8007386 <USB_EPStartXfer+0x3be>
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800733e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007342:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	440a      	add	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4413      	add	r3, r2
 8007366:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007378:	b29a      	uxth	r2, r3
 800737a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	895b      	ldrh	r3, [r3, #10]
 8007392:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6959      	ldr	r1, [r3, #20]
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073b4:	6800      	ldr	r0, [r0, #0]
 80073b6:	f001 fd7d 	bl	8008eb4 <USB_WritePMA>
            ep->xfer_buff += len;
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ca:	441a      	add	r2, r3
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d90f      	bls.n	8007414 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80073f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	621a      	str	r2, [r3, #32]
 8007412:	e00e      	b.n	8007432 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2200      	movs	r2, #0
 8007430:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 809a 	bne.w	8007578 <USB_EPStartXfer+0x5b0>
 8007444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007448:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800744c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007450:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007466:	b29b      	uxth	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007476:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	440a      	add	r2, r1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	011a      	lsls	r2, r3, #4
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4413      	add	r3, r2
 800749a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d122      	bne.n	80074f6 <USB_EPStartXfer+0x52e>
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e083      	b.n	80075fe <USB_EPStartXfer+0x636>
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	2b3e      	cmp	r3, #62	; 0x3e
 80074fc:	d81b      	bhi.n	8007536 <USB_EPStartXfer+0x56e>
 80074fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <USB_EPStartXfer+0x556>
 8007514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007518:	3301      	adds	r3, #1
 800751a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800751e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007522:	b29b      	uxth	r3, r3
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	b29a      	uxth	r2, r3
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e063      	b.n	80075fe <USB_EPStartXfer+0x636>
 8007536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <USB_EPStartXfer+0x58e>
 800754c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007550:	3b01      	subs	r3, #1
 8007552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007556:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800755a:	b29b      	uxth	r3, r3
 800755c:	029b      	lsls	r3, r3, #10
 800755e:	b29b      	uxth	r3, r3
 8007560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007568:	b29a      	uxth	r2, r3
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e042      	b.n	80075fe <USB_EPStartXfer+0x636>
 8007578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d13a      	bne.n	80075fe <USB_EPStartXfer+0x636>
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007590:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007594:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	440a      	add	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	011a      	lsls	r2, r3, #4
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4413      	add	r3, r2
 80075de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	891b      	ldrh	r3, [r3, #8]
 800760a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	b29b      	uxth	r3, r3
 8007620:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007624:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007628:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f001 fc41 	bl	8008eb4 <USB_WritePMA>
 8007632:	f000 be0e 	b.w	8008252 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d16d      	bne.n	8007722 <USB_EPStartXfer+0x75a>
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007666:	4413      	add	r3, r2
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
 800766a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	011a      	lsls	r2, r3, #4
 8007678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767a:	4413      	add	r3, r2
 800767c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007680:	647b      	str	r3, [r7, #68]	; 0x44
 8007682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d112      	bne.n	80076b0 <USB_EPStartXfer+0x6e8>
 800768a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007694:	b29a      	uxth	r2, r3
 8007696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	e063      	b.n	8007778 <USB_EPStartXfer+0x7b0>
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	2b3e      	cmp	r3, #62	; 0x3e
 80076b6:	d817      	bhi.n	80076e8 <USB_EPStartXfer+0x720>
 80076b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d004      	beq.n	80076d8 <USB_EPStartXfer+0x710>
 80076ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80076dc:	b29b      	uxth	r3, r3
 80076de:	029b      	lsls	r3, r3, #10
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e047      	b.n	8007778 <USB_EPStartXfer+0x7b0>
 80076e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	f003 031f 	and.w	r3, r3, #31
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <USB_EPStartXfer+0x740>
 80076fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007702:	3b01      	subs	r3, #1
 8007704:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007708:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800770c:	b29b      	uxth	r3, r3
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e02a      	b.n	8007778 <USB_EPStartXfer+0x7b0>
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d122      	bne.n	8007778 <USB_EPStartXfer+0x7b0>
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	653b      	str	r3, [r7, #80]	; 0x50
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007752:	4413      	add	r3, r2
 8007754:	653b      	str	r3, [r7, #80]	; 0x50
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007766:	4413      	add	r3, r2
 8007768:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800776c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	b29a      	uxth	r2, r3
 8007774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	891b      	ldrh	r3, [r3, #8]
 8007784:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6959      	ldr	r1, [r3, #20]
 8007794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007798:	b29b      	uxth	r3, r3
 800779a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800779e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077a2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	f001 fb84 	bl	8008eb4 <USB_WritePMA>
            ep->xfer_buff += len;
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077bc:	441a      	add	r2, r3
 80077be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6a1a      	ldr	r2, [r3, #32]
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d90f      	bls.n	8007806 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a1a      	ldr	r2, [r3, #32]
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	1ad2      	subs	r2, r2, r3
 80077f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	621a      	str	r2, [r3, #32]
 8007804:	e00e      	b.n	8007824 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	643b      	str	r3, [r7, #64]	; 0x40
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d16d      	bne.n	800791c <USB_EPStartXfer+0x954>
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	63bb      	str	r3, [r7, #56]	; 0x38
 800784c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785a:	b29b      	uxth	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	4413      	add	r3, r2
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	011a      	lsls	r2, r3, #4
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	4413      	add	r3, r2
 8007876:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d112      	bne.n	80078aa <USB_EPStartXfer+0x8e2>
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800788e:	b29a      	uxth	r2, r3
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800789e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e05d      	b.n	8007966 <USB_EPStartXfer+0x99e>
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	2b3e      	cmp	r3, #62	; 0x3e
 80078b0:	d817      	bhi.n	80078e2 <USB_EPStartXfer+0x91a>
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <USB_EPStartXfer+0x90a>
 80078c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078cc:	3301      	adds	r3, #1
 80078ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	029b      	lsls	r3, r3, #10
 80078da:	b29a      	uxth	r2, r3
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	e041      	b.n	8007966 <USB_EPStartXfer+0x99e>
 80078e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f0:	f003 031f 	and.w	r3, r3, #31
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <USB_EPStartXfer+0x93a>
 80078f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007906:	b29b      	uxth	r3, r3
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007914:	b29a      	uxth	r2, r3
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e024      	b.n	8007966 <USB_EPStartXfer+0x99e>
 800791c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d11c      	bne.n	8007966 <USB_EPStartXfer+0x99e>
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007940:	4413      	add	r3, r2
 8007942:	643b      	str	r3, [r7, #64]	; 0x40
 8007944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	011a      	lsls	r2, r3, #4
 8007952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007954:	4413      	add	r3, r2
 8007956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800795c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007960:	b29a      	uxth	r2, r3
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	895b      	ldrh	r3, [r3, #10]
 8007972:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6959      	ldr	r1, [r3, #20]
 8007982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007986:	b29b      	uxth	r3, r3
 8007988:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800798c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007990:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007994:	6800      	ldr	r0, [r0, #0]
 8007996:	f001 fa8d 	bl	8008eb4 <USB_WritePMA>
 800799a:	f000 bc5a 	b.w	8008252 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a2a:	4413      	add	r3, r2
 8007a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	011a      	lsls	r2, r3, #4
 8007a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a3e:	4413      	add	r3, r2
 8007a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	891b      	ldrh	r3, [r3, #8]
 8007a5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6959      	ldr	r1, [r3, #20]
 8007a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a7e:	6800      	ldr	r0, [r0, #0]
 8007a80:	f001 fa18 	bl	8008eb4 <USB_WritePMA>
 8007a84:	e3e5      	b.n	8008252 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aac:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	441a      	add	r2, r3
 8007aca:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 81bc 	beq.w	8007ea0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d16d      	bne.n	8007c22 <USB_EPStartXfer+0xc5a>
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	4413      	add	r3, r2
 8007b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	011a      	lsls	r2, r3, #4
 8007b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b80:	677b      	str	r3, [r7, #116]	; 0x74
 8007b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d112      	bne.n	8007bb0 <USB_EPStartXfer+0xbe8>
 8007b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e060      	b.n	8007c72 <USB_EPStartXfer+0xcaa>
 8007bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb6:	d817      	bhi.n	8007be8 <USB_EPStartXfer+0xc20>
 8007bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <USB_EPStartXfer+0xc10>
 8007bce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bd8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	029b      	lsls	r3, r3, #10
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be4:	801a      	strh	r2, [r3, #0]
 8007be6:	e044      	b.n	8007c72 <USB_EPStartXfer+0xcaa>
 8007be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	f003 031f 	and.w	r3, r3, #31
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <USB_EPStartXfer+0xc40>
 8007bfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c02:	3b01      	subs	r3, #1
 8007c04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	e027      	b.n	8007c72 <USB_EPStartXfer+0xcaa>
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d11f      	bne.n	8007c72 <USB_EPStartXfer+0xcaa>
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c48:	4413      	add	r3, r2
 8007c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	011a      	lsls	r2, r3, #4
 8007c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	895b      	ldrh	r3, [r3, #10]
 8007c7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6959      	ldr	r1, [r3, #20]
 8007c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ca0:	6800      	ldr	r0, [r0, #0]
 8007ca2:	f001 f907 	bl	8008eb4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695a      	ldr	r2, [r3, #20]
 8007cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb6:	441a      	add	r2, r3
 8007cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d90f      	bls.n	8007d00 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a1a      	ldr	r2, [r3, #32]
 8007cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf0:	1ad2      	subs	r2, r2, r3
 8007cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	621a      	str	r2, [r3, #32]
 8007cfe:	e00e      	b.n	8007d1e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8295 	beq.w	8008252 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d16d      	bne.n	8007e14 <USB_EPStartXfer+0xe4c>
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d58:	4413      	add	r3, r2
 8007d5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	011a      	lsls	r2, r3, #4
 8007d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d72:	667b      	str	r3, [r7, #100]	; 0x64
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d112      	bne.n	8007da2 <USB_EPStartXfer+0xdda>
 8007d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e063      	b.n	8007e6a <USB_EPStartXfer+0xea2>
 8007da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da6:	2b3e      	cmp	r3, #62	; 0x3e
 8007da8:	d817      	bhi.n	8007dda <USB_EPStartXfer+0xe12>
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <USB_EPStartXfer+0xe02>
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e047      	b.n	8007e6a <USB_EPStartXfer+0xea2>
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de8:	f003 031f 	and.w	r3, r3, #31
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <USB_EPStartXfer+0xe32>
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df4:	3b01      	subs	r3, #1
 8007df6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	029b      	lsls	r3, r3, #10
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e02a      	b.n	8007e6a <USB_EPStartXfer+0xea2>
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d122      	bne.n	8007e6a <USB_EPStartXfer+0xea2>
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e44:	4413      	add	r3, r2
 8007e46:	673b      	str	r3, [r7, #112]	; 0x70
 8007e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	011a      	lsls	r2, r3, #4
 8007e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e58:	4413      	add	r3, r2
 8007e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	891b      	ldrh	r3, [r3, #8]
 8007e76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6959      	ldr	r1, [r3, #20]
 8007e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e98:	6800      	ldr	r0, [r0, #0]
 8007e9a:	f001 f80b 	bl	8008eb4 <USB_WritePMA>
 8007e9e:	e1d8      	b.n	8008252 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d178      	bne.n	8007fa2 <USB_EPStartXfer+0xfda>
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	011a      	lsls	r2, r3, #4
 8007ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eec:	4413      	add	r3, r2
 8007eee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d116      	bne.n	8007f2c <USB_EPStartXfer+0xf64>
 8007efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	e06b      	b.n	8008004 <USB_EPStartXfer+0x103c>
 8007f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f30:	2b3e      	cmp	r3, #62	; 0x3e
 8007f32:	d818      	bhi.n	8007f66 <USB_EPStartXfer+0xf9e>
 8007f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <USB_EPStartXfer+0xf8c>
 8007f4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	029b      	lsls	r3, r3, #10
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f62:	801a      	strh	r2, [r3, #0]
 8007f64:	e04e      	b.n	8008004 <USB_EPStartXfer+0x103c>
 8007f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <USB_EPStartXfer+0xfbe>
 8007f7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	029b      	lsls	r3, r3, #10
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e030      	b.n	8008004 <USB_EPStartXfer+0x103c>
 8007fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d128      	bne.n	8008004 <USB_EPStartXfer+0x103c>
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	011a      	lsls	r2, r3, #4
 8007fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008002:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	891b      	ldrh	r3, [r3, #8]
 8008010:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6959      	ldr	r1, [r3, #20]
 8008020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008024:	b29b      	uxth	r3, r3
 8008026:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800802a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800802e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008032:	6800      	ldr	r0, [r0, #0]
 8008034:	f000 ff3e 	bl	8008eb4 <USB_WritePMA>
          ep->xfer_buff += len;
 8008038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695a      	ldr	r2, [r3, #20]
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008048:	441a      	add	r2, r3
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6a1a      	ldr	r2, [r3, #32]
 8008062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	429a      	cmp	r2, r3
 8008070:	d90f      	bls.n	8008092 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a1a      	ldr	r2, [r3, #32]
 800807e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008082:	1ad2      	subs	r2, r2, r3
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	621a      	str	r2, [r3, #32]
 8008090:	e00e      	b.n	80080b0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2200      	movs	r2, #0
 80080ae:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80080b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 80cc 	beq.w	8008252 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d178      	bne.n	80081ca <USB_EPStartXfer+0x1202>
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080fc:	4413      	add	r3, r2
 80080fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	011a      	lsls	r2, r3, #4
 8008110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008114:	4413      	add	r3, r2
 8008116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800811a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800811e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d116      	bne.n	8008154 <USB_EPStartXfer+0x118c>
 8008126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e064      	b.n	800821e <USB_EPStartXfer+0x1256>
 8008154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008158:	2b3e      	cmp	r3, #62	; 0x3e
 800815a:	d818      	bhi.n	800818e <USB_EPStartXfer+0x11c6>
 800815c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008160:	085b      	lsrs	r3, r3, #1
 8008162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <USB_EPStartXfer+0x11b4>
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008176:	3301      	adds	r3, #1
 8008178:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800817c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008180:	b29b      	uxth	r3, r3
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	b29a      	uxth	r2, r3
 8008186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	e047      	b.n	800821e <USB_EPStartXfer+0x1256>
 800818e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819c:	f003 031f 	and.w	r3, r3, #31
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <USB_EPStartXfer+0x11e6>
 80081a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	029b      	lsls	r3, r3, #10
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	e029      	b.n	800821e <USB_EPStartXfer+0x1256>
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d121      	bne.n	800821e <USB_EPStartXfer+0x1256>
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081f0:	4413      	add	r3, r2
 80081f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	011a      	lsls	r2, r3, #4
 8008204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008208:	4413      	add	r3, r2
 800820a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800820e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800821c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	895b      	ldrh	r3, [r3, #10]
 800822a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800822e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6959      	ldr	r1, [r3, #20]
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	b29b      	uxth	r3, r3
 8008240:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008244:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008248:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800824c:	6800      	ldr	r0, [r0, #0]
 800824e:	f000 fe31 	bl	8008eb4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008274:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008280:	8013      	strh	r3, [r2, #0]
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800828a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800828e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008292:	8812      	ldrh	r2, [r2, #0]
 8008294:	f082 0210 	eor.w	r2, r2, #16
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082a6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082aa:	8812      	ldrh	r2, [r2, #0]
 80082ac:	f082 0220 	eor.w	r2, r2, #32
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	441a      	add	r2, r3
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
 80082ea:	f000 bc9f 	b.w	8008c2c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	7b1b      	ldrb	r3, [r3, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 80ae 	bne.w	800845c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d917      	bls.n	800834c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833c:	1ad2      	subs	r2, r2, r3
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	619a      	str	r2, [r3, #24]
 800834a:	e00e      	b.n	800836a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800834c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800835c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800836a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800838e:	4413      	add	r3, r2
 8008390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083a6:	4413      	add	r3, r2
 80083a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d116      	bne.n	80083e6 <USB_EPStartXfer+0x141e>
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083dc:	b29a      	uxth	r2, r3
 80083de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	e3e8      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 80083e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ea:	2b3e      	cmp	r3, #62	; 0x3e
 80083ec:	d818      	bhi.n	8008420 <USB_EPStartXfer+0x1458>
 80083ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <USB_EPStartXfer+0x1446>
 8008404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008408:	3301      	adds	r3, #1
 800840a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800840e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29a      	uxth	r2, r3
 8008418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e3cb      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 8008420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <USB_EPStartXfer+0x1478>
 8008436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800843a:	3b01      	subs	r3, #1
 800843c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29b      	uxth	r3, r3
 800844a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800844e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008452:	b29a      	uxth	r2, r3
 8008454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	e3ad      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f040 8200 	bne.w	800886e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 8091 	bne.w	80085a2 <USB_EPStartXfer+0x15da>
 8008480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800848e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849c:	b29b      	uxth	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084a4:	4413      	add	r3, r2
 80084a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	011a      	lsls	r2, r3, #4
 80084b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084bc:	4413      	add	r3, r2
 80084be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d116      	bne.n	8008504 <USB_EPStartXfer+0x153c>
 80084d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	e083      	b.n	800860c <USB_EPStartXfer+0x1644>
 8008504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b3e      	cmp	r3, #62	; 0x3e
 8008512:	d820      	bhi.n	8008556 <USB_EPStartXfer+0x158e>
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	085b      	lsrs	r3, r3, #1
 8008522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <USB_EPStartXfer+0x157c>
 800853a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853e:	3301      	adds	r3, #1
 8008540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008548:	b29b      	uxth	r3, r3
 800854a:	029b      	lsls	r3, r3, #10
 800854c:	b29a      	uxth	r2, r3
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	e05a      	b.n	800860c <USB_EPStartXfer+0x1644>
 8008556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <USB_EPStartXfer+0x15be>
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008580:	3b01      	subs	r3, #1
 8008582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858a:	b29b      	uxth	r3, r3
 800858c:	029b      	lsls	r3, r3, #10
 800858e:	b29b      	uxth	r3, r3
 8008590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008598:	b29a      	uxth	r2, r3
 800859a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	e034      	b.n	800860c <USB_EPStartXfer+0x1644>
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d12c      	bne.n	800860c <USB_EPStartXfer+0x1644>
 80085b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085d6:	4413      	add	r3, r2
 80085d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	011a      	lsls	r2, r3, #4
 80085ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ee:	4413      	add	r3, r2
 80085f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	b29a      	uxth	r2, r3
 8008606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 8091 	bne.w	800874e <USB_EPStartXfer+0x1786>
 800862c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800863a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008648:	b29b      	uxth	r3, r3
 800864a:	461a      	mov	r2, r3
 800864c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008650:	4413      	add	r3, r2
 8008652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	011a      	lsls	r2, r3, #4
 8008664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008668:	4413      	add	r3, r2
 800866a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800866e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d116      	bne.n	80086b0 <USB_EPStartXfer+0x16e8>
 8008682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800868e:	b29a      	uxth	r2, r3
 8008690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	e07c      	b.n	80087aa <USB_EPStartXfer+0x17e2>
 80086b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b3e      	cmp	r3, #62	; 0x3e
 80086be:	d820      	bhi.n	8008702 <USB_EPStartXfer+0x173a>
 80086c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <USB_EPStartXfer+0x1728>
 80086e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086ea:	3301      	adds	r3, #1
 80086ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	029b      	lsls	r3, r3, #10
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086fe:	801a      	strh	r2, [r3, #0]
 8008700:	e053      	b.n	80087aa <USB_EPStartXfer+0x17e2>
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USB_EPStartXfer+0x176a>
 8008728:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800872c:	3b01      	subs	r3, #1
 800872e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008732:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008736:	b29b      	uxth	r3, r3
 8008738:	029b      	lsls	r3, r3, #10
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	e02d      	b.n	80087aa <USB_EPStartXfer+0x17e2>
 800874e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d125      	bne.n	80087aa <USB_EPStartXfer+0x17e2>
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876c:	b29b      	uxth	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008774:	4413      	add	r3, r2
 8008776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800877a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	011a      	lsls	r2, r3, #4
 8008788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800878c:	4413      	add	r3, r2
 800878e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 81fe 	beq.w	8008bb8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <USB_EPStartXfer+0x182c>
 80087e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10d      	bne.n	8008810 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 81db 	bne.w	8008bb8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008802:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 81d4 	bne.w	8008bb8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	441a      	add	r2, r3
 8008854:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008864:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008868:	b29b      	uxth	r3, r3
 800886a:	8013      	strh	r3, [r2, #0]
 800886c:	e1a4      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	78db      	ldrb	r3, [r3, #3]
 800887a:	2b01      	cmp	r3, #1
 800887c:	f040 819a 	bne.w	8008bb4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d917      	bls.n	80088cc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800889c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088bc:	1ad2      	subs	r2, r2, r3
 80088be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	619a      	str	r2, [r3, #24]
 80088ca:	e00e      	b.n	80088ea <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80088dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d178      	bne.n	80089ec <USB_EPStartXfer+0x1a24>
 80088fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008916:	b29b      	uxth	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800891e:	4413      	add	r3, r2
 8008920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	011a      	lsls	r2, r3, #4
 8008932:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008936:	4413      	add	r3, r2
 8008938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800893c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d116      	bne.n	8008976 <USB_EPStartXfer+0x19ae>
 8008948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008954:	b29a      	uxth	r2, r3
 8008956:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800895a:	801a      	strh	r2, [r3, #0]
 800895c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e06b      	b.n	8008a4e <USB_EPStartXfer+0x1a86>
 8008976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897a:	2b3e      	cmp	r3, #62	; 0x3e
 800897c:	d818      	bhi.n	80089b0 <USB_EPStartXfer+0x19e8>
 800897e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <USB_EPStartXfer+0x19d6>
 8008994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008998:	3301      	adds	r3, #1
 800899a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800899e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ac:	801a      	strh	r2, [r3, #0]
 80089ae:	e04e      	b.n	8008a4e <USB_EPStartXfer+0x1a86>
 80089b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <USB_EPStartXfer+0x1a08>
 80089c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ca:	3b01      	subs	r3, #1
 80089cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	029b      	lsls	r3, r3, #10
 80089d8:	b29b      	uxth	r3, r3
 80089da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	e030      	b.n	8008a4e <USB_EPStartXfer+0x1a86>
 80089ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d128      	bne.n	8008a4e <USB_EPStartXfer+0x1a86>
 80089fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a20:	4413      	add	r3, r2
 8008a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	011a      	lsls	r2, r3, #4
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d178      	bne.n	8008b5e <USB_EPStartXfer+0x1b96>
 8008a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	4413      	add	r3, r2
 8008a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	011a      	lsls	r2, r3, #4
 8008aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d116      	bne.n	8008ae8 <USB_EPStartXfer+0x1b20>
 8008aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008acc:	801a      	strh	r2, [r3, #0]
 8008ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ae4:	801a      	strh	r2, [r3, #0]
 8008ae6:	e067      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 8008ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aec:	2b3e      	cmp	r3, #62	; 0x3e
 8008aee:	d818      	bhi.n	8008b22 <USB_EPStartXfer+0x1b5a>
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <USB_EPStartXfer+0x1b48>
 8008b06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	029b      	lsls	r3, r3, #10
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b1e:	801a      	strh	r2, [r3, #0]
 8008b20:	e04a      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 8008b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b26:	095b      	lsrs	r3, r3, #5
 8008b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b30:	f003 031f 	and.w	r3, r3, #31
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <USB_EPStartXfer+0x1b7a>
 8008b38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	029b      	lsls	r3, r3, #10
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	e02c      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 8008b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d124      	bne.n	8008bb8 <USB_EPStartXfer+0x1bf0>
 8008b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b84:	4413      	add	r3, r2
 8008b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	011a      	lsls	r2, r3, #4
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb0:	801a      	strh	r2, [r3, #0]
 8008bb2:	e001      	b.n	8008bb8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e03a      	b.n	8008c2e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bde:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008be2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008be6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d020      	beq.n	8008c8c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c60:	81bb      	strh	r3, [r7, #12]
 8008c62:	89bb      	ldrh	r3, [r7, #12]
 8008c64:	f083 0310 	eor.w	r3, r3, #16
 8008c68:	81bb      	strh	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	89bb      	ldrh	r3, [r7, #12]
 8008c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	8013      	strh	r3, [r2, #0]
 8008c8a:	e01f      	b.n	8008ccc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca2:	81fb      	strh	r3, [r7, #14]
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008caa:	81fb      	strh	r3, [r7, #14]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	7b1b      	ldrb	r3, [r3, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 809d 	bne.w	8008e26 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	785b      	ldrb	r3, [r3, #1]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d04c      	beq.n	8008d8e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	823b      	strh	r3, [r7, #16]
 8008d02:	8a3b      	ldrh	r3, [r7, #16]
 8008d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01b      	beq.n	8008d44 <USB_EPClearStall+0x6c>
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d22:	81fb      	strh	r3, [r7, #14]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	441a      	add	r2, r3
 8008d2e:	89fb      	ldrh	r3, [r7, #14]
 8008d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	78db      	ldrb	r3, [r3, #3]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d06c      	beq.n	8008e26 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d62:	81bb      	strh	r3, [r7, #12]
 8008d64:	89bb      	ldrh	r3, [r7, #12]
 8008d66:	f083 0320 	eor.w	r3, r3, #32
 8008d6a:	81bb      	strh	r3, [r7, #12]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	89bb      	ldrh	r3, [r7, #12]
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]
 8008d8c:	e04b      	b.n	8008e26 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	82fb      	strh	r3, [r7, #22]
 8008d9c:	8afb      	ldrh	r3, [r7, #22]
 8008d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01b      	beq.n	8008dde <USB_EPClearStall+0x106>
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dbc:	82bb      	strh	r3, [r7, #20]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	441a      	add	r2, r3
 8008dc8:	8abb      	ldrh	r3, [r7, #20]
 8008dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df4:	827b      	strh	r3, [r7, #18]
 8008df6:	8a7b      	ldrh	r3, [r7, #18]
 8008df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dfc:	827b      	strh	r3, [r7, #18]
 8008dfe:	8a7b      	ldrh	r3, [r7, #18]
 8008e00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e04:	827b      	strh	r3, [r7, #18]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	8a7b      	ldrh	r3, [r7, #18]
 8008e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bc80      	pop	{r7}
 8008e30:	4770      	bx	lr

08008e32 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d103      	bne.n	8008e4c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2280      	movs	r2, #128	; 0x80
 8008e48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr

08008e58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e92:	68fb      	ldr	r3, [r7, #12]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bc80      	pop	{r7}
 8008e9c:	4770      	bx	lr

08008e9e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b08d      	sub	sp, #52	; 0x34
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	80fb      	strh	r3, [r7, #6]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008eca:	88bb      	ldrh	r3, [r7, #4]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eda:	88fb      	ldrh	r3, [r7, #6]
 8008edc:	005a      	lsls	r2, r3, #1
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eec:	e01e      	b.n	8008f2c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	3302      	adds	r3, #2
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	3302      	adds	r3, #2
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	3301      	adds	r3, #1
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1dd      	bne.n	8008eee <USB_WritePMA+0x3a>
  }
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	3734      	adds	r7, #52	; 0x34
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bc80      	pop	{r7}
 8008f3c:	4770      	bx	lr

08008f3e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b08b      	sub	sp, #44	; 0x2c
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	80fb      	strh	r3, [r7, #6]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f54:	88bb      	ldrh	r3, [r7, #4]
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	005a      	lsls	r2, r3, #1
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f70:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	e01b      	b.n	8008fb0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	3302      	adds	r3, #2
 8008f84:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3301      	adds	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	3b01      	subs	r3, #1
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e0      	bne.n	8008f78 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008fb6:	88bb      	ldrh	r3, [r7, #4]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	701a      	strb	r2, [r3, #0]
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	372c      	adds	r7, #44	; 0x2c
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr

08008fdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	7c1b      	ldrb	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	2181      	movs	r1, #129	; 0x81
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fea4 	bl	800ad4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800900c:	2202      	movs	r2, #2
 800900e:	2101      	movs	r1, #1
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 fe9a 	bl	800ad4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800901e:	e012      	b.n	8009046 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009020:	2340      	movs	r3, #64	; 0x40
 8009022:	2202      	movs	r2, #2
 8009024:	2181      	movs	r1, #129	; 0x81
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fe8f 	bl	800ad4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	2202      	movs	r2, #2
 8009036:	2101      	movs	r1, #1
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fe86 	bl	800ad4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009046:	2308      	movs	r3, #8
 8009048:	2203      	movs	r2, #3
 800904a:	2182      	movs	r1, #130	; 0x82
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fe7c 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009058:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800905c:	f001 ff9c 	bl	800af98 <USBD_static_malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d102      	bne.n	8009078 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
 8009076:	e026      	b.n	80090c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	7c1b      	ldrb	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ac:	2101      	movs	r1, #1
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 ff3c 	bl	800af2c <USBD_LL_PrepareReceive>
 80090b4:	e007      	b.n	80090c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	2101      	movs	r1, #1
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 ff33 	bl	800af2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090e0:	2181      	movs	r1, #129	; 0x81
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fe57 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090ee:	2101      	movs	r1, #1
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 fe50 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090fe:	2182      	movs	r1, #130	; 0x82
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fe48 	bl	800ad96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00e      	beq.n	8009134 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009126:	4618      	mov	r0, r3
 8009128:	f001 ff42 	bl	800afb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009164:	2b00      	cmp	r3, #0
 8009166:	d039      	beq.n	80091dc <USBD_CDC_Setup+0x9e>
 8009168:	2b20      	cmp	r3, #32
 800916a:	d17f      	bne.n	800926c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	88db      	ldrh	r3, [r3, #6]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d029      	beq.n	80091c8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b25b      	sxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	da11      	bge.n	80091a2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800918a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	88d2      	ldrh	r2, [r2, #6]
 8009190:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009192:	6939      	ldr	r1, [r7, #16]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	88db      	ldrh	r3, [r3, #6]
 8009198:	461a      	mov	r2, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fa09 	bl	800a5b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80091a0:	e06b      	b.n	800927a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	785a      	ldrb	r2, [r3, #1]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	88db      	ldrh	r3, [r3, #6]
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091b8:	6939      	ldr	r1, [r7, #16]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	88db      	ldrh	r3, [r3, #6]
 80091be:	461a      	mov	r2, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fa24 	bl	800a60e <USBD_CtlPrepareRx>
      break;
 80091c6:	e058      	b.n	800927a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	7850      	ldrb	r0, [r2, #1]
 80091d4:	2200      	movs	r2, #0
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	4798      	blx	r3
      break;
 80091da:	e04e      	b.n	800927a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b0b      	cmp	r3, #11
 80091e2:	d02e      	beq.n	8009242 <USBD_CDC_Setup+0x104>
 80091e4:	2b0b      	cmp	r3, #11
 80091e6:	dc38      	bgt.n	800925a <USBD_CDC_Setup+0x11c>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <USBD_CDC_Setup+0xb4>
 80091ec:	2b0a      	cmp	r3, #10
 80091ee:	d014      	beq.n	800921a <USBD_CDC_Setup+0xdc>
 80091f0:	e033      	b.n	800925a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d107      	bne.n	800920c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	2202      	movs	r2, #2
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 f9d4 	bl	800a5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800920a:	e02e      	b.n	800926a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f965 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	75fb      	strb	r3, [r7, #23]
          break;
 8009218:	e027      	b.n	800926a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009220:	2b03      	cmp	r3, #3
 8009222:	d107      	bne.n	8009234 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009224:	f107 030f 	add.w	r3, r7, #15
 8009228:	2201      	movs	r2, #1
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f9c0 	bl	800a5b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009232:	e01a      	b.n	800926a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 f951 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	75fb      	strb	r3, [r7, #23]
          break;
 8009240:	e013      	b.n	800926a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	2b03      	cmp	r3, #3
 800924a:	d00d      	beq.n	8009268 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 f945 	bl	800a4de <USBD_CtlError>
            ret = USBD_FAIL;
 8009254:	2302      	movs	r3, #2
 8009256:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009258:	e006      	b.n	8009268 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 f93e 	bl	800a4de <USBD_CtlError>
          ret = USBD_FAIL;
 8009262:	2302      	movs	r3, #2
 8009264:	75fb      	strb	r3, [r7, #23]
          break;
 8009266:	e000      	b.n	800926a <USBD_CDC_Setup+0x12c>
          break;
 8009268:	bf00      	nop
      }
      break;
 800926a:	e006      	b.n	800927a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f935 	bl	800a4de <USBD_CtlError>
      ret = USBD_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	75fb      	strb	r3, [r7, #23]
      break;
 8009278:	bf00      	nop
  }

  return ret;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800929e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d03a      	beq.n	8009320 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	331c      	adds	r3, #28
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d029      	beq.n	8009314 <USBD_CDC_DataIn+0x90>
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	331c      	adds	r3, #28
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	78f9      	ldrb	r1, [r7, #3]
 80092d4:	68b8      	ldr	r0, [r7, #8]
 80092d6:	460b      	mov	r3, r1
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	4403      	add	r3, r0
 80092e0:	3338      	adds	r3, #56	; 0x38
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d110      	bne.n	8009314 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	331c      	adds	r3, #28
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009306:	78f9      	ldrb	r1, [r7, #3]
 8009308:	2300      	movs	r3, #0
 800930a:	2200      	movs	r2, #0
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fdea 	bl	800aee6 <USBD_LL_Transmit>
 8009312:	e003      	b.n	800931c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	e000      	b.n	8009322 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009320:	2302      	movs	r3, #2
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fe15 	bl	800af72 <USBD_LL_GetRxDataSize>
 8009348:	4602      	mov	r2, r0
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00d      	beq.n	8009376 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800936e:	4611      	mov	r1, r2
 8009370:	4798      	blx	r3

    return USBD_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e000      	b.n	8009378 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009376:	2302      	movs	r3, #2
  }
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009396:	2b00      	cmp	r3, #0
 8009398:	d015      	beq.n	80093c6 <USBD_CDC_EP0_RxReady+0x46>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093a0:	2bff      	cmp	r3, #255	; 0xff
 80093a2:	d010      	beq.n	80093c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80093b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093ba:	b292      	uxth	r2, r2
 80093bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	22ff      	movs	r2, #255	; 0xff
 80093c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2243      	movs	r2, #67	; 0x43
 80093dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80093de:	4b03      	ldr	r3, [pc, #12]	; (80093ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	200002c4 	.word	0x200002c4

080093f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2243      	movs	r2, #67	; 0x43
 80093fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80093fe:	4b03      	ldr	r3, [pc, #12]	; (800940c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20000280 	.word	0x20000280

08009410 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2243      	movs	r2, #67	; 0x43
 800941c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20000308 	.word	0x20000308

08009430 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	220a      	movs	r2, #10
 800943c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	2000023c 	.word	0x2000023c

08009450 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800945a:	2302      	movs	r3, #2
 800945c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009490:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800949a:	88fa      	ldrh	r2, [r7, #6]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bc80      	pop	{r7}
 80094ac:	4770      	bx	lr

080094ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr

080094d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01c      	beq.n	8009528 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d115      	bne.n	8009524 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009516:	b29b      	uxth	r3, r3
 8009518:	2181      	movs	r1, #129	; 0x81
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 fce3 	bl	800aee6 <USBD_LL_Transmit>

      return USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e002      	b.n	800952a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009528:	2302      	movs	r3, #2
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009540:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009548:	2b00      	cmp	r3, #0
 800954a:	d017      	beq.n	800957c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7c1b      	ldrb	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d109      	bne.n	8009568 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800955a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800955e:	2101      	movs	r1, #1
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fce3 	bl	800af2c <USBD_LL_PrepareReceive>
 8009566:	e007      	b.n	8009578 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	2101      	movs	r1, #1
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fcda 	bl	800af2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	e000      	b.n	800957e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800957c:	2302      	movs	r3, #2
  }
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	4613      	mov	r3, r2
 8009592:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800959a:	2302      	movs	r3, #2
 800959c:	e01a      	b.n	80095d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	79fa      	ldrb	r2, [r7, #7]
 80095ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f001 fb47 	bl	800ac60 <USBD_LL_Init>

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
 80095fc:	e001      	b.n	8009602 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80095fe:	2302      	movs	r3, #2
 8009600:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	bc80      	pop	{r7}
 800960c:	4770      	bx	lr

0800960e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fb7c 	bl	800ad14 <USBD_LL_Start>

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr

0800963a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009646:	2302      	movs	r3, #2
 8009648:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	4611      	mov	r1, r2
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	4611      	mov	r1, r2
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	4798      	blx	r3

  return USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fed8 	bl	800a466 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096c4:	461a      	mov	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80096d2:	f003 031f 	and.w	r3, r3, #31
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d016      	beq.n	8009708 <USBD_LL_SetupStage+0x6a>
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d81c      	bhi.n	8009718 <USBD_LL_SetupStage+0x7a>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <USBD_LL_SetupStage+0x4a>
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d008      	beq.n	80096f8 <USBD_LL_SetupStage+0x5a>
 80096e6:	e017      	b.n	8009718 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f9cb 	bl	8009a8c <USBD_StdDevReq>
      break;
 80096f6:	e01a      	b.n	800972e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa2d 	bl	8009b60 <USBD_StdItfReq>
      break;
 8009706:	e012      	b.n	800972e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa6d 	bl	8009bf0 <USBD_StdEPReq>
      break;
 8009716:	e00a      	b.n	800972e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800971e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009722:	b2db      	uxtb	r3, r3
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fb54 	bl	800add4 <USBD_LL_StallEP>
      break;
 800972c:	bf00      	nop
  }

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	460b      	mov	r3, r1
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d14b      	bne.n	80097e4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009752:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800975a:	2b03      	cmp	r3, #3
 800975c:	d134      	bne.n	80097c8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	429a      	cmp	r2, r3
 8009768:	d919      	bls.n	800979e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009780:	429a      	cmp	r2, r3
 8009782:	d203      	bcs.n	800978c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009788:	b29b      	uxth	r3, r3
 800978a:	e002      	b.n	8009792 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009790:	b29b      	uxth	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 ff57 	bl	800a64a <USBD_CtlContinueRx>
 800979c:	e038      	b.n	8009810 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d105      	bne.n	80097c0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 ff54 	bl	800a66e <USBD_CtlSendStatus>
 80097c6:	e023      	b.n	8009810 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	d11e      	bne.n	8009810 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80097da:	2100      	movs	r1, #0
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f001 faf9 	bl	800add4 <USBD_LL_StallEP>
 80097e2:	e015      	b.n	8009810 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d108      	bne.n	800980c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	7afa      	ldrb	r2, [r7, #11]
 8009804:	4611      	mov	r1, r2
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	4798      	blx	r3
 800980a:	e001      	b.n	8009810 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800980c:	2302      	movs	r3, #2
 800980e:	e000      	b.n	8009812 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	460b      	mov	r3, r1
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d17f      	bne.n	800992e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3314      	adds	r3, #20
 8009832:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800983a:	2b02      	cmp	r3, #2
 800983c:	d15c      	bne.n	80098f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	429a      	cmp	r2, r3
 8009848:	d915      	bls.n	8009876 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	b29b      	uxth	r3, r3
 800985e:	461a      	mov	r2, r3
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fec1 	bl	800a5ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	2100      	movs	r1, #0
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f001 fb5c 	bl	800af2c <USBD_LL_PrepareReceive>
 8009874:	e04e      	b.n	8009914 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	6912      	ldr	r2, [r2, #16]
 800987e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009882:	fb01 f202 	mul.w	r2, r1, r2
 8009886:	1a9b      	subs	r3, r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11c      	bne.n	80098c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009894:	429a      	cmp	r2, r3
 8009896:	d316      	bcc.n	80098c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d20f      	bcs.n	80098c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fe9d 	bl	800a5ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098b8:	2300      	movs	r3, #0
 80098ba:	2200      	movs	r2, #0
 80098bc:	2100      	movs	r1, #0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f001 fb34 	bl	800af2c <USBD_LL_PrepareReceive>
 80098c4:	e026      	b.n	8009914 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d105      	bne.n	80098e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80098e8:	2180      	movs	r1, #128	; 0x80
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f001 fa72 	bl	800add4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fecf 	bl	800a694 <USBD_CtlReceiveStatus>
 80098f6:	e00d      	b.n	8009914 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d004      	beq.n	800990c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800990c:	2180      	movs	r1, #128	; 0x80
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f001 fa60 	bl	800add4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d11d      	bne.n	800995a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fe81 	bl	8009626 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800992c:	e015      	b.n	800995a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009940:	2b03      	cmp	r3, #3
 8009942:	d108      	bne.n	8009956 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	7afa      	ldrb	r2, [r7, #11]
 800994e:	4611      	mov	r1, r2
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	4798      	blx	r3
 8009954:	e001      	b.n	800995a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009956:	2302      	movs	r3, #2
 8009958:	e000      	b.n	800995c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f9e9 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2240      	movs	r2, #64	; 0x40
 8009984:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009988:	2340      	movs	r3, #64	; 0x40
 800998a:	2200      	movs	r2, #0
 800998c:	2180      	movs	r1, #128	; 0x80
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 f9db 	bl	800ad4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2240      	movs	r2, #64	; 0x40
 800999e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d009      	beq.n	80099dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6852      	ldr	r2, [r2, #4]
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	4611      	mov	r1, r2
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
  }

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bc80      	pop	{r7}
 8009a02:	4770      	bx	lr

08009a04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr

08009a2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d105      	bne.n	8009a4a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr

08009a56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d10b      	bne.n	8009a80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa2:	2b40      	cmp	r3, #64	; 0x40
 8009aa4:	d005      	beq.n	8009ab2 <USBD_StdDevReq+0x26>
 8009aa6:	2b40      	cmp	r3, #64	; 0x40
 8009aa8:	d84f      	bhi.n	8009b4a <USBD_StdDevReq+0xbe>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <USBD_StdDevReq+0x36>
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d14b      	bne.n	8009b4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
      break;
 8009ac0:	e048      	b.n	8009b54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d839      	bhi.n	8009b3e <USBD_StdDevReq+0xb2>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <USBD_StdDevReq+0x44>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b21 	.word	0x08009b21
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	08009b3f 	.word	0x08009b3f
 8009adc:	08009b2b 	.word	0x08009b2b
 8009ae0:	08009b3f 	.word	0x08009b3f
 8009ae4:	08009b03 	.word	0x08009b03
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b3f 	.word	0x08009b3f
 8009af0:	08009b17 	.word	0x08009b17
 8009af4:	08009b0d 	.word	0x08009b0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9dc 	bl	8009eb8 <USBD_GetDescriptor>
          break;
 8009b00:	e022      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fb3f 	bl	800a188 <USBD_SetAddress>
          break;
 8009b0a:	e01d      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb7e 	bl	800a210 <USBD_SetConfig>
          break;
 8009b14:	e018      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc07 	bl	800a32c <USBD_GetConfig>
          break;
 8009b1e:	e013      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fc37 	bl	800a396 <USBD_GetStatus>
          break;
 8009b28:	e00e      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc65 	bl	800a3fc <USBD_SetFeature>
          break;
 8009b32:	e009      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fc74 	bl	800a424 <USBD_ClrFeature>
          break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fccc 	bl	800a4de <USBD_CtlError>
          break;
 8009b46:	bf00      	nop
      }
      break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fcc6 	bl	800a4de <USBD_CtlError>
      break;
 8009b52:	bf00      	nop
  }

  return ret;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop

08009b60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d005      	beq.n	8009b86 <USBD_StdItfReq+0x26>
 8009b7a:	2b40      	cmp	r3, #64	; 0x40
 8009b7c:	d82e      	bhi.n	8009bdc <USBD_StdItfReq+0x7c>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <USBD_StdItfReq+0x26>
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d12a      	bne.n	8009bdc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d81d      	bhi.n	8009bce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	889b      	ldrh	r3, [r3, #4]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d813      	bhi.n	8009bc4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d110      	bne.n	8009bd8 <USBD_StdItfReq+0x78>
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10d      	bne.n	8009bd8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fd56 	bl	800a66e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bc2:	e009      	b.n	8009bd8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc89 	bl	800a4de <USBD_CtlError>
          break;
 8009bcc:	e004      	b.n	8009bd8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc84 	bl	800a4de <USBD_CtlError>
          break;
 8009bd6:	e000      	b.n	8009bda <USBD_StdItfReq+0x7a>
          break;
 8009bd8:	bf00      	nop
      }
      break;
 8009bda:	e004      	b.n	8009be6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fc7d 	bl	800a4de <USBD_CtlError>
      break;
 8009be4:	bf00      	nop
  }

  return USBD_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	889b      	ldrh	r3, [r3, #4]
 8009c02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	d007      	beq.n	8009c20 <USBD_StdEPReq+0x30>
 8009c10:	2b40      	cmp	r3, #64	; 0x40
 8009c12:	f200 8146 	bhi.w	8009ea2 <USBD_StdEPReq+0x2b2>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <USBD_StdEPReq+0x40>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	f040 8141 	bne.w	8009ea2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      break;
 8009c2e:	e13d      	b.n	8009eac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d10a      	bne.n	8009c52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	e12d      	b.n	8009eae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d007      	beq.n	8009c6a <USBD_StdEPReq+0x7a>
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f300 811b 	bgt.w	8009e96 <USBD_StdEPReq+0x2a6>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d072      	beq.n	8009d4a <USBD_StdEPReq+0x15a>
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d03a      	beq.n	8009cde <USBD_StdEPReq+0xee>
 8009c68:	e115      	b.n	8009e96 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d002      	beq.n	8009c7a <USBD_StdEPReq+0x8a>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d015      	beq.n	8009ca4 <USBD_StdEPReq+0xb4>
 8009c78:	e02b      	b.n	8009cd2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <USBD_StdEPReq+0xaa>
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d009      	beq.n	8009c9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 f8a2 	bl	800add4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f89e 	bl	800add4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c98:	e020      	b.n	8009cdc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fc1e 	bl	800a4de <USBD_CtlError>
              break;
 8009ca2:	e01b      	b.n	8009cdc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	885b      	ldrh	r3, [r3, #2]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10e      	bne.n	8009cca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <USBD_StdEPReq+0xda>
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d008      	beq.n	8009cca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 f885 	bl	800add4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fccf 	bl	800a66e <USBD_CtlSendStatus>

              break;
 8009cd0:	e004      	b.n	8009cdc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc02 	bl	800a4de <USBD_CtlError>
              break;
 8009cda:	bf00      	nop
          }
          break;
 8009cdc:	e0e0      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d002      	beq.n	8009cee <USBD_StdEPReq+0xfe>
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d015      	beq.n	8009d18 <USBD_StdEPReq+0x128>
 8009cec:	e026      	b.n	8009d3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00c      	beq.n	8009d0e <USBD_StdEPReq+0x11e>
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d009      	beq.n	8009d0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 f868 	bl	800add4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 f864 	bl	800add4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d0c:	e01c      	b.n	8009d48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fbe4 	bl	800a4de <USBD_CtlError>
              break;
 8009d16:	e017      	b.n	8009d48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	885b      	ldrh	r3, [r3, #2]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d112      	bne.n	8009d46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 f86f 	bl	800ae12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc9a 	bl	800a66e <USBD_CtlSendStatus>
              }
              break;
 8009d3a:	e004      	b.n	8009d46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fbcd 	bl	800a4de <USBD_CtlError>
              break;
 8009d44:	e000      	b.n	8009d48 <USBD_StdEPReq+0x158>
              break;
 8009d46:	bf00      	nop
          }
          break;
 8009d48:	e0aa      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d002      	beq.n	8009d5a <USBD_StdEPReq+0x16a>
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d032      	beq.n	8009dbe <USBD_StdEPReq+0x1ce>
 8009d58:	e097      	b.n	8009e8a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <USBD_StdEPReq+0x180>
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b80      	cmp	r3, #128	; 0x80
 8009d64:	d004      	beq.n	8009d70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fbb8 	bl	800a4de <USBD_CtlError>
                break;
 8009d6e:	e091      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da0b      	bge.n	8009d90 <USBD_StdEPReq+0x1a0>
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	3310      	adds	r3, #16
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	e00b      	b.n	8009da8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	3304      	adds	r3, #4
 8009da8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2202      	movs	r2, #2
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fbfb 	bl	800a5b2 <USBD_CtlSendData>
              break;
 8009dbc:	e06a      	b.n	8009e94 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	da11      	bge.n	8009dea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	440b      	add	r3, r1
 8009dd8:	3318      	adds	r3, #24
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d117      	bne.n	8009e10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fb7b 	bl	800a4de <USBD_CtlError>
                  break;
 8009de8:	e054      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	f003 020f 	and.w	r2, r3, #15
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d104      	bne.n	8009e10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb68 	bl	800a4de <USBD_CtlError>
                  break;
 8009e0e:	e041      	b.n	8009e94 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	da0b      	bge.n	8009e30 <USBD_StdEPReq+0x240>
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	3310      	adds	r3, #16
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	e00b      	b.n	8009e48 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4413      	add	r3, r2
 8009e46:	3304      	adds	r3, #4
 8009e48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <USBD_StdEPReq+0x266>
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b80      	cmp	r3, #128	; 0x80
 8009e54:	d103      	bne.n	8009e5e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e00e      	b.n	8009e7c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fff4 	bl	800ae50 <USBD_LL_IsStallEP>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2201      	movs	r2, #1
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e002      	b.n	8009e7c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb95 	bl	800a5b2 <USBD_CtlSendData>
              break;
 8009e88:	e004      	b.n	8009e94 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fb26 	bl	800a4de <USBD_CtlError>
              break;
 8009e92:	bf00      	nop
          }
          break;
 8009e94:	e004      	b.n	8009ea0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fb20 	bl	800a4de <USBD_CtlError>
          break;
 8009e9e:	bf00      	nop
      }
      break;
 8009ea0:	e004      	b.n	8009eac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb1a 	bl	800a4de <USBD_CtlError>
      break;
 8009eaa:	bf00      	nop
  }

  return ret;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	885b      	ldrh	r3, [r3, #2]
 8009ed2:	0a1b      	lsrs	r3, r3, #8
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	f200 8128 	bhi.w	800a12e <USBD_GetDescriptor+0x276>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <USBD_GetDescriptor+0x2c>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f19 	.word	0x08009f19
 8009eec:	08009f59 	.word	0x08009f59
 8009ef0:	0800a12f 	.word	0x0800a12f
 8009ef4:	0800a12f 	.word	0x0800a12f
 8009ef8:	0800a0cf 	.word	0x0800a0cf
 8009efc:	0800a0fb 	.word	0x0800a0fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
      break;
 8009f16:	e112      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7c1b      	ldrb	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10d      	bne.n	8009f3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f107 0208 	add.w	r2, r7, #8
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
 8009f30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	2202      	movs	r2, #2
 8009f38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f3a:	e100      	b.n	800a13e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	f107 0208 	add.w	r2, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3301      	adds	r3, #1
 8009f52:	2202      	movs	r2, #2
 8009f54:	701a      	strb	r2, [r3, #0]
      break;
 8009f56:	e0f2      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	f200 80ac 	bhi.w	800a0bc <USBD_GetDescriptor+0x204>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <USBD_GetDescriptor+0xb4>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f85 	.word	0x08009f85
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009fed 	.word	0x08009fed
 8009f78:	0800a021 	.word	0x0800a021
 8009f7c:	0800a055 	.word	0x0800a055
 8009f80:	0800a089 	.word	0x0800a089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7c12      	ldrb	r2, [r2, #16]
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4798      	blx	r3
 8009fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fa6:	e091      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa97 	bl	800a4de <USBD_CtlError>
            err++;
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fb6:	e089      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	7c12      	ldrb	r2, [r2, #16]
 8009fd0:	f107 0108 	add.w	r1, r7, #8
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fda:	e077      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fa7d 	bl	800a4de <USBD_CtlError>
            err++;
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fea:	e06f      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	7c12      	ldrb	r2, [r2, #16]
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a00e:	e05d      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fa63 	bl	800a4de <USBD_CtlError>
            err++;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	3301      	adds	r3, #1
 800a01c:	72fb      	strb	r3, [r7, #11]
          break;
 800a01e:	e055      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7c12      	ldrb	r2, [r2, #16]
 800a038:	f107 0108 	add.w	r1, r7, #8
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a042:	e043      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa49 	bl	800a4de <USBD_CtlError>
            err++;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	3301      	adds	r3, #1
 800a050:	72fb      	strb	r3, [r7, #11]
          break;
 800a052:	e03b      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	7c12      	ldrb	r2, [r2, #16]
 800a06c:	f107 0108 	add.w	r1, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a076:	e029      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa2f 	bl	800a4de <USBD_CtlError>
            err++;
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	3301      	adds	r3, #1
 800a084:	72fb      	strb	r3, [r7, #11]
          break;
 800a086:	e021      	b.n	800a0cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	7c12      	ldrb	r2, [r2, #16]
 800a0a0:	f107 0108 	add.w	r1, r7, #8
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
 800a0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0aa:	e00f      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fa15 	bl	800a4de <USBD_CtlError>
            err++;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ba:	e007      	b.n	800a0cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa0d 	bl	800a4de <USBD_CtlError>
          err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a0ca:	e038      	b.n	800a13e <USBD_GetDescriptor+0x286>
 800a0cc:	e037      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7c1b      	ldrb	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
 800a0e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0e8:	e029      	b.n	800a13e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9f6 	bl	800a4de <USBD_CtlError>
        err++;
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a0f8:	e021      	b.n	800a13e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7c1b      	ldrb	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10d      	bne.n	800a11e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	4610      	mov	r0, r2
 800a110:	4798      	blx	r3
 800a112:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3301      	adds	r3, #1
 800a118:	2207      	movs	r2, #7
 800a11a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a11c:	e00f      	b.n	800a13e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9dc 	bl	800a4de <USBD_CtlError>
        err++;
 800a126:	7afb      	ldrb	r3, [r7, #11]
 800a128:	3301      	adds	r3, #1
 800a12a:	72fb      	strb	r3, [r7, #11]
      break;
 800a12c:	e007      	b.n	800a13e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f9d4 	bl	800a4de <USBD_CtlError>
      err++;
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	3301      	adds	r3, #1
 800a13a:	72fb      	strb	r3, [r7, #11]
      break;
 800a13c:	bf00      	nop
  }

  if (err != 0U)
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d11c      	bne.n	800a17e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a144:	893b      	ldrh	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d011      	beq.n	800a16e <USBD_GetDescriptor+0x2b6>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	88db      	ldrh	r3, [r3, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00d      	beq.n	800a16e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	88da      	ldrh	r2, [r3, #6]
 800a156:	893b      	ldrh	r3, [r7, #8]
 800a158:	4293      	cmp	r3, r2
 800a15a:	bf28      	it	cs
 800a15c:	4613      	movcs	r3, r2
 800a15e:	b29b      	uxth	r3, r3
 800a160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	461a      	mov	r2, r3
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa22 	bl	800a5b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	88db      	ldrh	r3, [r3, #6]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d104      	bne.n	800a180 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa79 	bl	800a66e <USBD_CtlSendStatus>
 800a17c:	e000      	b.n	800a180 <USBD_GetDescriptor+0x2c8>
    return;
 800a17e:	bf00      	nop
    }
  }
}
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop

0800a188 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	889b      	ldrh	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d130      	bne.n	800a1fc <USBD_SetAddress+0x74>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d12c      	bne.n	800a1fc <USBD_SetAddress+0x74>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	885b      	ldrh	r3, [r3, #2]
 800a1a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1a8:	d828      	bhi.n	800a1fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d104      	bne.n	800a1ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f98b 	bl	800a4de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c8:	e01d      	b.n	800a206 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fe66 	bl	800aea8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fa46 	bl	800a66e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f0:	e009      	b.n	800a206 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	e004      	b.n	800a206 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f96d 	bl	800a4de <USBD_CtlError>
  }
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	885b      	ldrh	r3, [r3, #2]
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	4b41      	ldr	r3, [pc, #260]	; (800a328 <USBD_SetConfig+0x118>)
 800a222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a224:	4b40      	ldr	r3, [pc, #256]	; (800a328 <USBD_SetConfig+0x118>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d904      	bls.n	800a236 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f955 	bl	800a4de <USBD_CtlError>
 800a234:	e075      	b.n	800a322 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d002      	beq.n	800a246 <USBD_SetConfig+0x36>
 800a240:	2b03      	cmp	r3, #3
 800a242:	d023      	beq.n	800a28c <USBD_SetConfig+0x7c>
 800a244:	e062      	b.n	800a30c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a246:	4b38      	ldr	r3, [pc, #224]	; (800a328 <USBD_SetConfig+0x118>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01a      	beq.n	800a284 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a24e:	4b36      	ldr	r3, [pc, #216]	; (800a328 <USBD_SetConfig+0x118>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2203      	movs	r2, #3
 800a25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a260:	4b31      	ldr	r3, [pc, #196]	; (800a328 <USBD_SetConfig+0x118>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff f9e7 	bl	800963a <USBD_SetClassConfig>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d104      	bne.n	800a27c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f932 	bl	800a4de <USBD_CtlError>
            return;
 800a27a:	e052      	b.n	800a322 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f9f6 	bl	800a66e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a282:	e04e      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f9f2 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a28a:	e04a      	b.n	800a322 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a28c:	4b26      	ldr	r3, [pc, #152]	; (800a328 <USBD_SetConfig+0x118>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d112      	bne.n	800a2ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a29c:	4b22      	ldr	r3, [pc, #136]	; (800a328 <USBD_SetConfig+0x118>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2a6:	4b20      	ldr	r3, [pc, #128]	; (800a328 <USBD_SetConfig+0x118>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff f9e3 	bl	8009678 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9db 	bl	800a66e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2b8:	e033      	b.n	800a322 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <USBD_SetConfig+0x118>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d01d      	beq.n	800a304 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff f9d1 	bl	8009678 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <USBD_SetConfig+0x118>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <USBD_SetConfig+0x118>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f9a7 	bl	800963a <USBD_SetClassConfig>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d104      	bne.n	800a2fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f8f2 	bl	800a4de <USBD_CtlError>
            return;
 800a2fa:	e012      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9b6 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a302:	e00e      	b.n	800a322 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f9b2 	bl	800a66e <USBD_CtlSendStatus>
        break;
 800a30a:	e00a      	b.n	800a322 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f8e5 	bl	800a4de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <USBD_SetConfig+0x118>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff f9ac 	bl	8009678 <USBD_ClrClassConfig>
        break;
 800a320:	bf00      	nop
    }
  }
}
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000bfc 	.word	0x20000bfc

0800a32c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	88db      	ldrh	r3, [r3, #6]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d004      	beq.n	800a348 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f8cc 	bl	800a4de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a346:	e022      	b.n	800a38e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34e:	2b02      	cmp	r3, #2
 800a350:	dc02      	bgt.n	800a358 <USBD_GetConfig+0x2c>
 800a352:	2b00      	cmp	r3, #0
 800a354:	dc03      	bgt.n	800a35e <USBD_GetConfig+0x32>
 800a356:	e015      	b.n	800a384 <USBD_GetConfig+0x58>
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d00b      	beq.n	800a374 <USBD_GetConfig+0x48>
 800a35c:	e012      	b.n	800a384 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3308      	adds	r3, #8
 800a368:	2201      	movs	r2, #1
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f920 	bl	800a5b2 <USBD_CtlSendData>
        break;
 800a372:	e00c      	b.n	800a38e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	2201      	movs	r2, #1
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f918 	bl	800a5b2 <USBD_CtlSendData>
        break;
 800a382:	e004      	b.n	800a38e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8a9 	bl	800a4de <USBD_CtlError>
        break;
 800a38c:	bf00      	nop
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d81e      	bhi.n	800a3ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d004      	beq.n	800a3be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f891 	bl	800a4de <USBD_CtlError>
        break;
 800a3bc:	e01a      	b.n	800a3f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f043 0202 	orr.w	r2, r3, #2
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	330c      	adds	r3, #12
 800a3de:	2202      	movs	r2, #2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f8e5 	bl	800a5b2 <USBD_CtlSendData>
      break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f876 	bl	800a4de <USBD_CtlError>
      break;
 800a3f2:	bf00      	nop
  }
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d106      	bne.n	800a41c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f929 	bl	800a66e <USBD_CtlSendStatus>
  }
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a434:	3b01      	subs	r3, #1
 800a436:	2b02      	cmp	r3, #2
 800a438:	d80b      	bhi.n	800a452 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	885b      	ldrh	r3, [r3, #2]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10c      	bne.n	800a45c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f90f 	bl	800a66e <USBD_CtlSendStatus>
      }
      break;
 800a450:	e004      	b.n	800a45c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f842 	bl	800a4de <USBD_CtlError>
      break;
 800a45a:	e000      	b.n	800a45e <USBD_ClrFeature+0x3a>
      break;
 800a45c:	bf00      	nop
  }
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785a      	ldrb	r2, [r3, #1]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3302      	adds	r3, #2
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b29a      	uxth	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	3303      	adds	r3, #3
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	b29b      	uxth	r3, r3
 800a494:	4413      	add	r3, r2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	3305      	adds	r3, #5
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4413      	add	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	3306      	adds	r3, #6
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	80da      	strh	r2, [r3, #6]

}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr

0800a4de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a4e8:	2180      	movs	r1, #128	; 0x80
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fc72 	bl	800add4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fc6e 	bl	800add4 <USBD_LL_StallEP>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d032      	beq.n	800a57c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 f834 	bl	800a584 <USBD_GetLen>
 800a51c:	4603      	mov	r3, r0
 800a51e:	3301      	adds	r3, #1
 800a520:	b29b      	uxth	r3, r3
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	75fa      	strb	r2, [r7, #23]
 800a530:	461a      	mov	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	75fa      	strb	r2, [r7, #23]
 800a542:	461a      	mov	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	4413      	add	r3, r2
 800a548:	2203      	movs	r2, #3
 800a54a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a54c:	e012      	b.n	800a574 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	7dfa      	ldrb	r2, [r7, #23]
 800a556:	1c51      	adds	r1, r2, #1
 800a558:	75f9      	strb	r1, [r7, #23]
 800a55a:	4611      	mov	r1, r2
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	440a      	add	r2, r1
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	1c5a      	adds	r2, r3, #1
 800a568:	75fa      	strb	r2, [r7, #23]
 800a56a:	461a      	mov	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4413      	add	r3, r2
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e8      	bne.n	800a54e <USBD_GetString+0x4e>
    }
  }
}
 800a57c:	bf00      	nop
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a590:	e005      	b.n	800a59e <USBD_GetLen+0x1a>
  {
    len++;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	3301      	adds	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1f5      	bne.n	800a592 <USBD_GetLen+0xe>
  }

  return len;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr

0800a5b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5ce:	88fa      	ldrh	r2, [r7, #6]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fc83 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fc71 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	4613      	mov	r3, r2
 800a61a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2203      	movs	r2, #3
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a624:	88fa      	ldrh	r2, [r7, #6]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	2100      	movs	r1, #0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fc76 	bl	800af2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	4613      	mov	r3, r2
 800a656:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a658:	88fb      	ldrh	r3, [r7, #6]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	2100      	movs	r1, #0
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 fc64 	bl	800af2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2204      	movs	r2, #4
 800a67a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a67e:	2300      	movs	r3, #0
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc2e 	bl	800aee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2205      	movs	r2, #5
 800a6a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc3e 	bl	800af2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4912      	ldr	r1, [pc, #72]	; (800a70c <MX_USB_DEVICE_Init+0x50>)
 800a6c4:	4812      	ldr	r0, [pc, #72]	; (800a710 <MX_USB_DEVICE_Init+0x54>)
 800a6c6:	f7fe ff5e 	bl	8009586 <USBD_Init>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6d0:	f7f6 fc84 	bl	8000fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6d4:	490f      	ldr	r1, [pc, #60]	; (800a714 <MX_USB_DEVICE_Init+0x58>)
 800a6d6:	480e      	ldr	r0, [pc, #56]	; (800a710 <MX_USB_DEVICE_Init+0x54>)
 800a6d8:	f7fe ff80 	bl	80095dc <USBD_RegisterClass>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6e2:	f7f6 fc7b 	bl	8000fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6e6:	490c      	ldr	r1, [pc, #48]	; (800a718 <MX_USB_DEVICE_Init+0x5c>)
 800a6e8:	4809      	ldr	r0, [pc, #36]	; (800a710 <MX_USB_DEVICE_Init+0x54>)
 800a6ea:	f7fe feb1 	bl	8009450 <USBD_CDC_RegisterInterface>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6f4:	f7f6 fc72 	bl	8000fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6f8:	4805      	ldr	r0, [pc, #20]	; (800a710 <MX_USB_DEVICE_Init+0x54>)
 800a6fa:	f7fe ff88 	bl	800960e <USBD_Start>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a704:	f7f6 fc6a 	bl	8000fdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a708:	bf00      	nop
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20000364 	.word	0x20000364
 800a710:	20000c00 	.word	0x20000c00
 800a714:	20000248 	.word	0x20000248
 800a718:	20000354 	.word	0x20000354

0800a71c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a720:	2200      	movs	r2, #0
 800a722:	4905      	ldr	r1, [pc, #20]	; (800a738 <CDC_Init_FS+0x1c>)
 800a724:	4805      	ldr	r0, [pc, #20]	; (800a73c <CDC_Init_FS+0x20>)
 800a726:	f7fe fea9 	bl	800947c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a72a:	4905      	ldr	r1, [pc, #20]	; (800a740 <CDC_Init_FS+0x24>)
 800a72c:	4803      	ldr	r0, [pc, #12]	; (800a73c <CDC_Init_FS+0x20>)
 800a72e:	f7fe febe 	bl	80094ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a734:	4618      	mov	r0, r3
 800a736:	bd80      	pop	{r7, pc}
 800a738:	200012ac 	.word	0x200012ac
 800a73c:	20000c00 	.word	0x20000c00
 800a740:	20000ec4 	.word	0x20000ec4

0800a744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
	...

0800a754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
 800a760:	4613      	mov	r3, r2
 800a762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	2b23      	cmp	r3, #35	; 0x23
 800a768:	d85c      	bhi.n	800a824 <CDC_Control_FS+0xd0>
 800a76a:	a201      	add	r2, pc, #4	; (adr r2, 800a770 <CDC_Control_FS+0x1c>)
 800a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a770:	0800a825 	.word	0x0800a825
 800a774:	0800a825 	.word	0x0800a825
 800a778:	0800a825 	.word	0x0800a825
 800a77c:	0800a825 	.word	0x0800a825
 800a780:	0800a825 	.word	0x0800a825
 800a784:	0800a825 	.word	0x0800a825
 800a788:	0800a825 	.word	0x0800a825
 800a78c:	0800a825 	.word	0x0800a825
 800a790:	0800a825 	.word	0x0800a825
 800a794:	0800a825 	.word	0x0800a825
 800a798:	0800a825 	.word	0x0800a825
 800a79c:	0800a825 	.word	0x0800a825
 800a7a0:	0800a825 	.word	0x0800a825
 800a7a4:	0800a825 	.word	0x0800a825
 800a7a8:	0800a825 	.word	0x0800a825
 800a7ac:	0800a825 	.word	0x0800a825
 800a7b0:	0800a825 	.word	0x0800a825
 800a7b4:	0800a825 	.word	0x0800a825
 800a7b8:	0800a825 	.word	0x0800a825
 800a7bc:	0800a825 	.word	0x0800a825
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800a825 	.word	0x0800a825
 800a7c8:	0800a825 	.word	0x0800a825
 800a7cc:	0800a825 	.word	0x0800a825
 800a7d0:	0800a825 	.word	0x0800a825
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800a825 	.word	0x0800a825
 800a7dc:	0800a825 	.word	0x0800a825
 800a7e0:	0800a825 	.word	0x0800a825
 800a7e4:	0800a825 	.word	0x0800a825
 800a7e8:	0800a825 	.word	0x0800a825
 800a7ec:	0800a825 	.word	0x0800a825
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a813 	.word	0x0800a813
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	0800a825 	.word	0x0800a825
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800a800:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <CDC_Control_FS+0xe0>)
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	6810      	ldr	r0, [r2, #0]
 800a806:	6018      	str	r0, [r3, #0]
 800a808:	8891      	ldrh	r1, [r2, #4]
 800a80a:	7992      	ldrb	r2, [r2, #6]
 800a80c:	8099      	strh	r1, [r3, #4]
 800a80e:	719a      	strb	r2, [r3, #6]
    break;
 800a810:	e009      	b.n	800a826 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	4a07      	ldr	r2, [pc, #28]	; (800a834 <CDC_Control_FS+0xe0>)
 800a816:	6810      	ldr	r0, [r2, #0]
 800a818:	6018      	str	r0, [r3, #0]
 800a81a:	8891      	ldrh	r1, [r2, #4]
 800a81c:	7992      	ldrb	r2, [r2, #6]
 800a81e:	8099      	strh	r1, [r3, #4]
 800a820:	719a      	strb	r2, [r3, #6]
    break;
 800a822:	e000      	b.n	800a826 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a824:	bf00      	nop
  }

  return (USBD_OK);
 800a826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	2000034c 	.word	0x2000034c

0800a838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d005      	beq.n	800a856 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7f5 fe7d 	bl	8000550 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4805      	ldr	r0, [pc, #20]	; (800a870 <CDC_Receive_FS+0x38>)
 800a85a:	f7fe fe28 	bl	80094ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a85e:	4804      	ldr	r0, [pc, #16]	; (800a870 <CDC_Receive_FS+0x38>)
 800a860:	f7fe fe67 	bl	8009532 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a864:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a866:	4618      	mov	r0, r3
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20000c00 	.word	0x20000c00

0800a874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a884:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <CDC_Transmit_FS+0x48>)
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a896:	2301      	movs	r3, #1
 800a898:	e00b      	b.n	800a8b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a89a:	887b      	ldrh	r3, [r7, #2]
 800a89c:	461a      	mov	r2, r3
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	4806      	ldr	r0, [pc, #24]	; (800a8bc <CDC_Transmit_FS+0x48>)
 800a8a2:	f7fe fdeb 	bl	800947c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8a6:	4805      	ldr	r0, [pc, #20]	; (800a8bc <CDC_Transmit_FS+0x48>)
 800a8a8:	f7fe fe14 	bl	80094d4 <USBD_CDC_TransmitPacket>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000c00 	.word	0x20000c00

0800a8c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2212      	movs	r2, #18
 800a8d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8d2:	4b03      	ldr	r3, [pc, #12]	; (800a8e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	20000380 	.word	0x20000380

0800a8e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	6039      	str	r1, [r7, #0]
 800a8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8f6:	4b03      	ldr	r3, [pc, #12]	; (800a904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bc80      	pop	{r7}
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20000394 	.word	0x20000394

0800a908 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d105      	bne.n	800a926 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	4907      	ldr	r1, [pc, #28]	; (800a93c <USBD_FS_ProductStrDescriptor+0x34>)
 800a91e:	4808      	ldr	r0, [pc, #32]	; (800a940 <USBD_FS_ProductStrDescriptor+0x38>)
 800a920:	f7ff fdee 	bl	800a500 <USBD_GetString>
 800a924:	e004      	b.n	800a930 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	4904      	ldr	r1, [pc, #16]	; (800a93c <USBD_FS_ProductStrDescriptor+0x34>)
 800a92a:	4805      	ldr	r0, [pc, #20]	; (800a940 <USBD_FS_ProductStrDescriptor+0x38>)
 800a92c:	f7ff fde8 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20001694 	.word	0x20001694
 800a940:	0800bab0 	.word	0x0800bab0

0800a944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	4904      	ldr	r1, [pc, #16]	; (800a964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a954:	4804      	ldr	r0, [pc, #16]	; (800a968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a956:	f7ff fdd3 	bl	800a500 <USBD_GetString>
  return USBD_StrDesc;
 800a95a:	4b02      	ldr	r3, [pc, #8]	; (800a964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20001694 	.word	0x20001694
 800a968:	0800bac4 	.word	0x0800bac4

0800a96c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	221a      	movs	r2, #26
 800a97c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a97e:	f000 f843 	bl	800aa08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a982:	4b02      	ldr	r3, [pc, #8]	; (800a98c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20000398 	.word	0x20000398

0800a990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	6039      	str	r1, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d105      	bne.n	800a9ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	4907      	ldr	r1, [pc, #28]	; (800a9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9a6:	4808      	ldr	r0, [pc, #32]	; (800a9c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9a8:	f7ff fdaa 	bl	800a500 <USBD_GetString>
 800a9ac:	e004      	b.n	800a9b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4904      	ldr	r1, [pc, #16]	; (800a9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9b2:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9b4:	f7ff fda4 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9b8:	4b02      	ldr	r3, [pc, #8]	; (800a9c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20001694 	.word	0x20001694
 800a9c8:	0800bacc 	.word	0x0800bacc

0800a9cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4907      	ldr	r1, [pc, #28]	; (800aa00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9e2:	4808      	ldr	r0, [pc, #32]	; (800aa04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9e4:	f7ff fd8c 	bl	800a500 <USBD_GetString>
 800a9e8:	e004      	b.n	800a9f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4904      	ldr	r1, [pc, #16]	; (800aa00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ee:	4805      	ldr	r0, [pc, #20]	; (800aa04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9f0:	f7ff fd86 	bl	800a500 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20001694 	.word	0x20001694
 800aa04:	0800bad8 	.word	0x0800bad8

0800aa08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa0e:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <Get_SerialNum+0x44>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa14:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <Get_SerialNum+0x48>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	; (800aa54 <Get_SerialNum+0x4c>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4413      	add	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d009      	beq.n	800aa42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa2e:	2208      	movs	r2, #8
 800aa30:	4909      	ldr	r1, [pc, #36]	; (800aa58 <Get_SerialNum+0x50>)
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f000 f814 	bl	800aa60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa38:	2204      	movs	r2, #4
 800aa3a:	4908      	ldr	r1, [pc, #32]	; (800aa5c <Get_SerialNum+0x54>)
 800aa3c:	68b8      	ldr	r0, [r7, #8]
 800aa3e:	f000 f80f 	bl	800aa60 <IntToUnicode>
  }
}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	1ffff7e8 	.word	0x1ffff7e8
 800aa50:	1ffff7ec 	.word	0x1ffff7ec
 800aa54:	1ffff7f0 	.word	0x1ffff7f0
 800aa58:	2000039a 	.word	0x2000039a
 800aa5c:	200003aa 	.word	0x200003aa

0800aa60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa72:	2300      	movs	r3, #0
 800aa74:	75fb      	strb	r3, [r7, #23]
 800aa76:	e027      	b.n	800aac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	0f1b      	lsrs	r3, r3, #28
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	d80b      	bhi.n	800aa98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	0f1b      	lsrs	r3, r3, #28
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	440b      	add	r3, r1
 800aa90:	3230      	adds	r2, #48	; 0x30
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	e00a      	b.n	800aaae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	0f1b      	lsrs	r3, r3, #28
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3237      	adds	r2, #55	; 0x37
 800aaaa:	b2d2      	uxtb	r2, r2
 800aaac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	3301      	adds	r3, #1
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	4413      	add	r3, r2
 800aabe:	2200      	movs	r2, #0
 800aac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	3301      	adds	r3, #1
 800aac6:	75fb      	strb	r3, [r7, #23]
 800aac8:	7dfa      	ldrb	r2, [r7, #23]
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d3d3      	bcc.n	800aa78 <IntToUnicode+0x18>
  }
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr

0800aadc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a0d      	ldr	r2, [pc, #52]	; (800ab20 <HAL_PCD_MspInit+0x44>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d113      	bne.n	800ab16 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aaee:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <HAL_PCD_MspInit+0x48>)
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <HAL_PCD_MspInit+0x48>)
 800aaf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aaf8:	61d3      	str	r3, [r2, #28]
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <HAL_PCD_MspInit+0x48>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2014      	movs	r0, #20
 800ab0c:	f7f8 fefb 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ab10:	2014      	movs	r0, #20
 800ab12:	f7f8 ff14 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab16:	bf00      	nop
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	40005c00 	.word	0x40005c00
 800ab24:	40021000 	.word	0x40021000

0800ab28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7fe fdad 	bl	800969e <USBD_LL_SetupStage>
}
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab5e:	78fa      	ldrb	r2, [r7, #3]
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	440b      	add	r3, r1
 800ab6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	4619      	mov	r1, r3
 800ab76:	f7fe fddf 	bl	8009738 <USBD_LL_DataOutStage>
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	440b      	add	r3, r1
 800aba2:	333c      	adds	r3, #60	; 0x3c
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	4619      	mov	r1, r3
 800abaa:	f7fe fe36 	bl	800981a <USBD_LL_DataInStage>
}
 800abae:	bf00      	nop
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe ff46 	bl	8009a56 <USBD_LL_SOF>
}
 800abca:	bf00      	nop
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abda:	2301      	movs	r3, #1
 800abdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d001      	beq.n	800abea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abe6:	f7f6 f9f9 	bl	8000fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abf0:	7bfa      	ldrb	r2, [r7, #15]
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fef6 	bl	80099e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe feaf 	bl	8009964 <USBD_LL_Reset>
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fef0 	bl	8009a04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <HAL_PCD_SuspendCallback+0x30>)
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	4a03      	ldr	r2, [pc, #12]	; (800ac40 <HAL_PCD_SuspendCallback+0x30>)
 800ac32:	f043 0306 	orr.w	r3, r3, #6
 800ac36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	e000ed00 	.word	0xe000ed00

0800ac44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe feea 	bl	8009a2c <USBD_LL_Resume>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ac68:	4a28      	ldr	r2, [pc, #160]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ac78:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac7a:	4a25      	ldr	r2, [pc, #148]	; (800ad10 <USBD_LL_Init+0xb0>)
 800ac7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac80:	2208      	movs	r2, #8
 800ac82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac84:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac86:	2202      	movs	r2, #2
 800ac88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac8a:	4b20      	ldr	r3, [pc, #128]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac90:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac96:	4b1d      	ldr	r3, [pc, #116]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac9c:	481b      	ldr	r0, [pc, #108]	; (800ad0c <USBD_LL_Init+0xac>)
 800ac9e:	f7f9 f809 	bl	8003cb4 <HAL_PCD_Init>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aca8:	f7f6 f998 	bl	8000fdc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acb2:	2318      	movs	r3, #24
 800acb4:	2200      	movs	r2, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	f7fa fc7d 	bl	80055b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acc2:	2358      	movs	r3, #88	; 0x58
 800acc4:	2200      	movs	r2, #0
 800acc6:	2180      	movs	r1, #128	; 0x80
 800acc8:	f7fa fc75 	bl	80055b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acd2:	23c0      	movs	r3, #192	; 0xc0
 800acd4:	2200      	movs	r2, #0
 800acd6:	2181      	movs	r1, #129	; 0x81
 800acd8:	f7fa fc6d 	bl	80055b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ace2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ace6:	2200      	movs	r2, #0
 800ace8:	2101      	movs	r1, #1
 800acea:	f7fa fc64 	bl	80055b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf8:	2200      	movs	r2, #0
 800acfa:	2182      	movs	r1, #130	; 0x82
 800acfc:	f7fa fc5b 	bl	80055b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20001894 	.word	0x20001894
 800ad10:	40005c00 	.word	0x40005c00

0800ad14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f9 f8cd 	bl	8003eca <HAL_PCD_Start>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f94e 	bl	800afd8 <USBD_Get_USB_Status>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	4608      	mov	r0, r1
 800ad54:	4611      	mov	r1, r2
 800ad56:	461a      	mov	r2, r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	70fb      	strb	r3, [r7, #3]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70bb      	strb	r3, [r7, #2]
 800ad60:	4613      	mov	r3, r2
 800ad62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad72:	78bb      	ldrb	r3, [r7, #2]
 800ad74:	883a      	ldrh	r2, [r7, #0]
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	f7f9 fa45 	bl	8004206 <HAL_PCD_EP_Open>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f928 	bl	800afd8 <USBD_Get_USB_Status>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adb0:	78fa      	ldrb	r2, [r7, #3]
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7f9 fa8c 	bl	80042d2 <HAL_PCD_EP_Close>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 f909 	bl	800afd8 <USBD_Get_USB_Status>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adca:	7bbb      	ldrb	r3, [r7, #14]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f9 fb4c 	bl	8004490 <HAL_PCD_EP_SetStall>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f8ea 	bl	800afd8 <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7f9 fb8d 	bl	8004550 <HAL_PCD_EP_ClrStall>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 f8cb 	bl	800afd8 <USBD_Get_USB_Status>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	da0c      	bge.n	800ae86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae6c:	78fb      	ldrb	r3, [r7, #3]
 800ae6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	440b      	add	r3, r1
 800ae80:	3302      	adds	r3, #2
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	e00b      	b.n	800ae9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae8c:	68f9      	ldr	r1, [r7, #12]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ae9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f9 f978 	bl	80041bc <HAL_PCD_SetAddress>
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f880 	bl	800afd8 <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b086      	sub	sp, #24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	461a      	mov	r2, r3
 800aef2:	460b      	mov	r3, r1
 800aef4:	72fb      	strb	r3, [r7, #11]
 800aef6:	4613      	mov	r3, r2
 800aef8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af08:	893b      	ldrh	r3, [r7, #8]
 800af0a:	7af9      	ldrb	r1, [r7, #11]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	f7f9 fa7c 	bl	800440a <HAL_PCD_EP_Transmit>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f85d 	bl	800afd8 <USBD_Get_USB_Status>
 800af1e:	4603      	mov	r3, r0
 800af20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af22:	7dbb      	ldrb	r3, [r7, #22]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	461a      	mov	r2, r3
 800af38:	460b      	mov	r3, r1
 800af3a:	72fb      	strb	r3, [r7, #11]
 800af3c:	4613      	mov	r3, r2
 800af3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af4e:	893b      	ldrh	r3, [r7, #8]
 800af50:	7af9      	ldrb	r1, [r7, #11]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	f7f9 fa05 	bl	8004362 <HAL_PCD_EP_Receive>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 f83a 	bl	800afd8 <USBD_Get_USB_Status>
 800af64:	4603      	mov	r3, r0
 800af66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af68:	7dbb      	ldrb	r3, [r7, #22]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	460b      	mov	r3, r1
 800af7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af84:	78fa      	ldrb	r2, [r7, #3]
 800af86:	4611      	mov	r1, r2
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f9 fa27 	bl	80043dc <HAL_PCD_EP_GetRxCount>
 800af8e:	4603      	mov	r3, r0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <USBD_static_malloc+0x14>)
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr
 800afac:	20001b80 	.word	0x20001b80

0800afb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]

}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bc80      	pop	{r7}
 800afc0:	4770      	bx	lr

0800afc2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bc80      	pop	{r7}
 800afd6:	4770      	bx	lr

0800afd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d817      	bhi.n	800b01c <USBD_Get_USB_Status+0x44>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <USBD_Get_USB_Status+0x1c>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b005 	.word	0x0800b005
 800aff8:	0800b00b 	.word	0x0800b00b
 800affc:	0800b011 	.word	0x0800b011
 800b000:	0800b017 	.word	0x0800b017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
    break;
 800b008:	e00b      	b.n	800b022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b00a:	2302      	movs	r3, #2
 800b00c:	73fb      	strb	r3, [r7, #15]
    break;
 800b00e:	e008      	b.n	800b022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b010:	2301      	movs	r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
    break;
 800b014:	e005      	b.n	800b022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b016:	2302      	movs	r3, #2
 800b018:	73fb      	strb	r3, [r7, #15]
    break;
 800b01a:	e002      	b.n	800b022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b01c:	2302      	movs	r3, #2
 800b01e:	73fb      	strb	r3, [r7, #15]
    break;
 800b020:	bf00      	nop
  }
  return usb_status;
 800b022:	7bfb      	ldrb	r3, [r7, #15]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	bc80      	pop	{r7}
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <__errno>:
 800b030:	4b01      	ldr	r3, [pc, #4]	; (800b038 <__errno+0x8>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	200003b4 	.word	0x200003b4

0800b03c <__libc_init_array>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	2600      	movs	r6, #0
 800b040:	4d0c      	ldr	r5, [pc, #48]	; (800b074 <__libc_init_array+0x38>)
 800b042:	4c0d      	ldr	r4, [pc, #52]	; (800b078 <__libc_init_array+0x3c>)
 800b044:	1b64      	subs	r4, r4, r5
 800b046:	10a4      	asrs	r4, r4, #2
 800b048:	42a6      	cmp	r6, r4
 800b04a:	d109      	bne.n	800b060 <__libc_init_array+0x24>
 800b04c:	f000 fcd6 	bl	800b9fc <_init>
 800b050:	2600      	movs	r6, #0
 800b052:	4d0a      	ldr	r5, [pc, #40]	; (800b07c <__libc_init_array+0x40>)
 800b054:	4c0a      	ldr	r4, [pc, #40]	; (800b080 <__libc_init_array+0x44>)
 800b056:	1b64      	subs	r4, r4, r5
 800b058:	10a4      	asrs	r4, r4, #2
 800b05a:	42a6      	cmp	r6, r4
 800b05c:	d105      	bne.n	800b06a <__libc_init_array+0x2e>
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	f855 3b04 	ldr.w	r3, [r5], #4
 800b064:	4798      	blx	r3
 800b066:	3601      	adds	r6, #1
 800b068:	e7ee      	b.n	800b048 <__libc_init_array+0xc>
 800b06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06e:	4798      	blx	r3
 800b070:	3601      	adds	r6, #1
 800b072:	e7f2      	b.n	800b05a <__libc_init_array+0x1e>
 800b074:	0800cc0c 	.word	0x0800cc0c
 800b078:	0800cc0c 	.word	0x0800cc0c
 800b07c:	0800cc0c 	.word	0x0800cc0c
 800b080:	0800cc10 	.word	0x0800cc10

0800b084 <memset>:
 800b084:	4603      	mov	r3, r0
 800b086:	4402      	add	r2, r0
 800b088:	4293      	cmp	r3, r2
 800b08a:	d100      	bne.n	800b08e <memset+0xa>
 800b08c:	4770      	bx	lr
 800b08e:	f803 1b01 	strb.w	r1, [r3], #1
 800b092:	e7f9      	b.n	800b088 <memset+0x4>

0800b094 <sniprintf>:
 800b094:	b40c      	push	{r2, r3}
 800b096:	b530      	push	{r4, r5, lr}
 800b098:	4b17      	ldr	r3, [pc, #92]	; (800b0f8 <sniprintf+0x64>)
 800b09a:	1e0c      	subs	r4, r1, #0
 800b09c:	681d      	ldr	r5, [r3, #0]
 800b09e:	b09d      	sub	sp, #116	; 0x74
 800b0a0:	da08      	bge.n	800b0b4 <sniprintf+0x20>
 800b0a2:	238b      	movs	r3, #139	; 0x8b
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	b01d      	add	sp, #116	; 0x74
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	b002      	add	sp, #8
 800b0b2:	4770      	bx	lr
 800b0b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0bc:	bf0c      	ite	eq
 800b0be:	4623      	moveq	r3, r4
 800b0c0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	9006      	str	r0, [sp, #24]
 800b0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	ab21      	add	r3, sp, #132	; 0x84
 800b0d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b0da:	a902      	add	r1, sp, #8
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	f000 f88f 	bl	800b200 <_svfiprintf_r>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	bfbc      	itt	lt
 800b0e6:	238b      	movlt	r3, #139	; 0x8b
 800b0e8:	602b      	strlt	r3, [r5, #0]
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d0dd      	beq.n	800b0aa <sniprintf+0x16>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e7d9      	b.n	800b0aa <sniprintf+0x16>
 800b0f6:	bf00      	nop
 800b0f8:	200003b4 	.word	0x200003b4

0800b0fc <strncmp>:
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	b510      	push	{r4, lr}
 800b100:	b172      	cbz	r2, 800b120 <strncmp+0x24>
 800b102:	3901      	subs	r1, #1
 800b104:	1884      	adds	r4, r0, r2
 800b106:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b10a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b10e:	4290      	cmp	r0, r2
 800b110:	d101      	bne.n	800b116 <strncmp+0x1a>
 800b112:	42a3      	cmp	r3, r4
 800b114:	d101      	bne.n	800b11a <strncmp+0x1e>
 800b116:	1a80      	subs	r0, r0, r2
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d1f3      	bne.n	800b106 <strncmp+0xa>
 800b11e:	e7fa      	b.n	800b116 <strncmp+0x1a>
 800b120:	4610      	mov	r0, r2
 800b122:	e7f9      	b.n	800b118 <strncmp+0x1c>

0800b124 <strncpy>:
 800b124:	4603      	mov	r3, r0
 800b126:	b510      	push	{r4, lr}
 800b128:	3901      	subs	r1, #1
 800b12a:	b132      	cbz	r2, 800b13a <strncpy+0x16>
 800b12c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b130:	3a01      	subs	r2, #1
 800b132:	f803 4b01 	strb.w	r4, [r3], #1
 800b136:	2c00      	cmp	r4, #0
 800b138:	d1f7      	bne.n	800b12a <strncpy+0x6>
 800b13a:	2100      	movs	r1, #0
 800b13c:	441a      	add	r2, r3
 800b13e:	4293      	cmp	r3, r2
 800b140:	d100      	bne.n	800b144 <strncpy+0x20>
 800b142:	bd10      	pop	{r4, pc}
 800b144:	f803 1b01 	strb.w	r1, [r3], #1
 800b148:	e7f9      	b.n	800b13e <strncpy+0x1a>

0800b14a <__ssputs_r>:
 800b14a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b14e:	688e      	ldr	r6, [r1, #8]
 800b150:	4682      	mov	sl, r0
 800b152:	429e      	cmp	r6, r3
 800b154:	460c      	mov	r4, r1
 800b156:	4690      	mov	r8, r2
 800b158:	461f      	mov	r7, r3
 800b15a:	d838      	bhi.n	800b1ce <__ssputs_r+0x84>
 800b15c:	898a      	ldrh	r2, [r1, #12]
 800b15e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b162:	d032      	beq.n	800b1ca <__ssputs_r+0x80>
 800b164:	6825      	ldr	r5, [r4, #0]
 800b166:	6909      	ldr	r1, [r1, #16]
 800b168:	3301      	adds	r3, #1
 800b16a:	eba5 0901 	sub.w	r9, r5, r1
 800b16e:	6965      	ldr	r5, [r4, #20]
 800b170:	444b      	add	r3, r9
 800b172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b17a:	106d      	asrs	r5, r5, #1
 800b17c:	429d      	cmp	r5, r3
 800b17e:	bf38      	it	cc
 800b180:	461d      	movcc	r5, r3
 800b182:	0553      	lsls	r3, r2, #21
 800b184:	d531      	bpl.n	800b1ea <__ssputs_r+0xa0>
 800b186:	4629      	mov	r1, r5
 800b188:	f000 fb6e 	bl	800b868 <_malloc_r>
 800b18c:	4606      	mov	r6, r0
 800b18e:	b950      	cbnz	r0, 800b1a6 <__ssputs_r+0x5c>
 800b190:	230c      	movs	r3, #12
 800b192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b196:	f8ca 3000 	str.w	r3, [sl]
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a6:	464a      	mov	r2, r9
 800b1a8:	6921      	ldr	r1, [r4, #16]
 800b1aa:	f000 facd 	bl	800b748 <memcpy>
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b8:	81a3      	strh	r3, [r4, #12]
 800b1ba:	6126      	str	r6, [r4, #16]
 800b1bc:	444e      	add	r6, r9
 800b1be:	6026      	str	r6, [r4, #0]
 800b1c0:	463e      	mov	r6, r7
 800b1c2:	6165      	str	r5, [r4, #20]
 800b1c4:	eba5 0509 	sub.w	r5, r5, r9
 800b1c8:	60a5      	str	r5, [r4, #8]
 800b1ca:	42be      	cmp	r6, r7
 800b1cc:	d900      	bls.n	800b1d0 <__ssputs_r+0x86>
 800b1ce:	463e      	mov	r6, r7
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	f000 fac5 	bl	800b764 <memmove>
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	2000      	movs	r0, #0
 800b1de:	1b9b      	subs	r3, r3, r6
 800b1e0:	60a3      	str	r3, [r4, #8]
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	4433      	add	r3, r6
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	e7db      	b.n	800b1a2 <__ssputs_r+0x58>
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	f000 fbb0 	bl	800b950 <_realloc_r>
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d1e1      	bne.n	800b1ba <__ssputs_r+0x70>
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	6921      	ldr	r1, [r4, #16]
 800b1fa:	f000 facd 	bl	800b798 <_free_r>
 800b1fe:	e7c7      	b.n	800b190 <__ssputs_r+0x46>

0800b200 <_svfiprintf_r>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	4698      	mov	r8, r3
 800b206:	898b      	ldrh	r3, [r1, #12]
 800b208:	4607      	mov	r7, r0
 800b20a:	061b      	lsls	r3, r3, #24
 800b20c:	460d      	mov	r5, r1
 800b20e:	4614      	mov	r4, r2
 800b210:	b09d      	sub	sp, #116	; 0x74
 800b212:	d50e      	bpl.n	800b232 <_svfiprintf_r+0x32>
 800b214:	690b      	ldr	r3, [r1, #16]
 800b216:	b963      	cbnz	r3, 800b232 <_svfiprintf_r+0x32>
 800b218:	2140      	movs	r1, #64	; 0x40
 800b21a:	f000 fb25 	bl	800b868 <_malloc_r>
 800b21e:	6028      	str	r0, [r5, #0]
 800b220:	6128      	str	r0, [r5, #16]
 800b222:	b920      	cbnz	r0, 800b22e <_svfiprintf_r+0x2e>
 800b224:	230c      	movs	r3, #12
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b22c:	e0d1      	b.n	800b3d2 <_svfiprintf_r+0x1d2>
 800b22e:	2340      	movs	r3, #64	; 0x40
 800b230:	616b      	str	r3, [r5, #20]
 800b232:	2300      	movs	r3, #0
 800b234:	9309      	str	r3, [sp, #36]	; 0x24
 800b236:	2320      	movs	r3, #32
 800b238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b23c:	2330      	movs	r3, #48	; 0x30
 800b23e:	f04f 0901 	mov.w	r9, #1
 800b242:	f8cd 800c 	str.w	r8, [sp, #12]
 800b246:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3ec <_svfiprintf_r+0x1ec>
 800b24a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b24e:	4623      	mov	r3, r4
 800b250:	469a      	mov	sl, r3
 800b252:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b256:	b10a      	cbz	r2, 800b25c <_svfiprintf_r+0x5c>
 800b258:	2a25      	cmp	r2, #37	; 0x25
 800b25a:	d1f9      	bne.n	800b250 <_svfiprintf_r+0x50>
 800b25c:	ebba 0b04 	subs.w	fp, sl, r4
 800b260:	d00b      	beq.n	800b27a <_svfiprintf_r+0x7a>
 800b262:	465b      	mov	r3, fp
 800b264:	4622      	mov	r2, r4
 800b266:	4629      	mov	r1, r5
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff ff6e 	bl	800b14a <__ssputs_r>
 800b26e:	3001      	adds	r0, #1
 800b270:	f000 80aa 	beq.w	800b3c8 <_svfiprintf_r+0x1c8>
 800b274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b276:	445a      	add	r2, fp
 800b278:	9209      	str	r2, [sp, #36]	; 0x24
 800b27a:	f89a 3000 	ldrb.w	r3, [sl]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80a2 	beq.w	800b3c8 <_svfiprintf_r+0x1c8>
 800b284:	2300      	movs	r3, #0
 800b286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b28e:	f10a 0a01 	add.w	sl, sl, #1
 800b292:	9304      	str	r3, [sp, #16]
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b29a:	931a      	str	r3, [sp, #104]	; 0x68
 800b29c:	4654      	mov	r4, sl
 800b29e:	2205      	movs	r2, #5
 800b2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a4:	4851      	ldr	r0, [pc, #324]	; (800b3ec <_svfiprintf_r+0x1ec>)
 800b2a6:	f000 fa41 	bl	800b72c <memchr>
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	b9d8      	cbnz	r0, 800b2e6 <_svfiprintf_r+0xe6>
 800b2ae:	06d0      	lsls	r0, r2, #27
 800b2b0:	bf44      	itt	mi
 800b2b2:	2320      	movmi	r3, #32
 800b2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b8:	0711      	lsls	r1, r2, #28
 800b2ba:	bf44      	itt	mi
 800b2bc:	232b      	movmi	r3, #43	; 0x2b
 800b2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c8:	d015      	beq.n	800b2f6 <_svfiprintf_r+0xf6>
 800b2ca:	4654      	mov	r4, sl
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	f04f 0c0a 	mov.w	ip, #10
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2da:	3b30      	subs	r3, #48	; 0x30
 800b2dc:	2b09      	cmp	r3, #9
 800b2de:	d94e      	bls.n	800b37e <_svfiprintf_r+0x17e>
 800b2e0:	b1b0      	cbz	r0, 800b310 <_svfiprintf_r+0x110>
 800b2e2:	9207      	str	r2, [sp, #28]
 800b2e4:	e014      	b.n	800b310 <_svfiprintf_r+0x110>
 800b2e6:	eba0 0308 	sub.w	r3, r0, r8
 800b2ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	46a2      	mov	sl, r4
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	e7d2      	b.n	800b29c <_svfiprintf_r+0x9c>
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	1d19      	adds	r1, r3, #4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	9103      	str	r1, [sp, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bfbb      	ittet	lt
 800b302:	425b      	neglt	r3, r3
 800b304:	f042 0202 	orrlt.w	r2, r2, #2
 800b308:	9307      	strge	r3, [sp, #28]
 800b30a:	9307      	strlt	r3, [sp, #28]
 800b30c:	bfb8      	it	lt
 800b30e:	9204      	strlt	r2, [sp, #16]
 800b310:	7823      	ldrb	r3, [r4, #0]
 800b312:	2b2e      	cmp	r3, #46	; 0x2e
 800b314:	d10c      	bne.n	800b330 <_svfiprintf_r+0x130>
 800b316:	7863      	ldrb	r3, [r4, #1]
 800b318:	2b2a      	cmp	r3, #42	; 0x2a
 800b31a:	d135      	bne.n	800b388 <_svfiprintf_r+0x188>
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	3402      	adds	r4, #2
 800b320:	1d1a      	adds	r2, r3, #4
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	9203      	str	r2, [sp, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfb8      	it	lt
 800b32a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b3f0 <_svfiprintf_r+0x1f0>
 800b334:	2203      	movs	r2, #3
 800b336:	4650      	mov	r0, sl
 800b338:	7821      	ldrb	r1, [r4, #0]
 800b33a:	f000 f9f7 	bl	800b72c <memchr>
 800b33e:	b140      	cbz	r0, 800b352 <_svfiprintf_r+0x152>
 800b340:	2340      	movs	r3, #64	; 0x40
 800b342:	eba0 000a 	sub.w	r0, r0, sl
 800b346:	fa03 f000 	lsl.w	r0, r3, r0
 800b34a:	9b04      	ldr	r3, [sp, #16]
 800b34c:	3401      	adds	r4, #1
 800b34e:	4303      	orrs	r3, r0
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b356:	2206      	movs	r2, #6
 800b358:	4826      	ldr	r0, [pc, #152]	; (800b3f4 <_svfiprintf_r+0x1f4>)
 800b35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b35e:	f000 f9e5 	bl	800b72c <memchr>
 800b362:	2800      	cmp	r0, #0
 800b364:	d038      	beq.n	800b3d8 <_svfiprintf_r+0x1d8>
 800b366:	4b24      	ldr	r3, [pc, #144]	; (800b3f8 <_svfiprintf_r+0x1f8>)
 800b368:	bb1b      	cbnz	r3, 800b3b2 <_svfiprintf_r+0x1b2>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	3307      	adds	r3, #7
 800b36e:	f023 0307 	bic.w	r3, r3, #7
 800b372:	3308      	adds	r3, #8
 800b374:	9303      	str	r3, [sp, #12]
 800b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b378:	4433      	add	r3, r6
 800b37a:	9309      	str	r3, [sp, #36]	; 0x24
 800b37c:	e767      	b.n	800b24e <_svfiprintf_r+0x4e>
 800b37e:	460c      	mov	r4, r1
 800b380:	2001      	movs	r0, #1
 800b382:	fb0c 3202 	mla	r2, ip, r2, r3
 800b386:	e7a5      	b.n	800b2d4 <_svfiprintf_r+0xd4>
 800b388:	2300      	movs	r3, #0
 800b38a:	f04f 0c0a 	mov.w	ip, #10
 800b38e:	4619      	mov	r1, r3
 800b390:	3401      	adds	r4, #1
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	4620      	mov	r0, r4
 800b396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39a:	3a30      	subs	r2, #48	; 0x30
 800b39c:	2a09      	cmp	r2, #9
 800b39e:	d903      	bls.n	800b3a8 <_svfiprintf_r+0x1a8>
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0c5      	beq.n	800b330 <_svfiprintf_r+0x130>
 800b3a4:	9105      	str	r1, [sp, #20]
 800b3a6:	e7c3      	b.n	800b330 <_svfiprintf_r+0x130>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3b0:	e7f0      	b.n	800b394 <_svfiprintf_r+0x194>
 800b3b2:	ab03      	add	r3, sp, #12
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	462a      	mov	r2, r5
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	4b10      	ldr	r3, [pc, #64]	; (800b3fc <_svfiprintf_r+0x1fc>)
 800b3bc:	a904      	add	r1, sp, #16
 800b3be:	f3af 8000 	nop.w
 800b3c2:	1c42      	adds	r2, r0, #1
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	d1d6      	bne.n	800b376 <_svfiprintf_r+0x176>
 800b3c8:	89ab      	ldrh	r3, [r5, #12]
 800b3ca:	065b      	lsls	r3, r3, #25
 800b3cc:	f53f af2c 	bmi.w	800b228 <_svfiprintf_r+0x28>
 800b3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3d2:	b01d      	add	sp, #116	; 0x74
 800b3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d8:	ab03      	add	r3, sp, #12
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	462a      	mov	r2, r5
 800b3de:	4638      	mov	r0, r7
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <_svfiprintf_r+0x1fc>)
 800b3e2:	a904      	add	r1, sp, #16
 800b3e4:	f000 f87c 	bl	800b4e0 <_printf_i>
 800b3e8:	e7eb      	b.n	800b3c2 <_svfiprintf_r+0x1c2>
 800b3ea:	bf00      	nop
 800b3ec:	0800cbd7 	.word	0x0800cbd7
 800b3f0:	0800cbdd 	.word	0x0800cbdd
 800b3f4:	0800cbe1 	.word	0x0800cbe1
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	0800b14b 	.word	0x0800b14b

0800b400 <_printf_common>:
 800b400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	4616      	mov	r6, r2
 800b406:	4699      	mov	r9, r3
 800b408:	688a      	ldr	r2, [r1, #8]
 800b40a:	690b      	ldr	r3, [r1, #16]
 800b40c:	4607      	mov	r7, r0
 800b40e:	4293      	cmp	r3, r2
 800b410:	bfb8      	it	lt
 800b412:	4613      	movlt	r3, r2
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b41a:	460c      	mov	r4, r1
 800b41c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b420:	b10a      	cbz	r2, 800b426 <_printf_common+0x26>
 800b422:	3301      	adds	r3, #1
 800b424:	6033      	str	r3, [r6, #0]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	0699      	lsls	r1, r3, #26
 800b42a:	bf42      	ittt	mi
 800b42c:	6833      	ldrmi	r3, [r6, #0]
 800b42e:	3302      	addmi	r3, #2
 800b430:	6033      	strmi	r3, [r6, #0]
 800b432:	6825      	ldr	r5, [r4, #0]
 800b434:	f015 0506 	ands.w	r5, r5, #6
 800b438:	d106      	bne.n	800b448 <_printf_common+0x48>
 800b43a:	f104 0a19 	add.w	sl, r4, #25
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	6832      	ldr	r2, [r6, #0]
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	42ab      	cmp	r3, r5
 800b446:	dc28      	bgt.n	800b49a <_printf_common+0x9a>
 800b448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b44c:	1e13      	subs	r3, r2, #0
 800b44e:	6822      	ldr	r2, [r4, #0]
 800b450:	bf18      	it	ne
 800b452:	2301      	movne	r3, #1
 800b454:	0692      	lsls	r2, r2, #26
 800b456:	d42d      	bmi.n	800b4b4 <_printf_common+0xb4>
 800b458:	4649      	mov	r1, r9
 800b45a:	4638      	mov	r0, r7
 800b45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b460:	47c0      	blx	r8
 800b462:	3001      	adds	r0, #1
 800b464:	d020      	beq.n	800b4a8 <_printf_common+0xa8>
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	68e5      	ldr	r5, [r4, #12]
 800b46a:	f003 0306 	and.w	r3, r3, #6
 800b46e:	2b04      	cmp	r3, #4
 800b470:	bf18      	it	ne
 800b472:	2500      	movne	r5, #0
 800b474:	6832      	ldr	r2, [r6, #0]
 800b476:	f04f 0600 	mov.w	r6, #0
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	bf08      	it	eq
 800b47e:	1aad      	subeq	r5, r5, r2
 800b480:	6922      	ldr	r2, [r4, #16]
 800b482:	bf08      	it	eq
 800b484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b488:	4293      	cmp	r3, r2
 800b48a:	bfc4      	itt	gt
 800b48c:	1a9b      	subgt	r3, r3, r2
 800b48e:	18ed      	addgt	r5, r5, r3
 800b490:	341a      	adds	r4, #26
 800b492:	42b5      	cmp	r5, r6
 800b494:	d11a      	bne.n	800b4cc <_printf_common+0xcc>
 800b496:	2000      	movs	r0, #0
 800b498:	e008      	b.n	800b4ac <_printf_common+0xac>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4652      	mov	r2, sl
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	47c0      	blx	r8
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d103      	bne.n	800b4b0 <_printf_common+0xb0>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	e7c4      	b.n	800b43e <_printf_common+0x3e>
 800b4b4:	2030      	movs	r0, #48	; 0x30
 800b4b6:	18e1      	adds	r1, r4, r3
 800b4b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4c2:	4422      	add	r2, r4
 800b4c4:	3302      	adds	r3, #2
 800b4c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4ca:	e7c5      	b.n	800b458 <_printf_common+0x58>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	47c0      	blx	r8
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d0e6      	beq.n	800b4a8 <_printf_common+0xa8>
 800b4da:	3601      	adds	r6, #1
 800b4dc:	e7d9      	b.n	800b492 <_printf_common+0x92>
	...

0800b4e0 <_printf_i>:
 800b4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e4:	7e0f      	ldrb	r7, [r1, #24]
 800b4e6:	4691      	mov	r9, r2
 800b4e8:	2f78      	cmp	r7, #120	; 0x78
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	469a      	mov	sl, r3
 800b4f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4f6:	d807      	bhi.n	800b508 <_printf_i+0x28>
 800b4f8:	2f62      	cmp	r7, #98	; 0x62
 800b4fa:	d80a      	bhi.n	800b512 <_printf_i+0x32>
 800b4fc:	2f00      	cmp	r7, #0
 800b4fe:	f000 80d9 	beq.w	800b6b4 <_printf_i+0x1d4>
 800b502:	2f58      	cmp	r7, #88	; 0x58
 800b504:	f000 80a4 	beq.w	800b650 <_printf_i+0x170>
 800b508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b510:	e03a      	b.n	800b588 <_printf_i+0xa8>
 800b512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b516:	2b15      	cmp	r3, #21
 800b518:	d8f6      	bhi.n	800b508 <_printf_i+0x28>
 800b51a:	a101      	add	r1, pc, #4	; (adr r1, 800b520 <_printf_i+0x40>)
 800b51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b520:	0800b579 	.word	0x0800b579
 800b524:	0800b58d 	.word	0x0800b58d
 800b528:	0800b509 	.word	0x0800b509
 800b52c:	0800b509 	.word	0x0800b509
 800b530:	0800b509 	.word	0x0800b509
 800b534:	0800b509 	.word	0x0800b509
 800b538:	0800b58d 	.word	0x0800b58d
 800b53c:	0800b509 	.word	0x0800b509
 800b540:	0800b509 	.word	0x0800b509
 800b544:	0800b509 	.word	0x0800b509
 800b548:	0800b509 	.word	0x0800b509
 800b54c:	0800b69b 	.word	0x0800b69b
 800b550:	0800b5bd 	.word	0x0800b5bd
 800b554:	0800b67d 	.word	0x0800b67d
 800b558:	0800b509 	.word	0x0800b509
 800b55c:	0800b509 	.word	0x0800b509
 800b560:	0800b6bd 	.word	0x0800b6bd
 800b564:	0800b509 	.word	0x0800b509
 800b568:	0800b5bd 	.word	0x0800b5bd
 800b56c:	0800b509 	.word	0x0800b509
 800b570:	0800b509 	.word	0x0800b509
 800b574:	0800b685 	.word	0x0800b685
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	602a      	str	r2, [r5, #0]
 800b580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b588:	2301      	movs	r3, #1
 800b58a:	e0a4      	b.n	800b6d6 <_printf_i+0x1f6>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	6829      	ldr	r1, [r5, #0]
 800b590:	0606      	lsls	r6, r0, #24
 800b592:	f101 0304 	add.w	r3, r1, #4
 800b596:	d50a      	bpl.n	800b5ae <_printf_i+0xce>
 800b598:	680e      	ldr	r6, [r1, #0]
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	2e00      	cmp	r6, #0
 800b59e:	da03      	bge.n	800b5a8 <_printf_i+0xc8>
 800b5a0:	232d      	movs	r3, #45	; 0x2d
 800b5a2:	4276      	negs	r6, r6
 800b5a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	485e      	ldr	r0, [pc, #376]	; (800b724 <_printf_i+0x244>)
 800b5ac:	e019      	b.n	800b5e2 <_printf_i+0x102>
 800b5ae:	680e      	ldr	r6, [r1, #0]
 800b5b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	bf18      	it	ne
 800b5b8:	b236      	sxthne	r6, r6
 800b5ba:	e7ef      	b.n	800b59c <_printf_i+0xbc>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	1d19      	adds	r1, r3, #4
 800b5c2:	6029      	str	r1, [r5, #0]
 800b5c4:	0601      	lsls	r1, r0, #24
 800b5c6:	d501      	bpl.n	800b5cc <_printf_i+0xec>
 800b5c8:	681e      	ldr	r6, [r3, #0]
 800b5ca:	e002      	b.n	800b5d2 <_printf_i+0xf2>
 800b5cc:	0646      	lsls	r6, r0, #25
 800b5ce:	d5fb      	bpl.n	800b5c8 <_printf_i+0xe8>
 800b5d0:	881e      	ldrh	r6, [r3, #0]
 800b5d2:	2f6f      	cmp	r7, #111	; 0x6f
 800b5d4:	bf0c      	ite	eq
 800b5d6:	2308      	moveq	r3, #8
 800b5d8:	230a      	movne	r3, #10
 800b5da:	4852      	ldr	r0, [pc, #328]	; (800b724 <_printf_i+0x244>)
 800b5dc:	2100      	movs	r1, #0
 800b5de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5e2:	6865      	ldr	r5, [r4, #4]
 800b5e4:	2d00      	cmp	r5, #0
 800b5e6:	bfa8      	it	ge
 800b5e8:	6821      	ldrge	r1, [r4, #0]
 800b5ea:	60a5      	str	r5, [r4, #8]
 800b5ec:	bfa4      	itt	ge
 800b5ee:	f021 0104 	bicge.w	r1, r1, #4
 800b5f2:	6021      	strge	r1, [r4, #0]
 800b5f4:	b90e      	cbnz	r6, 800b5fa <_printf_i+0x11a>
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	d04d      	beq.n	800b696 <_printf_i+0x1b6>
 800b5fa:	4615      	mov	r5, r2
 800b5fc:	fbb6 f1f3 	udiv	r1, r6, r3
 800b600:	fb03 6711 	mls	r7, r3, r1, r6
 800b604:	5dc7      	ldrb	r7, [r0, r7]
 800b606:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b60a:	4637      	mov	r7, r6
 800b60c:	42bb      	cmp	r3, r7
 800b60e:	460e      	mov	r6, r1
 800b610:	d9f4      	bls.n	800b5fc <_printf_i+0x11c>
 800b612:	2b08      	cmp	r3, #8
 800b614:	d10b      	bne.n	800b62e <_printf_i+0x14e>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	07de      	lsls	r6, r3, #31
 800b61a:	d508      	bpl.n	800b62e <_printf_i+0x14e>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	6861      	ldr	r1, [r4, #4]
 800b620:	4299      	cmp	r1, r3
 800b622:	bfde      	ittt	le
 800b624:	2330      	movle	r3, #48	; 0x30
 800b626:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b62a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b62e:	1b52      	subs	r2, r2, r5
 800b630:	6122      	str	r2, [r4, #16]
 800b632:	464b      	mov	r3, r9
 800b634:	4621      	mov	r1, r4
 800b636:	4640      	mov	r0, r8
 800b638:	f8cd a000 	str.w	sl, [sp]
 800b63c:	aa03      	add	r2, sp, #12
 800b63e:	f7ff fedf 	bl	800b400 <_printf_common>
 800b642:	3001      	adds	r0, #1
 800b644:	d14c      	bne.n	800b6e0 <_printf_i+0x200>
 800b646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b64a:	b004      	add	sp, #16
 800b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b650:	4834      	ldr	r0, [pc, #208]	; (800b724 <_printf_i+0x244>)
 800b652:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b656:	6829      	ldr	r1, [r5, #0]
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b65e:	6029      	str	r1, [r5, #0]
 800b660:	061d      	lsls	r5, r3, #24
 800b662:	d514      	bpl.n	800b68e <_printf_i+0x1ae>
 800b664:	07df      	lsls	r7, r3, #31
 800b666:	bf44      	itt	mi
 800b668:	f043 0320 	orrmi.w	r3, r3, #32
 800b66c:	6023      	strmi	r3, [r4, #0]
 800b66e:	b91e      	cbnz	r6, 800b678 <_printf_i+0x198>
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	f023 0320 	bic.w	r3, r3, #32
 800b676:	6023      	str	r3, [r4, #0]
 800b678:	2310      	movs	r3, #16
 800b67a:	e7af      	b.n	800b5dc <_printf_i+0xfc>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	f043 0320 	orr.w	r3, r3, #32
 800b682:	6023      	str	r3, [r4, #0]
 800b684:	2378      	movs	r3, #120	; 0x78
 800b686:	4828      	ldr	r0, [pc, #160]	; (800b728 <_printf_i+0x248>)
 800b688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b68c:	e7e3      	b.n	800b656 <_printf_i+0x176>
 800b68e:	0659      	lsls	r1, r3, #25
 800b690:	bf48      	it	mi
 800b692:	b2b6      	uxthmi	r6, r6
 800b694:	e7e6      	b.n	800b664 <_printf_i+0x184>
 800b696:	4615      	mov	r5, r2
 800b698:	e7bb      	b.n	800b612 <_printf_i+0x132>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	6826      	ldr	r6, [r4, #0]
 800b69e:	1d18      	adds	r0, r3, #4
 800b6a0:	6961      	ldr	r1, [r4, #20]
 800b6a2:	6028      	str	r0, [r5, #0]
 800b6a4:	0635      	lsls	r5, r6, #24
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	d501      	bpl.n	800b6ae <_printf_i+0x1ce>
 800b6aa:	6019      	str	r1, [r3, #0]
 800b6ac:	e002      	b.n	800b6b4 <_printf_i+0x1d4>
 800b6ae:	0670      	lsls	r0, r6, #25
 800b6b0:	d5fb      	bpl.n	800b6aa <_printf_i+0x1ca>
 800b6b2:	8019      	strh	r1, [r3, #0]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4615      	mov	r5, r2
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	e7ba      	b.n	800b632 <_printf_i+0x152>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	2100      	movs	r1, #0
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	602a      	str	r2, [r5, #0]
 800b6c4:	681d      	ldr	r5, [r3, #0]
 800b6c6:	6862      	ldr	r2, [r4, #4]
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 f82f 	bl	800b72c <memchr>
 800b6ce:	b108      	cbz	r0, 800b6d4 <_printf_i+0x1f4>
 800b6d0:	1b40      	subs	r0, r0, r5
 800b6d2:	6060      	str	r0, [r4, #4]
 800b6d4:	6863      	ldr	r3, [r4, #4]
 800b6d6:	6123      	str	r3, [r4, #16]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6de:	e7a8      	b.n	800b632 <_printf_i+0x152>
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	47d0      	blx	sl
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d0ab      	beq.n	800b646 <_printf_i+0x166>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	079b      	lsls	r3, r3, #30
 800b6f2:	d413      	bmi.n	800b71c <_printf_i+0x23c>
 800b6f4:	68e0      	ldr	r0, [r4, #12]
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	4298      	cmp	r0, r3
 800b6fa:	bfb8      	it	lt
 800b6fc:	4618      	movlt	r0, r3
 800b6fe:	e7a4      	b.n	800b64a <_printf_i+0x16a>
 800b700:	2301      	movs	r3, #1
 800b702:	4632      	mov	r2, r6
 800b704:	4649      	mov	r1, r9
 800b706:	4640      	mov	r0, r8
 800b708:	47d0      	blx	sl
 800b70a:	3001      	adds	r0, #1
 800b70c:	d09b      	beq.n	800b646 <_printf_i+0x166>
 800b70e:	3501      	adds	r5, #1
 800b710:	68e3      	ldr	r3, [r4, #12]
 800b712:	9903      	ldr	r1, [sp, #12]
 800b714:	1a5b      	subs	r3, r3, r1
 800b716:	42ab      	cmp	r3, r5
 800b718:	dcf2      	bgt.n	800b700 <_printf_i+0x220>
 800b71a:	e7eb      	b.n	800b6f4 <_printf_i+0x214>
 800b71c:	2500      	movs	r5, #0
 800b71e:	f104 0619 	add.w	r6, r4, #25
 800b722:	e7f5      	b.n	800b710 <_printf_i+0x230>
 800b724:	0800cbe8 	.word	0x0800cbe8
 800b728:	0800cbf9 	.word	0x0800cbf9

0800b72c <memchr>:
 800b72c:	4603      	mov	r3, r0
 800b72e:	b510      	push	{r4, lr}
 800b730:	b2c9      	uxtb	r1, r1
 800b732:	4402      	add	r2, r0
 800b734:	4293      	cmp	r3, r2
 800b736:	4618      	mov	r0, r3
 800b738:	d101      	bne.n	800b73e <memchr+0x12>
 800b73a:	2000      	movs	r0, #0
 800b73c:	e003      	b.n	800b746 <memchr+0x1a>
 800b73e:	7804      	ldrb	r4, [r0, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	428c      	cmp	r4, r1
 800b744:	d1f6      	bne.n	800b734 <memchr+0x8>
 800b746:	bd10      	pop	{r4, pc}

0800b748 <memcpy>:
 800b748:	440a      	add	r2, r1
 800b74a:	4291      	cmp	r1, r2
 800b74c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b750:	d100      	bne.n	800b754 <memcpy+0xc>
 800b752:	4770      	bx	lr
 800b754:	b510      	push	{r4, lr}
 800b756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75a:	4291      	cmp	r1, r2
 800b75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b760:	d1f9      	bne.n	800b756 <memcpy+0xe>
 800b762:	bd10      	pop	{r4, pc}

0800b764 <memmove>:
 800b764:	4288      	cmp	r0, r1
 800b766:	b510      	push	{r4, lr}
 800b768:	eb01 0402 	add.w	r4, r1, r2
 800b76c:	d902      	bls.n	800b774 <memmove+0x10>
 800b76e:	4284      	cmp	r4, r0
 800b770:	4623      	mov	r3, r4
 800b772:	d807      	bhi.n	800b784 <memmove+0x20>
 800b774:	1e43      	subs	r3, r0, #1
 800b776:	42a1      	cmp	r1, r4
 800b778:	d008      	beq.n	800b78c <memmove+0x28>
 800b77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b782:	e7f8      	b.n	800b776 <memmove+0x12>
 800b784:	4601      	mov	r1, r0
 800b786:	4402      	add	r2, r0
 800b788:	428a      	cmp	r2, r1
 800b78a:	d100      	bne.n	800b78e <memmove+0x2a>
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b796:	e7f7      	b.n	800b788 <memmove+0x24>

0800b798 <_free_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4605      	mov	r5, r0
 800b79c:	2900      	cmp	r1, #0
 800b79e:	d040      	beq.n	800b822 <_free_r+0x8a>
 800b7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a4:	1f0c      	subs	r4, r1, #4
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	18e4      	addlt	r4, r4, r3
 800b7ac:	f000 f910 	bl	800b9d0 <__malloc_lock>
 800b7b0:	4a1c      	ldr	r2, [pc, #112]	; (800b824 <_free_r+0x8c>)
 800b7b2:	6813      	ldr	r3, [r2, #0]
 800b7b4:	b933      	cbnz	r3, 800b7c4 <_free_r+0x2c>
 800b7b6:	6063      	str	r3, [r4, #4]
 800b7b8:	6014      	str	r4, [r2, #0]
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c0:	f000 b90c 	b.w	800b9dc <__malloc_unlock>
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	d908      	bls.n	800b7da <_free_r+0x42>
 800b7c8:	6820      	ldr	r0, [r4, #0]
 800b7ca:	1821      	adds	r1, r4, r0
 800b7cc:	428b      	cmp	r3, r1
 800b7ce:	bf01      	itttt	eq
 800b7d0:	6819      	ldreq	r1, [r3, #0]
 800b7d2:	685b      	ldreq	r3, [r3, #4]
 800b7d4:	1809      	addeq	r1, r1, r0
 800b7d6:	6021      	streq	r1, [r4, #0]
 800b7d8:	e7ed      	b.n	800b7b6 <_free_r+0x1e>
 800b7da:	461a      	mov	r2, r3
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	b10b      	cbz	r3, 800b7e4 <_free_r+0x4c>
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	d9fa      	bls.n	800b7da <_free_r+0x42>
 800b7e4:	6811      	ldr	r1, [r2, #0]
 800b7e6:	1850      	adds	r0, r2, r1
 800b7e8:	42a0      	cmp	r0, r4
 800b7ea:	d10b      	bne.n	800b804 <_free_r+0x6c>
 800b7ec:	6820      	ldr	r0, [r4, #0]
 800b7ee:	4401      	add	r1, r0
 800b7f0:	1850      	adds	r0, r2, r1
 800b7f2:	4283      	cmp	r3, r0
 800b7f4:	6011      	str	r1, [r2, #0]
 800b7f6:	d1e0      	bne.n	800b7ba <_free_r+0x22>
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	4401      	add	r1, r0
 800b7fe:	6011      	str	r1, [r2, #0]
 800b800:	6053      	str	r3, [r2, #4]
 800b802:	e7da      	b.n	800b7ba <_free_r+0x22>
 800b804:	d902      	bls.n	800b80c <_free_r+0x74>
 800b806:	230c      	movs	r3, #12
 800b808:	602b      	str	r3, [r5, #0]
 800b80a:	e7d6      	b.n	800b7ba <_free_r+0x22>
 800b80c:	6820      	ldr	r0, [r4, #0]
 800b80e:	1821      	adds	r1, r4, r0
 800b810:	428b      	cmp	r3, r1
 800b812:	bf01      	itttt	eq
 800b814:	6819      	ldreq	r1, [r3, #0]
 800b816:	685b      	ldreq	r3, [r3, #4]
 800b818:	1809      	addeq	r1, r1, r0
 800b81a:	6021      	streq	r1, [r4, #0]
 800b81c:	6063      	str	r3, [r4, #4]
 800b81e:	6054      	str	r4, [r2, #4]
 800b820:	e7cb      	b.n	800b7ba <_free_r+0x22>
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20001da0 	.word	0x20001da0

0800b828 <sbrk_aligned>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	4e0e      	ldr	r6, [pc, #56]	; (800b864 <sbrk_aligned+0x3c>)
 800b82c:	460c      	mov	r4, r1
 800b82e:	6831      	ldr	r1, [r6, #0]
 800b830:	4605      	mov	r5, r0
 800b832:	b911      	cbnz	r1, 800b83a <sbrk_aligned+0x12>
 800b834:	f000 f8bc 	bl	800b9b0 <_sbrk_r>
 800b838:	6030      	str	r0, [r6, #0]
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 f8b7 	bl	800b9b0 <_sbrk_r>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d00a      	beq.n	800b85c <sbrk_aligned+0x34>
 800b846:	1cc4      	adds	r4, r0, #3
 800b848:	f024 0403 	bic.w	r4, r4, #3
 800b84c:	42a0      	cmp	r0, r4
 800b84e:	d007      	beq.n	800b860 <sbrk_aligned+0x38>
 800b850:	1a21      	subs	r1, r4, r0
 800b852:	4628      	mov	r0, r5
 800b854:	f000 f8ac 	bl	800b9b0 <_sbrk_r>
 800b858:	3001      	adds	r0, #1
 800b85a:	d101      	bne.n	800b860 <sbrk_aligned+0x38>
 800b85c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b860:	4620      	mov	r0, r4
 800b862:	bd70      	pop	{r4, r5, r6, pc}
 800b864:	20001da4 	.word	0x20001da4

0800b868 <_malloc_r>:
 800b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	1ccd      	adds	r5, r1, #3
 800b86e:	f025 0503 	bic.w	r5, r5, #3
 800b872:	3508      	adds	r5, #8
 800b874:	2d0c      	cmp	r5, #12
 800b876:	bf38      	it	cc
 800b878:	250c      	movcc	r5, #12
 800b87a:	2d00      	cmp	r5, #0
 800b87c:	4607      	mov	r7, r0
 800b87e:	db01      	blt.n	800b884 <_malloc_r+0x1c>
 800b880:	42a9      	cmp	r1, r5
 800b882:	d905      	bls.n	800b890 <_malloc_r+0x28>
 800b884:	230c      	movs	r3, #12
 800b886:	2600      	movs	r6, #0
 800b888:	603b      	str	r3, [r7, #0]
 800b88a:	4630      	mov	r0, r6
 800b88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b890:	4e2e      	ldr	r6, [pc, #184]	; (800b94c <_malloc_r+0xe4>)
 800b892:	f000 f89d 	bl	800b9d0 <__malloc_lock>
 800b896:	6833      	ldr	r3, [r6, #0]
 800b898:	461c      	mov	r4, r3
 800b89a:	bb34      	cbnz	r4, 800b8ea <_malloc_r+0x82>
 800b89c:	4629      	mov	r1, r5
 800b89e:	4638      	mov	r0, r7
 800b8a0:	f7ff ffc2 	bl	800b828 <sbrk_aligned>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	d14d      	bne.n	800b946 <_malloc_r+0xde>
 800b8aa:	6834      	ldr	r4, [r6, #0]
 800b8ac:	4626      	mov	r6, r4
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d140      	bne.n	800b934 <_malloc_r+0xcc>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	eb04 0803 	add.w	r8, r4, r3
 800b8bc:	f000 f878 	bl	800b9b0 <_sbrk_r>
 800b8c0:	4580      	cmp	r8, r0
 800b8c2:	d13a      	bne.n	800b93a <_malloc_r+0xd2>
 800b8c4:	6821      	ldr	r1, [r4, #0]
 800b8c6:	3503      	adds	r5, #3
 800b8c8:	1a6d      	subs	r5, r5, r1
 800b8ca:	f025 0503 	bic.w	r5, r5, #3
 800b8ce:	3508      	adds	r5, #8
 800b8d0:	2d0c      	cmp	r5, #12
 800b8d2:	bf38      	it	cc
 800b8d4:	250c      	movcc	r5, #12
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	4629      	mov	r1, r5
 800b8da:	f7ff ffa5 	bl	800b828 <sbrk_aligned>
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d02b      	beq.n	800b93a <_malloc_r+0xd2>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	442b      	add	r3, r5
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	e00e      	b.n	800b908 <_malloc_r+0xa0>
 800b8ea:	6822      	ldr	r2, [r4, #0]
 800b8ec:	1b52      	subs	r2, r2, r5
 800b8ee:	d41e      	bmi.n	800b92e <_malloc_r+0xc6>
 800b8f0:	2a0b      	cmp	r2, #11
 800b8f2:	d916      	bls.n	800b922 <_malloc_r+0xba>
 800b8f4:	1961      	adds	r1, r4, r5
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	6025      	str	r5, [r4, #0]
 800b8fa:	bf18      	it	ne
 800b8fc:	6059      	strne	r1, [r3, #4]
 800b8fe:	6863      	ldr	r3, [r4, #4]
 800b900:	bf08      	it	eq
 800b902:	6031      	streq	r1, [r6, #0]
 800b904:	5162      	str	r2, [r4, r5]
 800b906:	604b      	str	r3, [r1, #4]
 800b908:	4638      	mov	r0, r7
 800b90a:	f104 060b 	add.w	r6, r4, #11
 800b90e:	f000 f865 	bl	800b9dc <__malloc_unlock>
 800b912:	f026 0607 	bic.w	r6, r6, #7
 800b916:	1d23      	adds	r3, r4, #4
 800b918:	1af2      	subs	r2, r6, r3
 800b91a:	d0b6      	beq.n	800b88a <_malloc_r+0x22>
 800b91c:	1b9b      	subs	r3, r3, r6
 800b91e:	50a3      	str	r3, [r4, r2]
 800b920:	e7b3      	b.n	800b88a <_malloc_r+0x22>
 800b922:	6862      	ldr	r2, [r4, #4]
 800b924:	42a3      	cmp	r3, r4
 800b926:	bf0c      	ite	eq
 800b928:	6032      	streq	r2, [r6, #0]
 800b92a:	605a      	strne	r2, [r3, #4]
 800b92c:	e7ec      	b.n	800b908 <_malloc_r+0xa0>
 800b92e:	4623      	mov	r3, r4
 800b930:	6864      	ldr	r4, [r4, #4]
 800b932:	e7b2      	b.n	800b89a <_malloc_r+0x32>
 800b934:	4634      	mov	r4, r6
 800b936:	6876      	ldr	r6, [r6, #4]
 800b938:	e7b9      	b.n	800b8ae <_malloc_r+0x46>
 800b93a:	230c      	movs	r3, #12
 800b93c:	4638      	mov	r0, r7
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	f000 f84c 	bl	800b9dc <__malloc_unlock>
 800b944:	e7a1      	b.n	800b88a <_malloc_r+0x22>
 800b946:	6025      	str	r5, [r4, #0]
 800b948:	e7de      	b.n	800b908 <_malloc_r+0xa0>
 800b94a:	bf00      	nop
 800b94c:	20001da0 	.word	0x20001da0

0800b950 <_realloc_r>:
 800b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b954:	4680      	mov	r8, r0
 800b956:	4614      	mov	r4, r2
 800b958:	460e      	mov	r6, r1
 800b95a:	b921      	cbnz	r1, 800b966 <_realloc_r+0x16>
 800b95c:	4611      	mov	r1, r2
 800b95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b962:	f7ff bf81 	b.w	800b868 <_malloc_r>
 800b966:	b92a      	cbnz	r2, 800b974 <_realloc_r+0x24>
 800b968:	f7ff ff16 	bl	800b798 <_free_r>
 800b96c:	4625      	mov	r5, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	f000 f838 	bl	800b9e8 <_malloc_usable_size_r>
 800b978:	4284      	cmp	r4, r0
 800b97a:	4607      	mov	r7, r0
 800b97c:	d802      	bhi.n	800b984 <_realloc_r+0x34>
 800b97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b982:	d812      	bhi.n	800b9aa <_realloc_r+0x5a>
 800b984:	4621      	mov	r1, r4
 800b986:	4640      	mov	r0, r8
 800b988:	f7ff ff6e 	bl	800b868 <_malloc_r>
 800b98c:	4605      	mov	r5, r0
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0ed      	beq.n	800b96e <_realloc_r+0x1e>
 800b992:	42bc      	cmp	r4, r7
 800b994:	4622      	mov	r2, r4
 800b996:	4631      	mov	r1, r6
 800b998:	bf28      	it	cs
 800b99a:	463a      	movcs	r2, r7
 800b99c:	f7ff fed4 	bl	800b748 <memcpy>
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	f7ff fef8 	bl	800b798 <_free_r>
 800b9a8:	e7e1      	b.n	800b96e <_realloc_r+0x1e>
 800b9aa:	4635      	mov	r5, r6
 800b9ac:	e7df      	b.n	800b96e <_realloc_r+0x1e>
	...

0800b9b0 <_sbrk_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4d05      	ldr	r5, [pc, #20]	; (800b9cc <_sbrk_r+0x1c>)
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f5 fbce 	bl	800115c <_sbrk>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_sbrk_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_sbrk_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	20001da8 	.word	0x20001da8

0800b9d0 <__malloc_lock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__malloc_lock+0x8>)
 800b9d2:	f000 b811 	b.w	800b9f8 <__retarget_lock_acquire_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	20001dac 	.word	0x20001dac

0800b9dc <__malloc_unlock>:
 800b9dc:	4801      	ldr	r0, [pc, #4]	; (800b9e4 <__malloc_unlock+0x8>)
 800b9de:	f000 b80c 	b.w	800b9fa <__retarget_lock_release_recursive>
 800b9e2:	bf00      	nop
 800b9e4:	20001dac 	.word	0x20001dac

0800b9e8 <_malloc_usable_size_r>:
 800b9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ec:	1f18      	subs	r0, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfbc      	itt	lt
 800b9f2:	580b      	ldrlt	r3, [r1, r0]
 800b9f4:	18c0      	addlt	r0, r0, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <__retarget_lock_acquire_recursive>:
 800b9f8:	4770      	bx	lr

0800b9fa <__retarget_lock_release_recursive>:
 800b9fa:	4770      	bx	lr

0800b9fc <_init>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	bf00      	nop
 800ba00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba02:	bc08      	pop	{r3}
 800ba04:	469e      	mov	lr, r3
 800ba06:	4770      	bx	lr

0800ba08 <_fini>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	bf00      	nop
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr
